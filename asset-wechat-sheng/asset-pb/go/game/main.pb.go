// Code generated by protoc-gen-go. DO NOT EDIT.
// source: game/main.proto

package game

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	common "gitlab.com/vectorup/asset-pb/go/common"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GameOption struct {
	// 游戏全局时间(秒), eg: 600s
	PlayDuration         int32    `protobuf:"varint,1,opt,name=playDuration,proto3" json:"playDuration,omitempty"`
	MapId                int64    `protobuf:"varint,2,opt,name=mapId,proto3" json:"mapId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameOption) Reset()         { *m = GameOption{} }
func (m *GameOption) String() string { return proto.CompactTextString(m) }
func (*GameOption) ProtoMessage()    {}
func (*GameOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_66c2f05023b26525, []int{0}
}

func (m *GameOption) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameOption.Unmarshal(m, b)
}
func (m *GameOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameOption.Marshal(b, m, deterministic)
}
func (m *GameOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameOption.Merge(m, src)
}
func (m *GameOption) XXX_Size() int {
	return xxx_messageInfo_GameOption.Size(m)
}
func (m *GameOption) XXX_DiscardUnknown() {
	xxx_messageInfo_GameOption.DiscardUnknown(m)
}

var xxx_messageInfo_GameOption proto.InternalMessageInfo

func (m *GameOption) GetPlayDuration() int32 {
	if m != nil {
		return m.PlayDuration
	}
	return 0
}

func (m *GameOption) GetMapId() int64 {
	if m != nil {
		return m.MapId
	}
	return 0
}

type StartGameReq struct {
	UserId    []int64          `protobuf:"varint,1,rep,packed,name=userId,proto3" json:"userId,omitempty"`
	MatchType common.MatchType `protobuf:"varint,2,opt,name=matchType,proto3,enum=pb.common.MatchType" json:"matchType,omitempty"`
	// 如果 matchType = TRAINING，这里表示开始训练的玩家的 user id
	TrainerId int64 `protobuf:"varint,3,opt,name=trainerId,proto3" json:"trainerId,omitempty"`
	// 可供设置的游戏选项
	Opt                  *GameOption `protobuf:"bytes,4,opt,name=opt,proto3" json:"opt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *StartGameReq) Reset()         { *m = StartGameReq{} }
func (m *StartGameReq) String() string { return proto.CompactTextString(m) }
func (*StartGameReq) ProtoMessage()    {}
func (*StartGameReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_66c2f05023b26525, []int{1}
}

func (m *StartGameReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartGameReq.Unmarshal(m, b)
}
func (m *StartGameReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartGameReq.Marshal(b, m, deterministic)
}
func (m *StartGameReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartGameReq.Merge(m, src)
}
func (m *StartGameReq) XXX_Size() int {
	return xxx_messageInfo_StartGameReq.Size(m)
}
func (m *StartGameReq) XXX_DiscardUnknown() {
	xxx_messageInfo_StartGameReq.DiscardUnknown(m)
}

var xxx_messageInfo_StartGameReq proto.InternalMessageInfo

func (m *StartGameReq) GetUserId() []int64 {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *StartGameReq) GetMatchType() common.MatchType {
	if m != nil {
		return m.MatchType
	}
	return common.MatchType_UNKNOWN
}

func (m *StartGameReq) GetTrainerId() int64 {
	if m != nil {
		return m.TrainerId
	}
	return 0
}

func (m *StartGameReq) GetOpt() *GameOption {
	if m != nil {
		return m.Opt
	}
	return nil
}

type StartGameRsp struct {
	Rsp                  *common.BaseRsp  `protobuf:"bytes,1,opt,name=rsp,proto3" json:"rsp,omitempty"`
	GameId               int64            `protobuf:"varint,2,opt,name=gameId,proto3" json:"gameId,omitempty"`
	IdMaps               map[int64]int64  `protobuf:"bytes,3,rep,name=idMaps,proto3" json:"idMaps,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Timer                *common.Timer    `protobuf:"bytes,4,opt,name=timer,proto3" json:"timer,omitempty"`
	GlobalTimer          *common.Timer    `protobuf:"bytes,5,opt,name=globalTimer,proto3" json:"globalTimer,omitempty"`
	MatchType            common.MatchType `protobuf:"varint,6,opt,name=matchType,proto3,enum=pb.common.MatchType" json:"matchType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *StartGameRsp) Reset()         { *m = StartGameRsp{} }
func (m *StartGameRsp) String() string { return proto.CompactTextString(m) }
func (*StartGameRsp) ProtoMessage()    {}
func (*StartGameRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_66c2f05023b26525, []int{2}
}

func (m *StartGameRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartGameRsp.Unmarshal(m, b)
}
func (m *StartGameRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartGameRsp.Marshal(b, m, deterministic)
}
func (m *StartGameRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartGameRsp.Merge(m, src)
}
func (m *StartGameRsp) XXX_Size() int {
	return xxx_messageInfo_StartGameRsp.Size(m)
}
func (m *StartGameRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_StartGameRsp.DiscardUnknown(m)
}

var xxx_messageInfo_StartGameRsp proto.InternalMessageInfo

func (m *StartGameRsp) GetRsp() *common.BaseRsp {
	if m != nil {
		return m.Rsp
	}
	return nil
}

func (m *StartGameRsp) GetGameId() int64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *StartGameRsp) GetIdMaps() map[int64]int64 {
	if m != nil {
		return m.IdMaps
	}
	return nil
}

func (m *StartGameRsp) GetTimer() *common.Timer {
	if m != nil {
		return m.Timer
	}
	return nil
}

func (m *StartGameRsp) GetGlobalTimer() *common.Timer {
	if m != nil {
		return m.GlobalTimer
	}
	return nil
}

func (m *StartGameRsp) GetMatchType() common.MatchType {
	if m != nil {
		return m.MatchType
	}
	return common.MatchType_UNKNOWN
}

type PlayerLeaveReq struct {
	GameId               int64    `protobuf:"varint,1,opt,name=gameId,proto3" json:"gameId,omitempty"`
	UserId               int64    `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerLeaveReq) Reset()         { *m = PlayerLeaveReq{} }
func (m *PlayerLeaveReq) String() string { return proto.CompactTextString(m) }
func (*PlayerLeaveReq) ProtoMessage()    {}
func (*PlayerLeaveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_66c2f05023b26525, []int{3}
}

func (m *PlayerLeaveReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerLeaveReq.Unmarshal(m, b)
}
func (m *PlayerLeaveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerLeaveReq.Marshal(b, m, deterministic)
}
func (m *PlayerLeaveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerLeaveReq.Merge(m, src)
}
func (m *PlayerLeaveReq) XXX_Size() int {
	return xxx_messageInfo_PlayerLeaveReq.Size(m)
}
func (m *PlayerLeaveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerLeaveReq.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerLeaveReq proto.InternalMessageInfo

func (m *PlayerLeaveReq) GetGameId() int64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *PlayerLeaveReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type PlayerLeaveRsp struct {
	Rsp                  *common.BaseRsp `protobuf:"bytes,1,opt,name=rsp,proto3" json:"rsp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PlayerLeaveRsp) Reset()         { *m = PlayerLeaveRsp{} }
func (m *PlayerLeaveRsp) String() string { return proto.CompactTextString(m) }
func (*PlayerLeaveRsp) ProtoMessage()    {}
func (*PlayerLeaveRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_66c2f05023b26525, []int{4}
}

func (m *PlayerLeaveRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerLeaveRsp.Unmarshal(m, b)
}
func (m *PlayerLeaveRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerLeaveRsp.Marshal(b, m, deterministic)
}
func (m *PlayerLeaveRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerLeaveRsp.Merge(m, src)
}
func (m *PlayerLeaveRsp) XXX_Size() int {
	return xxx_messageInfo_PlayerLeaveRsp.Size(m)
}
func (m *PlayerLeaveRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerLeaveRsp.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerLeaveRsp proto.InternalMessageInfo

func (m *PlayerLeaveRsp) GetRsp() *common.BaseRsp {
	if m != nil {
		return m.Rsp
	}
	return nil
}

type GetAvailableMapsReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAvailableMapsReq) Reset()         { *m = GetAvailableMapsReq{} }
func (m *GetAvailableMapsReq) String() string { return proto.CompactTextString(m) }
func (*GetAvailableMapsReq) ProtoMessage()    {}
func (*GetAvailableMapsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_66c2f05023b26525, []int{5}
}

func (m *GetAvailableMapsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAvailableMapsReq.Unmarshal(m, b)
}
func (m *GetAvailableMapsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAvailableMapsReq.Marshal(b, m, deterministic)
}
func (m *GetAvailableMapsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAvailableMapsReq.Merge(m, src)
}
func (m *GetAvailableMapsReq) XXX_Size() int {
	return xxx_messageInfo_GetAvailableMapsReq.Size(m)
}
func (m *GetAvailableMapsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAvailableMapsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetAvailableMapsReq proto.InternalMessageInfo

type GetAvailableMapsRsp struct {
	Maps                 []*common.MapItem `protobuf:"bytes,1,rep,name=maps,proto3" json:"maps,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetAvailableMapsRsp) Reset()         { *m = GetAvailableMapsRsp{} }
func (m *GetAvailableMapsRsp) String() string { return proto.CompactTextString(m) }
func (*GetAvailableMapsRsp) ProtoMessage()    {}
func (*GetAvailableMapsRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_66c2f05023b26525, []int{6}
}

func (m *GetAvailableMapsRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAvailableMapsRsp.Unmarshal(m, b)
}
func (m *GetAvailableMapsRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAvailableMapsRsp.Marshal(b, m, deterministic)
}
func (m *GetAvailableMapsRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAvailableMapsRsp.Merge(m, src)
}
func (m *GetAvailableMapsRsp) XXX_Size() int {
	return xxx_messageInfo_GetAvailableMapsRsp.Size(m)
}
func (m *GetAvailableMapsRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAvailableMapsRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetAvailableMapsRsp proto.InternalMessageInfo

func (m *GetAvailableMapsRsp) GetMaps() []*common.MapItem {
	if m != nil {
		return m.Maps
	}
	return nil
}

func init() {
	proto.RegisterType((*GameOption)(nil), "pb.game.GameOption")
	proto.RegisterType((*StartGameReq)(nil), "pb.game.StartGameReq")
	proto.RegisterType((*StartGameRsp)(nil), "pb.game.StartGameRsp")
	proto.RegisterMapType((map[int64]int64)(nil), "pb.game.StartGameRsp.IdMapsEntry")
	proto.RegisterType((*PlayerLeaveReq)(nil), "pb.game.PlayerLeaveReq")
	proto.RegisterType((*PlayerLeaveRsp)(nil), "pb.game.PlayerLeaveRsp")
	proto.RegisterType((*GetAvailableMapsReq)(nil), "pb.game.GetAvailableMapsReq")
	proto.RegisterType((*GetAvailableMapsRsp)(nil), "pb.game.GetAvailableMapsRsp")
}

func init() { proto.RegisterFile("game/main.proto", fileDescriptor_66c2f05023b26525) }

var fileDescriptor_66c2f05023b26525 = []byte{
	// 595 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4f, 0x6f, 0xd3, 0x4e,
	0x10, 0x95, 0xe3, 0x26, 0x55, 0x37, 0x55, 0x7f, 0xfd, 0x4d, 0x5b, 0x88, 0xac, 0x1e, 0x82, 0x55,
	0xaa, 0x5c, 0x70, 0xc0, 0x48, 0x88, 0x56, 0x42, 0x40, 0x05, 0x94, 0x48, 0x14, 0xaa, 0x6d, 0x4f,
	0xdc, 0xc6, 0xc9, 0x28, 0x58, 0xf5, 0x9f, 0xcd, 0xee, 0x26, 0x92, 0x3f, 0x0d, 0x5f, 0x87, 0x33,
	0x9f, 0x08, 0xed, 0x66, 0x93, 0x38, 0x10, 0x50, 0x6f, 0x99, 0xf7, 0xde, 0xce, 0xce, 0xbc, 0xb7,
	0x31, 0xfb, 0x6f, 0x8c, 0x39, 0xf5, 0x73, 0x4c, 0x8b, 0x48, 0xc8, 0x52, 0x97, 0xb0, 0x2d, 0x92,
	0xc8, 0x60, 0xc1, 0xff, 0xc3, 0x32, 0xcf, 0xcb, 0xa2, 0xc6, 0x05, 0x87, 0x0e, 0x4a, 0x70, 0x78,
	0x47, 0xc5, 0xc8, 0xa1, 0x07, 0x0e, 0x1d, 0x96, 0x85, 0xd2, 0xca, 0x81, 0xe0, 0x40, 0x5d, 0x09,
	0x5a, 0x60, 0xab, 0x8e, 0xc2, 0x41, 0xe1, 0x07, 0xc6, 0x2e, 0x31, 0xa7, 0x2f, 0x42, 0xa7, 0x65,
	0x01, 0x21, 0xdb, 0x15, 0x19, 0x56, 0xef, 0xa6, 0x12, 0x4d, 0xdd, 0xf1, 0xba, 0x5e, 0xaf, 0xc9,
	0xd7, 0x30, 0x38, 0x64, 0xcd, 0x1c, 0xc5, 0x60, 0xd4, 0x69, 0x74, 0xbd, 0x9e, 0xcf, 0xe7, 0x45,
	0xf8, 0xdd, 0x63, 0xbb, 0x37, 0x1a, 0xa5, 0x36, 0xdd, 0x38, 0x4d, 0xe0, 0x01, 0x6b, 0x4d, 0x15,
	0xc9, 0xc1, 0xa8, 0xe3, 0x75, 0xfd, 0x9e, 0xcf, 0x5d, 0x05, 0x31, 0xdb, 0xc9, 0x51, 0x0f, 0xbf,
	0xdd, 0x56, 0x82, 0x6c, 0x8b, 0xbd, 0xf8, 0x30, 0x12, 0x49, 0x34, 0x1f, 0x2d, 0xba, 0x5a, 0x70,
	0x7c, 0x25, 0x83, 0x63, 0xb6, 0xa3, 0x25, 0xa6, 0x85, 0x6d, 0xe7, 0xdb, 0x6b, 0x57, 0x00, 0x3c,
	0x66, 0x7e, 0x29, 0x74, 0x67, 0xab, 0xeb, 0xf5, 0xda, 0xf1, 0x41, 0xe4, 0xec, 0x8b, 0x56, 0x6b,
	0x71, 0xc3, 0x87, 0x3f, 0x1b, 0xf5, 0x09, 0x95, 0x80, 0x13, 0xe6, 0x4b, 0x25, 0xec, 0x8e, 0xed,
	0x18, 0x6a, 0x33, 0x5c, 0xa0, 0x32, 0x02, 0x6e, 0x68, 0xb3, 0x87, 0x69, 0xb7, 0xdc, 0xd7, 0x55,
	0x70, 0xc6, 0x5a, 0xe9, 0xe8, 0x0a, 0x85, 0xea, 0xf8, 0x5d, 0xbf, 0xd7, 0x8e, 0x1f, 0x2d, 0x2f,
	0xae, 0x5f, 0x12, 0x0d, 0xac, 0xe6, 0x7d, 0xa1, 0x65, 0xc5, 0xdd, 0x01, 0x38, 0x65, 0x4d, 0x9d,
	0xe6, 0x24, 0xdd, 0xc8, 0xfb, 0xb5, 0xab, 0x2d, 0xce, 0xe7, 0x34, 0xc4, 0xac, 0x3d, 0xce, 0xca,
	0x04, 0xb3, 0x5b, 0xab, 0x6e, 0xfe, 0x45, 0x5d, 0x17, 0xad, 0xdb, 0xdb, 0xba, 0x97, 0xbd, 0xc1,
	0x19, 0x6b, 0xd7, 0xc6, 0x84, 0x7d, 0xe6, 0xdf, 0x51, 0x65, 0x7d, 0xf1, 0xb9, 0xf9, 0x69, 0x22,
	0x9f, 0x61, 0x36, 0xa5, 0x45, 0xe4, 0xb6, 0x38, 0x6f, 0xbc, 0xf4, 0xc2, 0x37, 0x6c, 0xef, 0x3a,
	0xc3, 0x8a, 0xe4, 0x27, 0xc2, 0xd9, 0x22, 0x77, 0xe7, 0x97, 0xb7, 0xe6, 0xd7, 0xea, 0x3d, 0x38,
	0x1f, 0xe7, 0x55, 0xf8, 0x62, 0xbd, 0xc3, 0x7d, 0x73, 0x09, 0x8f, 0xd8, 0xc1, 0x25, 0xe9, 0xb7,
	0x33, 0x4c, 0x33, 0x4c, 0x32, 0x32, 0xe3, 0x73, 0x9a, 0x84, 0xaf, 0x36, 0xc0, 0x4a, 0xc0, 0x29,
	0xdb, 0x32, 0x8f, 0xde, 0xbe, 0xc5, 0xf5, 0xa6, 0x57, 0x28, 0x06, 0x9a, 0x72, 0x6e, 0xf9, 0xf8,
	0x47, 0x83, 0xb5, 0x4d, 0x74, 0x37, 0x24, 0x67, 0xe9, 0x90, 0xe0, 0x8c, 0xed, 0x2c, 0xe3, 0x84,
	0xa3, 0x0d, 0x11, 0xd3, 0x24, 0x38, 0xda, 0x98, 0x3c, 0xbc, 0x66, 0xed, 0xda, 0x62, 0xf0, 0x70,
	0xa9, 0x5a, 0x37, 0x2c, 0xd8, 0x4c, 0x28, 0x01, 0xe7, 0xac, 0xf5, 0x11, 0x8b, 0x51, 0x46, 0x10,
	0xd4, 0xe6, 0xbd, 0xd1, 0x92, 0x30, 0x1f, 0x14, 0xa9, 0xbe, 0x46, 0x89, 0x79, 0x50, 0xdf, 0xe5,
	0x1a, 0xab, 0xac, 0xc4, 0xd1, 0x53, 0x0f, 0x9e, 0xb1, 0x6d, 0x4e, 0x93, 0x29, 0x29, 0x0d, 0x1b,
	0x04, 0x9b, 0x0e, 0xc1, 0x67, 0xb6, 0xff, 0xbb, 0x73, 0x70, 0xbc, 0xfa, 0x37, 0xfd, 0xe9, 0x75,
	0xf0, 0x0f, 0x56, 0x89, 0x8b, 0xd3, 0xaf, 0x27, 0xe3, 0x54, 0x67, 0x68, 0x2f, 0xea, 0xcf, 0x68,
	0xa8, 0x4b, 0x39, 0x15, 0x7d, 0x54, 0x8a, 0xf4, 0x13, 0x91, 0xf4, 0xc7, 0x65, 0xdf, 0x9c, 0x4d,
	0x5a, 0xf6, 0x43, 0xf4, 0xfc, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x31, 0x99, 0x35, 0x09,
	0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GameServiceClient is the client API for GameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GameServiceClient interface {
	StartGame(ctx context.Context, in *StartGameReq, opts ...grpc.CallOption) (*StartGameRsp, error)
	PlayerLeave(ctx context.Context, in *PlayerLeaveReq, opts ...grpc.CallOption) (*PlayerLeaveRsp, error)
	Handle(ctx context.Context, in *common.StreamInitParam, opts ...grpc.CallOption) (GameService_HandleClient, error)
	Request(ctx context.Context, in *common.Payload, opts ...grpc.CallOption) (*common.Payload, error)
	GetAvailableMaps(ctx context.Context, in *GetAvailableMapsReq, opts ...grpc.CallOption) (*GetAvailableMapsRsp, error)
}

type gameServiceClient struct {
	cc *grpc.ClientConn
}

func NewGameServiceClient(cc *grpc.ClientConn) GameServiceClient {
	return &gameServiceClient{cc}
}

func (c *gameServiceClient) StartGame(ctx context.Context, in *StartGameReq, opts ...grpc.CallOption) (*StartGameRsp, error) {
	out := new(StartGameRsp)
	err := c.cc.Invoke(ctx, "/pb.game.GameService/StartGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) PlayerLeave(ctx context.Context, in *PlayerLeaveReq, opts ...grpc.CallOption) (*PlayerLeaveRsp, error) {
	out := new(PlayerLeaveRsp)
	err := c.cc.Invoke(ctx, "/pb.game.GameService/PlayerLeave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) Handle(ctx context.Context, in *common.StreamInitParam, opts ...grpc.CallOption) (GameService_HandleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GameService_serviceDesc.Streams[0], "/pb.game.GameService/Handle", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameServiceHandleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GameService_HandleClient interface {
	Recv() (*common.Payload, error)
	grpc.ClientStream
}

type gameServiceHandleClient struct {
	grpc.ClientStream
}

func (x *gameServiceHandleClient) Recv() (*common.Payload, error) {
	m := new(common.Payload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gameServiceClient) Request(ctx context.Context, in *common.Payload, opts ...grpc.CallOption) (*common.Payload, error) {
	out := new(common.Payload)
	err := c.cc.Invoke(ctx, "/pb.game.GameService/Request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetAvailableMaps(ctx context.Context, in *GetAvailableMapsReq, opts ...grpc.CallOption) (*GetAvailableMapsRsp, error) {
	out := new(GetAvailableMapsRsp)
	err := c.cc.Invoke(ctx, "/pb.game.GameService/GetAvailableMaps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServiceServer is the server API for GameService service.
type GameServiceServer interface {
	StartGame(context.Context, *StartGameReq) (*StartGameRsp, error)
	PlayerLeave(context.Context, *PlayerLeaveReq) (*PlayerLeaveRsp, error)
	Handle(*common.StreamInitParam, GameService_HandleServer) error
	Request(context.Context, *common.Payload) (*common.Payload, error)
	GetAvailableMaps(context.Context, *GetAvailableMapsReq) (*GetAvailableMapsRsp, error)
}

func RegisterGameServiceServer(s *grpc.Server, srv GameServiceServer) {
	s.RegisterService(&_GameService_serviceDesc, srv)
}

func _GameService_StartGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).StartGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.game.GameService/StartGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).StartGame(ctx, req.(*StartGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_PlayerLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerLeaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).PlayerLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.game.GameService/PlayerLeave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).PlayerLeave(ctx, req.(*PlayerLeaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_Handle_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(common.StreamInitParam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameServiceServer).Handle(m, &gameServiceHandleServer{stream})
}

type GameService_HandleServer interface {
	Send(*common.Payload) error
	grpc.ServerStream
}

type gameServiceHandleServer struct {
	grpc.ServerStream
}

func (x *gameServiceHandleServer) Send(m *common.Payload) error {
	return x.ServerStream.SendMsg(m)
}

func _GameService_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.game.GameService/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).Request(ctx, req.(*common.Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetAvailableMaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableMapsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetAvailableMaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.game.GameService/GetAvailableMaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetAvailableMaps(ctx, req.(*GetAvailableMapsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _GameService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.game.GameService",
	HandlerType: (*GameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartGame",
			Handler:    _GameService_StartGame_Handler,
		},
		{
			MethodName: "PlayerLeave",
			Handler:    _GameService_PlayerLeave_Handler,
		},
		{
			MethodName: "Request",
			Handler:    _GameService_Request_Handler,
		},
		{
			MethodName: "GetAvailableMaps",
			Handler:    _GameService_GetAvailableMaps_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Handle",
			Handler:       _GameService_Handle_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "game/main.proto",
}
