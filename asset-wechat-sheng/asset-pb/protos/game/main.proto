syntax = "proto3";
package pb.game;

import "common/main.proto";
import "common/backend.proto";
import "common/consts.proto";
import "common/types.proto";
import "common/maps.proto";
option go_package = "gitlab.com/vectorup/asset-pb/go/game";

message GameOption {
    // 游戏全局时间(秒), eg: 600s
    int32 playDuration = 1;
    int64 mapId = 2;
}

message StartGameReq {
    repeated int64 userId = 1;
    common.MatchType matchType = 2;
    // 如果 matchType = TRAINING，这里表示开始训练的玩家的 user id
    int64 trainerId = 3;
    // 可供设置的游戏选项
    GameOption opt = 4;
}

message StartGameRsp {
    common.BaseRsp rsp = 1;
    int64 gameId = 2;
    map<int64, int64> idMaps = 3;
    common.timer timer = 4;
    common.timer globalTimer = 5; // 游戏全局倒计时, 倒计时结束后游戏会强制结束
    common.MatchType matchType = 6;
}

message PlayerLeaveReq {
    int64 gameId = 1;
    int64 userId = 2;
}

message PlayerLeaveRsp {
    common.BaseRsp rsp = 1;
}

message GetAvailableMapsReq {}

message GetAvailableMapsRsp {
    repeated common.MapItem maps = 1;
}

service GameService {
    rpc StartGame(StartGameReq) returns (StartGameRsp);
    rpc PlayerLeave(PlayerLeaveReq) returns (PlayerLeaveRsp);

    rpc Handle(common.StreamInitParam) returns (stream common.Payload);     //server side streaming
    rpc Request(common.Payload) returns (common.Payload);
    rpc GetAvailableMaps(GetAvailableMapsReq) returns (GetAvailableMapsRsp);
}
