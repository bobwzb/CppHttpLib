syntax = "proto3";
package pb.common;

option go_package = "gitlab.com/vectorup/asset-pb/go/common";

enum CmdID {
    DEFAULT                     = 0;

    LOGIN                       = 1;
    PUSH                        = 3;

    HEARBEAT                    = 6;
    CHECK_PLAYING               = 10;   // init
    SIGNALLING                  = 20;
    // away from keyboard, 掉线(离线)时使用
    AFK                         = 21;
    // 玩家重连上线
    RE_CONNECT                  = 22;

    // ------- lobby ---------- //
    LOBBY_ACTION                = 1000;
    MATCHING                    = 1005; // 匹配成功、失败都使用该类型的msg: match_fail, match_success, match_timeout
    EXIT_MATCH                  = 1006; // 退出匹配
    PREPARE                     = 1015; // 准备。当有人准备时会使用这个msg
    ANYONE_TIMEOUT              = 1016; // 有人未准备，游戏取消
    ALL_READY                   = 1020; // 所有人准备好

    //
    START_MATCHING              = 1021;   // 开始匹配
    EXIT_ROOM                   = 1022;   // 退出房间
    ROOM_INFO                   = 1023;   // 房间信息更新
    CREATE_ROOM                 = 1024;   // 创建房间
    GET_AVAILABLE_ROOM_SIZE     = 1025;   // 获取可用的房间大小

    INVITE                      = 1026;   // 邀请玩家加入游戏
    ENTER_ROOM                  = 1027;   // 加入房间，用来在接受邀请时使用
    GET_PLAYER_STATE            = 1029;   // 获取玩家状态，用来在房间中好友列表拉取好友的状态
    REMOVE_PLAYER_FROM_ROOM     = 1030;   // 把用户从房间中移除
    // 修改房间自定义选项, 只有匹配模式可以自定义
    // 房间修改后需要通知房间内的其他玩家
    UPDATE_ROOM_OPTION         = 1031;
    // 获取可以设置的地图的列表
    GET_AVAILABLE_MAPS           = 1032;

    //-------- game ---------- //
    GAME_ACTION                 = 2000;
    // init。 关键路径，任何情况重新加入游戏都需要调用： 1. 开始新游戏时(ALL_READY后)； 2. 重连恢复(LOGIN后有游戏)
    SYNC_STATE                  = 2001;

    GET_ROLES                   = 2002;
    SELECT_ROLE                 = 2003;

    PLAYER_OUT                  = 2004;
    GAME_OVER                   = 2005;     // 游戏结束
    // 退出当前进行中的游戏(破产后可以退出)
    QUIT                        = 2006;
    // 测试用，目前没有是永乐
    TEST_PUSH                   = 2007 [deprecated=true];
    // 过了loading页，玩家主动发起进入游戏，目前没有使用
    PLAYER_BEGIN                = 2008 [deprecated=true];
    PASS                        = 2009;     // 跳过当前回合

    // 掷骰子
    NEXT_ROLL                   = 2010;
    ROLL                        = 2011;
    // 所有玩家已选择角色
    PLAYERS_ALL_SELECTED_ROLE   = 2012;
    // 机会
    CHOOSE_CHANCE               = 2111;     // 选择机会
    BUY                         = 2112;     // 确认购买
    // 放弃机会，已废弃，新请求请使用 PASS
    GIVEUP_CHANCE               = 2113 [deprecated=true];     // 放弃机会
    // 在股票小机会里面卖股票（及理财），这个是非当前玩家也可以执行的
    SELL_STOCK                  = 2114 [deprecated=true];
    // 机会子流程: 拍卖
    START_AUCTION               = 2115;     // 发起拍卖
    GIVEUP_AUCTION              = 2116;     // 放弃拍卖
    // DEPRECATED(QuantumGhost): 按目前的流程设计不需要加入拍卖了
    // JOIN_AUCTION             = 2117;     // 加入拍卖
    OFFER_AUCTION_BID           = 2118;     // 拍卖出价
    // DEPRECATED(QuantumGhost): 目前直接在出价的时候计算是否可以支付，不需要确认支付拍卖
    // CONFIRM_PAY_AUCTION         = 2119;     // 确认支付拍卖
    AUCTION_TRY_RAISE           = 2119;     // 拍卖里面尝试出价
    AUCTION_RESULT              = 2120;     // 拍卖结果
    TRY_PAY                     = 2121;     // 尝试支付

    //银行借款、资产出售、还债流程
    // 未使用
    BORROW_MONEY_QUOTAS         = 2130 [deprecated=true];
    // 未使用
    BORROW_MONEY_CONFIRM        = 2132 [deprecated=true];
    // 获取可售资产
    GET_CAN_SELL_PLAYER_ASSET   = 2133;
    // 卖
    SELL                        = 2134 [deprecated=true];
    // 贷款
    LOAN                        = 2135;
    // 还贷款
    REPAY_LOAN                  = 2136;
    // 贷款资格查询, 返回利率, 推荐贷款列表, 贷款剩余额度
    LOAN_QUALIFICATION          = 2137;
    // 偿还负债，未使用
    REPAY_LIABILITIES           = 2138 [deprecated=true];

    //薪资
    // NOTE(QuantumGhost): 新版路径没有确认结算日这一步了
    COMPLETE_SALARY             = 2140 [deprecated=true];            // 索要薪水
    // 确认破产，新版路径，负现金流的玩家路过结算日，无法支付支出导致破产时，
    // 需要前端发送这个请求，后端才会发送破产消息并进入下一回合
    // 相关讨论：http://bit.ly/2UU4cmw
    CONFIRM_BANKRUPT            = 2141;
    //意外消费
    PAY_ACCIDENT_CONSUME        = 2150;            // 支付意外消费，需要确认流程是否强制
    CONFIRM_MARKET_CHANGE       = 2151;            // 确认市场变动

    // 生小孩发红包
    // 这个地方原来有生小孩这个业务场景，后来去掉了，这两个指令也不需要了
    PAY_CHILD_BORN_REDPACKET    = 2160 [deprecated=true];
    IGNORE_CHILD_BORN           = 2161 [deprecated=true];

    //升值加薪
    WAGE_HIKE_ROLL              = 2170;

    // 失业
    UNEMPLOYMENT_ACK            = 2180;

    // 结束当前市场信息，已废弃，请使用 PASS
    COMPLETE_MARKET             = 2190 [deprecated=true];
    // 获取当前游戏中所有 scenario 的 img_file 列表
    GET_UNIQUE_SCENARIO_IMG_NAME = 2191;
//    // be right back, 托管使用
//    // NeedDiscut: AFK 与 BRB 是可以共存, 或者 AFK 覆盖 BRB 的状态(服务端可以不用实现 BRB, 客户端实现 BRB 功能即可)
//    BRB                         = 2900;
//    // 取消托管
//    CANCEL_BRB                  = 2901;

    // 获取所有玩家数据，未使用（见 GET_STATEMENT）
    GET_FINANCIAL_REPORTS       = 3000 [deprecated=true];
    // 获取一个玩家资产，未使用
    GET_PLAYER_ASSET            = 3001 [deprecated=true];
    // 获取贷款资产
    GET_PLAYER_LOAN_ASSET       = 3002;

    // 获取财务报表
    GET_STATEMENT               = 3003;

    // 卖出资产, 所有可售出的资产都能通过该命令卖出
    SELL_ASSETS                 = 3004;
    // 玩家累计 N 次不投骰子后惩罚, 后面会将玩家轮空, 后续扩展的惩罚都可以用该 CMD
    DISHONORABLE_PUNISH                 = 3005;
}

