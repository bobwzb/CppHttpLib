syntax = "proto3";
package pb.common;
option go_package = "gitlab.com/vectorup/asset-pb/go/common";

import "common/consts.proto";

message AssetBaseReq {
    int64 userId = 1;
}

message BaseRsp {
    int32 code = 1;
    string msg = 2;
}

message CommonRsp {
    BaseRsp rsp = 1;
}

message GameBaseMsg {
    int64  userId           = 1;    // 该动作的主语是谁： 谁发起的操作、谁操作超时
}

// 玩家的基本信息
message PlayerInfo {
    int64 userId = 1;
    string avatar = 3;
    string nickname = 4;
    bool isBot = 5;
    string birthday = 6;
    // 财富值
    int64 asset_score = 7;
    // 财富等级, 根据财富值转换得到
    string asset_level = 8;
}

message RoomInfo {
    string roomId                   = 1;
    int64 ownerId                   = 2;
    repeated PlayerInfo members     = 3;
    // <del>注意下面这个值其实是不变的</del>
    // 这个值可以被自定义规则修改
    uint32 size  = 4;

    // 房间匹配类型
    MatchType matchType = 5;
    // 当前房间的房间号，如果没有分配到的话为 -1
    // 目前 roomNum 为四位数字（0000 - 9999）
    int32 roomNum = 6;
    // 房间的自定义设置, 如果没进行自定义设置改属性无效
    RoomOption opt = 7;
    // 房间规则是否修改过, 如果规则修改过在人数满足前不能开始匹配
    bool OptChanged = 8;
}

// 房间可设置项目, 现在只支持修改房间人数和游戏时间
//  后续会增加游戏结束规则的设置
message RoomOption {
    // 房间大小, [1, 10],
    // 为了房间性能考虑，暂定 10 人上限
    int32 roomSize = 2;
    // 游戏时长(秒), [300,3600],
    // 游戏全局时间太短的话可能导致游戏错误, 所以不能设置太短
    int32 playDuration = 3;
    // 这个房间的地图 id，目前只有单人游戏的房间才能修改地图。
    int64 mapId = 4;
}

// 玩家的状态
enum PlayerState {
    // 开始（未在游戏和房间中就是这个状态）
    PLAYER_STATE_BEGIN    = 0;
    // 在某个房间中
    PLAYER_STATE_IN_ROOM  = 1;
    // 匹配中
    PLAYER_STATE_MATCHING = 2;
    // 已匹配成功
    PLAYER_STATE_MATCHED  = 3;
    // 已准备就绪
    PLAYER_STATE_READY    = 4;
    // 进行游戏中
    PLAYER_STATE_PLAYING  = 5;
}

// 等级需要的经验值
message Level {
    // 等级
    int64 value = 1;
    // 等级的最低经验值
    int64 lowExp = 2;
    // 等级的上限经验值
    int64 highExp = 3;
}

// 资产值的字段
message AssetScoreField {
    string title = 1;
    int64 value = 2;
}

// 每一局游戏结束后结算的游戏奖励
message GameBonus {
    int64 userID = 1;
    // 结算奖励(扣除)的金币

    // 变化的金币值, 更改前的值 = gold - bonusGold - extraGold
    int32 bonusGold = 2;
    // 额外奖励的金币
    int32 extraGold = 3;
    // 更新后的金币值
    int32 gold = 4;

    // 奖励经验值, 更改前的值 = exp - bonusExp - extraExp
    int32 bonusExp = 5;
    // 额外赠送的经验值
    int32 extraExp = 6;
    // 结算奖励的经验值
    int32 exp = 7;

    // 游戏经验结算后,玩家的初始等级和等级增长所覆盖的等级区间
    repeated Level levels = 8;

    // 排位奖励, 由 cenarius 计算后返回
    message forRank {
        // 总资产值
        int64 assetScore = 1;
        // 本局游戏资产值的奖励明细, 使用 repeated 方便以后客户端动态增加条目
        repeated AssetScoreField assetScoreItems = 2;
        // 资产等级 A5.1
        string assetLevel = 3;

        // acc 奖励值
        string accBonus = 4;
        // acc 总数
        string accTotal = 5;
    }
    // 排位赛的奖励, 由 cenarius 计算后返回
    forRank rankBonus = 9;
}

message PaginationReq {
    // 分页的页数，从 1 开始，如果不传的话默认为 1
    int32 page = 1;
    // 每页的条数，如果不传的话默认为 20
    // 注意不同的接口对 perPage 的最大值可能有自己的限制
    // 具体要参考对应接口的文档
    int32 perPage = 2;
}

message PaginationRsp {
    int32 page = 1;
    int32 perPage = 2;
    int32 totalCount = 3;
    int32 totalPages = 4;
}

message DetailValue {
    string name = 1;
    string code = 2;
    int64 value = 3;

    // Scenario.Category
    string category = 4;

    // 单价 Scenario.C_Price
    int64 unitPrice = 5;
    // 负债 Scenario.C_Liabilities()
    int64 liabilities = 6;
    // 收入 Scenario.C_Income()
    int64 income = 7;
    // 支出 Scenario.C_Interest()
    int64 expense = 8;
    // Scenario.C_Shard
    int64 shard = 9;
    // 2室1厅 Shard=2 , Mark = 1,	Scenario.C_Mark
    int64 mark = 10;

    string	imgFile = 11;

    string desc = 12;
    int64 downPayment = 13;
    float downPaymentPCT = 14;
    float interestRatePCT = 15;
    float yieldRatePCT = 16;
    int64 highPrice = 17;
    int64 lowPrice = 18;
}

message TopCategory {
    string category = 1;
    string code = 2;
    repeated DetailValue details  = 3;
}

//现金流量表
message CashFlowStatement {
    int64 total = 1;
    repeated DetailValue details = 2;
}

//资产负债表
message AssetLiabilityStatement {
    int64 assetTotal  = 1;
    int64 debtsTotal = 2;
    repeated TopCategory assets = 3;
   	repeated TopCategory debts = 4;
}

//损益表
message MonthProfitLossStatement {
    // 总收入
    int64 income = 1;
    // 总支出
    int64 expense = 2;
    // 月现金流 = 总收入 - 总支出
    int64 cashflow = 3;
    repeated TopCategory incomeTops = 4;
    repeated TopCategory expenseTops = 5;
    repeated TopCategory cashflowTops = 6;
}

// 财务报表
message AssetStatement {
    // 财富自由度
    float degree = 1;
    // 现金流量表
    CashFlowStatement cashFlow = 2;
    // 资产负债表
    AssetLiabilityStatement assetLiability = 3;
    // 损益表
    MonthProfitLossStatement monthProfitLoss = 4;
}
