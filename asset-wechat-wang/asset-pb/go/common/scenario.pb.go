// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common/scenario.proto

package common

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Scenario 集合了剧本和牌的概念
type Scenario struct {
	Id       int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Type     int32  `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Category string `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	// 小生意、大机会 相关字段
	C_Price         int32   `protobuf:"varint,5,opt,name=C_Price,json=CPrice,proto3" json:"C_Price,omitempty"`
	C_DownPayment   int32   `protobuf:"varint,6,opt,name=C_DownPayment,json=CDownPayment,proto3" json:"C_DownPayment,omitempty"`
	C_Loan          int32   `protobuf:"varint,7,opt,name=C_Loan,json=CLoan,proto3" json:"C_Loan,omitempty"`
	C_Interest      int32   `protobuf:"varint,8,opt,name=C_Interest,json=CInterest,proto3" json:"C_Interest,omitempty"`
	C_Income        int32   `protobuf:"varint,9,opt,name=C_Income,json=CIncome,proto3" json:"C_Income,omitempty"`
	C_MonthCashFlow int32   `protobuf:"varint,10,opt,name=C_MonthCashFlow,json=CMonthCashFlow,proto3" json:"C_MonthCashFlow,omitempty"`
	C_YieldRatePCT  float32 `protobuf:"fixed32,11,opt,name=C_YieldRatePCT,json=CYieldRatePCT,proto3" json:"C_YieldRatePCT,omitempty"`
	C_HighPrice     int32   `protobuf:"varint,12,opt,name=C_HighPrice,json=CHighPrice,proto3" json:"C_HighPrice,omitempty"`
	C_LowPrice      int32   `protobuf:"varint,13,opt,name=C_LowPrice,json=CLowPrice,proto3" json:"C_LowPrice,omitempty"`
	C_Shard         int32   `protobuf:"varint,14,opt,name=C_Shard,json=CShard,proto3" json:"C_Shard,omitempty"`
	C_Mark          int32   `protobuf:"varint,15,opt,name=C_Mark,json=CMark,proto3" json:"C_Mark,omitempty"`
	// 意外消费金额
	A_Cash int32 `protobuf:"varint,16,opt,name=A_Cash,json=ACash,proto3" json:"A_Cash,omitempty"`
	// 市场风云
	MI_TotalPrice int32   `protobuf:"varint,17,opt,name=MI_TotalPrice,json=MITotalPrice,proto3" json:"MI_TotalPrice,omitempty"`
	MI_UnitPrice  int32   `protobuf:"varint,18,opt,name=MI_UnitPrice,json=MIUnitPrice,proto3" json:"MI_UnitPrice,omitempty"`
	MI_Multiple   int32   `protobuf:"varint,19,opt,name=MI_Multiple,json=MIMultiple,proto3" json:"MI_Multiple,omitempty"`
	MI_PerfPCT    float32 `protobuf:"fixed32,20,opt,name=MI_PerfPCT,json=MIPerfPCT,proto3" json:"MI_PerfPCT,omitempty"`
	MI_Shard      int32   `protobuf:"varint,21,opt,name=MI_Shard,json=MIShard,proto3" json:"MI_Shard,omitempty"`
	MI_Mark       int32   `protobuf:"varint,22,opt,name=MI_Mark,json=MIMark,proto3" json:"MI_Mark,omitempty"`
	Code          string  `protobuf:"bytes,23,opt,name=Code,proto3" json:"Code,omitempty"`
	Desc          string  `protobuf:"bytes,24,opt,name=Desc,proto3" json:"Desc,omitempty"`
	PriceInfo     string  `protobuf:"bytes,25,opt,name=priceInfo,proto3" json:"priceInfo,omitempty"`
	ImgFile       string  `protobuf:"bytes,26,opt,name=imgFile,proto3" json:"imgFile,omitempty"`
	BabyExpense   int32   `protobuf:"varint,27,opt,name=babyExpense,proto3" json:"babyExpense,omitempty"`
	// 市场波动的具体类型
	MC_Type MarketChangeType_Enum `protobuf:"varint,28,opt,name=MC_Type,json=MCType,proto3,enum=pb.common.MarketChangeType_Enum" json:"MC_Type,omitempty"`
	// 是否影响所有人
	MC_AffectAll bool `protobuf:"varint,29,opt,name=MC_AffectAll,json=MCAffectAll,proto3" json:"MC_AffectAll,omitempty"`
	// 变化比例，以百分数计算
	// 不管是上升还是下降，这里的值都大于 0
	// 例如，房租上升 10% 这里就是 10，下降 10% 这里也是 10
	MC_Ratio             float32  `protobuf:"fixed32,30,opt,name=MC_Ratio,json=MCRatio,proto3" json:"MC_Ratio,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Scenario) Reset()         { *m = Scenario{} }
func (m *Scenario) String() string { return proto.CompactTextString(m) }
func (*Scenario) ProtoMessage()    {}
func (*Scenario) Descriptor() ([]byte, []int) {
	return fileDescriptor_982ea5bb158e040b, []int{0}
}

func (m *Scenario) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Scenario.Unmarshal(m, b)
}
func (m *Scenario) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Scenario.Marshal(b, m, deterministic)
}
func (m *Scenario) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Scenario.Merge(m, src)
}
func (m *Scenario) XXX_Size() int {
	return xxx_messageInfo_Scenario.Size(m)
}
func (m *Scenario) XXX_DiscardUnknown() {
	xxx_messageInfo_Scenario.DiscardUnknown(m)
}

var xxx_messageInfo_Scenario proto.InternalMessageInfo

func (m *Scenario) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Scenario) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Scenario) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Scenario) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Scenario) GetC_Price() int32 {
	if m != nil {
		return m.C_Price
	}
	return 0
}

func (m *Scenario) GetC_DownPayment() int32 {
	if m != nil {
		return m.C_DownPayment
	}
	return 0
}

func (m *Scenario) GetC_Loan() int32 {
	if m != nil {
		return m.C_Loan
	}
	return 0
}

func (m *Scenario) GetC_Interest() int32 {
	if m != nil {
		return m.C_Interest
	}
	return 0
}

func (m *Scenario) GetC_Income() int32 {
	if m != nil {
		return m.C_Income
	}
	return 0
}

func (m *Scenario) GetC_MonthCashFlow() int32 {
	if m != nil {
		return m.C_MonthCashFlow
	}
	return 0
}

func (m *Scenario) GetC_YieldRatePCT() float32 {
	if m != nil {
		return m.C_YieldRatePCT
	}
	return 0
}

func (m *Scenario) GetC_HighPrice() int32 {
	if m != nil {
		return m.C_HighPrice
	}
	return 0
}

func (m *Scenario) GetC_LowPrice() int32 {
	if m != nil {
		return m.C_LowPrice
	}
	return 0
}

func (m *Scenario) GetC_Shard() int32 {
	if m != nil {
		return m.C_Shard
	}
	return 0
}

func (m *Scenario) GetC_Mark() int32 {
	if m != nil {
		return m.C_Mark
	}
	return 0
}

func (m *Scenario) GetA_Cash() int32 {
	if m != nil {
		return m.A_Cash
	}
	return 0
}

func (m *Scenario) GetMI_TotalPrice() int32 {
	if m != nil {
		return m.MI_TotalPrice
	}
	return 0
}

func (m *Scenario) GetMI_UnitPrice() int32 {
	if m != nil {
		return m.MI_UnitPrice
	}
	return 0
}

func (m *Scenario) GetMI_Multiple() int32 {
	if m != nil {
		return m.MI_Multiple
	}
	return 0
}

func (m *Scenario) GetMI_PerfPCT() float32 {
	if m != nil {
		return m.MI_PerfPCT
	}
	return 0
}

func (m *Scenario) GetMI_Shard() int32 {
	if m != nil {
		return m.MI_Shard
	}
	return 0
}

func (m *Scenario) GetMI_Mark() int32 {
	if m != nil {
		return m.MI_Mark
	}
	return 0
}

func (m *Scenario) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Scenario) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Scenario) GetPriceInfo() string {
	if m != nil {
		return m.PriceInfo
	}
	return ""
}

func (m *Scenario) GetImgFile() string {
	if m != nil {
		return m.ImgFile
	}
	return ""
}

func (m *Scenario) GetBabyExpense() int32 {
	if m != nil {
		return m.BabyExpense
	}
	return 0
}

func (m *Scenario) GetMC_Type() MarketChangeType_Enum {
	if m != nil {
		return m.MC_Type
	}
	return MarketChangeType_UNKNOWN
}

func (m *Scenario) GetMC_AffectAll() bool {
	if m != nil {
		return m.MC_AffectAll
	}
	return false
}

func (m *Scenario) GetMC_Ratio() float32 {
	if m != nil {
		return m.MC_Ratio
	}
	return 0
}

func init() {
	proto.RegisterType((*Scenario)(nil), "pb.common.Scenario")
}

func init() { proto.RegisterFile("common/scenario.proto", fileDescriptor_982ea5bb158e040b) }

var fileDescriptor_982ea5bb158e040b = []byte{
	// 596 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x93, 0xc1, 0x6f, 0xd3, 0x30,
	0x18, 0xc5, 0x95, 0x6e, 0x6b, 0x5a, 0x77, 0xeb, 0xc0, 0x30, 0xe6, 0x8d, 0x0d, 0x02, 0x08, 0xc8,
	0x85, 0x56, 0x82, 0x13, 0xc7, 0xf2, 0x6d, 0x13, 0x96, 0x66, 0x54, 0x65, 0xe3, 0x00, 0x17, 0xcb,
	0x4d, 0xdd, 0x34, 0x22, 0xb1, 0xa3, 0xc4, 0x63, 0xf4, 0x6f, 0xe7, 0x82, 0x6c, 0xa7, 0x5d, 0xb9,
	0xf9, 0xfd, 0xde, 0x97, 0xe4, 0x7b, 0x4f, 0x0e, 0x3a, 0x4a, 0x75, 0x59, 0x6a, 0x35, 0x6e, 0x52,
	0xa9, 0x44, 0x9d, 0xeb, 0x51, 0x55, 0x6b, 0xa3, 0x71, 0xbf, 0x9a, 0x8d, 0xbc, 0x73, 0x4a, 0xda,
	0x89, 0x4c, 0x94, 0x92, 0xa7, 0x5a, 0x35, 0xa6, 0xf1, 0x43, 0xaf, 0xff, 0x76, 0x51, 0xef, 0xa6,
	0x7d, 0x0e, 0x0f, 0x51, 0x87, 0xce, 0x49, 0x10, 0x05, 0xf1, 0x4e, 0xd2, 0xa1, 0x73, 0x8c, 0xd1,
	0xee, 0x37, 0x51, 0x4a, 0xd2, 0x89, 0x82, 0xb8, 0x9f, 0xb8, 0xb3, 0x65, 0xb7, 0xab, 0x4a, 0x92,
	0x9d, 0x28, 0x88, 0xf7, 0x12, 0x77, 0xc6, 0xa7, 0xa8, 0x97, 0x0a, 0x23, 0x33, 0x5d, 0xaf, 0xc8,
	0xae, 0x9b, 0xdd, 0x68, 0x7c, 0x8c, 0x42, 0xe0, 0xd3, 0x3a, 0x4f, 0x25, 0xd9, 0x73, 0x8f, 0x74,
	0xc1, 0x29, 0xfc, 0x06, 0x1d, 0x00, 0xbf, 0xd0, 0xf7, 0x6a, 0x2a, 0x56, 0xa5, 0x54, 0x86, 0x74,
	0x9d, 0xbd, 0x0f, 0x5b, 0x0c, 0x1f, 0xa1, 0x2e, 0xf0, 0x6b, 0x2d, 0x14, 0x09, 0x9d, 0xbb, 0x07,
	0x56, 0xe0, 0x73, 0x84, 0x80, 0x53, 0x65, 0x64, 0x2d, 0x1b, 0x43, 0x7a, 0xce, 0xea, 0xc3, 0x1a,
	0xe0, 0x13, 0xd4, 0xb3, 0x76, 0xaa, 0x4b, 0x49, 0xfa, 0xce, 0x0c, 0xc1, 0x4b, 0xfc, 0x1e, 0x1d,
	0x02, 0x67, 0x5a, 0x99, 0x25, 0x88, 0x66, 0x79, 0x55, 0xe8, 0x7b, 0x82, 0xdc, 0xc4, 0x10, 0xfe,
	0xa3, 0xf8, 0x2d, 0x1a, 0x02, 0xff, 0x91, 0xcb, 0x62, 0x9e, 0x08, 0x23, 0xa7, 0x70, 0x4b, 0x06,
	0x51, 0x10, 0x77, 0x92, 0x03, 0xd8, 0x86, 0xf8, 0x25, 0x1a, 0x00, 0xff, 0x9a, 0x67, 0x4b, 0x1f,
	0x71, 0xdf, 0xbd, 0x0b, 0xc1, 0x86, 0xf8, 0x55, 0xaf, 0xf5, 0xbd, 0xf7, 0x0f, 0xda, 0x55, 0xd7,
	0xc0, 0xd7, 0x73, 0xb3, 0x14, 0xf5, 0x9c, 0x0c, 0xdb, 0x7a, 0x9c, 0xf2, 0xc9, 0x99, 0xa8, 0x7f,
	0x91, 0xc3, 0x36, 0xb9, 0x15, 0x16, 0x4f, 0xb8, 0x5d, 0x92, 0x3c, 0xf2, 0x78, 0x62, 0x85, 0x2d,
	0x93, 0x51, 0x7e, 0xab, 0x8d, 0x28, 0xfc, 0x87, 0x1e, 0xfb, 0x32, 0x19, 0x7d, 0x60, 0xf8, 0x15,
	0xda, 0x67, 0x94, 0x7f, 0x57, 0xb9, 0xf1, 0x33, 0xd8, 0xcd, 0x0c, 0x18, 0xdd, 0x20, 0x1b, 0x87,
	0x51, 0xce, 0xee, 0x0a, 0x93, 0x57, 0x85, 0x24, 0x4f, 0x7c, 0x1c, 0x46, 0xd7, 0xc4, 0xc6, 0x61,
	0x94, 0x4f, 0x65, 0xbd, 0xb0, 0x95, 0x3c, 0x75, 0x95, 0xf4, 0x19, 0x6d, 0x81, 0x6d, 0x9e, 0xd1,
	0x36, 0xcf, 0x91, 0x6f, 0x9e, 0x51, 0x1f, 0xe8, 0x18, 0x85, 0xf6, 0xd5, 0x36, 0xd1, 0x33, 0x9f,
	0x94, 0x51, 0x17, 0x09, 0xa3, 0x5d, 0xd0, 0x73, 0x49, 0x8e, 0xfd, 0x2d, 0xb3, 0x67, 0xcb, 0x2e,
	0x64, 0x93, 0x12, 0xe2, 0x99, 0x3d, 0xe3, 0x33, 0xd4, 0xaf, 0xec, 0x92, 0x54, 0x2d, 0x34, 0x39,
	0x71, 0xc6, 0x03, 0xc0, 0x04, 0x85, 0x79, 0x99, 0x5d, 0xe5, 0x85, 0x24, 0xa7, 0xce, 0x5b, 0x4b,
	0x1c, 0xa1, 0xc1, 0x4c, 0xcc, 0x56, 0x97, 0x7f, 0x2a, 0xa9, 0x1a, 0x49, 0x9e, 0xfb, 0xd4, 0x5b,
	0x08, 0x7f, 0x46, 0x21, 0x03, 0xee, 0xae, 0xf5, 0x59, 0x14, 0xc4, 0xc3, 0x8f, 0xd1, 0x68, 0xf3,
	0xef, 0x8c, 0xec, 0x8e, 0xd2, 0xc0, 0x52, 0xa8, 0x4c, 0xda, 0x91, 0xd1, 0xa5, 0xba, 0x2b, 0x93,
	0x2e, 0x03, 0x77, 0xf5, 0x6d, 0xa7, 0xc0, 0x27, 0x8b, 0x85, 0x4c, 0xcd, 0xa4, 0x28, 0xc8, 0x79,
	0x14, 0xc4, 0xbd, 0x64, 0xc0, 0x60, 0x83, 0x5c, 0x27, 0xc0, 0x13, 0x61, 0x72, 0x4d, 0x5e, 0xb8,
	0xc2, 0x42, 0x06, 0x4e, 0x7e, 0x89, 0x7f, 0xbe, 0xcb, 0x72, 0x53, 0x08, 0xf7, 0xb1, 0xf1, 0x6f,
	0x99, 0x1a, 0x5d, 0xdf, 0x55, 0x63, 0xd1, 0x34, 0xd2, 0x7c, 0xa8, 0x66, 0xe3, 0x4c, 0x8f, 0xfd,
	0x16, 0xb3, 0xae, 0xfb, 0x5d, 0x3f, 0xfd, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x6c, 0x74, 0x98,
	0xec, 0x03, 0x00, 0x00,
}
