// Code generated by protoc-gen-go. DO NOT EDIT.
// source: events/lobby.proto

package events

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	common "gitlab.com/vectorup/asset-pb/go/common"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LobbyEventType_Enum int32

const (
	// 无效
	LobbyEventType_UNKNOWN LobbyEventType_Enum = 0
	// 启动一局游戏, 匹配成功所有玩家都准备以后成功开始一局新游戏,
	// 定义这个类型的初始目的是为了实现每日任务的与好友组队玩游戏
	LobbyEventType_START_GAME LobbyEventType_Enum = 1
)

var LobbyEventType_Enum_name = map[int32]string{
	0: "UNKNOWN",
	1: "START_GAME",
}

var LobbyEventType_Enum_value = map[string]int32{
	"UNKNOWN":    0,
	"START_GAME": 1,
}

func (x LobbyEventType_Enum) String() string {
	return proto.EnumName(LobbyEventType_Enum_name, int32(x))
}

func (LobbyEventType_Enum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3b22675b2fcd1169, []int{1, 0}
}

// 雇佣机器人进入匹配, 训练模式下机器人会直接进入房间, 训练模式每个房间都需要发送一条消息
// 其他模式下机器人会自动创建对应模式和大小的房间然后开始开始匹配
type HireBot struct {
	// 发送消息的时间, 超过阈值的时间机器人服务不再处理, 阈值需要机器人服务根据匹配周期进行设定
	Timestamp *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// 匹配类型
	MatchType common.MatchType `protobuf:"varint,2,opt,name=matchType,proto3,enum=pb.common.MatchType" json:"matchType,omitempty"`
	// 雇佣机器人的 matcher 的房间大小, 机器人会根据 matchType 和 roomSize 创建房间然后开始匹配
	RoomSize int32 `protobuf:"varint,3,opt,name=roomSize,proto3" json:"roomSize,omitempty"`
	// 需要启动的机器人数量
	Num int32 `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
	// 需要直接加入的房间号码, 训练模式雇佣机器人，机器人会直接进入房间
	RoomNumber           int32    `protobuf:"varint,5,opt,name=roomNumber,proto3" json:"roomNumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HireBot) Reset()         { *m = HireBot{} }
func (m *HireBot) String() string { return proto.CompactTextString(m) }
func (*HireBot) ProtoMessage()    {}
func (*HireBot) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b22675b2fcd1169, []int{0}
}

func (m *HireBot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HireBot.Unmarshal(m, b)
}
func (m *HireBot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HireBot.Marshal(b, m, deterministic)
}
func (m *HireBot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HireBot.Merge(m, src)
}
func (m *HireBot) XXX_Size() int {
	return xxx_messageInfo_HireBot.Size(m)
}
func (m *HireBot) XXX_DiscardUnknown() {
	xxx_messageInfo_HireBot.DiscardUnknown(m)
}

var xxx_messageInfo_HireBot proto.InternalMessageInfo

func (m *HireBot) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *HireBot) GetMatchType() common.MatchType {
	if m != nil {
		return m.MatchType
	}
	return common.MatchType_UNKNOWN
}

func (m *HireBot) GetRoomSize() int32 {
	if m != nil {
		return m.RoomSize
	}
	return 0
}

func (m *HireBot) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *HireBot) GetRoomNumber() int32 {
	if m != nil {
		return m.RoomNumber
	}
	return 0
}

// lobby 时间类型
type LobbyEventType struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LobbyEventType) Reset()         { *m = LobbyEventType{} }
func (m *LobbyEventType) String() string { return proto.CompactTextString(m) }
func (*LobbyEventType) ProtoMessage()    {}
func (*LobbyEventType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b22675b2fcd1169, []int{1}
}

func (m *LobbyEventType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LobbyEventType.Unmarshal(m, b)
}
func (m *LobbyEventType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LobbyEventType.Marshal(b, m, deterministic)
}
func (m *LobbyEventType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LobbyEventType.Merge(m, src)
}
func (m *LobbyEventType) XXX_Size() int {
	return xxx_messageInfo_LobbyEventType.Size(m)
}
func (m *LobbyEventType) XXX_DiscardUnknown() {
	xxx_messageInfo_LobbyEventType.DiscardUnknown(m)
}

var xxx_messageInfo_LobbyEventType proto.InternalMessageInfo

// 这个消息目前是用来实现组队游戏的每日任务.
// cenarius 只要在 len(roommates) > 1 便会认为任务可推进
type LobbyEventStartGame struct {
	// 对应房间的 owner
	OwnerID int64 `protobuf:"varint,1,opt,name=ownerID,proto3" json:"ownerID,omitempty"`
	// room.id xid
	RoomID string `protobuf:"bytes,2,opt,name=roomID,proto3" json:"roomID,omitempty"`
	// 房间号码
	RoomNumber int32 `protobuf:"varint,3,opt,name=roomNumber,proto3" json:"roomNumber,omitempty"`
	// 房间内的玩家
	Roommates []int64 `protobuf:"varint,4,rep,packed,name=roommates,proto3" json:"roommates,omitempty"`
	// 匹配类型
	MatchType            common.MatchType `protobuf:"varint,5,opt,name=matchType,proto3,enum=pb.common.MatchType" json:"matchType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *LobbyEventStartGame) Reset()         { *m = LobbyEventStartGame{} }
func (m *LobbyEventStartGame) String() string { return proto.CompactTextString(m) }
func (*LobbyEventStartGame) ProtoMessage()    {}
func (*LobbyEventStartGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b22675b2fcd1169, []int{2}
}

func (m *LobbyEventStartGame) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LobbyEventStartGame.Unmarshal(m, b)
}
func (m *LobbyEventStartGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LobbyEventStartGame.Marshal(b, m, deterministic)
}
func (m *LobbyEventStartGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LobbyEventStartGame.Merge(m, src)
}
func (m *LobbyEventStartGame) XXX_Size() int {
	return xxx_messageInfo_LobbyEventStartGame.Size(m)
}
func (m *LobbyEventStartGame) XXX_DiscardUnknown() {
	xxx_messageInfo_LobbyEventStartGame.DiscardUnknown(m)
}

var xxx_messageInfo_LobbyEventStartGame proto.InternalMessageInfo

func (m *LobbyEventStartGame) GetOwnerID() int64 {
	if m != nil {
		return m.OwnerID
	}
	return 0
}

func (m *LobbyEventStartGame) GetRoomID() string {
	if m != nil {
		return m.RoomID
	}
	return ""
}

func (m *LobbyEventStartGame) GetRoomNumber() int32 {
	if m != nil {
		return m.RoomNumber
	}
	return 0
}

func (m *LobbyEventStartGame) GetRoommates() []int64 {
	if m != nil {
		return m.Roommates
	}
	return nil
}

func (m *LobbyEventStartGame) GetMatchType() common.MatchType {
	if m != nil {
		return m.MatchType
	}
	return common.MatchType_UNKNOWN
}

type LobbyEvent struct {
	// 事件发生时间
	Timestamp *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// 事件类型
	Typ LobbyEventType_Enum `protobuf:"varint,2,opt,name=typ,proto3,enum=pb.events.LobbyEventType_Enum" json:"typ,omitempty"`
	// 事件内容
	Detail               *any.Any `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LobbyEvent) Reset()         { *m = LobbyEvent{} }
func (m *LobbyEvent) String() string { return proto.CompactTextString(m) }
func (*LobbyEvent) ProtoMessage()    {}
func (*LobbyEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b22675b2fcd1169, []int{3}
}

func (m *LobbyEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LobbyEvent.Unmarshal(m, b)
}
func (m *LobbyEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LobbyEvent.Marshal(b, m, deterministic)
}
func (m *LobbyEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LobbyEvent.Merge(m, src)
}
func (m *LobbyEvent) XXX_Size() int {
	return xxx_messageInfo_LobbyEvent.Size(m)
}
func (m *LobbyEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_LobbyEvent.DiscardUnknown(m)
}

var xxx_messageInfo_LobbyEvent proto.InternalMessageInfo

func (m *LobbyEvent) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *LobbyEvent) GetTyp() LobbyEventType_Enum {
	if m != nil {
		return m.Typ
	}
	return LobbyEventType_UNKNOWN
}

func (m *LobbyEvent) GetDetail() *any.Any {
	if m != nil {
		return m.Detail
	}
	return nil
}

func init() {
	proto.RegisterEnum("pb.events.LobbyEventType_Enum", LobbyEventType_Enum_name, LobbyEventType_Enum_value)
	proto.RegisterType((*HireBot)(nil), "pb.events.HireBot")
	proto.RegisterType((*LobbyEventType)(nil), "pb.events.LobbyEventType")
	proto.RegisterType((*LobbyEventStartGame)(nil), "pb.events.LobbyEventStartGame")
	proto.RegisterType((*LobbyEvent)(nil), "pb.events.LobbyEvent")
}

func init() { proto.RegisterFile("events/lobby.proto", fileDescriptor_3b22675b2fcd1169) }

var fileDescriptor_3b22675b2fcd1169 = []byte{
	// 425 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0x5d, 0x8b, 0xd3, 0x40,
	0x14, 0x75, 0x4c, 0x3f, 0xcc, 0x2d, 0x94, 0x32, 0xbb, 0x48, 0x2c, 0xb2, 0x96, 0x08, 0x92, 0x07,
	0x9d, 0x91, 0x8a, 0xe0, 0x6b, 0x97, 0x2d, 0xeb, 0xa2, 0x5b, 0x61, 0x5a, 0x11, 0x7c, 0x91, 0x99,
	0x3a, 0xd6, 0x40, 0x27, 0x33, 0x24, 0x93, 0x95, 0xf8, 0x83, 0xfc, 0x0f, 0xfe, 0x00, 0xff, 0x97,
	0xcc, 0x24, 0x69, 0xdc, 0xfa, 0x22, 0xf8, 0x96, 0x73, 0xef, 0x39, 0x73, 0xcf, 0x3d, 0x37, 0x80,
	0xe5, 0x8d, 0xcc, 0x6c, 0x41, 0xf7, 0x5a, 0x88, 0x8a, 0x98, 0x5c, 0x5b, 0x8d, 0x43, 0x23, 0x48,
	0x5d, 0x9e, 0x9e, 0x6c, 0xb5, 0x52, 0x3a, 0xa3, 0x5b, 0x9d, 0x15, 0xb6, 0xa8, 0xfb, 0xd3, 0x47,
	0x3b, 0xad, 0x77, 0x7b, 0x49, 0x3d, 0x12, 0xe5, 0x17, 0x6a, 0x53, 0x25, 0x0b, 0xcb, 0x95, 0x69,
	0x08, 0x0f, 0x8e, 0x09, 0x3c, 0x6b, 0xde, 0x8e, 0x7f, 0x21, 0x18, 0xbe, 0x4e, 0x73, 0x79, 0xae,
	0x2d, 0x7e, 0x05, 0xe1, 0x41, 0x19, 0xa1, 0x19, 0x4a, 0x46, 0xf3, 0x29, 0xa9, 0xa5, 0xa4, 0x95,
	0x92, 0x4d, 0xcb, 0x60, 0x1d, 0x19, 0xcf, 0x21, 0x54, 0xdc, 0x6e, 0xbf, 0x6e, 0x2a, 0x23, 0xa3,
	0xbb, 0x33, 0x94, 0x8c, 0xe7, 0xa7, 0xc4, 0x08, 0x52, 0xbb, 0x25, 0xd7, 0x6d, 0x8f, 0x75, 0x34,
	0x3c, 0x85, 0x7b, 0xb9, 0xd6, 0x6a, 0x9d, 0x7e, 0x97, 0x51, 0x30, 0x43, 0x49, 0x9f, 0x1d, 0x30,
	0x9e, 0x40, 0x90, 0x95, 0x2a, 0xea, 0xf9, 0xb2, 0xfb, 0xc4, 0x67, 0x00, 0xae, 0xbb, 0x2a, 0x95,
	0x90, 0x79, 0xd4, 0xf7, 0x8d, 0x3f, 0x2a, 0xf1, 0x4b, 0x18, 0xbf, 0x75, 0x91, 0x2d, 0x5d, 0x4e,
	0xee, 0xfd, 0xf8, 0x31, 0xf4, 0x96, 0x4e, 0x39, 0x82, 0xe1, 0xfb, 0xd5, 0x9b, 0xd5, 0xbb, 0x0f,
	0xab, 0xc9, 0x1d, 0x3c, 0x06, 0x58, 0x6f, 0x16, 0x6c, 0xf3, 0xe9, 0x72, 0x71, 0xbd, 0x9c, 0xa0,
	0xf8, 0x27, 0x82, 0x93, 0x4e, 0xb7, 0xb6, 0x3c, 0xb7, 0x97, 0x5c, 0x49, 0x1c, 0xc1, 0x50, 0x7f,
	0xcb, 0x64, 0x7e, 0x75, 0xe1, 0x83, 0x08, 0x58, 0x0b, 0xf1, 0x7d, 0x18, 0xb8, 0xb1, 0x57, 0x17,
	0x7e, 0xcf, 0x90, 0x35, 0xe8, 0xc8, 0x60, 0x70, 0x6c, 0x10, 0x3f, 0x84, 0xd0, 0x21, 0xc5, 0xad,
	0x2c, 0xa2, 0xde, 0x2c, 0x48, 0x02, 0xd6, 0x15, 0x6e, 0x07, 0xd8, 0xff, 0xa7, 0x00, 0xe3, 0x1f,
	0x08, 0xa0, 0xf3, 0xfe, 0x1f, 0xd7, 0x7b, 0x0e, 0x81, 0xad, 0x4c, 0x73, 0xb7, 0x33, 0x72, 0xf8,
	0xdb, 0xc8, 0xed, 0x44, 0x89, 0x8b, 0x93, 0x39, 0x2a, 0x7e, 0x0a, 0x83, 0xcf, 0xd2, 0xf2, 0x74,
	0xef, 0x17, 0x1d, 0xcd, 0x4f, 0xff, 0x1a, 0xb4, 0xc8, 0x2a, 0xd6, 0x70, 0xce, 0x93, 0x8f, 0x4f,
	0x76, 0xa9, 0xdd, 0x73, 0xbf, 0x0e, 0xbd, 0x91, 0x5b, 0xab, 0xf3, 0xd2, 0x50, 0x5e, 0x14, 0xd2,
	0x3e, 0x33, 0x82, 0xee, 0x34, 0xad, 0x07, 0x8a, 0x81, 0xd7, 0xbf, 0xf8, 0x1d, 0x00, 0x00, 0xff,
	0xff, 0xf8, 0x87, 0xc6, 0x07, 0x06, 0x03, 0x00, 0x00,
}
