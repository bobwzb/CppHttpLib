syntax = "proto3";
package pb.lobby;

import "common/main.proto";
import "common/backend.proto";
import "common/types.proto";
option go_package = "gitlab.com/vectorup/asset-pb/go/lobby";


// DEPRECATED(QuantumGhost): this message should not be used
message GameNodeMessage {
    option deprecated = true;
    string uuid = 1;
    string address = 2;
}

// 内部通信用，agent 通过CheckGameRoom来检查用户是否存在正在玩的游戏
message CheckGameRoomRequest {
    int64 userId = 1;
}

message CheckGameRoomResponse {
    // TODO(QuantumGhost): 把 GameInfo 作为一个整体定义到 common/types.proto 里面
    int64 gameId             = 1;   // 0 表示不存在
    string address           = 2;   // 连接地址 ip:port 的形式
    common.PlayerState state = 3;   // BEGIN, IN_ROOM, MATCHING, MATCHED, READY, PLAYING
    repeated int64 userIds   = 4;
    // 如果在游戏房间中，就返回房间相关的信息
    common.RoomInfo room     = 5;
}

message ResetPlayerRequest {
    int64 userId = 1;
}

message EndGameRequest {
    message Player {
        int64 userId = 1;
        // 新版本协议使用 xid 作为 PlayerId
        // 这个字段对业务逻辑没有影响，只用作日志记录
        int64 playerId = 2 [deprecated=true];
        // 新版游戏使用这个作为 PlayerId
        string playerXid = 3;
    }
    int64 gameId = 1;
    repeated Player players = 2;
}

message EndGameResponse {
    int64 gameID = 2;
}

message StreamInitParam {
    int64 userId = 1;
    bool isBot = 2;
}

service LobbyService {
    rpc RegisterGameNode(GameNodeMessage) returns (common.Error) {
        option deprecated = true;
    };
    rpc CheckGameRoom(CheckGameRoomRequest) returns (CheckGameRoomResponse);
    rpc ResetPlayer(ResetPlayerRequest) returns (common.Error);

    rpc Handle(StreamInitParam) returns (stream common.Payload);     //server side streaming
    rpc Request(common.Payload) returns (common.Payload);
    rpc EndGame(EndGameRequest) returns (EndGameResponse);
}
