// 玩家在游戏内部进行的操作以及相关的事件
syntax = "proto3";
package pb.events;

option go_package = "gitlab.com/vectorup/asset-pb/go/events";

import "common/message.proto";
import "common/scenario.proto";
import "common/game_consts.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

// 事件的类型: 升职加薪, 事业, 生孩子, 卖出房产, etc.
message GameEventType {
    enum Enum {
        UNKNOWN = 0;
        // 游戏开始
        GAME_START = 1;
        // 选择职业
        SELECT_ROLE = 2;
        // 买入资产
        BUY = 3;
        // 卖出资产
        SELL = 4;
        // 失业
        UNEMPLOYMENT = 5;
        // 升职加薪
        WAGE_HIKE = 6;
        // 拍卖
        AUCTION = 7;
        // 结算日, 结算日之后玩家年龄增加
        PAY_DAY = 8;
        // 生孩子
        BABY = 9;
        // 破产
        BROKE = 10;
        // 财富自由
        FREEDOM = 11;
        // 游戏结束
        GAME_END = 12;
        // 时间到
        GAME_TIMEOUT = 13;
        // 意外消费
        ACCIDENT = 14;
        // 市场变化
        MARKET_CHANGE = 15;
        // 玩家惩罚, 出现该事件后玩家将被轮空
        // 客户端在显示 timeline 时到了该事件后续事件可以不继续处理了
        DISHONORABLE_PUNISH = 16;
    }
}

// 游戏开始时发布的事件, 暂时只有年龄信息
message EventGameStart {
    // 游戏开始时的年龄
    int32 age = 1;
}

// 职业名
message Role {
    int64 id = 1;
    string flag = 2;
    string name = 3;
}

message EventSelectRole {
    // 选择的职业信息
    Role role = 1;
}

// 资产相关的事件在这里表示
// 购买/ 出售/ 孩子/ 拍卖/ 失业/ 意外支付
message EventAssets {
    // 对应资产的 code, 这个 code 在 pb 里面没有定义
    string code = 1;
    // 数量, eg. 购买 1000 股 amazon
    int32 quantity = 2;
    // 现金收入
    int32 income = 3;
    // 现金支出, eg. 购入 2室一厅 支出 5万
    int32 expense = 4;
    // 售出资产的利润, eg. 售出 3室两厅获利 30 万
    int32 profit = 5;
    // 主要是资产操作时对应的资产名
    string remark = 6;
    // 资产总价
    int32 totalPrice = 7;

    // 买入/ 出售/ 拍卖时对应的 scenario
    common.Scenario scenario = 8;
    // 买入和卖出时对应的 Asset, 卖出时包含有 卖出价格/数量/利润
    common.PlayerAsset asset = 9;

    // 对应的月现金流变化, > 0 收入/ < 0 支出
    // eg. 生孩子月支出
    int32 monthCashFlow = 10;
}

// 结算日事件
message EventSalary {
    // 对应资产的 code, 这个 code 在 pb 里面没有定义
    string code = 1;
    // 结算日的工资, 这个值 只是 role.Salary, 不包含现金流结算
    int32 salary = 2;
    // 现金流的结算后的收入, > 0 现金流收入, < 0 支出
    int32 cash_flow = 3;
    // 结算日之后的年龄
    int32 age = 4;
}

// 升职加薪事件
message EventWageHike {
    // 月薪增加
    int32 increment = 1;
    // 升职加薪后的职业
    Role role = 2;
}


// 玩家在游戏中的事件会发送到 Nats
message GameEvent {
    // 游戏 ID
    int64 gameID = 1;
    // 事件发生时间
    google.protobuf.Timestamp timestamp = 2;
    // 事件类型
    GameEventType.Enum Type = 3;
    // 对应玩家的 user.hide_id
    int64 userID = 4;

    // 事件内容, 有时候可能一个事件里面包含了多个内容, 比如一次卖出多套房产的时候可能需要当作一个事件来处理
    // 如果是游戏结束的事件(broke/freedom/gameEnd) details 可能为空
    repeated google.protobuf.Any details = 5;
}

message EventMarketChange {
    // 表示对应的市场变化类型
    common.MarketChangeType.Enum changeType = 1;
    // 收入变化，正增负减
    int32 incomeChange = 2;
    // 资产变化，正加负减
    int32 assetChange = 3;
}

message Dishonorable {
    // 惩罚原因
    common.DishonorablePunishReason.Enum Reason = 1;
}
