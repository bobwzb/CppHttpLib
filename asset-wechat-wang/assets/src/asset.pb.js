/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
"use strict";

var $protobuf = require("protobufjs/minimal");

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.pb = (function() {

    /**
     * Namespace pb.
     * @exports pb
     * @namespace
     */
    var pb = {};

    pb.strange = (function() {

        /**
         * Namespace strange.
         * @memberof pb
         * @namespace
         */
        var strange = {};

        strange.HireStrangeReq = (function() {

            /**
             * Properties of a HireStrangeReq.
             * @memberof pb.strange
             * @interface IHireStrangeReq
             * @property {Long|null} [size] HireStrangeReq size
             * @property {Long|null} [per] HireStrangeReq per
             * @property {Long|null} [room] HireStrangeReq room
             */

            /**
             * Constructs a new HireStrangeReq.
             * @memberof pb.strange
             * @classdesc Represents a HireStrangeReq.
             * @implements IHireStrangeReq
             * @constructor
             * @param {pb.strange.IHireStrangeReq=} [properties] Properties to set
             */
            function HireStrangeReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * HireStrangeReq size.
             * @member {Long} size
             * @memberof pb.strange.HireStrangeReq
             * @instance
             */
            HireStrangeReq.prototype.size = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * HireStrangeReq per.
             * @member {Long} per
             * @memberof pb.strange.HireStrangeReq
             * @instance
             */
            HireStrangeReq.prototype.per = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * HireStrangeReq room.
             * @member {Long} room
             * @memberof pb.strange.HireStrangeReq
             * @instance
             */
            HireStrangeReq.prototype.room = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new HireStrangeReq instance using the specified properties.
             * @function create
             * @memberof pb.strange.HireStrangeReq
             * @static
             * @param {pb.strange.IHireStrangeReq=} [properties] Properties to set
             * @returns {pb.strange.HireStrangeReq} HireStrangeReq instance
             */
            HireStrangeReq.create = function create(properties) {
                return new HireStrangeReq(properties);
            };

            /**
             * Encodes the specified HireStrangeReq message. Does not implicitly {@link pb.strange.HireStrangeReq.verify|verify} messages.
             * @function encode
             * @memberof pb.strange.HireStrangeReq
             * @static
             * @param {pb.strange.IHireStrangeReq} message HireStrangeReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HireStrangeReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.size != null && message.hasOwnProperty("size"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.size);
                if (message.per != null && message.hasOwnProperty("per"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.per);
                if (message.room != null && message.hasOwnProperty("room"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.room);
                return writer;
            };

            /**
             * Encodes the specified HireStrangeReq message, length delimited. Does not implicitly {@link pb.strange.HireStrangeReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.strange.HireStrangeReq
             * @static
             * @param {pb.strange.IHireStrangeReq} message HireStrangeReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HireStrangeReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a HireStrangeReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.strange.HireStrangeReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.strange.HireStrangeReq} HireStrangeReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HireStrangeReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.strange.HireStrangeReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.size = reader.int64();
                        break;
                    case 2:
                        message.per = reader.int64();
                        break;
                    case 3:
                        message.room = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a HireStrangeReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.strange.HireStrangeReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.strange.HireStrangeReq} HireStrangeReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HireStrangeReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a HireStrangeReq message.
             * @function verify
             * @memberof pb.strange.HireStrangeReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            HireStrangeReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.size != null && message.hasOwnProperty("size"))
                    if (!$util.isInteger(message.size) && !(message.size && $util.isInteger(message.size.low) && $util.isInteger(message.size.high)))
                        return "size: integer|Long expected";
                if (message.per != null && message.hasOwnProperty("per"))
                    if (!$util.isInteger(message.per) && !(message.per && $util.isInteger(message.per.low) && $util.isInteger(message.per.high)))
                        return "per: integer|Long expected";
                if (message.room != null && message.hasOwnProperty("room"))
                    if (!$util.isInteger(message.room) && !(message.room && $util.isInteger(message.room.low) && $util.isInteger(message.room.high)))
                        return "room: integer|Long expected";
                return null;
            };

            /**
             * Creates a HireStrangeReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.strange.HireStrangeReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.strange.HireStrangeReq} HireStrangeReq
             */
            HireStrangeReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.strange.HireStrangeReq)
                    return object;
                var message = new $root.pb.strange.HireStrangeReq();
                if (object.size != null)
                    if ($util.Long)
                        (message.size = $util.Long.fromValue(object.size)).unsigned = false;
                    else if (typeof object.size === "string")
                        message.size = parseInt(object.size, 10);
                    else if (typeof object.size === "number")
                        message.size = object.size;
                    else if (typeof object.size === "object")
                        message.size = new $util.LongBits(object.size.low >>> 0, object.size.high >>> 0).toNumber();
                if (object.per != null)
                    if ($util.Long)
                        (message.per = $util.Long.fromValue(object.per)).unsigned = false;
                    else if (typeof object.per === "string")
                        message.per = parseInt(object.per, 10);
                    else if (typeof object.per === "number")
                        message.per = object.per;
                    else if (typeof object.per === "object")
                        message.per = new $util.LongBits(object.per.low >>> 0, object.per.high >>> 0).toNumber();
                if (object.room != null)
                    if ($util.Long)
                        (message.room = $util.Long.fromValue(object.room)).unsigned = false;
                    else if (typeof object.room === "string")
                        message.room = parseInt(object.room, 10);
                    else if (typeof object.room === "number")
                        message.room = object.room;
                    else if (typeof object.room === "object")
                        message.room = new $util.LongBits(object.room.low >>> 0, object.room.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a HireStrangeReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.strange.HireStrangeReq
             * @static
             * @param {pb.strange.HireStrangeReq} message HireStrangeReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            HireStrangeReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.size = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.size = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.per = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.per = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.room = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.room = options.longs === String ? "0" : 0;
                }
                if (message.size != null && message.hasOwnProperty("size"))
                    if (typeof message.size === "number")
                        object.size = options.longs === String ? String(message.size) : message.size;
                    else
                        object.size = options.longs === String ? $util.Long.prototype.toString.call(message.size) : options.longs === Number ? new $util.LongBits(message.size.low >>> 0, message.size.high >>> 0).toNumber() : message.size;
                if (message.per != null && message.hasOwnProperty("per"))
                    if (typeof message.per === "number")
                        object.per = options.longs === String ? String(message.per) : message.per;
                    else
                        object.per = options.longs === String ? $util.Long.prototype.toString.call(message.per) : options.longs === Number ? new $util.LongBits(message.per.low >>> 0, message.per.high >>> 0).toNumber() : message.per;
                if (message.room != null && message.hasOwnProperty("room"))
                    if (typeof message.room === "number")
                        object.room = options.longs === String ? String(message.room) : message.room;
                    else
                        object.room = options.longs === String ? $util.Long.prototype.toString.call(message.room) : options.longs === Number ? new $util.LongBits(message.room.low >>> 0, message.room.high >>> 0).toNumber() : message.room;
                return object;
            };

            /**
             * Converts this HireStrangeReq to JSON.
             * @function toJSON
             * @memberof pb.strange.HireStrangeReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            HireStrangeReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return HireStrangeReq;
        })();

        strange.HireStrageResp = (function() {

            /**
             * Properties of a HireStrageResp.
             * @memberof pb.strange
             * @interface IHireStrageResp
             * @property {Array.<Long>|null} [users] HireStrageResp users
             */

            /**
             * Constructs a new HireStrageResp.
             * @memberof pb.strange
             * @classdesc Represents a HireStrageResp.
             * @implements IHireStrageResp
             * @constructor
             * @param {pb.strange.IHireStrageResp=} [properties] Properties to set
             */
            function HireStrageResp(properties) {
                this.users = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * HireStrageResp users.
             * @member {Array.<Long>} users
             * @memberof pb.strange.HireStrageResp
             * @instance
             */
            HireStrageResp.prototype.users = $util.emptyArray;

            /**
             * Creates a new HireStrageResp instance using the specified properties.
             * @function create
             * @memberof pb.strange.HireStrageResp
             * @static
             * @param {pb.strange.IHireStrageResp=} [properties] Properties to set
             * @returns {pb.strange.HireStrageResp} HireStrageResp instance
             */
            HireStrageResp.create = function create(properties) {
                return new HireStrageResp(properties);
            };

            /**
             * Encodes the specified HireStrageResp message. Does not implicitly {@link pb.strange.HireStrageResp.verify|verify} messages.
             * @function encode
             * @memberof pb.strange.HireStrageResp
             * @static
             * @param {pb.strange.IHireStrageResp} message HireStrageResp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HireStrageResp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.users != null && message.users.length) {
                    writer.uint32(/* id 1, wireType 2 =*/10).fork();
                    for (var i = 0; i < message.users.length; ++i)
                        writer.int64(message.users[i]);
                    writer.ldelim();
                }
                return writer;
            };

            /**
             * Encodes the specified HireStrageResp message, length delimited. Does not implicitly {@link pb.strange.HireStrageResp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.strange.HireStrageResp
             * @static
             * @param {pb.strange.IHireStrageResp} message HireStrageResp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HireStrageResp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a HireStrageResp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.strange.HireStrageResp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.strange.HireStrageResp} HireStrageResp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HireStrageResp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.strange.HireStrageResp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.users && message.users.length))
                            message.users = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.users.push(reader.int64());
                        } else
                            message.users.push(reader.int64());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a HireStrageResp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.strange.HireStrageResp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.strange.HireStrageResp} HireStrageResp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HireStrageResp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a HireStrageResp message.
             * @function verify
             * @memberof pb.strange.HireStrageResp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            HireStrageResp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.users != null && message.hasOwnProperty("users")) {
                    if (!Array.isArray(message.users))
                        return "users: array expected";
                    for (var i = 0; i < message.users.length; ++i)
                        if (!$util.isInteger(message.users[i]) && !(message.users[i] && $util.isInteger(message.users[i].low) && $util.isInteger(message.users[i].high)))
                            return "users: integer|Long[] expected";
                }
                return null;
            };

            /**
             * Creates a HireStrageResp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.strange.HireStrageResp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.strange.HireStrageResp} HireStrageResp
             */
            HireStrageResp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.strange.HireStrageResp)
                    return object;
                var message = new $root.pb.strange.HireStrageResp();
                if (object.users) {
                    if (!Array.isArray(object.users))
                        throw TypeError(".pb.strange.HireStrageResp.users: array expected");
                    message.users = [];
                    for (var i = 0; i < object.users.length; ++i)
                        if ($util.Long)
                            (message.users[i] = $util.Long.fromValue(object.users[i])).unsigned = false;
                        else if (typeof object.users[i] === "string")
                            message.users[i] = parseInt(object.users[i], 10);
                        else if (typeof object.users[i] === "number")
                            message.users[i] = object.users[i];
                        else if (typeof object.users[i] === "object")
                            message.users[i] = new $util.LongBits(object.users[i].low >>> 0, object.users[i].high >>> 0).toNumber();
                }
                return message;
            };

            /**
             * Creates a plain object from a HireStrageResp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.strange.HireStrageResp
             * @static
             * @param {pb.strange.HireStrageResp} message HireStrageResp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            HireStrageResp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.users = [];
                if (message.users && message.users.length) {
                    object.users = [];
                    for (var j = 0; j < message.users.length; ++j)
                        if (typeof message.users[j] === "number")
                            object.users[j] = options.longs === String ? String(message.users[j]) : message.users[j];
                        else
                            object.users[j] = options.longs === String ? $util.Long.prototype.toString.call(message.users[j]) : options.longs === Number ? new $util.LongBits(message.users[j].low >>> 0, message.users[j].high >>> 0).toNumber() : message.users[j];
                }
                return object;
            };

            /**
             * Converts this HireStrageResp to JSON.
             * @function toJSON
             * @memberof pb.strange.HireStrageResp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            HireStrageResp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return HireStrageResp;
        })();

        strange.MatchCompletedNotify = (function() {

            /**
             * Properties of a MatchCompletedNotify.
             * @memberof pb.strange
             * @interface IMatchCompletedNotify
             * @property {Object.<string,pb.strange.MatchCompletedNotify.Ivalue>|null} [rooms] MatchCompletedNotify rooms
             */

            /**
             * Constructs a new MatchCompletedNotify.
             * @memberof pb.strange
             * @classdesc Represents a MatchCompletedNotify.
             * @implements IMatchCompletedNotify
             * @constructor
             * @param {pb.strange.IMatchCompletedNotify=} [properties] Properties to set
             */
            function MatchCompletedNotify(properties) {
                this.rooms = {};
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MatchCompletedNotify rooms.
             * @member {Object.<string,pb.strange.MatchCompletedNotify.Ivalue>} rooms
             * @memberof pb.strange.MatchCompletedNotify
             * @instance
             */
            MatchCompletedNotify.prototype.rooms = $util.emptyObject;

            /**
             * Creates a new MatchCompletedNotify instance using the specified properties.
             * @function create
             * @memberof pb.strange.MatchCompletedNotify
             * @static
             * @param {pb.strange.IMatchCompletedNotify=} [properties] Properties to set
             * @returns {pb.strange.MatchCompletedNotify} MatchCompletedNotify instance
             */
            MatchCompletedNotify.create = function create(properties) {
                return new MatchCompletedNotify(properties);
            };

            /**
             * Encodes the specified MatchCompletedNotify message. Does not implicitly {@link pb.strange.MatchCompletedNotify.verify|verify} messages.
             * @function encode
             * @memberof pb.strange.MatchCompletedNotify
             * @static
             * @param {pb.strange.IMatchCompletedNotify} message MatchCompletedNotify message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MatchCompletedNotify.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rooms != null && message.hasOwnProperty("rooms"))
                    for (var keys = Object.keys(message.rooms), i = 0; i < keys.length; ++i) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                        $root.pb.strange.MatchCompletedNotify.value.encode(message.rooms[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                    }
                return writer;
            };

            /**
             * Encodes the specified MatchCompletedNotify message, length delimited. Does not implicitly {@link pb.strange.MatchCompletedNotify.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.strange.MatchCompletedNotify
             * @static
             * @param {pb.strange.IMatchCompletedNotify} message MatchCompletedNotify message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MatchCompletedNotify.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MatchCompletedNotify message from the specified reader or buffer.
             * @function decode
             * @memberof pb.strange.MatchCompletedNotify
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.strange.MatchCompletedNotify} MatchCompletedNotify
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MatchCompletedNotify.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.strange.MatchCompletedNotify(), key;
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        reader.skip().pos++;
                        if (message.rooms === $util.emptyObject)
                            message.rooms = {};
                        key = reader.string();
                        reader.pos++;
                        message.rooms[key] = $root.pb.strange.MatchCompletedNotify.value.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MatchCompletedNotify message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.strange.MatchCompletedNotify
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.strange.MatchCompletedNotify} MatchCompletedNotify
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MatchCompletedNotify.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MatchCompletedNotify message.
             * @function verify
             * @memberof pb.strange.MatchCompletedNotify
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MatchCompletedNotify.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rooms != null && message.hasOwnProperty("rooms")) {
                    if (!$util.isObject(message.rooms))
                        return "rooms: object expected";
                    var key = Object.keys(message.rooms);
                    for (var i = 0; i < key.length; ++i) {
                        var error = $root.pb.strange.MatchCompletedNotify.value.verify(message.rooms[key[i]]);
                        if (error)
                            return "rooms." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a MatchCompletedNotify message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.strange.MatchCompletedNotify
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.strange.MatchCompletedNotify} MatchCompletedNotify
             */
            MatchCompletedNotify.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.strange.MatchCompletedNotify)
                    return object;
                var message = new $root.pb.strange.MatchCompletedNotify();
                if (object.rooms) {
                    if (typeof object.rooms !== "object")
                        throw TypeError(".pb.strange.MatchCompletedNotify.rooms: object expected");
                    message.rooms = {};
                    for (var keys = Object.keys(object.rooms), i = 0; i < keys.length; ++i) {
                        if (typeof object.rooms[keys[i]] !== "object")
                            throw TypeError(".pb.strange.MatchCompletedNotify.rooms: object expected");
                        message.rooms[keys[i]] = $root.pb.strange.MatchCompletedNotify.value.fromObject(object.rooms[keys[i]]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a MatchCompletedNotify message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.strange.MatchCompletedNotify
             * @static
             * @param {pb.strange.MatchCompletedNotify} message MatchCompletedNotify
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MatchCompletedNotify.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.objects || options.defaults)
                    object.rooms = {};
                var keys2;
                if (message.rooms && (keys2 = Object.keys(message.rooms)).length) {
                    object.rooms = {};
                    for (var j = 0; j < keys2.length; ++j)
                        object.rooms[keys2[j]] = $root.pb.strange.MatchCompletedNotify.value.toObject(message.rooms[keys2[j]], options);
                }
                return object;
            };

            /**
             * Converts this MatchCompletedNotify to JSON.
             * @function toJSON
             * @memberof pb.strange.MatchCompletedNotify
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MatchCompletedNotify.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            MatchCompletedNotify.value = (function() {

                /**
                 * Properties of a value.
                 * @memberof pb.strange.MatchCompletedNotify
                 * @interface Ivalue
                 * @property {Array.<Long>|null} [users] value users
                 */

                /**
                 * Constructs a new value.
                 * @memberof pb.strange.MatchCompletedNotify
                 * @classdesc Represents a value.
                 * @implements Ivalue
                 * @constructor
                 * @param {pb.strange.MatchCompletedNotify.Ivalue=} [properties] Properties to set
                 */
                function value(properties) {
                    this.users = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * value users.
                 * @member {Array.<Long>} users
                 * @memberof pb.strange.MatchCompletedNotify.value
                 * @instance
                 */
                value.prototype.users = $util.emptyArray;

                /**
                 * Creates a new value instance using the specified properties.
                 * @function create
                 * @memberof pb.strange.MatchCompletedNotify.value
                 * @static
                 * @param {pb.strange.MatchCompletedNotify.Ivalue=} [properties] Properties to set
                 * @returns {pb.strange.MatchCompletedNotify.value} value instance
                 */
                value.create = function create(properties) {
                    return new value(properties);
                };

                /**
                 * Encodes the specified value message. Does not implicitly {@link pb.strange.MatchCompletedNotify.value.verify|verify} messages.
                 * @function encode
                 * @memberof pb.strange.MatchCompletedNotify.value
                 * @static
                 * @param {pb.strange.MatchCompletedNotify.Ivalue} message value message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                value.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.users != null && message.users.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (var i = 0; i < message.users.length; ++i)
                            writer.int64(message.users[i]);
                        writer.ldelim();
                    }
                    return writer;
                };

                /**
                 * Encodes the specified value message, length delimited. Does not implicitly {@link pb.strange.MatchCompletedNotify.value.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof pb.strange.MatchCompletedNotify.value
                 * @static
                 * @param {pb.strange.MatchCompletedNotify.Ivalue} message value message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                value.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a value message from the specified reader or buffer.
                 * @function decode
                 * @memberof pb.strange.MatchCompletedNotify.value
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {pb.strange.MatchCompletedNotify.value} value
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                value.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.strange.MatchCompletedNotify.value();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.users && message.users.length))
                                message.users = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.users.push(reader.int64());
                            } else
                                message.users.push(reader.int64());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a value message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof pb.strange.MatchCompletedNotify.value
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {pb.strange.MatchCompletedNotify.value} value
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                value.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a value message.
                 * @function verify
                 * @memberof pb.strange.MatchCompletedNotify.value
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                value.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.users != null && message.hasOwnProperty("users")) {
                        if (!Array.isArray(message.users))
                            return "users: array expected";
                        for (var i = 0; i < message.users.length; ++i)
                            if (!$util.isInteger(message.users[i]) && !(message.users[i] && $util.isInteger(message.users[i].low) && $util.isInteger(message.users[i].high)))
                                return "users: integer|Long[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a value message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof pb.strange.MatchCompletedNotify.value
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {pb.strange.MatchCompletedNotify.value} value
                 */
                value.fromObject = function fromObject(object) {
                    if (object instanceof $root.pb.strange.MatchCompletedNotify.value)
                        return object;
                    var message = new $root.pb.strange.MatchCompletedNotify.value();
                    if (object.users) {
                        if (!Array.isArray(object.users))
                            throw TypeError(".pb.strange.MatchCompletedNotify.value.users: array expected");
                        message.users = [];
                        for (var i = 0; i < object.users.length; ++i)
                            if ($util.Long)
                                (message.users[i] = $util.Long.fromValue(object.users[i])).unsigned = false;
                            else if (typeof object.users[i] === "string")
                                message.users[i] = parseInt(object.users[i], 10);
                            else if (typeof object.users[i] === "number")
                                message.users[i] = object.users[i];
                            else if (typeof object.users[i] === "object")
                                message.users[i] = new $util.LongBits(object.users[i].low >>> 0, object.users[i].high >>> 0).toNumber();
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a value message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof pb.strange.MatchCompletedNotify.value
                 * @static
                 * @param {pb.strange.MatchCompletedNotify.value} message value
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                value.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.users = [];
                    if (message.users && message.users.length) {
                        object.users = [];
                        for (var j = 0; j < message.users.length; ++j)
                            if (typeof message.users[j] === "number")
                                object.users[j] = options.longs === String ? String(message.users[j]) : message.users[j];
                            else
                                object.users[j] = options.longs === String ? $util.Long.prototype.toString.call(message.users[j]) : options.longs === Number ? new $util.LongBits(message.users[j].low >>> 0, message.users[j].high >>> 0).toNumber() : message.users[j];
                    }
                    return object;
                };

                /**
                 * Converts this value to JSON.
                 * @function toJSON
                 * @memberof pb.strange.MatchCompletedNotify.value
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                value.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return value;
            })();

            return MatchCompletedNotify;
        })();

        strange.StrangeService = (function() {

            /**
             * Constructs a new StrangeService service.
             * @memberof pb.strange
             * @classdesc Represents a StrangeService
             * @extends $protobuf.rpc.Service
             * @constructor
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             */
            function StrangeService(rpcImpl, requestDelimited, responseDelimited) {
                $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
            }

            (StrangeService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = StrangeService;

            /**
             * Creates new StrangeService service using the specified rpc implementation.
             * @function create
             * @memberof pb.strange.StrangeService
             * @static
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             * @returns {StrangeService} RPC service. Useful where requests and/or responses are streamed.
             */
            StrangeService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                return new this(rpcImpl, requestDelimited, responseDelimited);
            };

            /**
             * Callback as used by {@link pb.strange.StrangeService#hireStrangers}.
             * @memberof pb.strange.StrangeService
             * @typedef HireStrangersCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pb.strange.HireStrageResp} [response] HireStrageResp
             */

            /**
             * Calls HireStrangers.
             * @function hireStrangers
             * @memberof pb.strange.StrangeService
             * @instance
             * @param {pb.strange.IHireStrangeReq} request HireStrangeReq message or plain object
             * @param {pb.strange.StrangeService.HireStrangersCallback} callback Node-style callback called with the error, if any, and HireStrageResp
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(StrangeService.prototype.hireStrangers = function hireStrangers(request, callback) {
                return this.rpcCall(hireStrangers, $root.pb.strange.HireStrangeReq, $root.pb.strange.HireStrageResp, request, callback);
            }, "name", { value: "HireStrangers" });

            /**
             * Calls HireStrangers.
             * @function hireStrangers
             * @memberof pb.strange.StrangeService
             * @instance
             * @param {pb.strange.IHireStrangeReq} request HireStrangeReq message or plain object
             * @returns {Promise<pb.strange.HireStrageResp>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pb.strange.StrangeService#matchCompleted}.
             * @memberof pb.strange.StrangeService
             * @typedef MatchCompletedCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {google.protobuf.Empty} [response] Empty
             */

            /**
             * Calls MatchCompleted.
             * @function matchCompleted
             * @memberof pb.strange.StrangeService
             * @instance
             * @param {pb.strange.IMatchCompletedNotify} request MatchCompletedNotify message or plain object
             * @param {pb.strange.StrangeService.MatchCompletedCallback} callback Node-style callback called with the error, if any, and Empty
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(StrangeService.prototype.matchCompleted = function matchCompleted(request, callback) {
                return this.rpcCall(matchCompleted, $root.pb.strange.MatchCompletedNotify, $root.google.protobuf.Empty, request, callback);
            }, "name", { value: "MatchCompleted" });

            /**
             * Calls MatchCompleted.
             * @function matchCompleted
             * @memberof pb.strange.StrangeService
             * @instance
             * @param {pb.strange.IMatchCompletedNotify} request MatchCompletedNotify message or plain object
             * @returns {Promise<google.protobuf.Empty>} Promise
             * @variation 2
             */

            return StrangeService;
        })();

        return strange;
    })();

    pb.cenarius = (function() {

        /**
         * Namespace cenarius.
         * @memberof pb
         * @namespace
         */
        var cenarius = {};

        cenarius.GetPlayerInfoReq = (function() {

            /**
             * Properties of a GetPlayerInfoReq.
             * @memberof pb.cenarius
             * @interface IGetPlayerInfoReq
             * @property {Array.<Long>|null} [userIds] GetPlayerInfoReq userIds
             */

            /**
             * Constructs a new GetPlayerInfoReq.
             * @memberof pb.cenarius
             * @classdesc Represents a GetPlayerInfoReq.
             * @implements IGetPlayerInfoReq
             * @constructor
             * @param {pb.cenarius.IGetPlayerInfoReq=} [properties] Properties to set
             */
            function GetPlayerInfoReq(properties) {
                this.userIds = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GetPlayerInfoReq userIds.
             * @member {Array.<Long>} userIds
             * @memberof pb.cenarius.GetPlayerInfoReq
             * @instance
             */
            GetPlayerInfoReq.prototype.userIds = $util.emptyArray;

            /**
             * Creates a new GetPlayerInfoReq instance using the specified properties.
             * @function create
             * @memberof pb.cenarius.GetPlayerInfoReq
             * @static
             * @param {pb.cenarius.IGetPlayerInfoReq=} [properties] Properties to set
             * @returns {pb.cenarius.GetPlayerInfoReq} GetPlayerInfoReq instance
             */
            GetPlayerInfoReq.create = function create(properties) {
                return new GetPlayerInfoReq(properties);
            };

            /**
             * Encodes the specified GetPlayerInfoReq message. Does not implicitly {@link pb.cenarius.GetPlayerInfoReq.verify|verify} messages.
             * @function encode
             * @memberof pb.cenarius.GetPlayerInfoReq
             * @static
             * @param {pb.cenarius.IGetPlayerInfoReq} message GetPlayerInfoReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetPlayerInfoReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userIds != null && message.userIds.length) {
                    writer.uint32(/* id 1, wireType 2 =*/10).fork();
                    for (var i = 0; i < message.userIds.length; ++i)
                        writer.int64(message.userIds[i]);
                    writer.ldelim();
                }
                return writer;
            };

            /**
             * Encodes the specified GetPlayerInfoReq message, length delimited. Does not implicitly {@link pb.cenarius.GetPlayerInfoReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.cenarius.GetPlayerInfoReq
             * @static
             * @param {pb.cenarius.IGetPlayerInfoReq} message GetPlayerInfoReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetPlayerInfoReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetPlayerInfoReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.cenarius.GetPlayerInfoReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.cenarius.GetPlayerInfoReq} GetPlayerInfoReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetPlayerInfoReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.cenarius.GetPlayerInfoReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.userIds && message.userIds.length))
                            message.userIds = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.userIds.push(reader.int64());
                        } else
                            message.userIds.push(reader.int64());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetPlayerInfoReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.cenarius.GetPlayerInfoReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.cenarius.GetPlayerInfoReq} GetPlayerInfoReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetPlayerInfoReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetPlayerInfoReq message.
             * @function verify
             * @memberof pb.cenarius.GetPlayerInfoReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetPlayerInfoReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userIds != null && message.hasOwnProperty("userIds")) {
                    if (!Array.isArray(message.userIds))
                        return "userIds: array expected";
                    for (var i = 0; i < message.userIds.length; ++i)
                        if (!$util.isInteger(message.userIds[i]) && !(message.userIds[i] && $util.isInteger(message.userIds[i].low) && $util.isInteger(message.userIds[i].high)))
                            return "userIds: integer|Long[] expected";
                }
                return null;
            };

            /**
             * Creates a GetPlayerInfoReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.cenarius.GetPlayerInfoReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.cenarius.GetPlayerInfoReq} GetPlayerInfoReq
             */
            GetPlayerInfoReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.cenarius.GetPlayerInfoReq)
                    return object;
                var message = new $root.pb.cenarius.GetPlayerInfoReq();
                if (object.userIds) {
                    if (!Array.isArray(object.userIds))
                        throw TypeError(".pb.cenarius.GetPlayerInfoReq.userIds: array expected");
                    message.userIds = [];
                    for (var i = 0; i < object.userIds.length; ++i)
                        if ($util.Long)
                            (message.userIds[i] = $util.Long.fromValue(object.userIds[i])).unsigned = false;
                        else if (typeof object.userIds[i] === "string")
                            message.userIds[i] = parseInt(object.userIds[i], 10);
                        else if (typeof object.userIds[i] === "number")
                            message.userIds[i] = object.userIds[i];
                        else if (typeof object.userIds[i] === "object")
                            message.userIds[i] = new $util.LongBits(object.userIds[i].low >>> 0, object.userIds[i].high >>> 0).toNumber();
                }
                return message;
            };

            /**
             * Creates a plain object from a GetPlayerInfoReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.cenarius.GetPlayerInfoReq
             * @static
             * @param {pb.cenarius.GetPlayerInfoReq} message GetPlayerInfoReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetPlayerInfoReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.userIds = [];
                if (message.userIds && message.userIds.length) {
                    object.userIds = [];
                    for (var j = 0; j < message.userIds.length; ++j)
                        if (typeof message.userIds[j] === "number")
                            object.userIds[j] = options.longs === String ? String(message.userIds[j]) : message.userIds[j];
                        else
                            object.userIds[j] = options.longs === String ? $util.Long.prototype.toString.call(message.userIds[j]) : options.longs === Number ? new $util.LongBits(message.userIds[j].low >>> 0, message.userIds[j].high >>> 0).toNumber() : message.userIds[j];
                }
                return object;
            };

            /**
             * Converts this GetPlayerInfoReq to JSON.
             * @function toJSON
             * @memberof pb.cenarius.GetPlayerInfoReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetPlayerInfoReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GetPlayerInfoReq;
        })();

        cenarius.GetPlayerInfoRsp = (function() {

            /**
             * Properties of a GetPlayerInfoRsp.
             * @memberof pb.cenarius
             * @interface IGetPlayerInfoRsp
             * @property {Array.<pb.common.IPlayerInfo>|null} [players] GetPlayerInfoRsp players
             */

            /**
             * Constructs a new GetPlayerInfoRsp.
             * @memberof pb.cenarius
             * @classdesc Represents a GetPlayerInfoRsp.
             * @implements IGetPlayerInfoRsp
             * @constructor
             * @param {pb.cenarius.IGetPlayerInfoRsp=} [properties] Properties to set
             */
            function GetPlayerInfoRsp(properties) {
                this.players = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GetPlayerInfoRsp players.
             * @member {Array.<pb.common.IPlayerInfo>} players
             * @memberof pb.cenarius.GetPlayerInfoRsp
             * @instance
             */
            GetPlayerInfoRsp.prototype.players = $util.emptyArray;

            /**
             * Creates a new GetPlayerInfoRsp instance using the specified properties.
             * @function create
             * @memberof pb.cenarius.GetPlayerInfoRsp
             * @static
             * @param {pb.cenarius.IGetPlayerInfoRsp=} [properties] Properties to set
             * @returns {pb.cenarius.GetPlayerInfoRsp} GetPlayerInfoRsp instance
             */
            GetPlayerInfoRsp.create = function create(properties) {
                return new GetPlayerInfoRsp(properties);
            };

            /**
             * Encodes the specified GetPlayerInfoRsp message. Does not implicitly {@link pb.cenarius.GetPlayerInfoRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.cenarius.GetPlayerInfoRsp
             * @static
             * @param {pb.cenarius.IGetPlayerInfoRsp} message GetPlayerInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetPlayerInfoRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.players != null && message.players.length)
                    for (var i = 0; i < message.players.length; ++i)
                        $root.pb.common.PlayerInfo.encode(message.players[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GetPlayerInfoRsp message, length delimited. Does not implicitly {@link pb.cenarius.GetPlayerInfoRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.cenarius.GetPlayerInfoRsp
             * @static
             * @param {pb.cenarius.IGetPlayerInfoRsp} message GetPlayerInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetPlayerInfoRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetPlayerInfoRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.cenarius.GetPlayerInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.cenarius.GetPlayerInfoRsp} GetPlayerInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetPlayerInfoRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.cenarius.GetPlayerInfoRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.players && message.players.length))
                            message.players = [];
                        message.players.push($root.pb.common.PlayerInfo.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetPlayerInfoRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.cenarius.GetPlayerInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.cenarius.GetPlayerInfoRsp} GetPlayerInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetPlayerInfoRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetPlayerInfoRsp message.
             * @function verify
             * @memberof pb.cenarius.GetPlayerInfoRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetPlayerInfoRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.players != null && message.hasOwnProperty("players")) {
                    if (!Array.isArray(message.players))
                        return "players: array expected";
                    for (var i = 0; i < message.players.length; ++i) {
                        var error = $root.pb.common.PlayerInfo.verify(message.players[i]);
                        if (error)
                            return "players." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GetPlayerInfoRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.cenarius.GetPlayerInfoRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.cenarius.GetPlayerInfoRsp} GetPlayerInfoRsp
             */
            GetPlayerInfoRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.cenarius.GetPlayerInfoRsp)
                    return object;
                var message = new $root.pb.cenarius.GetPlayerInfoRsp();
                if (object.players) {
                    if (!Array.isArray(object.players))
                        throw TypeError(".pb.cenarius.GetPlayerInfoRsp.players: array expected");
                    message.players = [];
                    for (var i = 0; i < object.players.length; ++i) {
                        if (typeof object.players[i] !== "object")
                            throw TypeError(".pb.cenarius.GetPlayerInfoRsp.players: object expected");
                        message.players[i] = $root.pb.common.PlayerInfo.fromObject(object.players[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GetPlayerInfoRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.cenarius.GetPlayerInfoRsp
             * @static
             * @param {pb.cenarius.GetPlayerInfoRsp} message GetPlayerInfoRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetPlayerInfoRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.players = [];
                if (message.players && message.players.length) {
                    object.players = [];
                    for (var j = 0; j < message.players.length; ++j)
                        object.players[j] = $root.pb.common.PlayerInfo.toObject(message.players[j], options);
                }
                return object;
            };

            /**
             * Converts this GetPlayerInfoRsp to JSON.
             * @function toJSON
             * @memberof pb.cenarius.GetPlayerInfoRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetPlayerInfoRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GetPlayerInfoRsp;
        })();

        cenarius.UpdateUserCoinReq = (function() {

            /**
             * Properties of an UpdateUserCoinReq.
             * @memberof pb.cenarius
             * @interface IUpdateUserCoinReq
             * @property {Long|null} [UserID] UpdateUserCoinReq UserID
             * @property {Long|null} [Coin] UpdateUserCoinReq Coin
             * @property {string|null} [Comment] UpdateUserCoinReq Comment
             */

            /**
             * Constructs a new UpdateUserCoinReq.
             * @memberof pb.cenarius
             * @classdesc Represents an UpdateUserCoinReq.
             * @implements IUpdateUserCoinReq
             * @constructor
             * @param {pb.cenarius.IUpdateUserCoinReq=} [properties] Properties to set
             */
            function UpdateUserCoinReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UpdateUserCoinReq UserID.
             * @member {Long} UserID
             * @memberof pb.cenarius.UpdateUserCoinReq
             * @instance
             */
            UpdateUserCoinReq.prototype.UserID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * UpdateUserCoinReq Coin.
             * @member {Long} Coin
             * @memberof pb.cenarius.UpdateUserCoinReq
             * @instance
             */
            UpdateUserCoinReq.prototype.Coin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * UpdateUserCoinReq Comment.
             * @member {string} Comment
             * @memberof pb.cenarius.UpdateUserCoinReq
             * @instance
             */
            UpdateUserCoinReq.prototype.Comment = "";

            /**
             * Creates a new UpdateUserCoinReq instance using the specified properties.
             * @function create
             * @memberof pb.cenarius.UpdateUserCoinReq
             * @static
             * @param {pb.cenarius.IUpdateUserCoinReq=} [properties] Properties to set
             * @returns {pb.cenarius.UpdateUserCoinReq} UpdateUserCoinReq instance
             */
            UpdateUserCoinReq.create = function create(properties) {
                return new UpdateUserCoinReq(properties);
            };

            /**
             * Encodes the specified UpdateUserCoinReq message. Does not implicitly {@link pb.cenarius.UpdateUserCoinReq.verify|verify} messages.
             * @function encode
             * @memberof pb.cenarius.UpdateUserCoinReq
             * @static
             * @param {pb.cenarius.IUpdateUserCoinReq} message UpdateUserCoinReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateUserCoinReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.UserID != null && message.hasOwnProperty("UserID"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.UserID);
                if (message.Coin != null && message.hasOwnProperty("Coin"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.Coin);
                if (message.Comment != null && message.hasOwnProperty("Comment"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.Comment);
                return writer;
            };

            /**
             * Encodes the specified UpdateUserCoinReq message, length delimited. Does not implicitly {@link pb.cenarius.UpdateUserCoinReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.cenarius.UpdateUserCoinReq
             * @static
             * @param {pb.cenarius.IUpdateUserCoinReq} message UpdateUserCoinReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateUserCoinReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UpdateUserCoinReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.cenarius.UpdateUserCoinReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.cenarius.UpdateUserCoinReq} UpdateUserCoinReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateUserCoinReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.cenarius.UpdateUserCoinReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.UserID = reader.int64();
                        break;
                    case 2:
                        message.Coin = reader.int64();
                        break;
                    case 3:
                        message.Comment = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an UpdateUserCoinReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.cenarius.UpdateUserCoinReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.cenarius.UpdateUserCoinReq} UpdateUserCoinReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateUserCoinReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UpdateUserCoinReq message.
             * @function verify
             * @memberof pb.cenarius.UpdateUserCoinReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UpdateUserCoinReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.UserID != null && message.hasOwnProperty("UserID"))
                    if (!$util.isInteger(message.UserID) && !(message.UserID && $util.isInteger(message.UserID.low) && $util.isInteger(message.UserID.high)))
                        return "UserID: integer|Long expected";
                if (message.Coin != null && message.hasOwnProperty("Coin"))
                    if (!$util.isInteger(message.Coin) && !(message.Coin && $util.isInteger(message.Coin.low) && $util.isInteger(message.Coin.high)))
                        return "Coin: integer|Long expected";
                if (message.Comment != null && message.hasOwnProperty("Comment"))
                    if (!$util.isString(message.Comment))
                        return "Comment: string expected";
                return null;
            };

            /**
             * Creates an UpdateUserCoinReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.cenarius.UpdateUserCoinReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.cenarius.UpdateUserCoinReq} UpdateUserCoinReq
             */
            UpdateUserCoinReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.cenarius.UpdateUserCoinReq)
                    return object;
                var message = new $root.pb.cenarius.UpdateUserCoinReq();
                if (object.UserID != null)
                    if ($util.Long)
                        (message.UserID = $util.Long.fromValue(object.UserID)).unsigned = false;
                    else if (typeof object.UserID === "string")
                        message.UserID = parseInt(object.UserID, 10);
                    else if (typeof object.UserID === "number")
                        message.UserID = object.UserID;
                    else if (typeof object.UserID === "object")
                        message.UserID = new $util.LongBits(object.UserID.low >>> 0, object.UserID.high >>> 0).toNumber();
                if (object.Coin != null)
                    if ($util.Long)
                        (message.Coin = $util.Long.fromValue(object.Coin)).unsigned = false;
                    else if (typeof object.Coin === "string")
                        message.Coin = parseInt(object.Coin, 10);
                    else if (typeof object.Coin === "number")
                        message.Coin = object.Coin;
                    else if (typeof object.Coin === "object")
                        message.Coin = new $util.LongBits(object.Coin.low >>> 0, object.Coin.high >>> 0).toNumber();
                if (object.Comment != null)
                    message.Comment = String(object.Comment);
                return message;
            };

            /**
             * Creates a plain object from an UpdateUserCoinReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.cenarius.UpdateUserCoinReq
             * @static
             * @param {pb.cenarius.UpdateUserCoinReq} message UpdateUserCoinReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UpdateUserCoinReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.UserID = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.UserID = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.Coin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.Coin = options.longs === String ? "0" : 0;
                    object.Comment = "";
                }
                if (message.UserID != null && message.hasOwnProperty("UserID"))
                    if (typeof message.UserID === "number")
                        object.UserID = options.longs === String ? String(message.UserID) : message.UserID;
                    else
                        object.UserID = options.longs === String ? $util.Long.prototype.toString.call(message.UserID) : options.longs === Number ? new $util.LongBits(message.UserID.low >>> 0, message.UserID.high >>> 0).toNumber() : message.UserID;
                if (message.Coin != null && message.hasOwnProperty("Coin"))
                    if (typeof message.Coin === "number")
                        object.Coin = options.longs === String ? String(message.Coin) : message.Coin;
                    else
                        object.Coin = options.longs === String ? $util.Long.prototype.toString.call(message.Coin) : options.longs === Number ? new $util.LongBits(message.Coin.low >>> 0, message.Coin.high >>> 0).toNumber() : message.Coin;
                if (message.Comment != null && message.hasOwnProperty("Comment"))
                    object.Comment = message.Comment;
                return object;
            };

            /**
             * Converts this UpdateUserCoinReq to JSON.
             * @function toJSON
             * @memberof pb.cenarius.UpdateUserCoinReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UpdateUserCoinReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return UpdateUserCoinReq;
        })();

        cenarius.UpdateUserCoinResp = (function() {

            /**
             * Properties of an UpdateUserCoinResp.
             * @memberof pb.cenarius
             * @interface IUpdateUserCoinResp
             * @property {Long|null} [UserID] UpdateUserCoinResp UserID
             * @property {Long|null} [Coin] UpdateUserCoinResp Coin
             */

            /**
             * Constructs a new UpdateUserCoinResp.
             * @memberof pb.cenarius
             * @classdesc Represents an UpdateUserCoinResp.
             * @implements IUpdateUserCoinResp
             * @constructor
             * @param {pb.cenarius.IUpdateUserCoinResp=} [properties] Properties to set
             */
            function UpdateUserCoinResp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UpdateUserCoinResp UserID.
             * @member {Long} UserID
             * @memberof pb.cenarius.UpdateUserCoinResp
             * @instance
             */
            UpdateUserCoinResp.prototype.UserID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * UpdateUserCoinResp Coin.
             * @member {Long} Coin
             * @memberof pb.cenarius.UpdateUserCoinResp
             * @instance
             */
            UpdateUserCoinResp.prototype.Coin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new UpdateUserCoinResp instance using the specified properties.
             * @function create
             * @memberof pb.cenarius.UpdateUserCoinResp
             * @static
             * @param {pb.cenarius.IUpdateUserCoinResp=} [properties] Properties to set
             * @returns {pb.cenarius.UpdateUserCoinResp} UpdateUserCoinResp instance
             */
            UpdateUserCoinResp.create = function create(properties) {
                return new UpdateUserCoinResp(properties);
            };

            /**
             * Encodes the specified UpdateUserCoinResp message. Does not implicitly {@link pb.cenarius.UpdateUserCoinResp.verify|verify} messages.
             * @function encode
             * @memberof pb.cenarius.UpdateUserCoinResp
             * @static
             * @param {pb.cenarius.IUpdateUserCoinResp} message UpdateUserCoinResp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateUserCoinResp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.UserID != null && message.hasOwnProperty("UserID"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.UserID);
                if (message.Coin != null && message.hasOwnProperty("Coin"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.Coin);
                return writer;
            };

            /**
             * Encodes the specified UpdateUserCoinResp message, length delimited. Does not implicitly {@link pb.cenarius.UpdateUserCoinResp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.cenarius.UpdateUserCoinResp
             * @static
             * @param {pb.cenarius.IUpdateUserCoinResp} message UpdateUserCoinResp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateUserCoinResp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UpdateUserCoinResp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.cenarius.UpdateUserCoinResp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.cenarius.UpdateUserCoinResp} UpdateUserCoinResp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateUserCoinResp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.cenarius.UpdateUserCoinResp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.UserID = reader.int64();
                        break;
                    case 2:
                        message.Coin = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an UpdateUserCoinResp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.cenarius.UpdateUserCoinResp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.cenarius.UpdateUserCoinResp} UpdateUserCoinResp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateUserCoinResp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UpdateUserCoinResp message.
             * @function verify
             * @memberof pb.cenarius.UpdateUserCoinResp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UpdateUserCoinResp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.UserID != null && message.hasOwnProperty("UserID"))
                    if (!$util.isInteger(message.UserID) && !(message.UserID && $util.isInteger(message.UserID.low) && $util.isInteger(message.UserID.high)))
                        return "UserID: integer|Long expected";
                if (message.Coin != null && message.hasOwnProperty("Coin"))
                    if (!$util.isInteger(message.Coin) && !(message.Coin && $util.isInteger(message.Coin.low) && $util.isInteger(message.Coin.high)))
                        return "Coin: integer|Long expected";
                return null;
            };

            /**
             * Creates an UpdateUserCoinResp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.cenarius.UpdateUserCoinResp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.cenarius.UpdateUserCoinResp} UpdateUserCoinResp
             */
            UpdateUserCoinResp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.cenarius.UpdateUserCoinResp)
                    return object;
                var message = new $root.pb.cenarius.UpdateUserCoinResp();
                if (object.UserID != null)
                    if ($util.Long)
                        (message.UserID = $util.Long.fromValue(object.UserID)).unsigned = false;
                    else if (typeof object.UserID === "string")
                        message.UserID = parseInt(object.UserID, 10);
                    else if (typeof object.UserID === "number")
                        message.UserID = object.UserID;
                    else if (typeof object.UserID === "object")
                        message.UserID = new $util.LongBits(object.UserID.low >>> 0, object.UserID.high >>> 0).toNumber();
                if (object.Coin != null)
                    if ($util.Long)
                        (message.Coin = $util.Long.fromValue(object.Coin)).unsigned = false;
                    else if (typeof object.Coin === "string")
                        message.Coin = parseInt(object.Coin, 10);
                    else if (typeof object.Coin === "number")
                        message.Coin = object.Coin;
                    else if (typeof object.Coin === "object")
                        message.Coin = new $util.LongBits(object.Coin.low >>> 0, object.Coin.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from an UpdateUserCoinResp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.cenarius.UpdateUserCoinResp
             * @static
             * @param {pb.cenarius.UpdateUserCoinResp} message UpdateUserCoinResp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UpdateUserCoinResp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.UserID = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.UserID = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.Coin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.Coin = options.longs === String ? "0" : 0;
                }
                if (message.UserID != null && message.hasOwnProperty("UserID"))
                    if (typeof message.UserID === "number")
                        object.UserID = options.longs === String ? String(message.UserID) : message.UserID;
                    else
                        object.UserID = options.longs === String ? $util.Long.prototype.toString.call(message.UserID) : options.longs === Number ? new $util.LongBits(message.UserID.low >>> 0, message.UserID.high >>> 0).toNumber() : message.UserID;
                if (message.Coin != null && message.hasOwnProperty("Coin"))
                    if (typeof message.Coin === "number")
                        object.Coin = options.longs === String ? String(message.Coin) : message.Coin;
                    else
                        object.Coin = options.longs === String ? $util.Long.prototype.toString.call(message.Coin) : options.longs === Number ? new $util.LongBits(message.Coin.low >>> 0, message.Coin.high >>> 0).toNumber() : message.Coin;
                return object;
            };

            /**
             * Converts this UpdateUserCoinResp to JSON.
             * @function toJSON
             * @memberof pb.cenarius.UpdateUserCoinResp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UpdateUserCoinResp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return UpdateUserCoinResp;
        })();

        cenarius.BatchUpdateCoinReq = (function() {

            /**
             * Properties of a BatchUpdateCoinReq.
             * @memberof pb.cenarius
             * @interface IBatchUpdateCoinReq
             * @property {Array.<pb.cenarius.IUpdateUserCoinReq>|null} [Rows] BatchUpdateCoinReq Rows
             */

            /**
             * Constructs a new BatchUpdateCoinReq.
             * @memberof pb.cenarius
             * @classdesc Represents a BatchUpdateCoinReq.
             * @implements IBatchUpdateCoinReq
             * @constructor
             * @param {pb.cenarius.IBatchUpdateCoinReq=} [properties] Properties to set
             */
            function BatchUpdateCoinReq(properties) {
                this.Rows = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BatchUpdateCoinReq Rows.
             * @member {Array.<pb.cenarius.IUpdateUserCoinReq>} Rows
             * @memberof pb.cenarius.BatchUpdateCoinReq
             * @instance
             */
            BatchUpdateCoinReq.prototype.Rows = $util.emptyArray;

            /**
             * Creates a new BatchUpdateCoinReq instance using the specified properties.
             * @function create
             * @memberof pb.cenarius.BatchUpdateCoinReq
             * @static
             * @param {pb.cenarius.IBatchUpdateCoinReq=} [properties] Properties to set
             * @returns {pb.cenarius.BatchUpdateCoinReq} BatchUpdateCoinReq instance
             */
            BatchUpdateCoinReq.create = function create(properties) {
                return new BatchUpdateCoinReq(properties);
            };

            /**
             * Encodes the specified BatchUpdateCoinReq message. Does not implicitly {@link pb.cenarius.BatchUpdateCoinReq.verify|verify} messages.
             * @function encode
             * @memberof pb.cenarius.BatchUpdateCoinReq
             * @static
             * @param {pb.cenarius.IBatchUpdateCoinReq} message BatchUpdateCoinReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BatchUpdateCoinReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.Rows != null && message.Rows.length)
                    for (var i = 0; i < message.Rows.length; ++i)
                        $root.pb.cenarius.UpdateUserCoinReq.encode(message.Rows[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified BatchUpdateCoinReq message, length delimited. Does not implicitly {@link pb.cenarius.BatchUpdateCoinReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.cenarius.BatchUpdateCoinReq
             * @static
             * @param {pb.cenarius.IBatchUpdateCoinReq} message BatchUpdateCoinReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BatchUpdateCoinReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BatchUpdateCoinReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.cenarius.BatchUpdateCoinReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.cenarius.BatchUpdateCoinReq} BatchUpdateCoinReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BatchUpdateCoinReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.cenarius.BatchUpdateCoinReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.Rows && message.Rows.length))
                            message.Rows = [];
                        message.Rows.push($root.pb.cenarius.UpdateUserCoinReq.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BatchUpdateCoinReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.cenarius.BatchUpdateCoinReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.cenarius.BatchUpdateCoinReq} BatchUpdateCoinReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BatchUpdateCoinReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BatchUpdateCoinReq message.
             * @function verify
             * @memberof pb.cenarius.BatchUpdateCoinReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BatchUpdateCoinReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.Rows != null && message.hasOwnProperty("Rows")) {
                    if (!Array.isArray(message.Rows))
                        return "Rows: array expected";
                    for (var i = 0; i < message.Rows.length; ++i) {
                        var error = $root.pb.cenarius.UpdateUserCoinReq.verify(message.Rows[i]);
                        if (error)
                            return "Rows." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a BatchUpdateCoinReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.cenarius.BatchUpdateCoinReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.cenarius.BatchUpdateCoinReq} BatchUpdateCoinReq
             */
            BatchUpdateCoinReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.cenarius.BatchUpdateCoinReq)
                    return object;
                var message = new $root.pb.cenarius.BatchUpdateCoinReq();
                if (object.Rows) {
                    if (!Array.isArray(object.Rows))
                        throw TypeError(".pb.cenarius.BatchUpdateCoinReq.Rows: array expected");
                    message.Rows = [];
                    for (var i = 0; i < object.Rows.length; ++i) {
                        if (typeof object.Rows[i] !== "object")
                            throw TypeError(".pb.cenarius.BatchUpdateCoinReq.Rows: object expected");
                        message.Rows[i] = $root.pb.cenarius.UpdateUserCoinReq.fromObject(object.Rows[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a BatchUpdateCoinReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.cenarius.BatchUpdateCoinReq
             * @static
             * @param {pb.cenarius.BatchUpdateCoinReq} message BatchUpdateCoinReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BatchUpdateCoinReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.Rows = [];
                if (message.Rows && message.Rows.length) {
                    object.Rows = [];
                    for (var j = 0; j < message.Rows.length; ++j)
                        object.Rows[j] = $root.pb.cenarius.UpdateUserCoinReq.toObject(message.Rows[j], options);
                }
                return object;
            };

            /**
             * Converts this BatchUpdateCoinReq to JSON.
             * @function toJSON
             * @memberof pb.cenarius.BatchUpdateCoinReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BatchUpdateCoinReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BatchUpdateCoinReq;
        })();

        cenarius.BatchUpdateCoinResp = (function() {

            /**
             * Properties of a BatchUpdateCoinResp.
             * @memberof pb.cenarius
             * @interface IBatchUpdateCoinResp
             * @property {Array.<Long>|null} [SuccessUsers] BatchUpdateCoinResp SuccessUsers
             * @property {Array.<Long>|null} [FaliedUsers] BatchUpdateCoinResp FaliedUsers
             * @property {Object.<string,pb.cenarius.IUpdateUserCoinResp>|null} [results] BatchUpdateCoinResp results
             */

            /**
             * Constructs a new BatchUpdateCoinResp.
             * @memberof pb.cenarius
             * @classdesc Represents a BatchUpdateCoinResp.
             * @implements IBatchUpdateCoinResp
             * @constructor
             * @param {pb.cenarius.IBatchUpdateCoinResp=} [properties] Properties to set
             */
            function BatchUpdateCoinResp(properties) {
                this.SuccessUsers = [];
                this.FaliedUsers = [];
                this.results = {};
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BatchUpdateCoinResp SuccessUsers.
             * @member {Array.<Long>} SuccessUsers
             * @memberof pb.cenarius.BatchUpdateCoinResp
             * @instance
             */
            BatchUpdateCoinResp.prototype.SuccessUsers = $util.emptyArray;

            /**
             * BatchUpdateCoinResp FaliedUsers.
             * @member {Array.<Long>} FaliedUsers
             * @memberof pb.cenarius.BatchUpdateCoinResp
             * @instance
             */
            BatchUpdateCoinResp.prototype.FaliedUsers = $util.emptyArray;

            /**
             * BatchUpdateCoinResp results.
             * @member {Object.<string,pb.cenarius.IUpdateUserCoinResp>} results
             * @memberof pb.cenarius.BatchUpdateCoinResp
             * @instance
             */
            BatchUpdateCoinResp.prototype.results = $util.emptyObject;

            /**
             * Creates a new BatchUpdateCoinResp instance using the specified properties.
             * @function create
             * @memberof pb.cenarius.BatchUpdateCoinResp
             * @static
             * @param {pb.cenarius.IBatchUpdateCoinResp=} [properties] Properties to set
             * @returns {pb.cenarius.BatchUpdateCoinResp} BatchUpdateCoinResp instance
             */
            BatchUpdateCoinResp.create = function create(properties) {
                return new BatchUpdateCoinResp(properties);
            };

            /**
             * Encodes the specified BatchUpdateCoinResp message. Does not implicitly {@link pb.cenarius.BatchUpdateCoinResp.verify|verify} messages.
             * @function encode
             * @memberof pb.cenarius.BatchUpdateCoinResp
             * @static
             * @param {pb.cenarius.IBatchUpdateCoinResp} message BatchUpdateCoinResp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BatchUpdateCoinResp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.SuccessUsers != null && message.SuccessUsers.length) {
                    writer.uint32(/* id 1, wireType 2 =*/10).fork();
                    for (var i = 0; i < message.SuccessUsers.length; ++i)
                        writer.int64(message.SuccessUsers[i]);
                    writer.ldelim();
                }
                if (message.FaliedUsers != null && message.FaliedUsers.length) {
                    writer.uint32(/* id 2, wireType 2 =*/18).fork();
                    for (var i = 0; i < message.FaliedUsers.length; ++i)
                        writer.int64(message.FaliedUsers[i]);
                    writer.ldelim();
                }
                if (message.results != null && message.hasOwnProperty("results"))
                    for (var keys = Object.keys(message.results), i = 0; i < keys.length; ++i) {
                        writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 0 =*/8).int64(keys[i]);
                        $root.pb.cenarius.UpdateUserCoinResp.encode(message.results[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                    }
                return writer;
            };

            /**
             * Encodes the specified BatchUpdateCoinResp message, length delimited. Does not implicitly {@link pb.cenarius.BatchUpdateCoinResp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.cenarius.BatchUpdateCoinResp
             * @static
             * @param {pb.cenarius.IBatchUpdateCoinResp} message BatchUpdateCoinResp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BatchUpdateCoinResp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BatchUpdateCoinResp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.cenarius.BatchUpdateCoinResp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.cenarius.BatchUpdateCoinResp} BatchUpdateCoinResp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BatchUpdateCoinResp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.cenarius.BatchUpdateCoinResp(), key;
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.SuccessUsers && message.SuccessUsers.length))
                            message.SuccessUsers = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.SuccessUsers.push(reader.int64());
                        } else
                            message.SuccessUsers.push(reader.int64());
                        break;
                    case 2:
                        if (!(message.FaliedUsers && message.FaliedUsers.length))
                            message.FaliedUsers = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.FaliedUsers.push(reader.int64());
                        } else
                            message.FaliedUsers.push(reader.int64());
                        break;
                    case 3:
                        reader.skip().pos++;
                        if (message.results === $util.emptyObject)
                            message.results = {};
                        key = reader.int64();
                        reader.pos++;
                        message.results[typeof key === "object" ? $util.longToHash(key) : key] = $root.pb.cenarius.UpdateUserCoinResp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BatchUpdateCoinResp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.cenarius.BatchUpdateCoinResp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.cenarius.BatchUpdateCoinResp} BatchUpdateCoinResp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BatchUpdateCoinResp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BatchUpdateCoinResp message.
             * @function verify
             * @memberof pb.cenarius.BatchUpdateCoinResp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BatchUpdateCoinResp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.SuccessUsers != null && message.hasOwnProperty("SuccessUsers")) {
                    if (!Array.isArray(message.SuccessUsers))
                        return "SuccessUsers: array expected";
                    for (var i = 0; i < message.SuccessUsers.length; ++i)
                        if (!$util.isInteger(message.SuccessUsers[i]) && !(message.SuccessUsers[i] && $util.isInteger(message.SuccessUsers[i].low) && $util.isInteger(message.SuccessUsers[i].high)))
                            return "SuccessUsers: integer|Long[] expected";
                }
                if (message.FaliedUsers != null && message.hasOwnProperty("FaliedUsers")) {
                    if (!Array.isArray(message.FaliedUsers))
                        return "FaliedUsers: array expected";
                    for (var i = 0; i < message.FaliedUsers.length; ++i)
                        if (!$util.isInteger(message.FaliedUsers[i]) && !(message.FaliedUsers[i] && $util.isInteger(message.FaliedUsers[i].low) && $util.isInteger(message.FaliedUsers[i].high)))
                            return "FaliedUsers: integer|Long[] expected";
                }
                if (message.results != null && message.hasOwnProperty("results")) {
                    if (!$util.isObject(message.results))
                        return "results: object expected";
                    var key = Object.keys(message.results);
                    for (var i = 0; i < key.length; ++i) {
                        if (!$util.key64Re.test(key[i]))
                            return "results: integer|Long key{k:int64} expected";
                        {
                            var error = $root.pb.cenarius.UpdateUserCoinResp.verify(message.results[key[i]]);
                            if (error)
                                return "results." + error;
                        }
                    }
                }
                return null;
            };

            /**
             * Creates a BatchUpdateCoinResp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.cenarius.BatchUpdateCoinResp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.cenarius.BatchUpdateCoinResp} BatchUpdateCoinResp
             */
            BatchUpdateCoinResp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.cenarius.BatchUpdateCoinResp)
                    return object;
                var message = new $root.pb.cenarius.BatchUpdateCoinResp();
                if (object.SuccessUsers) {
                    if (!Array.isArray(object.SuccessUsers))
                        throw TypeError(".pb.cenarius.BatchUpdateCoinResp.SuccessUsers: array expected");
                    message.SuccessUsers = [];
                    for (var i = 0; i < object.SuccessUsers.length; ++i)
                        if ($util.Long)
                            (message.SuccessUsers[i] = $util.Long.fromValue(object.SuccessUsers[i])).unsigned = false;
                        else if (typeof object.SuccessUsers[i] === "string")
                            message.SuccessUsers[i] = parseInt(object.SuccessUsers[i], 10);
                        else if (typeof object.SuccessUsers[i] === "number")
                            message.SuccessUsers[i] = object.SuccessUsers[i];
                        else if (typeof object.SuccessUsers[i] === "object")
                            message.SuccessUsers[i] = new $util.LongBits(object.SuccessUsers[i].low >>> 0, object.SuccessUsers[i].high >>> 0).toNumber();
                }
                if (object.FaliedUsers) {
                    if (!Array.isArray(object.FaliedUsers))
                        throw TypeError(".pb.cenarius.BatchUpdateCoinResp.FaliedUsers: array expected");
                    message.FaliedUsers = [];
                    for (var i = 0; i < object.FaliedUsers.length; ++i)
                        if ($util.Long)
                            (message.FaliedUsers[i] = $util.Long.fromValue(object.FaliedUsers[i])).unsigned = false;
                        else if (typeof object.FaliedUsers[i] === "string")
                            message.FaliedUsers[i] = parseInt(object.FaliedUsers[i], 10);
                        else if (typeof object.FaliedUsers[i] === "number")
                            message.FaliedUsers[i] = object.FaliedUsers[i];
                        else if (typeof object.FaliedUsers[i] === "object")
                            message.FaliedUsers[i] = new $util.LongBits(object.FaliedUsers[i].low >>> 0, object.FaliedUsers[i].high >>> 0).toNumber();
                }
                if (object.results) {
                    if (typeof object.results !== "object")
                        throw TypeError(".pb.cenarius.BatchUpdateCoinResp.results: object expected");
                    message.results = {};
                    for (var keys = Object.keys(object.results), i = 0; i < keys.length; ++i) {
                        if (typeof object.results[keys[i]] !== "object")
                            throw TypeError(".pb.cenarius.BatchUpdateCoinResp.results: object expected");
                        message.results[keys[i]] = $root.pb.cenarius.UpdateUserCoinResp.fromObject(object.results[keys[i]]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a BatchUpdateCoinResp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.cenarius.BatchUpdateCoinResp
             * @static
             * @param {pb.cenarius.BatchUpdateCoinResp} message BatchUpdateCoinResp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BatchUpdateCoinResp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.SuccessUsers = [];
                    object.FaliedUsers = [];
                }
                if (options.objects || options.defaults)
                    object.results = {};
                if (message.SuccessUsers && message.SuccessUsers.length) {
                    object.SuccessUsers = [];
                    for (var j = 0; j < message.SuccessUsers.length; ++j)
                        if (typeof message.SuccessUsers[j] === "number")
                            object.SuccessUsers[j] = options.longs === String ? String(message.SuccessUsers[j]) : message.SuccessUsers[j];
                        else
                            object.SuccessUsers[j] = options.longs === String ? $util.Long.prototype.toString.call(message.SuccessUsers[j]) : options.longs === Number ? new $util.LongBits(message.SuccessUsers[j].low >>> 0, message.SuccessUsers[j].high >>> 0).toNumber() : message.SuccessUsers[j];
                }
                if (message.FaliedUsers && message.FaliedUsers.length) {
                    object.FaliedUsers = [];
                    for (var j = 0; j < message.FaliedUsers.length; ++j)
                        if (typeof message.FaliedUsers[j] === "number")
                            object.FaliedUsers[j] = options.longs === String ? String(message.FaliedUsers[j]) : message.FaliedUsers[j];
                        else
                            object.FaliedUsers[j] = options.longs === String ? $util.Long.prototype.toString.call(message.FaliedUsers[j]) : options.longs === Number ? new $util.LongBits(message.FaliedUsers[j].low >>> 0, message.FaliedUsers[j].high >>> 0).toNumber() : message.FaliedUsers[j];
                }
                var keys2;
                if (message.results && (keys2 = Object.keys(message.results)).length) {
                    object.results = {};
                    for (var j = 0; j < keys2.length; ++j)
                        object.results[keys2[j]] = $root.pb.cenarius.UpdateUserCoinResp.toObject(message.results[keys2[j]], options);
                }
                return object;
            };

            /**
             * Converts this BatchUpdateCoinResp to JSON.
             * @function toJSON
             * @memberof pb.cenarius.BatchUpdateCoinResp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BatchUpdateCoinResp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BatchUpdateCoinResp;
        })();

        cenarius.AuthenticationReq = (function() {

            /**
             * Properties of an AuthenticationReq.
             * @memberof pb.cenarius
             * @interface IAuthenticationReq
             * @property {string|null} [token] AuthenticationReq token
             */

            /**
             * Constructs a new AuthenticationReq.
             * @memberof pb.cenarius
             * @classdesc Represents an AuthenticationReq.
             * @implements IAuthenticationReq
             * @constructor
             * @param {pb.cenarius.IAuthenticationReq=} [properties] Properties to set
             */
            function AuthenticationReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AuthenticationReq token.
             * @member {string} token
             * @memberof pb.cenarius.AuthenticationReq
             * @instance
             */
            AuthenticationReq.prototype.token = "";

            /**
             * Creates a new AuthenticationReq instance using the specified properties.
             * @function create
             * @memberof pb.cenarius.AuthenticationReq
             * @static
             * @param {pb.cenarius.IAuthenticationReq=} [properties] Properties to set
             * @returns {pb.cenarius.AuthenticationReq} AuthenticationReq instance
             */
            AuthenticationReq.create = function create(properties) {
                return new AuthenticationReq(properties);
            };

            /**
             * Encodes the specified AuthenticationReq message. Does not implicitly {@link pb.cenarius.AuthenticationReq.verify|verify} messages.
             * @function encode
             * @memberof pb.cenarius.AuthenticationReq
             * @static
             * @param {pb.cenarius.IAuthenticationReq} message AuthenticationReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AuthenticationReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.token != null && message.hasOwnProperty("token"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.token);
                return writer;
            };

            /**
             * Encodes the specified AuthenticationReq message, length delimited. Does not implicitly {@link pb.cenarius.AuthenticationReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.cenarius.AuthenticationReq
             * @static
             * @param {pb.cenarius.IAuthenticationReq} message AuthenticationReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AuthenticationReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AuthenticationReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.cenarius.AuthenticationReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.cenarius.AuthenticationReq} AuthenticationReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AuthenticationReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.cenarius.AuthenticationReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.token = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AuthenticationReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.cenarius.AuthenticationReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.cenarius.AuthenticationReq} AuthenticationReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AuthenticationReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AuthenticationReq message.
             * @function verify
             * @memberof pb.cenarius.AuthenticationReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AuthenticationReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.token != null && message.hasOwnProperty("token"))
                    if (!$util.isString(message.token))
                        return "token: string expected";
                return null;
            };

            /**
             * Creates an AuthenticationReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.cenarius.AuthenticationReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.cenarius.AuthenticationReq} AuthenticationReq
             */
            AuthenticationReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.cenarius.AuthenticationReq)
                    return object;
                var message = new $root.pb.cenarius.AuthenticationReq();
                if (object.token != null)
                    message.token = String(object.token);
                return message;
            };

            /**
             * Creates a plain object from an AuthenticationReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.cenarius.AuthenticationReq
             * @static
             * @param {pb.cenarius.AuthenticationReq} message AuthenticationReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AuthenticationReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.token = "";
                if (message.token != null && message.hasOwnProperty("token"))
                    object.token = message.token;
                return object;
            };

            /**
             * Converts this AuthenticationReq to JSON.
             * @function toJSON
             * @memberof pb.cenarius.AuthenticationReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AuthenticationReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return AuthenticationReq;
        })();

        cenarius.ListBotsReq = (function() {

            /**
             * Properties of a ListBotsReq.
             * @memberof pb.cenarius
             * @interface IListBotsReq
             * @property {pb.common.IPaginationReq|null} [pagination] ListBotsReq pagination
             */

            /**
             * Constructs a new ListBotsReq.
             * @memberof pb.cenarius
             * @classdesc Represents a ListBotsReq.
             * @implements IListBotsReq
             * @constructor
             * @param {pb.cenarius.IListBotsReq=} [properties] Properties to set
             */
            function ListBotsReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ListBotsReq pagination.
             * @member {pb.common.IPaginationReq|null|undefined} pagination
             * @memberof pb.cenarius.ListBotsReq
             * @instance
             */
            ListBotsReq.prototype.pagination = null;

            /**
             * Creates a new ListBotsReq instance using the specified properties.
             * @function create
             * @memberof pb.cenarius.ListBotsReq
             * @static
             * @param {pb.cenarius.IListBotsReq=} [properties] Properties to set
             * @returns {pb.cenarius.ListBotsReq} ListBotsReq instance
             */
            ListBotsReq.create = function create(properties) {
                return new ListBotsReq(properties);
            };

            /**
             * Encodes the specified ListBotsReq message. Does not implicitly {@link pb.cenarius.ListBotsReq.verify|verify} messages.
             * @function encode
             * @memberof pb.cenarius.ListBotsReq
             * @static
             * @param {pb.cenarius.IListBotsReq} message ListBotsReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ListBotsReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.pagination != null && message.hasOwnProperty("pagination"))
                    $root.pb.common.PaginationReq.encode(message.pagination, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ListBotsReq message, length delimited. Does not implicitly {@link pb.cenarius.ListBotsReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.cenarius.ListBotsReq
             * @static
             * @param {pb.cenarius.IListBotsReq} message ListBotsReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ListBotsReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ListBotsReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.cenarius.ListBotsReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.cenarius.ListBotsReq} ListBotsReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ListBotsReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.cenarius.ListBotsReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.pagination = $root.pb.common.PaginationReq.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ListBotsReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.cenarius.ListBotsReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.cenarius.ListBotsReq} ListBotsReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ListBotsReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ListBotsReq message.
             * @function verify
             * @memberof pb.cenarius.ListBotsReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ListBotsReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.pagination != null && message.hasOwnProperty("pagination")) {
                    var error = $root.pb.common.PaginationReq.verify(message.pagination);
                    if (error)
                        return "pagination." + error;
                }
                return null;
            };

            /**
             * Creates a ListBotsReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.cenarius.ListBotsReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.cenarius.ListBotsReq} ListBotsReq
             */
            ListBotsReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.cenarius.ListBotsReq)
                    return object;
                var message = new $root.pb.cenarius.ListBotsReq();
                if (object.pagination != null) {
                    if (typeof object.pagination !== "object")
                        throw TypeError(".pb.cenarius.ListBotsReq.pagination: object expected");
                    message.pagination = $root.pb.common.PaginationReq.fromObject(object.pagination);
                }
                return message;
            };

            /**
             * Creates a plain object from a ListBotsReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.cenarius.ListBotsReq
             * @static
             * @param {pb.cenarius.ListBotsReq} message ListBotsReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ListBotsReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.pagination = null;
                if (message.pagination != null && message.hasOwnProperty("pagination"))
                    object.pagination = $root.pb.common.PaginationReq.toObject(message.pagination, options);
                return object;
            };

            /**
             * Converts this ListBotsReq to JSON.
             * @function toJSON
             * @memberof pb.cenarius.ListBotsReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ListBotsReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ListBotsReq;
        })();

        cenarius.BotInfo = (function() {

            /**
             * Properties of a BotInfo.
             * @memberof pb.cenarius
             * @interface IBotInfo
             * @property {string|null} [token] BotInfo token
             * @property {Long|null} [hideId] BotInfo hideId
             */

            /**
             * Constructs a new BotInfo.
             * @memberof pb.cenarius
             * @classdesc Represents a BotInfo.
             * @implements IBotInfo
             * @constructor
             * @param {pb.cenarius.IBotInfo=} [properties] Properties to set
             */
            function BotInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BotInfo token.
             * @member {string} token
             * @memberof pb.cenarius.BotInfo
             * @instance
             */
            BotInfo.prototype.token = "";

            /**
             * BotInfo hideId.
             * @member {Long} hideId
             * @memberof pb.cenarius.BotInfo
             * @instance
             */
            BotInfo.prototype.hideId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new BotInfo instance using the specified properties.
             * @function create
             * @memberof pb.cenarius.BotInfo
             * @static
             * @param {pb.cenarius.IBotInfo=} [properties] Properties to set
             * @returns {pb.cenarius.BotInfo} BotInfo instance
             */
            BotInfo.create = function create(properties) {
                return new BotInfo(properties);
            };

            /**
             * Encodes the specified BotInfo message. Does not implicitly {@link pb.cenarius.BotInfo.verify|verify} messages.
             * @function encode
             * @memberof pb.cenarius.BotInfo
             * @static
             * @param {pb.cenarius.IBotInfo} message BotInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BotInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.token != null && message.hasOwnProperty("token"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.token);
                if (message.hideId != null && message.hasOwnProperty("hideId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.hideId);
                return writer;
            };

            /**
             * Encodes the specified BotInfo message, length delimited. Does not implicitly {@link pb.cenarius.BotInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.cenarius.BotInfo
             * @static
             * @param {pb.cenarius.IBotInfo} message BotInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BotInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BotInfo message from the specified reader or buffer.
             * @function decode
             * @memberof pb.cenarius.BotInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.cenarius.BotInfo} BotInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BotInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.cenarius.BotInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.token = reader.string();
                        break;
                    case 2:
                        message.hideId = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BotInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.cenarius.BotInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.cenarius.BotInfo} BotInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BotInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BotInfo message.
             * @function verify
             * @memberof pb.cenarius.BotInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BotInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.token != null && message.hasOwnProperty("token"))
                    if (!$util.isString(message.token))
                        return "token: string expected";
                if (message.hideId != null && message.hasOwnProperty("hideId"))
                    if (!$util.isInteger(message.hideId) && !(message.hideId && $util.isInteger(message.hideId.low) && $util.isInteger(message.hideId.high)))
                        return "hideId: integer|Long expected";
                return null;
            };

            /**
             * Creates a BotInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.cenarius.BotInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.cenarius.BotInfo} BotInfo
             */
            BotInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.cenarius.BotInfo)
                    return object;
                var message = new $root.pb.cenarius.BotInfo();
                if (object.token != null)
                    message.token = String(object.token);
                if (object.hideId != null)
                    if ($util.Long)
                        (message.hideId = $util.Long.fromValue(object.hideId)).unsigned = false;
                    else if (typeof object.hideId === "string")
                        message.hideId = parseInt(object.hideId, 10);
                    else if (typeof object.hideId === "number")
                        message.hideId = object.hideId;
                    else if (typeof object.hideId === "object")
                        message.hideId = new $util.LongBits(object.hideId.low >>> 0, object.hideId.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a BotInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.cenarius.BotInfo
             * @static
             * @param {pb.cenarius.BotInfo} message BotInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BotInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.token = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.hideId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.hideId = options.longs === String ? "0" : 0;
                }
                if (message.token != null && message.hasOwnProperty("token"))
                    object.token = message.token;
                if (message.hideId != null && message.hasOwnProperty("hideId"))
                    if (typeof message.hideId === "number")
                        object.hideId = options.longs === String ? String(message.hideId) : message.hideId;
                    else
                        object.hideId = options.longs === String ? $util.Long.prototype.toString.call(message.hideId) : options.longs === Number ? new $util.LongBits(message.hideId.low >>> 0, message.hideId.high >>> 0).toNumber() : message.hideId;
                return object;
            };

            /**
             * Converts this BotInfo to JSON.
             * @function toJSON
             * @memberof pb.cenarius.BotInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BotInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BotInfo;
        })();

        cenarius.ListBotsRsp = (function() {

            /**
             * Properties of a ListBotsRsp.
             * @memberof pb.cenarius
             * @interface IListBotsRsp
             * @property {Array.<pb.cenarius.IBotInfo>|null} [bots] ListBotsRsp bots
             * @property {pb.common.IPaginationRsp|null} [pagination] ListBotsRsp pagination
             */

            /**
             * Constructs a new ListBotsRsp.
             * @memberof pb.cenarius
             * @classdesc Represents a ListBotsRsp.
             * @implements IListBotsRsp
             * @constructor
             * @param {pb.cenarius.IListBotsRsp=} [properties] Properties to set
             */
            function ListBotsRsp(properties) {
                this.bots = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ListBotsRsp bots.
             * @member {Array.<pb.cenarius.IBotInfo>} bots
             * @memberof pb.cenarius.ListBotsRsp
             * @instance
             */
            ListBotsRsp.prototype.bots = $util.emptyArray;

            /**
             * ListBotsRsp pagination.
             * @member {pb.common.IPaginationRsp|null|undefined} pagination
             * @memberof pb.cenarius.ListBotsRsp
             * @instance
             */
            ListBotsRsp.prototype.pagination = null;

            /**
             * Creates a new ListBotsRsp instance using the specified properties.
             * @function create
             * @memberof pb.cenarius.ListBotsRsp
             * @static
             * @param {pb.cenarius.IListBotsRsp=} [properties] Properties to set
             * @returns {pb.cenarius.ListBotsRsp} ListBotsRsp instance
             */
            ListBotsRsp.create = function create(properties) {
                return new ListBotsRsp(properties);
            };

            /**
             * Encodes the specified ListBotsRsp message. Does not implicitly {@link pb.cenarius.ListBotsRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.cenarius.ListBotsRsp
             * @static
             * @param {pb.cenarius.IListBotsRsp} message ListBotsRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ListBotsRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.bots != null && message.bots.length)
                    for (var i = 0; i < message.bots.length; ++i)
                        $root.pb.cenarius.BotInfo.encode(message.bots[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.pagination != null && message.hasOwnProperty("pagination"))
                    $root.pb.common.PaginationRsp.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ListBotsRsp message, length delimited. Does not implicitly {@link pb.cenarius.ListBotsRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.cenarius.ListBotsRsp
             * @static
             * @param {pb.cenarius.IListBotsRsp} message ListBotsRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ListBotsRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ListBotsRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.cenarius.ListBotsRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.cenarius.ListBotsRsp} ListBotsRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ListBotsRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.cenarius.ListBotsRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.bots && message.bots.length))
                            message.bots = [];
                        message.bots.push($root.pb.cenarius.BotInfo.decode(reader, reader.uint32()));
                        break;
                    case 2:
                        message.pagination = $root.pb.common.PaginationRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ListBotsRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.cenarius.ListBotsRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.cenarius.ListBotsRsp} ListBotsRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ListBotsRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ListBotsRsp message.
             * @function verify
             * @memberof pb.cenarius.ListBotsRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ListBotsRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.bots != null && message.hasOwnProperty("bots")) {
                    if (!Array.isArray(message.bots))
                        return "bots: array expected";
                    for (var i = 0; i < message.bots.length; ++i) {
                        var error = $root.pb.cenarius.BotInfo.verify(message.bots[i]);
                        if (error)
                            return "bots." + error;
                    }
                }
                if (message.pagination != null && message.hasOwnProperty("pagination")) {
                    var error = $root.pb.common.PaginationRsp.verify(message.pagination);
                    if (error)
                        return "pagination." + error;
                }
                return null;
            };

            /**
             * Creates a ListBotsRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.cenarius.ListBotsRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.cenarius.ListBotsRsp} ListBotsRsp
             */
            ListBotsRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.cenarius.ListBotsRsp)
                    return object;
                var message = new $root.pb.cenarius.ListBotsRsp();
                if (object.bots) {
                    if (!Array.isArray(object.bots))
                        throw TypeError(".pb.cenarius.ListBotsRsp.bots: array expected");
                    message.bots = [];
                    for (var i = 0; i < object.bots.length; ++i) {
                        if (typeof object.bots[i] !== "object")
                            throw TypeError(".pb.cenarius.ListBotsRsp.bots: object expected");
                        message.bots[i] = $root.pb.cenarius.BotInfo.fromObject(object.bots[i]);
                    }
                }
                if (object.pagination != null) {
                    if (typeof object.pagination !== "object")
                        throw TypeError(".pb.cenarius.ListBotsRsp.pagination: object expected");
                    message.pagination = $root.pb.common.PaginationRsp.fromObject(object.pagination);
                }
                return message;
            };

            /**
             * Creates a plain object from a ListBotsRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.cenarius.ListBotsRsp
             * @static
             * @param {pb.cenarius.ListBotsRsp} message ListBotsRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ListBotsRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.bots = [];
                if (options.defaults)
                    object.pagination = null;
                if (message.bots && message.bots.length) {
                    object.bots = [];
                    for (var j = 0; j < message.bots.length; ++j)
                        object.bots[j] = $root.pb.cenarius.BotInfo.toObject(message.bots[j], options);
                }
                if (message.pagination != null && message.hasOwnProperty("pagination"))
                    object.pagination = $root.pb.common.PaginationRsp.toObject(message.pagination, options);
                return object;
            };

            /**
             * Converts this ListBotsRsp to JSON.
             * @function toJSON
             * @memberof pb.cenarius.ListBotsRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ListBotsRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ListBotsRsp;
        })();

        cenarius.Role = (function() {

            /**
             * Properties of a Role.
             * @memberof pb.cenarius
             * @interface IRole
             * @property {Long|null} [ID] Role ID
             * @property {string|null} [name] Role name
             * @property {string|null} [industry] Role industry
             * @property {Long|null} [salary] Role salary
             * @property {Long|null} [expense] Role expense
             * @property {Long|null} [houseLoan] Role houseLoan
             * @property {Long|null} [carLoan] Role carLoan
             * @property {Long|null} [creditCard] Role creditCard
             * @property {Long|null} [borrowMoney] Role borrowMoney
             * @property {Long|null} [bankLoan] Role bankLoan
             * @property {number|null} [taxTatePCT] Role taxTatePCT
             * @property {number|null} [houseRatePCT] Role houseRatePCT
             * @property {number|null} [carRatePCT] Role carRatePCT
             * @property {number|null} [creditCardRatePCT] Role creditCardRatePCT
             * @property {number|null} [borrowMoneyRatePCT] Role borrowMoneyRatePCT
             * @property {number|null} [bankLoanRatePCT] Role bankLoanRatePCT
             * @property {number|null} [taxAndSpendPCT] Role taxAndSpendPCT
             * @property {number|null} [babySpendPCT] Role babySpendPCT
             * @property {number|null} [wageHikePCT] Role wageHikePCT
             * @property {string|null} [flag] Role flag
             * @property {boolean|null} [available] Role available
             * @property {boolean|null} [free] Role free
             * @property {string|null} [avatar] Role avatar
             * @property {Array.<string>|null} [promotions] Role promotions
             * @property {Long|null} [_insuranceAndHousingFund] Role _insuranceAndHousingFund
             * @property {Long|null} [_houseExpense] Role _houseExpense
             * @property {Long|null} [_carExpense] Role _carExpense
             * @property {Long|null} [_creditCardExpense] Role _creditCardExpense
             * @property {Long|null} [_borrowMoneyExpense] Role _borrowMoneyExpense
             * @property {Long|null} [_babyExpense] Role _babyExpense
             * @property {Long|null} [_bankLoanExpense] Role _bankLoanExpense
             * @property {Array.<pb.cenarius.IRoleAsset>|null} [assets] Role assets
             */

            /**
             * Constructs a new Role.
             * @memberof pb.cenarius
             * @classdesc Represents a Role.
             * @implements IRole
             * @constructor
             * @param {pb.cenarius.IRole=} [properties] Properties to set
             */
            function Role(properties) {
                this.promotions = [];
                this.assets = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Role ID.
             * @member {Long} ID
             * @memberof pb.cenarius.Role
             * @instance
             */
            Role.prototype.ID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Role name.
             * @member {string} name
             * @memberof pb.cenarius.Role
             * @instance
             */
            Role.prototype.name = "";

            /**
             * Role industry.
             * @member {string} industry
             * @memberof pb.cenarius.Role
             * @instance
             */
            Role.prototype.industry = "";

            /**
             * Role salary.
             * @member {Long} salary
             * @memberof pb.cenarius.Role
             * @instance
             */
            Role.prototype.salary = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Role expense.
             * @member {Long} expense
             * @memberof pb.cenarius.Role
             * @instance
             */
            Role.prototype.expense = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Role houseLoan.
             * @member {Long} houseLoan
             * @memberof pb.cenarius.Role
             * @instance
             */
            Role.prototype.houseLoan = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Role carLoan.
             * @member {Long} carLoan
             * @memberof pb.cenarius.Role
             * @instance
             */
            Role.prototype.carLoan = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Role creditCard.
             * @member {Long} creditCard
             * @memberof pb.cenarius.Role
             * @instance
             */
            Role.prototype.creditCard = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Role borrowMoney.
             * @member {Long} borrowMoney
             * @memberof pb.cenarius.Role
             * @instance
             */
            Role.prototype.borrowMoney = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Role bankLoan.
             * @member {Long} bankLoan
             * @memberof pb.cenarius.Role
             * @instance
             */
            Role.prototype.bankLoan = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Role taxTatePCT.
             * @member {number} taxTatePCT
             * @memberof pb.cenarius.Role
             * @instance
             */
            Role.prototype.taxTatePCT = 0;

            /**
             * Role houseRatePCT.
             * @member {number} houseRatePCT
             * @memberof pb.cenarius.Role
             * @instance
             */
            Role.prototype.houseRatePCT = 0;

            /**
             * Role carRatePCT.
             * @member {number} carRatePCT
             * @memberof pb.cenarius.Role
             * @instance
             */
            Role.prototype.carRatePCT = 0;

            /**
             * Role creditCardRatePCT.
             * @member {number} creditCardRatePCT
             * @memberof pb.cenarius.Role
             * @instance
             */
            Role.prototype.creditCardRatePCT = 0;

            /**
             * Role borrowMoneyRatePCT.
             * @member {number} borrowMoneyRatePCT
             * @memberof pb.cenarius.Role
             * @instance
             */
            Role.prototype.borrowMoneyRatePCT = 0;

            /**
             * Role bankLoanRatePCT.
             * @member {number} bankLoanRatePCT
             * @memberof pb.cenarius.Role
             * @instance
             */
            Role.prototype.bankLoanRatePCT = 0;

            /**
             * Role taxAndSpendPCT.
             * @member {number} taxAndSpendPCT
             * @memberof pb.cenarius.Role
             * @instance
             */
            Role.prototype.taxAndSpendPCT = 0;

            /**
             * Role babySpendPCT.
             * @member {number} babySpendPCT
             * @memberof pb.cenarius.Role
             * @instance
             */
            Role.prototype.babySpendPCT = 0;

            /**
             * Role wageHikePCT.
             * @member {number} wageHikePCT
             * @memberof pb.cenarius.Role
             * @instance
             */
            Role.prototype.wageHikePCT = 0;

            /**
             * Role flag.
             * @member {string} flag
             * @memberof pb.cenarius.Role
             * @instance
             */
            Role.prototype.flag = "";

            /**
             * Role available.
             * @member {boolean} available
             * @memberof pb.cenarius.Role
             * @instance
             */
            Role.prototype.available = false;

            /**
             * Role free.
             * @member {boolean} free
             * @memberof pb.cenarius.Role
             * @instance
             */
            Role.prototype.free = false;

            /**
             * Role avatar.
             * @member {string} avatar
             * @memberof pb.cenarius.Role
             * @instance
             */
            Role.prototype.avatar = "";

            /**
             * Role promotions.
             * @member {Array.<string>} promotions
             * @memberof pb.cenarius.Role
             * @instance
             */
            Role.prototype.promotions = $util.emptyArray;

            /**
             * Role _insuranceAndHousingFund.
             * @member {Long} _insuranceAndHousingFund
             * @memberof pb.cenarius.Role
             * @instance
             */
            Role.prototype._insuranceAndHousingFund = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Role _houseExpense.
             * @member {Long} _houseExpense
             * @memberof pb.cenarius.Role
             * @instance
             */
            Role.prototype._houseExpense = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Role _carExpense.
             * @member {Long} _carExpense
             * @memberof pb.cenarius.Role
             * @instance
             */
            Role.prototype._carExpense = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Role _creditCardExpense.
             * @member {Long} _creditCardExpense
             * @memberof pb.cenarius.Role
             * @instance
             */
            Role.prototype._creditCardExpense = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Role _borrowMoneyExpense.
             * @member {Long} _borrowMoneyExpense
             * @memberof pb.cenarius.Role
             * @instance
             */
            Role.prototype._borrowMoneyExpense = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Role _babyExpense.
             * @member {Long} _babyExpense
             * @memberof pb.cenarius.Role
             * @instance
             */
            Role.prototype._babyExpense = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Role _bankLoanExpense.
             * @member {Long} _bankLoanExpense
             * @memberof pb.cenarius.Role
             * @instance
             */
            Role.prototype._bankLoanExpense = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Role assets.
             * @member {Array.<pb.cenarius.IRoleAsset>} assets
             * @memberof pb.cenarius.Role
             * @instance
             */
            Role.prototype.assets = $util.emptyArray;

            /**
             * Creates a new Role instance using the specified properties.
             * @function create
             * @memberof pb.cenarius.Role
             * @static
             * @param {pb.cenarius.IRole=} [properties] Properties to set
             * @returns {pb.cenarius.Role} Role instance
             */
            Role.create = function create(properties) {
                return new Role(properties);
            };

            /**
             * Encodes the specified Role message. Does not implicitly {@link pb.cenarius.Role.verify|verify} messages.
             * @function encode
             * @memberof pb.cenarius.Role
             * @static
             * @param {pb.cenarius.IRole} message Role message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Role.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ID != null && message.hasOwnProperty("ID"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.ID);
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                if (message.industry != null && message.hasOwnProperty("industry"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.industry);
                if (message.salary != null && message.hasOwnProperty("salary"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.salary);
                if (message.expense != null && message.hasOwnProperty("expense"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.expense);
                if (message.houseLoan != null && message.hasOwnProperty("houseLoan"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int64(message.houseLoan);
                if (message.carLoan != null && message.hasOwnProperty("carLoan"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int64(message.carLoan);
                if (message.creditCard != null && message.hasOwnProperty("creditCard"))
                    writer.uint32(/* id 8, wireType 0 =*/64).int64(message.creditCard);
                if (message.borrowMoney != null && message.hasOwnProperty("borrowMoney"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int64(message.borrowMoney);
                if (message.bankLoan != null && message.hasOwnProperty("bankLoan"))
                    writer.uint32(/* id 10, wireType 0 =*/80).int64(message.bankLoan);
                if (message.taxTatePCT != null && message.hasOwnProperty("taxTatePCT"))
                    writer.uint32(/* id 11, wireType 5 =*/93).float(message.taxTatePCT);
                if (message.houseRatePCT != null && message.hasOwnProperty("houseRatePCT"))
                    writer.uint32(/* id 12, wireType 5 =*/101).float(message.houseRatePCT);
                if (message.carRatePCT != null && message.hasOwnProperty("carRatePCT"))
                    writer.uint32(/* id 13, wireType 5 =*/109).float(message.carRatePCT);
                if (message.creditCardRatePCT != null && message.hasOwnProperty("creditCardRatePCT"))
                    writer.uint32(/* id 14, wireType 5 =*/117).float(message.creditCardRatePCT);
                if (message.borrowMoneyRatePCT != null && message.hasOwnProperty("borrowMoneyRatePCT"))
                    writer.uint32(/* id 15, wireType 5 =*/125).float(message.borrowMoneyRatePCT);
                if (message.bankLoanRatePCT != null && message.hasOwnProperty("bankLoanRatePCT"))
                    writer.uint32(/* id 16, wireType 5 =*/133).float(message.bankLoanRatePCT);
                if (message.taxAndSpendPCT != null && message.hasOwnProperty("taxAndSpendPCT"))
                    writer.uint32(/* id 17, wireType 5 =*/141).float(message.taxAndSpendPCT);
                if (message.babySpendPCT != null && message.hasOwnProperty("babySpendPCT"))
                    writer.uint32(/* id 18, wireType 5 =*/149).float(message.babySpendPCT);
                if (message.wageHikePCT != null && message.hasOwnProperty("wageHikePCT"))
                    writer.uint32(/* id 19, wireType 5 =*/157).float(message.wageHikePCT);
                if (message.flag != null && message.hasOwnProperty("flag"))
                    writer.uint32(/* id 20, wireType 2 =*/162).string(message.flag);
                if (message.available != null && message.hasOwnProperty("available"))
                    writer.uint32(/* id 21, wireType 0 =*/168).bool(message.available);
                if (message.free != null && message.hasOwnProperty("free"))
                    writer.uint32(/* id 22, wireType 0 =*/176).bool(message.free);
                if (message.avatar != null && message.hasOwnProperty("avatar"))
                    writer.uint32(/* id 23, wireType 2 =*/186).string(message.avatar);
                if (message.promotions != null && message.promotions.length)
                    for (var i = 0; i < message.promotions.length; ++i)
                        writer.uint32(/* id 24, wireType 2 =*/194).string(message.promotions[i]);
                if (message._insuranceAndHousingFund != null && message.hasOwnProperty("_insuranceAndHousingFund"))
                    writer.uint32(/* id 25, wireType 0 =*/200).int64(message._insuranceAndHousingFund);
                if (message._houseExpense != null && message.hasOwnProperty("_houseExpense"))
                    writer.uint32(/* id 26, wireType 0 =*/208).int64(message._houseExpense);
                if (message._carExpense != null && message.hasOwnProperty("_carExpense"))
                    writer.uint32(/* id 27, wireType 0 =*/216).int64(message._carExpense);
                if (message._creditCardExpense != null && message.hasOwnProperty("_creditCardExpense"))
                    writer.uint32(/* id 28, wireType 0 =*/224).int64(message._creditCardExpense);
                if (message._borrowMoneyExpense != null && message.hasOwnProperty("_borrowMoneyExpense"))
                    writer.uint32(/* id 29, wireType 0 =*/232).int64(message._borrowMoneyExpense);
                if (message._babyExpense != null && message.hasOwnProperty("_babyExpense"))
                    writer.uint32(/* id 30, wireType 0 =*/240).int64(message._babyExpense);
                if (message._bankLoanExpense != null && message.hasOwnProperty("_bankLoanExpense"))
                    writer.uint32(/* id 31, wireType 0 =*/248).int64(message._bankLoanExpense);
                if (message.assets != null && message.assets.length)
                    for (var i = 0; i < message.assets.length; ++i)
                        $root.pb.cenarius.RoleAsset.encode(message.assets[i], writer.uint32(/* id 32, wireType 2 =*/258).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Role message, length delimited. Does not implicitly {@link pb.cenarius.Role.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.cenarius.Role
             * @static
             * @param {pb.cenarius.IRole} message Role message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Role.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Role message from the specified reader or buffer.
             * @function decode
             * @memberof pb.cenarius.Role
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.cenarius.Role} Role
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Role.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.cenarius.Role();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ID = reader.int64();
                        break;
                    case 2:
                        message.name = reader.string();
                        break;
                    case 3:
                        message.industry = reader.string();
                        break;
                    case 4:
                        message.salary = reader.int64();
                        break;
                    case 5:
                        message.expense = reader.int64();
                        break;
                    case 6:
                        message.houseLoan = reader.int64();
                        break;
                    case 7:
                        message.carLoan = reader.int64();
                        break;
                    case 8:
                        message.creditCard = reader.int64();
                        break;
                    case 9:
                        message.borrowMoney = reader.int64();
                        break;
                    case 10:
                        message.bankLoan = reader.int64();
                        break;
                    case 11:
                        message.taxTatePCT = reader.float();
                        break;
                    case 12:
                        message.houseRatePCT = reader.float();
                        break;
                    case 13:
                        message.carRatePCT = reader.float();
                        break;
                    case 14:
                        message.creditCardRatePCT = reader.float();
                        break;
                    case 15:
                        message.borrowMoneyRatePCT = reader.float();
                        break;
                    case 16:
                        message.bankLoanRatePCT = reader.float();
                        break;
                    case 17:
                        message.taxAndSpendPCT = reader.float();
                        break;
                    case 18:
                        message.babySpendPCT = reader.float();
                        break;
                    case 19:
                        message.wageHikePCT = reader.float();
                        break;
                    case 20:
                        message.flag = reader.string();
                        break;
                    case 21:
                        message.available = reader.bool();
                        break;
                    case 22:
                        message.free = reader.bool();
                        break;
                    case 23:
                        message.avatar = reader.string();
                        break;
                    case 24:
                        if (!(message.promotions && message.promotions.length))
                            message.promotions = [];
                        message.promotions.push(reader.string());
                        break;
                    case 25:
                        message._insuranceAndHousingFund = reader.int64();
                        break;
                    case 26:
                        message._houseExpense = reader.int64();
                        break;
                    case 27:
                        message._carExpense = reader.int64();
                        break;
                    case 28:
                        message._creditCardExpense = reader.int64();
                        break;
                    case 29:
                        message._borrowMoneyExpense = reader.int64();
                        break;
                    case 30:
                        message._babyExpense = reader.int64();
                        break;
                    case 31:
                        message._bankLoanExpense = reader.int64();
                        break;
                    case 32:
                        if (!(message.assets && message.assets.length))
                            message.assets = [];
                        message.assets.push($root.pb.cenarius.RoleAsset.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Role message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.cenarius.Role
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.cenarius.Role} Role
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Role.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Role message.
             * @function verify
             * @memberof pb.cenarius.Role
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Role.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ID != null && message.hasOwnProperty("ID"))
                    if (!$util.isInteger(message.ID) && !(message.ID && $util.isInteger(message.ID.low) && $util.isInteger(message.ID.high)))
                        return "ID: integer|Long expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.industry != null && message.hasOwnProperty("industry"))
                    if (!$util.isString(message.industry))
                        return "industry: string expected";
                if (message.salary != null && message.hasOwnProperty("salary"))
                    if (!$util.isInteger(message.salary) && !(message.salary && $util.isInteger(message.salary.low) && $util.isInteger(message.salary.high)))
                        return "salary: integer|Long expected";
                if (message.expense != null && message.hasOwnProperty("expense"))
                    if (!$util.isInteger(message.expense) && !(message.expense && $util.isInteger(message.expense.low) && $util.isInteger(message.expense.high)))
                        return "expense: integer|Long expected";
                if (message.houseLoan != null && message.hasOwnProperty("houseLoan"))
                    if (!$util.isInteger(message.houseLoan) && !(message.houseLoan && $util.isInteger(message.houseLoan.low) && $util.isInteger(message.houseLoan.high)))
                        return "houseLoan: integer|Long expected";
                if (message.carLoan != null && message.hasOwnProperty("carLoan"))
                    if (!$util.isInteger(message.carLoan) && !(message.carLoan && $util.isInteger(message.carLoan.low) && $util.isInteger(message.carLoan.high)))
                        return "carLoan: integer|Long expected";
                if (message.creditCard != null && message.hasOwnProperty("creditCard"))
                    if (!$util.isInteger(message.creditCard) && !(message.creditCard && $util.isInteger(message.creditCard.low) && $util.isInteger(message.creditCard.high)))
                        return "creditCard: integer|Long expected";
                if (message.borrowMoney != null && message.hasOwnProperty("borrowMoney"))
                    if (!$util.isInteger(message.borrowMoney) && !(message.borrowMoney && $util.isInteger(message.borrowMoney.low) && $util.isInteger(message.borrowMoney.high)))
                        return "borrowMoney: integer|Long expected";
                if (message.bankLoan != null && message.hasOwnProperty("bankLoan"))
                    if (!$util.isInteger(message.bankLoan) && !(message.bankLoan && $util.isInteger(message.bankLoan.low) && $util.isInteger(message.bankLoan.high)))
                        return "bankLoan: integer|Long expected";
                if (message.taxTatePCT != null && message.hasOwnProperty("taxTatePCT"))
                    if (typeof message.taxTatePCT !== "number")
                        return "taxTatePCT: number expected";
                if (message.houseRatePCT != null && message.hasOwnProperty("houseRatePCT"))
                    if (typeof message.houseRatePCT !== "number")
                        return "houseRatePCT: number expected";
                if (message.carRatePCT != null && message.hasOwnProperty("carRatePCT"))
                    if (typeof message.carRatePCT !== "number")
                        return "carRatePCT: number expected";
                if (message.creditCardRatePCT != null && message.hasOwnProperty("creditCardRatePCT"))
                    if (typeof message.creditCardRatePCT !== "number")
                        return "creditCardRatePCT: number expected";
                if (message.borrowMoneyRatePCT != null && message.hasOwnProperty("borrowMoneyRatePCT"))
                    if (typeof message.borrowMoneyRatePCT !== "number")
                        return "borrowMoneyRatePCT: number expected";
                if (message.bankLoanRatePCT != null && message.hasOwnProperty("bankLoanRatePCT"))
                    if (typeof message.bankLoanRatePCT !== "number")
                        return "bankLoanRatePCT: number expected";
                if (message.taxAndSpendPCT != null && message.hasOwnProperty("taxAndSpendPCT"))
                    if (typeof message.taxAndSpendPCT !== "number")
                        return "taxAndSpendPCT: number expected";
                if (message.babySpendPCT != null && message.hasOwnProperty("babySpendPCT"))
                    if (typeof message.babySpendPCT !== "number")
                        return "babySpendPCT: number expected";
                if (message.wageHikePCT != null && message.hasOwnProperty("wageHikePCT"))
                    if (typeof message.wageHikePCT !== "number")
                        return "wageHikePCT: number expected";
                if (message.flag != null && message.hasOwnProperty("flag"))
                    if (!$util.isString(message.flag))
                        return "flag: string expected";
                if (message.available != null && message.hasOwnProperty("available"))
                    if (typeof message.available !== "boolean")
                        return "available: boolean expected";
                if (message.free != null && message.hasOwnProperty("free"))
                    if (typeof message.free !== "boolean")
                        return "free: boolean expected";
                if (message.avatar != null && message.hasOwnProperty("avatar"))
                    if (!$util.isString(message.avatar))
                        return "avatar: string expected";
                if (message.promotions != null && message.hasOwnProperty("promotions")) {
                    if (!Array.isArray(message.promotions))
                        return "promotions: array expected";
                    for (var i = 0; i < message.promotions.length; ++i)
                        if (!$util.isString(message.promotions[i]))
                            return "promotions: string[] expected";
                }
                if (message._insuranceAndHousingFund != null && message.hasOwnProperty("_insuranceAndHousingFund"))
                    if (!$util.isInteger(message._insuranceAndHousingFund) && !(message._insuranceAndHousingFund && $util.isInteger(message._insuranceAndHousingFund.low) && $util.isInteger(message._insuranceAndHousingFund.high)))
                        return "_insuranceAndHousingFund: integer|Long expected";
                if (message._houseExpense != null && message.hasOwnProperty("_houseExpense"))
                    if (!$util.isInteger(message._houseExpense) && !(message._houseExpense && $util.isInteger(message._houseExpense.low) && $util.isInteger(message._houseExpense.high)))
                        return "_houseExpense: integer|Long expected";
                if (message._carExpense != null && message.hasOwnProperty("_carExpense"))
                    if (!$util.isInteger(message._carExpense) && !(message._carExpense && $util.isInteger(message._carExpense.low) && $util.isInteger(message._carExpense.high)))
                        return "_carExpense: integer|Long expected";
                if (message._creditCardExpense != null && message.hasOwnProperty("_creditCardExpense"))
                    if (!$util.isInteger(message._creditCardExpense) && !(message._creditCardExpense && $util.isInteger(message._creditCardExpense.low) && $util.isInteger(message._creditCardExpense.high)))
                        return "_creditCardExpense: integer|Long expected";
                if (message._borrowMoneyExpense != null && message.hasOwnProperty("_borrowMoneyExpense"))
                    if (!$util.isInteger(message._borrowMoneyExpense) && !(message._borrowMoneyExpense && $util.isInteger(message._borrowMoneyExpense.low) && $util.isInteger(message._borrowMoneyExpense.high)))
                        return "_borrowMoneyExpense: integer|Long expected";
                if (message._babyExpense != null && message.hasOwnProperty("_babyExpense"))
                    if (!$util.isInteger(message._babyExpense) && !(message._babyExpense && $util.isInteger(message._babyExpense.low) && $util.isInteger(message._babyExpense.high)))
                        return "_babyExpense: integer|Long expected";
                if (message._bankLoanExpense != null && message.hasOwnProperty("_bankLoanExpense"))
                    if (!$util.isInteger(message._bankLoanExpense) && !(message._bankLoanExpense && $util.isInteger(message._bankLoanExpense.low) && $util.isInteger(message._bankLoanExpense.high)))
                        return "_bankLoanExpense: integer|Long expected";
                if (message.assets != null && message.hasOwnProperty("assets")) {
                    if (!Array.isArray(message.assets))
                        return "assets: array expected";
                    for (var i = 0; i < message.assets.length; ++i) {
                        var error = $root.pb.cenarius.RoleAsset.verify(message.assets[i]);
                        if (error)
                            return "assets." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a Role message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.cenarius.Role
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.cenarius.Role} Role
             */
            Role.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.cenarius.Role)
                    return object;
                var message = new $root.pb.cenarius.Role();
                if (object.ID != null)
                    if ($util.Long)
                        (message.ID = $util.Long.fromValue(object.ID)).unsigned = false;
                    else if (typeof object.ID === "string")
                        message.ID = parseInt(object.ID, 10);
                    else if (typeof object.ID === "number")
                        message.ID = object.ID;
                    else if (typeof object.ID === "object")
                        message.ID = new $util.LongBits(object.ID.low >>> 0, object.ID.high >>> 0).toNumber();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.industry != null)
                    message.industry = String(object.industry);
                if (object.salary != null)
                    if ($util.Long)
                        (message.salary = $util.Long.fromValue(object.salary)).unsigned = false;
                    else if (typeof object.salary === "string")
                        message.salary = parseInt(object.salary, 10);
                    else if (typeof object.salary === "number")
                        message.salary = object.salary;
                    else if (typeof object.salary === "object")
                        message.salary = new $util.LongBits(object.salary.low >>> 0, object.salary.high >>> 0).toNumber();
                if (object.expense != null)
                    if ($util.Long)
                        (message.expense = $util.Long.fromValue(object.expense)).unsigned = false;
                    else if (typeof object.expense === "string")
                        message.expense = parseInt(object.expense, 10);
                    else if (typeof object.expense === "number")
                        message.expense = object.expense;
                    else if (typeof object.expense === "object")
                        message.expense = new $util.LongBits(object.expense.low >>> 0, object.expense.high >>> 0).toNumber();
                if (object.houseLoan != null)
                    if ($util.Long)
                        (message.houseLoan = $util.Long.fromValue(object.houseLoan)).unsigned = false;
                    else if (typeof object.houseLoan === "string")
                        message.houseLoan = parseInt(object.houseLoan, 10);
                    else if (typeof object.houseLoan === "number")
                        message.houseLoan = object.houseLoan;
                    else if (typeof object.houseLoan === "object")
                        message.houseLoan = new $util.LongBits(object.houseLoan.low >>> 0, object.houseLoan.high >>> 0).toNumber();
                if (object.carLoan != null)
                    if ($util.Long)
                        (message.carLoan = $util.Long.fromValue(object.carLoan)).unsigned = false;
                    else if (typeof object.carLoan === "string")
                        message.carLoan = parseInt(object.carLoan, 10);
                    else if (typeof object.carLoan === "number")
                        message.carLoan = object.carLoan;
                    else if (typeof object.carLoan === "object")
                        message.carLoan = new $util.LongBits(object.carLoan.low >>> 0, object.carLoan.high >>> 0).toNumber();
                if (object.creditCard != null)
                    if ($util.Long)
                        (message.creditCard = $util.Long.fromValue(object.creditCard)).unsigned = false;
                    else if (typeof object.creditCard === "string")
                        message.creditCard = parseInt(object.creditCard, 10);
                    else if (typeof object.creditCard === "number")
                        message.creditCard = object.creditCard;
                    else if (typeof object.creditCard === "object")
                        message.creditCard = new $util.LongBits(object.creditCard.low >>> 0, object.creditCard.high >>> 0).toNumber();
                if (object.borrowMoney != null)
                    if ($util.Long)
                        (message.borrowMoney = $util.Long.fromValue(object.borrowMoney)).unsigned = false;
                    else if (typeof object.borrowMoney === "string")
                        message.borrowMoney = parseInt(object.borrowMoney, 10);
                    else if (typeof object.borrowMoney === "number")
                        message.borrowMoney = object.borrowMoney;
                    else if (typeof object.borrowMoney === "object")
                        message.borrowMoney = new $util.LongBits(object.borrowMoney.low >>> 0, object.borrowMoney.high >>> 0).toNumber();
                if (object.bankLoan != null)
                    if ($util.Long)
                        (message.bankLoan = $util.Long.fromValue(object.bankLoan)).unsigned = false;
                    else if (typeof object.bankLoan === "string")
                        message.bankLoan = parseInt(object.bankLoan, 10);
                    else if (typeof object.bankLoan === "number")
                        message.bankLoan = object.bankLoan;
                    else if (typeof object.bankLoan === "object")
                        message.bankLoan = new $util.LongBits(object.bankLoan.low >>> 0, object.bankLoan.high >>> 0).toNumber();
                if (object.taxTatePCT != null)
                    message.taxTatePCT = Number(object.taxTatePCT);
                if (object.houseRatePCT != null)
                    message.houseRatePCT = Number(object.houseRatePCT);
                if (object.carRatePCT != null)
                    message.carRatePCT = Number(object.carRatePCT);
                if (object.creditCardRatePCT != null)
                    message.creditCardRatePCT = Number(object.creditCardRatePCT);
                if (object.borrowMoneyRatePCT != null)
                    message.borrowMoneyRatePCT = Number(object.borrowMoneyRatePCT);
                if (object.bankLoanRatePCT != null)
                    message.bankLoanRatePCT = Number(object.bankLoanRatePCT);
                if (object.taxAndSpendPCT != null)
                    message.taxAndSpendPCT = Number(object.taxAndSpendPCT);
                if (object.babySpendPCT != null)
                    message.babySpendPCT = Number(object.babySpendPCT);
                if (object.wageHikePCT != null)
                    message.wageHikePCT = Number(object.wageHikePCT);
                if (object.flag != null)
                    message.flag = String(object.flag);
                if (object.available != null)
                    message.available = Boolean(object.available);
                if (object.free != null)
                    message.free = Boolean(object.free);
                if (object.avatar != null)
                    message.avatar = String(object.avatar);
                if (object.promotions) {
                    if (!Array.isArray(object.promotions))
                        throw TypeError(".pb.cenarius.Role.promotions: array expected");
                    message.promotions = [];
                    for (var i = 0; i < object.promotions.length; ++i)
                        message.promotions[i] = String(object.promotions[i]);
                }
                if (object._insuranceAndHousingFund != null)
                    if ($util.Long)
                        (message._insuranceAndHousingFund = $util.Long.fromValue(object._insuranceAndHousingFund)).unsigned = false;
                    else if (typeof object._insuranceAndHousingFund === "string")
                        message._insuranceAndHousingFund = parseInt(object._insuranceAndHousingFund, 10);
                    else if (typeof object._insuranceAndHousingFund === "number")
                        message._insuranceAndHousingFund = object._insuranceAndHousingFund;
                    else if (typeof object._insuranceAndHousingFund === "object")
                        message._insuranceAndHousingFund = new $util.LongBits(object._insuranceAndHousingFund.low >>> 0, object._insuranceAndHousingFund.high >>> 0).toNumber();
                if (object._houseExpense != null)
                    if ($util.Long)
                        (message._houseExpense = $util.Long.fromValue(object._houseExpense)).unsigned = false;
                    else if (typeof object._houseExpense === "string")
                        message._houseExpense = parseInt(object._houseExpense, 10);
                    else if (typeof object._houseExpense === "number")
                        message._houseExpense = object._houseExpense;
                    else if (typeof object._houseExpense === "object")
                        message._houseExpense = new $util.LongBits(object._houseExpense.low >>> 0, object._houseExpense.high >>> 0).toNumber();
                if (object._carExpense != null)
                    if ($util.Long)
                        (message._carExpense = $util.Long.fromValue(object._carExpense)).unsigned = false;
                    else if (typeof object._carExpense === "string")
                        message._carExpense = parseInt(object._carExpense, 10);
                    else if (typeof object._carExpense === "number")
                        message._carExpense = object._carExpense;
                    else if (typeof object._carExpense === "object")
                        message._carExpense = new $util.LongBits(object._carExpense.low >>> 0, object._carExpense.high >>> 0).toNumber();
                if (object._creditCardExpense != null)
                    if ($util.Long)
                        (message._creditCardExpense = $util.Long.fromValue(object._creditCardExpense)).unsigned = false;
                    else if (typeof object._creditCardExpense === "string")
                        message._creditCardExpense = parseInt(object._creditCardExpense, 10);
                    else if (typeof object._creditCardExpense === "number")
                        message._creditCardExpense = object._creditCardExpense;
                    else if (typeof object._creditCardExpense === "object")
                        message._creditCardExpense = new $util.LongBits(object._creditCardExpense.low >>> 0, object._creditCardExpense.high >>> 0).toNumber();
                if (object._borrowMoneyExpense != null)
                    if ($util.Long)
                        (message._borrowMoneyExpense = $util.Long.fromValue(object._borrowMoneyExpense)).unsigned = false;
                    else if (typeof object._borrowMoneyExpense === "string")
                        message._borrowMoneyExpense = parseInt(object._borrowMoneyExpense, 10);
                    else if (typeof object._borrowMoneyExpense === "number")
                        message._borrowMoneyExpense = object._borrowMoneyExpense;
                    else if (typeof object._borrowMoneyExpense === "object")
                        message._borrowMoneyExpense = new $util.LongBits(object._borrowMoneyExpense.low >>> 0, object._borrowMoneyExpense.high >>> 0).toNumber();
                if (object._babyExpense != null)
                    if ($util.Long)
                        (message._babyExpense = $util.Long.fromValue(object._babyExpense)).unsigned = false;
                    else if (typeof object._babyExpense === "string")
                        message._babyExpense = parseInt(object._babyExpense, 10);
                    else if (typeof object._babyExpense === "number")
                        message._babyExpense = object._babyExpense;
                    else if (typeof object._babyExpense === "object")
                        message._babyExpense = new $util.LongBits(object._babyExpense.low >>> 0, object._babyExpense.high >>> 0).toNumber();
                if (object._bankLoanExpense != null)
                    if ($util.Long)
                        (message._bankLoanExpense = $util.Long.fromValue(object._bankLoanExpense)).unsigned = false;
                    else if (typeof object._bankLoanExpense === "string")
                        message._bankLoanExpense = parseInt(object._bankLoanExpense, 10);
                    else if (typeof object._bankLoanExpense === "number")
                        message._bankLoanExpense = object._bankLoanExpense;
                    else if (typeof object._bankLoanExpense === "object")
                        message._bankLoanExpense = new $util.LongBits(object._bankLoanExpense.low >>> 0, object._bankLoanExpense.high >>> 0).toNumber();
                if (object.assets) {
                    if (!Array.isArray(object.assets))
                        throw TypeError(".pb.cenarius.Role.assets: array expected");
                    message.assets = [];
                    for (var i = 0; i < object.assets.length; ++i) {
                        if (typeof object.assets[i] !== "object")
                            throw TypeError(".pb.cenarius.Role.assets: object expected");
                        message.assets[i] = $root.pb.cenarius.RoleAsset.fromObject(object.assets[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a Role message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.cenarius.Role
             * @static
             * @param {pb.cenarius.Role} message Role
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Role.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.promotions = [];
                    object.assets = [];
                }
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.ID = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.ID = options.longs === String ? "0" : 0;
                    object.name = "";
                    object.industry = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.salary = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.salary = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.expense = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.expense = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.houseLoan = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.houseLoan = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.carLoan = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.carLoan = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.creditCard = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.creditCard = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.borrowMoney = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.borrowMoney = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.bankLoan = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.bankLoan = options.longs === String ? "0" : 0;
                    object.taxTatePCT = 0;
                    object.houseRatePCT = 0;
                    object.carRatePCT = 0;
                    object.creditCardRatePCT = 0;
                    object.borrowMoneyRatePCT = 0;
                    object.bankLoanRatePCT = 0;
                    object.taxAndSpendPCT = 0;
                    object.babySpendPCT = 0;
                    object.wageHikePCT = 0;
                    object.flag = "";
                    object.available = false;
                    object.free = false;
                    object.avatar = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object._insuranceAndHousingFund = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object._insuranceAndHousingFund = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object._houseExpense = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object._houseExpense = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object._carExpense = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object._carExpense = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object._creditCardExpense = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object._creditCardExpense = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object._borrowMoneyExpense = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object._borrowMoneyExpense = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object._babyExpense = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object._babyExpense = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object._bankLoanExpense = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object._bankLoanExpense = options.longs === String ? "0" : 0;
                }
                if (message.ID != null && message.hasOwnProperty("ID"))
                    if (typeof message.ID === "number")
                        object.ID = options.longs === String ? String(message.ID) : message.ID;
                    else
                        object.ID = options.longs === String ? $util.Long.prototype.toString.call(message.ID) : options.longs === Number ? new $util.LongBits(message.ID.low >>> 0, message.ID.high >>> 0).toNumber() : message.ID;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.industry != null && message.hasOwnProperty("industry"))
                    object.industry = message.industry;
                if (message.salary != null && message.hasOwnProperty("salary"))
                    if (typeof message.salary === "number")
                        object.salary = options.longs === String ? String(message.salary) : message.salary;
                    else
                        object.salary = options.longs === String ? $util.Long.prototype.toString.call(message.salary) : options.longs === Number ? new $util.LongBits(message.salary.low >>> 0, message.salary.high >>> 0).toNumber() : message.salary;
                if (message.expense != null && message.hasOwnProperty("expense"))
                    if (typeof message.expense === "number")
                        object.expense = options.longs === String ? String(message.expense) : message.expense;
                    else
                        object.expense = options.longs === String ? $util.Long.prototype.toString.call(message.expense) : options.longs === Number ? new $util.LongBits(message.expense.low >>> 0, message.expense.high >>> 0).toNumber() : message.expense;
                if (message.houseLoan != null && message.hasOwnProperty("houseLoan"))
                    if (typeof message.houseLoan === "number")
                        object.houseLoan = options.longs === String ? String(message.houseLoan) : message.houseLoan;
                    else
                        object.houseLoan = options.longs === String ? $util.Long.prototype.toString.call(message.houseLoan) : options.longs === Number ? new $util.LongBits(message.houseLoan.low >>> 0, message.houseLoan.high >>> 0).toNumber() : message.houseLoan;
                if (message.carLoan != null && message.hasOwnProperty("carLoan"))
                    if (typeof message.carLoan === "number")
                        object.carLoan = options.longs === String ? String(message.carLoan) : message.carLoan;
                    else
                        object.carLoan = options.longs === String ? $util.Long.prototype.toString.call(message.carLoan) : options.longs === Number ? new $util.LongBits(message.carLoan.low >>> 0, message.carLoan.high >>> 0).toNumber() : message.carLoan;
                if (message.creditCard != null && message.hasOwnProperty("creditCard"))
                    if (typeof message.creditCard === "number")
                        object.creditCard = options.longs === String ? String(message.creditCard) : message.creditCard;
                    else
                        object.creditCard = options.longs === String ? $util.Long.prototype.toString.call(message.creditCard) : options.longs === Number ? new $util.LongBits(message.creditCard.low >>> 0, message.creditCard.high >>> 0).toNumber() : message.creditCard;
                if (message.borrowMoney != null && message.hasOwnProperty("borrowMoney"))
                    if (typeof message.borrowMoney === "number")
                        object.borrowMoney = options.longs === String ? String(message.borrowMoney) : message.borrowMoney;
                    else
                        object.borrowMoney = options.longs === String ? $util.Long.prototype.toString.call(message.borrowMoney) : options.longs === Number ? new $util.LongBits(message.borrowMoney.low >>> 0, message.borrowMoney.high >>> 0).toNumber() : message.borrowMoney;
                if (message.bankLoan != null && message.hasOwnProperty("bankLoan"))
                    if (typeof message.bankLoan === "number")
                        object.bankLoan = options.longs === String ? String(message.bankLoan) : message.bankLoan;
                    else
                        object.bankLoan = options.longs === String ? $util.Long.prototype.toString.call(message.bankLoan) : options.longs === Number ? new $util.LongBits(message.bankLoan.low >>> 0, message.bankLoan.high >>> 0).toNumber() : message.bankLoan;
                if (message.taxTatePCT != null && message.hasOwnProperty("taxTatePCT"))
                    object.taxTatePCT = options.json && !isFinite(message.taxTatePCT) ? String(message.taxTatePCT) : message.taxTatePCT;
                if (message.houseRatePCT != null && message.hasOwnProperty("houseRatePCT"))
                    object.houseRatePCT = options.json && !isFinite(message.houseRatePCT) ? String(message.houseRatePCT) : message.houseRatePCT;
                if (message.carRatePCT != null && message.hasOwnProperty("carRatePCT"))
                    object.carRatePCT = options.json && !isFinite(message.carRatePCT) ? String(message.carRatePCT) : message.carRatePCT;
                if (message.creditCardRatePCT != null && message.hasOwnProperty("creditCardRatePCT"))
                    object.creditCardRatePCT = options.json && !isFinite(message.creditCardRatePCT) ? String(message.creditCardRatePCT) : message.creditCardRatePCT;
                if (message.borrowMoneyRatePCT != null && message.hasOwnProperty("borrowMoneyRatePCT"))
                    object.borrowMoneyRatePCT = options.json && !isFinite(message.borrowMoneyRatePCT) ? String(message.borrowMoneyRatePCT) : message.borrowMoneyRatePCT;
                if (message.bankLoanRatePCT != null && message.hasOwnProperty("bankLoanRatePCT"))
                    object.bankLoanRatePCT = options.json && !isFinite(message.bankLoanRatePCT) ? String(message.bankLoanRatePCT) : message.bankLoanRatePCT;
                if (message.taxAndSpendPCT != null && message.hasOwnProperty("taxAndSpendPCT"))
                    object.taxAndSpendPCT = options.json && !isFinite(message.taxAndSpendPCT) ? String(message.taxAndSpendPCT) : message.taxAndSpendPCT;
                if (message.babySpendPCT != null && message.hasOwnProperty("babySpendPCT"))
                    object.babySpendPCT = options.json && !isFinite(message.babySpendPCT) ? String(message.babySpendPCT) : message.babySpendPCT;
                if (message.wageHikePCT != null && message.hasOwnProperty("wageHikePCT"))
                    object.wageHikePCT = options.json && !isFinite(message.wageHikePCT) ? String(message.wageHikePCT) : message.wageHikePCT;
                if (message.flag != null && message.hasOwnProperty("flag"))
                    object.flag = message.flag;
                if (message.available != null && message.hasOwnProperty("available"))
                    object.available = message.available;
                if (message.free != null && message.hasOwnProperty("free"))
                    object.free = message.free;
                if (message.avatar != null && message.hasOwnProperty("avatar"))
                    object.avatar = message.avatar;
                if (message.promotions && message.promotions.length) {
                    object.promotions = [];
                    for (var j = 0; j < message.promotions.length; ++j)
                        object.promotions[j] = message.promotions[j];
                }
                if (message._insuranceAndHousingFund != null && message.hasOwnProperty("_insuranceAndHousingFund"))
                    if (typeof message._insuranceAndHousingFund === "number")
                        object._insuranceAndHousingFund = options.longs === String ? String(message._insuranceAndHousingFund) : message._insuranceAndHousingFund;
                    else
                        object._insuranceAndHousingFund = options.longs === String ? $util.Long.prototype.toString.call(message._insuranceAndHousingFund) : options.longs === Number ? new $util.LongBits(message._insuranceAndHousingFund.low >>> 0, message._insuranceAndHousingFund.high >>> 0).toNumber() : message._insuranceAndHousingFund;
                if (message._houseExpense != null && message.hasOwnProperty("_houseExpense"))
                    if (typeof message._houseExpense === "number")
                        object._houseExpense = options.longs === String ? String(message._houseExpense) : message._houseExpense;
                    else
                        object._houseExpense = options.longs === String ? $util.Long.prototype.toString.call(message._houseExpense) : options.longs === Number ? new $util.LongBits(message._houseExpense.low >>> 0, message._houseExpense.high >>> 0).toNumber() : message._houseExpense;
                if (message._carExpense != null && message.hasOwnProperty("_carExpense"))
                    if (typeof message._carExpense === "number")
                        object._carExpense = options.longs === String ? String(message._carExpense) : message._carExpense;
                    else
                        object._carExpense = options.longs === String ? $util.Long.prototype.toString.call(message._carExpense) : options.longs === Number ? new $util.LongBits(message._carExpense.low >>> 0, message._carExpense.high >>> 0).toNumber() : message._carExpense;
                if (message._creditCardExpense != null && message.hasOwnProperty("_creditCardExpense"))
                    if (typeof message._creditCardExpense === "number")
                        object._creditCardExpense = options.longs === String ? String(message._creditCardExpense) : message._creditCardExpense;
                    else
                        object._creditCardExpense = options.longs === String ? $util.Long.prototype.toString.call(message._creditCardExpense) : options.longs === Number ? new $util.LongBits(message._creditCardExpense.low >>> 0, message._creditCardExpense.high >>> 0).toNumber() : message._creditCardExpense;
                if (message._borrowMoneyExpense != null && message.hasOwnProperty("_borrowMoneyExpense"))
                    if (typeof message._borrowMoneyExpense === "number")
                        object._borrowMoneyExpense = options.longs === String ? String(message._borrowMoneyExpense) : message._borrowMoneyExpense;
                    else
                        object._borrowMoneyExpense = options.longs === String ? $util.Long.prototype.toString.call(message._borrowMoneyExpense) : options.longs === Number ? new $util.LongBits(message._borrowMoneyExpense.low >>> 0, message._borrowMoneyExpense.high >>> 0).toNumber() : message._borrowMoneyExpense;
                if (message._babyExpense != null && message.hasOwnProperty("_babyExpense"))
                    if (typeof message._babyExpense === "number")
                        object._babyExpense = options.longs === String ? String(message._babyExpense) : message._babyExpense;
                    else
                        object._babyExpense = options.longs === String ? $util.Long.prototype.toString.call(message._babyExpense) : options.longs === Number ? new $util.LongBits(message._babyExpense.low >>> 0, message._babyExpense.high >>> 0).toNumber() : message._babyExpense;
                if (message._bankLoanExpense != null && message.hasOwnProperty("_bankLoanExpense"))
                    if (typeof message._bankLoanExpense === "number")
                        object._bankLoanExpense = options.longs === String ? String(message._bankLoanExpense) : message._bankLoanExpense;
                    else
                        object._bankLoanExpense = options.longs === String ? $util.Long.prototype.toString.call(message._bankLoanExpense) : options.longs === Number ? new $util.LongBits(message._bankLoanExpense.low >>> 0, message._bankLoanExpense.high >>> 0).toNumber() : message._bankLoanExpense;
                if (message.assets && message.assets.length) {
                    object.assets = [];
                    for (var j = 0; j < message.assets.length; ++j)
                        object.assets[j] = $root.pb.cenarius.RoleAsset.toObject(message.assets[j], options);
                }
                return object;
            };

            /**
             * Converts this Role to JSON.
             * @function toJSON
             * @memberof pb.cenarius.Role
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Role.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Role;
        })();

        cenarius.PullRolesRsp = (function() {

            /**
             * Properties of a PullRolesRsp.
             * @memberof pb.cenarius
             * @interface IPullRolesRsp
             * @property {Array.<pb.cenarius.IRole>|null} [roles] PullRolesRsp roles
             */

            /**
             * Constructs a new PullRolesRsp.
             * @memberof pb.cenarius
             * @classdesc Represents a PullRolesRsp.
             * @implements IPullRolesRsp
             * @constructor
             * @param {pb.cenarius.IPullRolesRsp=} [properties] Properties to set
             */
            function PullRolesRsp(properties) {
                this.roles = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PullRolesRsp roles.
             * @member {Array.<pb.cenarius.IRole>} roles
             * @memberof pb.cenarius.PullRolesRsp
             * @instance
             */
            PullRolesRsp.prototype.roles = $util.emptyArray;

            /**
             * Creates a new PullRolesRsp instance using the specified properties.
             * @function create
             * @memberof pb.cenarius.PullRolesRsp
             * @static
             * @param {pb.cenarius.IPullRolesRsp=} [properties] Properties to set
             * @returns {pb.cenarius.PullRolesRsp} PullRolesRsp instance
             */
            PullRolesRsp.create = function create(properties) {
                return new PullRolesRsp(properties);
            };

            /**
             * Encodes the specified PullRolesRsp message. Does not implicitly {@link pb.cenarius.PullRolesRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.cenarius.PullRolesRsp
             * @static
             * @param {pb.cenarius.IPullRolesRsp} message PullRolesRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PullRolesRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.roles != null && message.roles.length)
                    for (var i = 0; i < message.roles.length; ++i)
                        $root.pb.cenarius.Role.encode(message.roles[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified PullRolesRsp message, length delimited. Does not implicitly {@link pb.cenarius.PullRolesRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.cenarius.PullRolesRsp
             * @static
             * @param {pb.cenarius.IPullRolesRsp} message PullRolesRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PullRolesRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PullRolesRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.cenarius.PullRolesRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.cenarius.PullRolesRsp} PullRolesRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PullRolesRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.cenarius.PullRolesRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.roles && message.roles.length))
                            message.roles = [];
                        message.roles.push($root.pb.cenarius.Role.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PullRolesRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.cenarius.PullRolesRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.cenarius.PullRolesRsp} PullRolesRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PullRolesRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PullRolesRsp message.
             * @function verify
             * @memberof pb.cenarius.PullRolesRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PullRolesRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.roles != null && message.hasOwnProperty("roles")) {
                    if (!Array.isArray(message.roles))
                        return "roles: array expected";
                    for (var i = 0; i < message.roles.length; ++i) {
                        var error = $root.pb.cenarius.Role.verify(message.roles[i]);
                        if (error)
                            return "roles." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a PullRolesRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.cenarius.PullRolesRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.cenarius.PullRolesRsp} PullRolesRsp
             */
            PullRolesRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.cenarius.PullRolesRsp)
                    return object;
                var message = new $root.pb.cenarius.PullRolesRsp();
                if (object.roles) {
                    if (!Array.isArray(object.roles))
                        throw TypeError(".pb.cenarius.PullRolesRsp.roles: array expected");
                    message.roles = [];
                    for (var i = 0; i < object.roles.length; ++i) {
                        if (typeof object.roles[i] !== "object")
                            throw TypeError(".pb.cenarius.PullRolesRsp.roles: object expected");
                        message.roles[i] = $root.pb.cenarius.Role.fromObject(object.roles[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a PullRolesRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.cenarius.PullRolesRsp
             * @static
             * @param {pb.cenarius.PullRolesRsp} message PullRolesRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PullRolesRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.roles = [];
                if (message.roles && message.roles.length) {
                    object.roles = [];
                    for (var j = 0; j < message.roles.length; ++j)
                        object.roles[j] = $root.pb.cenarius.Role.toObject(message.roles[j], options);
                }
                return object;
            };

            /**
             * Converts this PullRolesRsp to JSON.
             * @function toJSON
             * @memberof pb.cenarius.PullRolesRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PullRolesRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PullRolesRsp;
        })();

        cenarius.UserAvailableRole = (function() {

            /**
             * Properties of a UserAvailableRole.
             * @memberof pb.cenarius
             * @interface IUserAvailableRole
             * @property {pb.cenarius.IRole|null} [role] UserAvailableRole role
             * @property {boolean|null} [purchased] UserAvailableRole purchased
             * @property {boolean|null} [free] UserAvailableRole free
             */

            /**
             * Constructs a new UserAvailableRole.
             * @memberof pb.cenarius
             * @classdesc Represents a UserAvailableRole.
             * @implements IUserAvailableRole
             * @constructor
             * @param {pb.cenarius.IUserAvailableRole=} [properties] Properties to set
             */
            function UserAvailableRole(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UserAvailableRole role.
             * @member {pb.cenarius.IRole|null|undefined} role
             * @memberof pb.cenarius.UserAvailableRole
             * @instance
             */
            UserAvailableRole.prototype.role = null;

            /**
             * UserAvailableRole purchased.
             * @member {boolean} purchased
             * @memberof pb.cenarius.UserAvailableRole
             * @instance
             */
            UserAvailableRole.prototype.purchased = false;

            /**
             * UserAvailableRole free.
             * @member {boolean} free
             * @memberof pb.cenarius.UserAvailableRole
             * @instance
             */
            UserAvailableRole.prototype.free = false;

            /**
             * Creates a new UserAvailableRole instance using the specified properties.
             * @function create
             * @memberof pb.cenarius.UserAvailableRole
             * @static
             * @param {pb.cenarius.IUserAvailableRole=} [properties] Properties to set
             * @returns {pb.cenarius.UserAvailableRole} UserAvailableRole instance
             */
            UserAvailableRole.create = function create(properties) {
                return new UserAvailableRole(properties);
            };

            /**
             * Encodes the specified UserAvailableRole message. Does not implicitly {@link pb.cenarius.UserAvailableRole.verify|verify} messages.
             * @function encode
             * @memberof pb.cenarius.UserAvailableRole
             * @static
             * @param {pb.cenarius.IUserAvailableRole} message UserAvailableRole message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UserAvailableRole.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.role != null && message.hasOwnProperty("role"))
                    $root.pb.cenarius.Role.encode(message.role, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.purchased != null && message.hasOwnProperty("purchased"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.purchased);
                if (message.free != null && message.hasOwnProperty("free"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.free);
                return writer;
            };

            /**
             * Encodes the specified UserAvailableRole message, length delimited. Does not implicitly {@link pb.cenarius.UserAvailableRole.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.cenarius.UserAvailableRole
             * @static
             * @param {pb.cenarius.IUserAvailableRole} message UserAvailableRole message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UserAvailableRole.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a UserAvailableRole message from the specified reader or buffer.
             * @function decode
             * @memberof pb.cenarius.UserAvailableRole
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.cenarius.UserAvailableRole} UserAvailableRole
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UserAvailableRole.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.cenarius.UserAvailableRole();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.role = $root.pb.cenarius.Role.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.purchased = reader.bool();
                        break;
                    case 3:
                        message.free = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a UserAvailableRole message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.cenarius.UserAvailableRole
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.cenarius.UserAvailableRole} UserAvailableRole
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UserAvailableRole.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a UserAvailableRole message.
             * @function verify
             * @memberof pb.cenarius.UserAvailableRole
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UserAvailableRole.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.role != null && message.hasOwnProperty("role")) {
                    var error = $root.pb.cenarius.Role.verify(message.role);
                    if (error)
                        return "role." + error;
                }
                if (message.purchased != null && message.hasOwnProperty("purchased"))
                    if (typeof message.purchased !== "boolean")
                        return "purchased: boolean expected";
                if (message.free != null && message.hasOwnProperty("free"))
                    if (typeof message.free !== "boolean")
                        return "free: boolean expected";
                return null;
            };

            /**
             * Creates a UserAvailableRole message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.cenarius.UserAvailableRole
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.cenarius.UserAvailableRole} UserAvailableRole
             */
            UserAvailableRole.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.cenarius.UserAvailableRole)
                    return object;
                var message = new $root.pb.cenarius.UserAvailableRole();
                if (object.role != null) {
                    if (typeof object.role !== "object")
                        throw TypeError(".pb.cenarius.UserAvailableRole.role: object expected");
                    message.role = $root.pb.cenarius.Role.fromObject(object.role);
                }
                if (object.purchased != null)
                    message.purchased = Boolean(object.purchased);
                if (object.free != null)
                    message.free = Boolean(object.free);
                return message;
            };

            /**
             * Creates a plain object from a UserAvailableRole message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.cenarius.UserAvailableRole
             * @static
             * @param {pb.cenarius.UserAvailableRole} message UserAvailableRole
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UserAvailableRole.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.role = null;
                    object.purchased = false;
                    object.free = false;
                }
                if (message.role != null && message.hasOwnProperty("role"))
                    object.role = $root.pb.cenarius.Role.toObject(message.role, options);
                if (message.purchased != null && message.hasOwnProperty("purchased"))
                    object.purchased = message.purchased;
                if (message.free != null && message.hasOwnProperty("free"))
                    object.free = message.free;
                return object;
            };

            /**
             * Converts this UserAvailableRole to JSON.
             * @function toJSON
             * @memberof pb.cenarius.UserAvailableRole
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UserAvailableRole.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return UserAvailableRole;
        })();

        cenarius.FetchUserRolesReq = (function() {

            /**
             * Properties of a FetchUserRolesReq.
             * @memberof pb.cenarius
             * @interface IFetchUserRolesReq
             * @property {Long|null} [userID] FetchUserRolesReq userID
             */

            /**
             * Constructs a new FetchUserRolesReq.
             * @memberof pb.cenarius
             * @classdesc Represents a FetchUserRolesReq.
             * @implements IFetchUserRolesReq
             * @constructor
             * @param {pb.cenarius.IFetchUserRolesReq=} [properties] Properties to set
             */
            function FetchUserRolesReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FetchUserRolesReq userID.
             * @member {Long} userID
             * @memberof pb.cenarius.FetchUserRolesReq
             * @instance
             */
            FetchUserRolesReq.prototype.userID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new FetchUserRolesReq instance using the specified properties.
             * @function create
             * @memberof pb.cenarius.FetchUserRolesReq
             * @static
             * @param {pb.cenarius.IFetchUserRolesReq=} [properties] Properties to set
             * @returns {pb.cenarius.FetchUserRolesReq} FetchUserRolesReq instance
             */
            FetchUserRolesReq.create = function create(properties) {
                return new FetchUserRolesReq(properties);
            };

            /**
             * Encodes the specified FetchUserRolesReq message. Does not implicitly {@link pb.cenarius.FetchUserRolesReq.verify|verify} messages.
             * @function encode
             * @memberof pb.cenarius.FetchUserRolesReq
             * @static
             * @param {pb.cenarius.IFetchUserRolesReq} message FetchUserRolesReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FetchUserRolesReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userID != null && message.hasOwnProperty("userID"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userID);
                return writer;
            };

            /**
             * Encodes the specified FetchUserRolesReq message, length delimited. Does not implicitly {@link pb.cenarius.FetchUserRolesReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.cenarius.FetchUserRolesReq
             * @static
             * @param {pb.cenarius.IFetchUserRolesReq} message FetchUserRolesReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FetchUserRolesReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FetchUserRolesReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.cenarius.FetchUserRolesReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.cenarius.FetchUserRolesReq} FetchUserRolesReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FetchUserRolesReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.cenarius.FetchUserRolesReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.userID = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FetchUserRolesReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.cenarius.FetchUserRolesReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.cenarius.FetchUserRolesReq} FetchUserRolesReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FetchUserRolesReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FetchUserRolesReq message.
             * @function verify
             * @memberof pb.cenarius.FetchUserRolesReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FetchUserRolesReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userID != null && message.hasOwnProperty("userID"))
                    if (!$util.isInteger(message.userID) && !(message.userID && $util.isInteger(message.userID.low) && $util.isInteger(message.userID.high)))
                        return "userID: integer|Long expected";
                return null;
            };

            /**
             * Creates a FetchUserRolesReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.cenarius.FetchUserRolesReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.cenarius.FetchUserRolesReq} FetchUserRolesReq
             */
            FetchUserRolesReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.cenarius.FetchUserRolesReq)
                    return object;
                var message = new $root.pb.cenarius.FetchUserRolesReq();
                if (object.userID != null)
                    if ($util.Long)
                        (message.userID = $util.Long.fromValue(object.userID)).unsigned = false;
                    else if (typeof object.userID === "string")
                        message.userID = parseInt(object.userID, 10);
                    else if (typeof object.userID === "number")
                        message.userID = object.userID;
                    else if (typeof object.userID === "object")
                        message.userID = new $util.LongBits(object.userID.low >>> 0, object.userID.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a FetchUserRolesReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.cenarius.FetchUserRolesReq
             * @static
             * @param {pb.cenarius.FetchUserRolesReq} message FetchUserRolesReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FetchUserRolesReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userID = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userID = options.longs === String ? "0" : 0;
                if (message.userID != null && message.hasOwnProperty("userID"))
                    if (typeof message.userID === "number")
                        object.userID = options.longs === String ? String(message.userID) : message.userID;
                    else
                        object.userID = options.longs === String ? $util.Long.prototype.toString.call(message.userID) : options.longs === Number ? new $util.LongBits(message.userID.low >>> 0, message.userID.high >>> 0).toNumber() : message.userID;
                return object;
            };

            /**
             * Converts this FetchUserRolesReq to JSON.
             * @function toJSON
             * @memberof pb.cenarius.FetchUserRolesReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FetchUserRolesReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FetchUserRolesReq;
        })();

        cenarius.FetchUserRolesRsp = (function() {

            /**
             * Properties of a FetchUserRolesRsp.
             * @memberof pb.cenarius
             * @interface IFetchUserRolesRsp
             * @property {Array.<pb.cenarius.IUserAvailableRole>|null} [roles] FetchUserRolesRsp roles
             */

            /**
             * Constructs a new FetchUserRolesRsp.
             * @memberof pb.cenarius
             * @classdesc Represents a FetchUserRolesRsp.
             * @implements IFetchUserRolesRsp
             * @constructor
             * @param {pb.cenarius.IFetchUserRolesRsp=} [properties] Properties to set
             */
            function FetchUserRolesRsp(properties) {
                this.roles = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FetchUserRolesRsp roles.
             * @member {Array.<pb.cenarius.IUserAvailableRole>} roles
             * @memberof pb.cenarius.FetchUserRolesRsp
             * @instance
             */
            FetchUserRolesRsp.prototype.roles = $util.emptyArray;

            /**
             * Creates a new FetchUserRolesRsp instance using the specified properties.
             * @function create
             * @memberof pb.cenarius.FetchUserRolesRsp
             * @static
             * @param {pb.cenarius.IFetchUserRolesRsp=} [properties] Properties to set
             * @returns {pb.cenarius.FetchUserRolesRsp} FetchUserRolesRsp instance
             */
            FetchUserRolesRsp.create = function create(properties) {
                return new FetchUserRolesRsp(properties);
            };

            /**
             * Encodes the specified FetchUserRolesRsp message. Does not implicitly {@link pb.cenarius.FetchUserRolesRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.cenarius.FetchUserRolesRsp
             * @static
             * @param {pb.cenarius.IFetchUserRolesRsp} message FetchUserRolesRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FetchUserRolesRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.roles != null && message.roles.length)
                    for (var i = 0; i < message.roles.length; ++i)
                        $root.pb.cenarius.UserAvailableRole.encode(message.roles[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified FetchUserRolesRsp message, length delimited. Does not implicitly {@link pb.cenarius.FetchUserRolesRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.cenarius.FetchUserRolesRsp
             * @static
             * @param {pb.cenarius.IFetchUserRolesRsp} message FetchUserRolesRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FetchUserRolesRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FetchUserRolesRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.cenarius.FetchUserRolesRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.cenarius.FetchUserRolesRsp} FetchUserRolesRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FetchUserRolesRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.cenarius.FetchUserRolesRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.roles && message.roles.length))
                            message.roles = [];
                        message.roles.push($root.pb.cenarius.UserAvailableRole.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FetchUserRolesRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.cenarius.FetchUserRolesRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.cenarius.FetchUserRolesRsp} FetchUserRolesRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FetchUserRolesRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FetchUserRolesRsp message.
             * @function verify
             * @memberof pb.cenarius.FetchUserRolesRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FetchUserRolesRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.roles != null && message.hasOwnProperty("roles")) {
                    if (!Array.isArray(message.roles))
                        return "roles: array expected";
                    for (var i = 0; i < message.roles.length; ++i) {
                        var error = $root.pb.cenarius.UserAvailableRole.verify(message.roles[i]);
                        if (error)
                            return "roles." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a FetchUserRolesRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.cenarius.FetchUserRolesRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.cenarius.FetchUserRolesRsp} FetchUserRolesRsp
             */
            FetchUserRolesRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.cenarius.FetchUserRolesRsp)
                    return object;
                var message = new $root.pb.cenarius.FetchUserRolesRsp();
                if (object.roles) {
                    if (!Array.isArray(object.roles))
                        throw TypeError(".pb.cenarius.FetchUserRolesRsp.roles: array expected");
                    message.roles = [];
                    for (var i = 0; i < object.roles.length; ++i) {
                        if (typeof object.roles[i] !== "object")
                            throw TypeError(".pb.cenarius.FetchUserRolesRsp.roles: object expected");
                        message.roles[i] = $root.pb.cenarius.UserAvailableRole.fromObject(object.roles[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a FetchUserRolesRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.cenarius.FetchUserRolesRsp
             * @static
             * @param {pb.cenarius.FetchUserRolesRsp} message FetchUserRolesRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FetchUserRolesRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.roles = [];
                if (message.roles && message.roles.length) {
                    object.roles = [];
                    for (var j = 0; j < message.roles.length; ++j)
                        object.roles[j] = $root.pb.cenarius.UserAvailableRole.toObject(message.roles[j], options);
                }
                return object;
            };

            /**
             * Converts this FetchUserRolesRsp to JSON.
             * @function toJSON
             * @memberof pb.cenarius.FetchUserRolesRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FetchUserRolesRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FetchUserRolesRsp;
        })();

        cenarius.BatchFetchUserRolesReq = (function() {

            /**
             * Properties of a BatchFetchUserRolesReq.
             * @memberof pb.cenarius
             * @interface IBatchFetchUserRolesReq
             * @property {Array.<Long>|null} [users] BatchFetchUserRolesReq users
             */

            /**
             * Constructs a new BatchFetchUserRolesReq.
             * @memberof pb.cenarius
             * @classdesc Represents a BatchFetchUserRolesReq.
             * @implements IBatchFetchUserRolesReq
             * @constructor
             * @param {pb.cenarius.IBatchFetchUserRolesReq=} [properties] Properties to set
             */
            function BatchFetchUserRolesReq(properties) {
                this.users = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BatchFetchUserRolesReq users.
             * @member {Array.<Long>} users
             * @memberof pb.cenarius.BatchFetchUserRolesReq
             * @instance
             */
            BatchFetchUserRolesReq.prototype.users = $util.emptyArray;

            /**
             * Creates a new BatchFetchUserRolesReq instance using the specified properties.
             * @function create
             * @memberof pb.cenarius.BatchFetchUserRolesReq
             * @static
             * @param {pb.cenarius.IBatchFetchUserRolesReq=} [properties] Properties to set
             * @returns {pb.cenarius.BatchFetchUserRolesReq} BatchFetchUserRolesReq instance
             */
            BatchFetchUserRolesReq.create = function create(properties) {
                return new BatchFetchUserRolesReq(properties);
            };

            /**
             * Encodes the specified BatchFetchUserRolesReq message. Does not implicitly {@link pb.cenarius.BatchFetchUserRolesReq.verify|verify} messages.
             * @function encode
             * @memberof pb.cenarius.BatchFetchUserRolesReq
             * @static
             * @param {pb.cenarius.IBatchFetchUserRolesReq} message BatchFetchUserRolesReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BatchFetchUserRolesReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.users != null && message.users.length) {
                    writer.uint32(/* id 1, wireType 2 =*/10).fork();
                    for (var i = 0; i < message.users.length; ++i)
                        writer.int64(message.users[i]);
                    writer.ldelim();
                }
                return writer;
            };

            /**
             * Encodes the specified BatchFetchUserRolesReq message, length delimited. Does not implicitly {@link pb.cenarius.BatchFetchUserRolesReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.cenarius.BatchFetchUserRolesReq
             * @static
             * @param {pb.cenarius.IBatchFetchUserRolesReq} message BatchFetchUserRolesReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BatchFetchUserRolesReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BatchFetchUserRolesReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.cenarius.BatchFetchUserRolesReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.cenarius.BatchFetchUserRolesReq} BatchFetchUserRolesReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BatchFetchUserRolesReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.cenarius.BatchFetchUserRolesReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.users && message.users.length))
                            message.users = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.users.push(reader.int64());
                        } else
                            message.users.push(reader.int64());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BatchFetchUserRolesReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.cenarius.BatchFetchUserRolesReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.cenarius.BatchFetchUserRolesReq} BatchFetchUserRolesReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BatchFetchUserRolesReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BatchFetchUserRolesReq message.
             * @function verify
             * @memberof pb.cenarius.BatchFetchUserRolesReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BatchFetchUserRolesReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.users != null && message.hasOwnProperty("users")) {
                    if (!Array.isArray(message.users))
                        return "users: array expected";
                    for (var i = 0; i < message.users.length; ++i)
                        if (!$util.isInteger(message.users[i]) && !(message.users[i] && $util.isInteger(message.users[i].low) && $util.isInteger(message.users[i].high)))
                            return "users: integer|Long[] expected";
                }
                return null;
            };

            /**
             * Creates a BatchFetchUserRolesReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.cenarius.BatchFetchUserRolesReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.cenarius.BatchFetchUserRolesReq} BatchFetchUserRolesReq
             */
            BatchFetchUserRolesReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.cenarius.BatchFetchUserRolesReq)
                    return object;
                var message = new $root.pb.cenarius.BatchFetchUserRolesReq();
                if (object.users) {
                    if (!Array.isArray(object.users))
                        throw TypeError(".pb.cenarius.BatchFetchUserRolesReq.users: array expected");
                    message.users = [];
                    for (var i = 0; i < object.users.length; ++i)
                        if ($util.Long)
                            (message.users[i] = $util.Long.fromValue(object.users[i])).unsigned = false;
                        else if (typeof object.users[i] === "string")
                            message.users[i] = parseInt(object.users[i], 10);
                        else if (typeof object.users[i] === "number")
                            message.users[i] = object.users[i];
                        else if (typeof object.users[i] === "object")
                            message.users[i] = new $util.LongBits(object.users[i].low >>> 0, object.users[i].high >>> 0).toNumber();
                }
                return message;
            };

            /**
             * Creates a plain object from a BatchFetchUserRolesReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.cenarius.BatchFetchUserRolesReq
             * @static
             * @param {pb.cenarius.BatchFetchUserRolesReq} message BatchFetchUserRolesReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BatchFetchUserRolesReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.users = [];
                if (message.users && message.users.length) {
                    object.users = [];
                    for (var j = 0; j < message.users.length; ++j)
                        if (typeof message.users[j] === "number")
                            object.users[j] = options.longs === String ? String(message.users[j]) : message.users[j];
                        else
                            object.users[j] = options.longs === String ? $util.Long.prototype.toString.call(message.users[j]) : options.longs === Number ? new $util.LongBits(message.users[j].low >>> 0, message.users[j].high >>> 0).toNumber() : message.users[j];
                }
                return object;
            };

            /**
             * Converts this BatchFetchUserRolesReq to JSON.
             * @function toJSON
             * @memberof pb.cenarius.BatchFetchUserRolesReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BatchFetchUserRolesReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BatchFetchUserRolesReq;
        })();

        cenarius.BatchFetchUserRolesRsp = (function() {

            /**
             * Properties of a BatchFetchUserRolesRsp.
             * @memberof pb.cenarius
             * @interface IBatchFetchUserRolesRsp
             * @property {Object.<string,pb.cenarius.IFetchUserRolesRsp>|null} [records] BatchFetchUserRolesRsp records
             */

            /**
             * Constructs a new BatchFetchUserRolesRsp.
             * @memberof pb.cenarius
             * @classdesc Represents a BatchFetchUserRolesRsp.
             * @implements IBatchFetchUserRolesRsp
             * @constructor
             * @param {pb.cenarius.IBatchFetchUserRolesRsp=} [properties] Properties to set
             */
            function BatchFetchUserRolesRsp(properties) {
                this.records = {};
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BatchFetchUserRolesRsp records.
             * @member {Object.<string,pb.cenarius.IFetchUserRolesRsp>} records
             * @memberof pb.cenarius.BatchFetchUserRolesRsp
             * @instance
             */
            BatchFetchUserRolesRsp.prototype.records = $util.emptyObject;

            /**
             * Creates a new BatchFetchUserRolesRsp instance using the specified properties.
             * @function create
             * @memberof pb.cenarius.BatchFetchUserRolesRsp
             * @static
             * @param {pb.cenarius.IBatchFetchUserRolesRsp=} [properties] Properties to set
             * @returns {pb.cenarius.BatchFetchUserRolesRsp} BatchFetchUserRolesRsp instance
             */
            BatchFetchUserRolesRsp.create = function create(properties) {
                return new BatchFetchUserRolesRsp(properties);
            };

            /**
             * Encodes the specified BatchFetchUserRolesRsp message. Does not implicitly {@link pb.cenarius.BatchFetchUserRolesRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.cenarius.BatchFetchUserRolesRsp
             * @static
             * @param {pb.cenarius.IBatchFetchUserRolesRsp} message BatchFetchUserRolesRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BatchFetchUserRolesRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.records != null && message.hasOwnProperty("records"))
                    for (var keys = Object.keys(message.records), i = 0; i < keys.length; ++i) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 0 =*/8).int64(keys[i]);
                        $root.pb.cenarius.FetchUserRolesRsp.encode(message.records[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                    }
                return writer;
            };

            /**
             * Encodes the specified BatchFetchUserRolesRsp message, length delimited. Does not implicitly {@link pb.cenarius.BatchFetchUserRolesRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.cenarius.BatchFetchUserRolesRsp
             * @static
             * @param {pb.cenarius.IBatchFetchUserRolesRsp} message BatchFetchUserRolesRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BatchFetchUserRolesRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BatchFetchUserRolesRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.cenarius.BatchFetchUserRolesRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.cenarius.BatchFetchUserRolesRsp} BatchFetchUserRolesRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BatchFetchUserRolesRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.cenarius.BatchFetchUserRolesRsp(), key;
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        reader.skip().pos++;
                        if (message.records === $util.emptyObject)
                            message.records = {};
                        key = reader.int64();
                        reader.pos++;
                        message.records[typeof key === "object" ? $util.longToHash(key) : key] = $root.pb.cenarius.FetchUserRolesRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BatchFetchUserRolesRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.cenarius.BatchFetchUserRolesRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.cenarius.BatchFetchUserRolesRsp} BatchFetchUserRolesRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BatchFetchUserRolesRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BatchFetchUserRolesRsp message.
             * @function verify
             * @memberof pb.cenarius.BatchFetchUserRolesRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BatchFetchUserRolesRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.records != null && message.hasOwnProperty("records")) {
                    if (!$util.isObject(message.records))
                        return "records: object expected";
                    var key = Object.keys(message.records);
                    for (var i = 0; i < key.length; ++i) {
                        if (!$util.key64Re.test(key[i]))
                            return "records: integer|Long key{k:int64} expected";
                        {
                            var error = $root.pb.cenarius.FetchUserRolesRsp.verify(message.records[key[i]]);
                            if (error)
                                return "records." + error;
                        }
                    }
                }
                return null;
            };

            /**
             * Creates a BatchFetchUserRolesRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.cenarius.BatchFetchUserRolesRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.cenarius.BatchFetchUserRolesRsp} BatchFetchUserRolesRsp
             */
            BatchFetchUserRolesRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.cenarius.BatchFetchUserRolesRsp)
                    return object;
                var message = new $root.pb.cenarius.BatchFetchUserRolesRsp();
                if (object.records) {
                    if (typeof object.records !== "object")
                        throw TypeError(".pb.cenarius.BatchFetchUserRolesRsp.records: object expected");
                    message.records = {};
                    for (var keys = Object.keys(object.records), i = 0; i < keys.length; ++i) {
                        if (typeof object.records[keys[i]] !== "object")
                            throw TypeError(".pb.cenarius.BatchFetchUserRolesRsp.records: object expected");
                        message.records[keys[i]] = $root.pb.cenarius.FetchUserRolesRsp.fromObject(object.records[keys[i]]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a BatchFetchUserRolesRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.cenarius.BatchFetchUserRolesRsp
             * @static
             * @param {pb.cenarius.BatchFetchUserRolesRsp} message BatchFetchUserRolesRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BatchFetchUserRolesRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.objects || options.defaults)
                    object.records = {};
                var keys2;
                if (message.records && (keys2 = Object.keys(message.records)).length) {
                    object.records = {};
                    for (var j = 0; j < keys2.length; ++j)
                        object.records[keys2[j]] = $root.pb.cenarius.FetchUserRolesRsp.toObject(message.records[keys2[j]], options);
                }
                return object;
            };

            /**
             * Converts this BatchFetchUserRolesRsp to JSON.
             * @function toJSON
             * @memberof pb.cenarius.BatchFetchUserRolesRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BatchFetchUserRolesRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BatchFetchUserRolesRsp;
        })();

        cenarius.PlayerStatus = (function() {

            /**
             * Properties of a PlayerStatus.
             * @memberof pb.cenarius
             * @interface IPlayerStatus
             * @property {Long|null} [userId] PlayerStatus userId
             * @property {Long|null} [playerId] PlayerStatus playerId
             * @property {boolean|null} [isWinner] PlayerStatus isWinner
             * @property {number|null} [freedomDegree] PlayerStatus freedomDegree
             * @property {pb.cenarius.PlayerStatus.IRole|null} [role] PlayerStatus role
             * @property {Long|null} [monthlyInvestmentIncome] PlayerStatus monthlyInvestmentIncome
             * @property {Long|null} [monthlyExpense] PlayerStatus monthlyExpense
             * @property {Long|null} [monthlyCashflow] PlayerStatus monthlyCashflow
             * @property {Uint8Array|null} [financialReport] PlayerStatus financialReport
             * @property {pb.common.IAssetStatement|null} [assetStatment] PlayerStatus assetStatment
             * @property {boolean|null} [isOut] PlayerStatus isOut
             */

            /**
             * Constructs a new PlayerStatus.
             * @memberof pb.cenarius
             * @classdesc Represents a PlayerStatus.
             * @implements IPlayerStatus
             * @constructor
             * @param {pb.cenarius.IPlayerStatus=} [properties] Properties to set
             */
            function PlayerStatus(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PlayerStatus userId.
             * @member {Long} userId
             * @memberof pb.cenarius.PlayerStatus
             * @instance
             */
            PlayerStatus.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * PlayerStatus playerId.
             * @member {Long} playerId
             * @memberof pb.cenarius.PlayerStatus
             * @instance
             */
            PlayerStatus.prototype.playerId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * PlayerStatus isWinner.
             * @member {boolean} isWinner
             * @memberof pb.cenarius.PlayerStatus
             * @instance
             */
            PlayerStatus.prototype.isWinner = false;

            /**
             * PlayerStatus freedomDegree.
             * @member {number} freedomDegree
             * @memberof pb.cenarius.PlayerStatus
             * @instance
             */
            PlayerStatus.prototype.freedomDegree = 0;

            /**
             * PlayerStatus role.
             * @member {pb.cenarius.PlayerStatus.IRole|null|undefined} role
             * @memberof pb.cenarius.PlayerStatus
             * @instance
             */
            PlayerStatus.prototype.role = null;

            /**
             * PlayerStatus monthlyInvestmentIncome.
             * @member {Long} monthlyInvestmentIncome
             * @memberof pb.cenarius.PlayerStatus
             * @instance
             */
            PlayerStatus.prototype.monthlyInvestmentIncome = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * PlayerStatus monthlyExpense.
             * @member {Long} monthlyExpense
             * @memberof pb.cenarius.PlayerStatus
             * @instance
             */
            PlayerStatus.prototype.monthlyExpense = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * PlayerStatus monthlyCashflow.
             * @member {Long} monthlyCashflow
             * @memberof pb.cenarius.PlayerStatus
             * @instance
             */
            PlayerStatus.prototype.monthlyCashflow = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * PlayerStatus financialReport.
             * @member {Uint8Array} financialReport
             * @memberof pb.cenarius.PlayerStatus
             * @instance
             */
            PlayerStatus.prototype.financialReport = $util.newBuffer([]);

            /**
             * PlayerStatus assetStatment.
             * @member {pb.common.IAssetStatement|null|undefined} assetStatment
             * @memberof pb.cenarius.PlayerStatus
             * @instance
             */
            PlayerStatus.prototype.assetStatment = null;

            /**
             * PlayerStatus isOut.
             * @member {boolean} isOut
             * @memberof pb.cenarius.PlayerStatus
             * @instance
             */
            PlayerStatus.prototype.isOut = false;

            /**
             * Creates a new PlayerStatus instance using the specified properties.
             * @function create
             * @memberof pb.cenarius.PlayerStatus
             * @static
             * @param {pb.cenarius.IPlayerStatus=} [properties] Properties to set
             * @returns {pb.cenarius.PlayerStatus} PlayerStatus instance
             */
            PlayerStatus.create = function create(properties) {
                return new PlayerStatus(properties);
            };

            /**
             * Encodes the specified PlayerStatus message. Does not implicitly {@link pb.cenarius.PlayerStatus.verify|verify} messages.
             * @function encode
             * @memberof pb.cenarius.PlayerStatus
             * @static
             * @param {pb.cenarius.IPlayerStatus} message PlayerStatus message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerStatus.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userId);
                if (message.playerId != null && message.hasOwnProperty("playerId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.playerId);
                if (message.isWinner != null && message.hasOwnProperty("isWinner"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isWinner);
                if (message.freedomDegree != null && message.hasOwnProperty("freedomDegree"))
                    writer.uint32(/* id 4, wireType 5 =*/37).float(message.freedomDegree);
                if (message.role != null && message.hasOwnProperty("role"))
                    $root.pb.cenarius.PlayerStatus.Role.encode(message.role, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.monthlyInvestmentIncome != null && message.hasOwnProperty("monthlyInvestmentIncome"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int64(message.monthlyInvestmentIncome);
                if (message.monthlyExpense != null && message.hasOwnProperty("monthlyExpense"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int64(message.monthlyExpense);
                if (message.monthlyCashflow != null && message.hasOwnProperty("monthlyCashflow"))
                    writer.uint32(/* id 8, wireType 0 =*/64).int64(message.monthlyCashflow);
                if (message.financialReport != null && message.hasOwnProperty("financialReport"))
                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.financialReport);
                if (message.assetStatment != null && message.hasOwnProperty("assetStatment"))
                    $root.pb.common.AssetStatement.encode(message.assetStatment, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                if (message.isOut != null && message.hasOwnProperty("isOut"))
                    writer.uint32(/* id 11, wireType 0 =*/88).bool(message.isOut);
                return writer;
            };

            /**
             * Encodes the specified PlayerStatus message, length delimited. Does not implicitly {@link pb.cenarius.PlayerStatus.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.cenarius.PlayerStatus
             * @static
             * @param {pb.cenarius.IPlayerStatus} message PlayerStatus message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerStatus.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PlayerStatus message from the specified reader or buffer.
             * @function decode
             * @memberof pb.cenarius.PlayerStatus
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.cenarius.PlayerStatus} PlayerStatus
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerStatus.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.cenarius.PlayerStatus();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.userId = reader.int64();
                        break;
                    case 2:
                        message.playerId = reader.int64();
                        break;
                    case 3:
                        message.isWinner = reader.bool();
                        break;
                    case 4:
                        message.freedomDegree = reader.float();
                        break;
                    case 5:
                        message.role = $root.pb.cenarius.PlayerStatus.Role.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.monthlyInvestmentIncome = reader.int64();
                        break;
                    case 7:
                        message.monthlyExpense = reader.int64();
                        break;
                    case 8:
                        message.monthlyCashflow = reader.int64();
                        break;
                    case 9:
                        message.financialReport = reader.bytes();
                        break;
                    case 10:
                        message.assetStatment = $root.pb.common.AssetStatement.decode(reader, reader.uint32());
                        break;
                    case 11:
                        message.isOut = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PlayerStatus message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.cenarius.PlayerStatus
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.cenarius.PlayerStatus} PlayerStatus
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerStatus.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PlayerStatus message.
             * @function verify
             * @memberof pb.cenarius.PlayerStatus
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PlayerStatus.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                if (message.playerId != null && message.hasOwnProperty("playerId"))
                    if (!$util.isInteger(message.playerId) && !(message.playerId && $util.isInteger(message.playerId.low) && $util.isInteger(message.playerId.high)))
                        return "playerId: integer|Long expected";
                if (message.isWinner != null && message.hasOwnProperty("isWinner"))
                    if (typeof message.isWinner !== "boolean")
                        return "isWinner: boolean expected";
                if (message.freedomDegree != null && message.hasOwnProperty("freedomDegree"))
                    if (typeof message.freedomDegree !== "number")
                        return "freedomDegree: number expected";
                if (message.role != null && message.hasOwnProperty("role")) {
                    var error = $root.pb.cenarius.PlayerStatus.Role.verify(message.role);
                    if (error)
                        return "role." + error;
                }
                if (message.monthlyInvestmentIncome != null && message.hasOwnProperty("monthlyInvestmentIncome"))
                    if (!$util.isInteger(message.monthlyInvestmentIncome) && !(message.monthlyInvestmentIncome && $util.isInteger(message.monthlyInvestmentIncome.low) && $util.isInteger(message.monthlyInvestmentIncome.high)))
                        return "monthlyInvestmentIncome: integer|Long expected";
                if (message.monthlyExpense != null && message.hasOwnProperty("monthlyExpense"))
                    if (!$util.isInteger(message.monthlyExpense) && !(message.monthlyExpense && $util.isInteger(message.monthlyExpense.low) && $util.isInteger(message.monthlyExpense.high)))
                        return "monthlyExpense: integer|Long expected";
                if (message.monthlyCashflow != null && message.hasOwnProperty("monthlyCashflow"))
                    if (!$util.isInteger(message.monthlyCashflow) && !(message.monthlyCashflow && $util.isInteger(message.monthlyCashflow.low) && $util.isInteger(message.monthlyCashflow.high)))
                        return "monthlyCashflow: integer|Long expected";
                if (message.financialReport != null && message.hasOwnProperty("financialReport"))
                    if (!(message.financialReport && typeof message.financialReport.length === "number" || $util.isString(message.financialReport)))
                        return "financialReport: buffer expected";
                if (message.assetStatment != null && message.hasOwnProperty("assetStatment")) {
                    var error = $root.pb.common.AssetStatement.verify(message.assetStatment);
                    if (error)
                        return "assetStatment." + error;
                }
                if (message.isOut != null && message.hasOwnProperty("isOut"))
                    if (typeof message.isOut !== "boolean")
                        return "isOut: boolean expected";
                return null;
            };

            /**
             * Creates a PlayerStatus message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.cenarius.PlayerStatus
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.cenarius.PlayerStatus} PlayerStatus
             */
            PlayerStatus.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.cenarius.PlayerStatus)
                    return object;
                var message = new $root.pb.cenarius.PlayerStatus();
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                if (object.playerId != null)
                    if ($util.Long)
                        (message.playerId = $util.Long.fromValue(object.playerId)).unsigned = false;
                    else if (typeof object.playerId === "string")
                        message.playerId = parseInt(object.playerId, 10);
                    else if (typeof object.playerId === "number")
                        message.playerId = object.playerId;
                    else if (typeof object.playerId === "object")
                        message.playerId = new $util.LongBits(object.playerId.low >>> 0, object.playerId.high >>> 0).toNumber();
                if (object.isWinner != null)
                    message.isWinner = Boolean(object.isWinner);
                if (object.freedomDegree != null)
                    message.freedomDegree = Number(object.freedomDegree);
                if (object.role != null) {
                    if (typeof object.role !== "object")
                        throw TypeError(".pb.cenarius.PlayerStatus.role: object expected");
                    message.role = $root.pb.cenarius.PlayerStatus.Role.fromObject(object.role);
                }
                if (object.monthlyInvestmentIncome != null)
                    if ($util.Long)
                        (message.monthlyInvestmentIncome = $util.Long.fromValue(object.monthlyInvestmentIncome)).unsigned = false;
                    else if (typeof object.monthlyInvestmentIncome === "string")
                        message.monthlyInvestmentIncome = parseInt(object.monthlyInvestmentIncome, 10);
                    else if (typeof object.monthlyInvestmentIncome === "number")
                        message.monthlyInvestmentIncome = object.monthlyInvestmentIncome;
                    else if (typeof object.monthlyInvestmentIncome === "object")
                        message.monthlyInvestmentIncome = new $util.LongBits(object.monthlyInvestmentIncome.low >>> 0, object.monthlyInvestmentIncome.high >>> 0).toNumber();
                if (object.monthlyExpense != null)
                    if ($util.Long)
                        (message.monthlyExpense = $util.Long.fromValue(object.monthlyExpense)).unsigned = false;
                    else if (typeof object.monthlyExpense === "string")
                        message.monthlyExpense = parseInt(object.monthlyExpense, 10);
                    else if (typeof object.monthlyExpense === "number")
                        message.monthlyExpense = object.monthlyExpense;
                    else if (typeof object.monthlyExpense === "object")
                        message.monthlyExpense = new $util.LongBits(object.monthlyExpense.low >>> 0, object.monthlyExpense.high >>> 0).toNumber();
                if (object.monthlyCashflow != null)
                    if ($util.Long)
                        (message.monthlyCashflow = $util.Long.fromValue(object.monthlyCashflow)).unsigned = false;
                    else if (typeof object.monthlyCashflow === "string")
                        message.monthlyCashflow = parseInt(object.monthlyCashflow, 10);
                    else if (typeof object.monthlyCashflow === "number")
                        message.monthlyCashflow = object.monthlyCashflow;
                    else if (typeof object.monthlyCashflow === "object")
                        message.monthlyCashflow = new $util.LongBits(object.monthlyCashflow.low >>> 0, object.monthlyCashflow.high >>> 0).toNumber();
                if (object.financialReport != null)
                    if (typeof object.financialReport === "string")
                        $util.base64.decode(object.financialReport, message.financialReport = $util.newBuffer($util.base64.length(object.financialReport)), 0);
                    else if (object.financialReport.length)
                        message.financialReport = object.financialReport;
                if (object.assetStatment != null) {
                    if (typeof object.assetStatment !== "object")
                        throw TypeError(".pb.cenarius.PlayerStatus.assetStatment: object expected");
                    message.assetStatment = $root.pb.common.AssetStatement.fromObject(object.assetStatment);
                }
                if (object.isOut != null)
                    message.isOut = Boolean(object.isOut);
                return message;
            };

            /**
             * Creates a plain object from a PlayerStatus message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.cenarius.PlayerStatus
             * @static
             * @param {pb.cenarius.PlayerStatus} message PlayerStatus
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PlayerStatus.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.playerId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.playerId = options.longs === String ? "0" : 0;
                    object.isWinner = false;
                    object.freedomDegree = 0;
                    object.role = null;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.monthlyInvestmentIncome = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.monthlyInvestmentIncome = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.monthlyExpense = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.monthlyExpense = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.monthlyCashflow = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.monthlyCashflow = options.longs === String ? "0" : 0;
                    if (options.bytes === String)
                        object.financialReport = "";
                    else {
                        object.financialReport = [];
                        if (options.bytes !== Array)
                            object.financialReport = $util.newBuffer(object.financialReport);
                    }
                    object.assetStatment = null;
                    object.isOut = false;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                if (message.playerId != null && message.hasOwnProperty("playerId"))
                    if (typeof message.playerId === "number")
                        object.playerId = options.longs === String ? String(message.playerId) : message.playerId;
                    else
                        object.playerId = options.longs === String ? $util.Long.prototype.toString.call(message.playerId) : options.longs === Number ? new $util.LongBits(message.playerId.low >>> 0, message.playerId.high >>> 0).toNumber() : message.playerId;
                if (message.isWinner != null && message.hasOwnProperty("isWinner"))
                    object.isWinner = message.isWinner;
                if (message.freedomDegree != null && message.hasOwnProperty("freedomDegree"))
                    object.freedomDegree = options.json && !isFinite(message.freedomDegree) ? String(message.freedomDegree) : message.freedomDegree;
                if (message.role != null && message.hasOwnProperty("role"))
                    object.role = $root.pb.cenarius.PlayerStatus.Role.toObject(message.role, options);
                if (message.monthlyInvestmentIncome != null && message.hasOwnProperty("monthlyInvestmentIncome"))
                    if (typeof message.monthlyInvestmentIncome === "number")
                        object.monthlyInvestmentIncome = options.longs === String ? String(message.monthlyInvestmentIncome) : message.monthlyInvestmentIncome;
                    else
                        object.monthlyInvestmentIncome = options.longs === String ? $util.Long.prototype.toString.call(message.monthlyInvestmentIncome) : options.longs === Number ? new $util.LongBits(message.monthlyInvestmentIncome.low >>> 0, message.monthlyInvestmentIncome.high >>> 0).toNumber() : message.monthlyInvestmentIncome;
                if (message.monthlyExpense != null && message.hasOwnProperty("monthlyExpense"))
                    if (typeof message.monthlyExpense === "number")
                        object.monthlyExpense = options.longs === String ? String(message.monthlyExpense) : message.monthlyExpense;
                    else
                        object.monthlyExpense = options.longs === String ? $util.Long.prototype.toString.call(message.monthlyExpense) : options.longs === Number ? new $util.LongBits(message.monthlyExpense.low >>> 0, message.monthlyExpense.high >>> 0).toNumber() : message.monthlyExpense;
                if (message.monthlyCashflow != null && message.hasOwnProperty("monthlyCashflow"))
                    if (typeof message.monthlyCashflow === "number")
                        object.monthlyCashflow = options.longs === String ? String(message.monthlyCashflow) : message.monthlyCashflow;
                    else
                        object.monthlyCashflow = options.longs === String ? $util.Long.prototype.toString.call(message.monthlyCashflow) : options.longs === Number ? new $util.LongBits(message.monthlyCashflow.low >>> 0, message.monthlyCashflow.high >>> 0).toNumber() : message.monthlyCashflow;
                if (message.financialReport != null && message.hasOwnProperty("financialReport"))
                    object.financialReport = options.bytes === String ? $util.base64.encode(message.financialReport, 0, message.financialReport.length) : options.bytes === Array ? Array.prototype.slice.call(message.financialReport) : message.financialReport;
                if (message.assetStatment != null && message.hasOwnProperty("assetStatment"))
                    object.assetStatment = $root.pb.common.AssetStatement.toObject(message.assetStatment, options);
                if (message.isOut != null && message.hasOwnProperty("isOut"))
                    object.isOut = message.isOut;
                return object;
            };

            /**
             * Converts this PlayerStatus to JSON.
             * @function toJSON
             * @memberof pb.cenarius.PlayerStatus
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PlayerStatus.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            PlayerStatus.Role = (function() {

                /**
                 * Properties of a Role.
                 * @memberof pb.cenarius.PlayerStatus
                 * @interface IRole
                 * @property {Long|null} [id] Role id
                 * @property {string|null} [name] Role name
                 * @property {string|null} [flag] Role flag
                 */

                /**
                 * Constructs a new Role.
                 * @memberof pb.cenarius.PlayerStatus
                 * @classdesc Represents a Role.
                 * @implements IRole
                 * @constructor
                 * @param {pb.cenarius.PlayerStatus.IRole=} [properties] Properties to set
                 */
                function Role(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Role id.
                 * @member {Long} id
                 * @memberof pb.cenarius.PlayerStatus.Role
                 * @instance
                 */
                Role.prototype.id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * Role name.
                 * @member {string} name
                 * @memberof pb.cenarius.PlayerStatus.Role
                 * @instance
                 */
                Role.prototype.name = "";

                /**
                 * Role flag.
                 * @member {string} flag
                 * @memberof pb.cenarius.PlayerStatus.Role
                 * @instance
                 */
                Role.prototype.flag = "";

                /**
                 * Creates a new Role instance using the specified properties.
                 * @function create
                 * @memberof pb.cenarius.PlayerStatus.Role
                 * @static
                 * @param {pb.cenarius.PlayerStatus.IRole=} [properties] Properties to set
                 * @returns {pb.cenarius.PlayerStatus.Role} Role instance
                 */
                Role.create = function create(properties) {
                    return new Role(properties);
                };

                /**
                 * Encodes the specified Role message. Does not implicitly {@link pb.cenarius.PlayerStatus.Role.verify|verify} messages.
                 * @function encode
                 * @memberof pb.cenarius.PlayerStatus.Role
                 * @static
                 * @param {pb.cenarius.PlayerStatus.IRole} message Role message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Role.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && message.hasOwnProperty("id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.id);
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                    if (message.flag != null && message.hasOwnProperty("flag"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.flag);
                    return writer;
                };

                /**
                 * Encodes the specified Role message, length delimited. Does not implicitly {@link pb.cenarius.PlayerStatus.Role.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof pb.cenarius.PlayerStatus.Role
                 * @static
                 * @param {pb.cenarius.PlayerStatus.IRole} message Role message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Role.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Role message from the specified reader or buffer.
                 * @function decode
                 * @memberof pb.cenarius.PlayerStatus.Role
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {pb.cenarius.PlayerStatus.Role} Role
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Role.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.cenarius.PlayerStatus.Role();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = reader.int64();
                            break;
                        case 2:
                            message.name = reader.string();
                            break;
                        case 3:
                            message.flag = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Role message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof pb.cenarius.PlayerStatus.Role
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {pb.cenarius.PlayerStatus.Role} Role
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Role.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Role message.
                 * @function verify
                 * @memberof pb.cenarius.PlayerStatus.Role
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Role.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                            return "id: integer|Long expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.flag != null && message.hasOwnProperty("flag"))
                        if (!$util.isString(message.flag))
                            return "flag: string expected";
                    return null;
                };

                /**
                 * Creates a Role message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof pb.cenarius.PlayerStatus.Role
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {pb.cenarius.PlayerStatus.Role} Role
                 */
                Role.fromObject = function fromObject(object) {
                    if (object instanceof $root.pb.cenarius.PlayerStatus.Role)
                        return object;
                    var message = new $root.pb.cenarius.PlayerStatus.Role();
                    if (object.id != null)
                        if ($util.Long)
                            (message.id = $util.Long.fromValue(object.id)).unsigned = false;
                        else if (typeof object.id === "string")
                            message.id = parseInt(object.id, 10);
                        else if (typeof object.id === "number")
                            message.id = object.id;
                        else if (typeof object.id === "object")
                            message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.flag != null)
                        message.flag = String(object.flag);
                    return message;
                };

                /**
                 * Creates a plain object from a Role message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof pb.cenarius.PlayerStatus.Role
                 * @static
                 * @param {pb.cenarius.PlayerStatus.Role} message Role
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Role.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.id = options.longs === String ? "0" : 0;
                        object.name = "";
                        object.flag = "";
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (typeof message.id === "number")
                            object.id = options.longs === String ? String(message.id) : message.id;
                        else
                            object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id;
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.flag != null && message.hasOwnProperty("flag"))
                        object.flag = message.flag;
                    return object;
                };

                /**
                 * Converts this Role to JSON.
                 * @function toJSON
                 * @memberof pb.cenarius.PlayerStatus.Role
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Role.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Role;
            })();

            return PlayerStatus;
        })();

        cenarius.EndGameRequest = (function() {

            /**
             * Properties of an EndGameRequest.
             * @memberof pb.cenarius
             * @interface IEndGameRequest
             * @property {Long|null} [gameId] EndGameRequest gameId
             * @property {Array.<pb.cenarius.IPlayerStatus>|null} [status] EndGameRequest status
             * @property {google.protobuf.ITimestamp|null} [startedAt] EndGameRequest startedAt
             * @property {google.protobuf.ITimestamp|null} [endedAt] EndGameRequest endedAt
             * @property {pb.common.MatchType|null} [matchType] EndGameRequest matchType
             * @property {pb.common.GameOverMsg.endType|null} [endType] EndGameRequest endType
             */

            /**
             * Constructs a new EndGameRequest.
             * @memberof pb.cenarius
             * @classdesc Represents an EndGameRequest.
             * @implements IEndGameRequest
             * @constructor
             * @param {pb.cenarius.IEndGameRequest=} [properties] Properties to set
             */
            function EndGameRequest(properties) {
                this.status = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EndGameRequest gameId.
             * @member {Long} gameId
             * @memberof pb.cenarius.EndGameRequest
             * @instance
             */
            EndGameRequest.prototype.gameId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * EndGameRequest status.
             * @member {Array.<pb.cenarius.IPlayerStatus>} status
             * @memberof pb.cenarius.EndGameRequest
             * @instance
             */
            EndGameRequest.prototype.status = $util.emptyArray;

            /**
             * EndGameRequest startedAt.
             * @member {google.protobuf.ITimestamp|null|undefined} startedAt
             * @memberof pb.cenarius.EndGameRequest
             * @instance
             */
            EndGameRequest.prototype.startedAt = null;

            /**
             * EndGameRequest endedAt.
             * @member {google.protobuf.ITimestamp|null|undefined} endedAt
             * @memberof pb.cenarius.EndGameRequest
             * @instance
             */
            EndGameRequest.prototype.endedAt = null;

            /**
             * EndGameRequest matchType.
             * @member {pb.common.MatchType} matchType
             * @memberof pb.cenarius.EndGameRequest
             * @instance
             */
            EndGameRequest.prototype.matchType = 0;

            /**
             * EndGameRequest endType.
             * @member {pb.common.GameOverMsg.endType} endType
             * @memberof pb.cenarius.EndGameRequest
             * @instance
             */
            EndGameRequest.prototype.endType = 0;

            /**
             * Creates a new EndGameRequest instance using the specified properties.
             * @function create
             * @memberof pb.cenarius.EndGameRequest
             * @static
             * @param {pb.cenarius.IEndGameRequest=} [properties] Properties to set
             * @returns {pb.cenarius.EndGameRequest} EndGameRequest instance
             */
            EndGameRequest.create = function create(properties) {
                return new EndGameRequest(properties);
            };

            /**
             * Encodes the specified EndGameRequest message. Does not implicitly {@link pb.cenarius.EndGameRequest.verify|verify} messages.
             * @function encode
             * @memberof pb.cenarius.EndGameRequest
             * @static
             * @param {pb.cenarius.IEndGameRequest} message EndGameRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EndGameRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.gameId);
                if (message.status != null && message.status.length)
                    for (var i = 0; i < message.status.length; ++i)
                        $root.pb.cenarius.PlayerStatus.encode(message.status[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.startedAt != null && message.hasOwnProperty("startedAt"))
                    $root.google.protobuf.Timestamp.encode(message.startedAt, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.endedAt != null && message.hasOwnProperty("endedAt"))
                    $root.google.protobuf.Timestamp.encode(message.endedAt, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.matchType != null && message.hasOwnProperty("matchType"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.matchType);
                if (message.endType != null && message.hasOwnProperty("endType"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.endType);
                return writer;
            };

            /**
             * Encodes the specified EndGameRequest message, length delimited. Does not implicitly {@link pb.cenarius.EndGameRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.cenarius.EndGameRequest
             * @static
             * @param {pb.cenarius.IEndGameRequest} message EndGameRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EndGameRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EndGameRequest message from the specified reader or buffer.
             * @function decode
             * @memberof pb.cenarius.EndGameRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.cenarius.EndGameRequest} EndGameRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EndGameRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.cenarius.EndGameRequest();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.gameId = reader.int64();
                        break;
                    case 2:
                        if (!(message.status && message.status.length))
                            message.status = [];
                        message.status.push($root.pb.cenarius.PlayerStatus.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.startedAt = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.endedAt = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.matchType = reader.int32();
                        break;
                    case 6:
                        message.endType = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EndGameRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.cenarius.EndGameRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.cenarius.EndGameRequest} EndGameRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EndGameRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EndGameRequest message.
             * @function verify
             * @memberof pb.cenarius.EndGameRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EndGameRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    if (!$util.isInteger(message.gameId) && !(message.gameId && $util.isInteger(message.gameId.low) && $util.isInteger(message.gameId.high)))
                        return "gameId: integer|Long expected";
                if (message.status != null && message.hasOwnProperty("status")) {
                    if (!Array.isArray(message.status))
                        return "status: array expected";
                    for (var i = 0; i < message.status.length; ++i) {
                        var error = $root.pb.cenarius.PlayerStatus.verify(message.status[i]);
                        if (error)
                            return "status." + error;
                    }
                }
                if (message.startedAt != null && message.hasOwnProperty("startedAt")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.startedAt);
                    if (error)
                        return "startedAt." + error;
                }
                if (message.endedAt != null && message.hasOwnProperty("endedAt")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.endedAt);
                    if (error)
                        return "endedAt." + error;
                }
                if (message.matchType != null && message.hasOwnProperty("matchType"))
                    switch (message.matchType) {
                    default:
                        return "matchType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.endType != null && message.hasOwnProperty("endType"))
                    switch (message.endType) {
                    default:
                        return "endType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                return null;
            };

            /**
             * Creates an EndGameRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.cenarius.EndGameRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.cenarius.EndGameRequest} EndGameRequest
             */
            EndGameRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.cenarius.EndGameRequest)
                    return object;
                var message = new $root.pb.cenarius.EndGameRequest();
                if (object.gameId != null)
                    if ($util.Long)
                        (message.gameId = $util.Long.fromValue(object.gameId)).unsigned = false;
                    else if (typeof object.gameId === "string")
                        message.gameId = parseInt(object.gameId, 10);
                    else if (typeof object.gameId === "number")
                        message.gameId = object.gameId;
                    else if (typeof object.gameId === "object")
                        message.gameId = new $util.LongBits(object.gameId.low >>> 0, object.gameId.high >>> 0).toNumber();
                if (object.status) {
                    if (!Array.isArray(object.status))
                        throw TypeError(".pb.cenarius.EndGameRequest.status: array expected");
                    message.status = [];
                    for (var i = 0; i < object.status.length; ++i) {
                        if (typeof object.status[i] !== "object")
                            throw TypeError(".pb.cenarius.EndGameRequest.status: object expected");
                        message.status[i] = $root.pb.cenarius.PlayerStatus.fromObject(object.status[i]);
                    }
                }
                if (object.startedAt != null) {
                    if (typeof object.startedAt !== "object")
                        throw TypeError(".pb.cenarius.EndGameRequest.startedAt: object expected");
                    message.startedAt = $root.google.protobuf.Timestamp.fromObject(object.startedAt);
                }
                if (object.endedAt != null) {
                    if (typeof object.endedAt !== "object")
                        throw TypeError(".pb.cenarius.EndGameRequest.endedAt: object expected");
                    message.endedAt = $root.google.protobuf.Timestamp.fromObject(object.endedAt);
                }
                switch (object.matchType) {
                case "UNKNOWN":
                case 0:
                    message.matchType = 0;
                    break;
                case "STANDARD":
                case 1:
                    message.matchType = 1;
                    break;
                case "RANK":
                case 2:
                    message.matchType = 2;
                    break;
                case "TRAINING":
                case 3:
                    message.matchType = 3;
                    break;
                }
                switch (object.endType) {
                case "normal":
                case 0:
                    message.endType = 0;
                    break;
                case "timeout":
                case 1:
                    message.endType = 1;
                    break;
                case "force":
                case 2:
                    message.endType = 2;
                    break;
                case "allBust":
                case 3:
                    message.endType = 3;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from an EndGameRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.cenarius.EndGameRequest
             * @static
             * @param {pb.cenarius.EndGameRequest} message EndGameRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EndGameRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.status = [];
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.gameId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.gameId = options.longs === String ? "0" : 0;
                    object.startedAt = null;
                    object.endedAt = null;
                    object.matchType = options.enums === String ? "UNKNOWN" : 0;
                    object.endType = options.enums === String ? "normal" : 0;
                }
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    if (typeof message.gameId === "number")
                        object.gameId = options.longs === String ? String(message.gameId) : message.gameId;
                    else
                        object.gameId = options.longs === String ? $util.Long.prototype.toString.call(message.gameId) : options.longs === Number ? new $util.LongBits(message.gameId.low >>> 0, message.gameId.high >>> 0).toNumber() : message.gameId;
                if (message.status && message.status.length) {
                    object.status = [];
                    for (var j = 0; j < message.status.length; ++j)
                        object.status[j] = $root.pb.cenarius.PlayerStatus.toObject(message.status[j], options);
                }
                if (message.startedAt != null && message.hasOwnProperty("startedAt"))
                    object.startedAt = $root.google.protobuf.Timestamp.toObject(message.startedAt, options);
                if (message.endedAt != null && message.hasOwnProperty("endedAt"))
                    object.endedAt = $root.google.protobuf.Timestamp.toObject(message.endedAt, options);
                if (message.matchType != null && message.hasOwnProperty("matchType"))
                    object.matchType = options.enums === String ? $root.pb.common.MatchType[message.matchType] : message.matchType;
                if (message.endType != null && message.hasOwnProperty("endType"))
                    object.endType = options.enums === String ? $root.pb.common.GameOverMsg.endType[message.endType] : message.endType;
                return object;
            };

            /**
             * Converts this EndGameRequest to JSON.
             * @function toJSON
             * @memberof pb.cenarius.EndGameRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EndGameRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EndGameRequest;
        })();

        cenarius.EndGameResponse = (function() {

            /**
             * Properties of an EndGameResponse.
             * @memberof pb.cenarius
             * @interface IEndGameResponse
             * @property {Long|null} [gameID] EndGameResponse gameID
             * @property {Object.<string,pb.common.IGameBonus>|null} [bonus] EndGameResponse bonus
             */

            /**
             * Constructs a new EndGameResponse.
             * @memberof pb.cenarius
             * @classdesc Represents an EndGameResponse.
             * @implements IEndGameResponse
             * @constructor
             * @param {pb.cenarius.IEndGameResponse=} [properties] Properties to set
             */
            function EndGameResponse(properties) {
                this.bonus = {};
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EndGameResponse gameID.
             * @member {Long} gameID
             * @memberof pb.cenarius.EndGameResponse
             * @instance
             */
            EndGameResponse.prototype.gameID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * EndGameResponse bonus.
             * @member {Object.<string,pb.common.IGameBonus>} bonus
             * @memberof pb.cenarius.EndGameResponse
             * @instance
             */
            EndGameResponse.prototype.bonus = $util.emptyObject;

            /**
             * Creates a new EndGameResponse instance using the specified properties.
             * @function create
             * @memberof pb.cenarius.EndGameResponse
             * @static
             * @param {pb.cenarius.IEndGameResponse=} [properties] Properties to set
             * @returns {pb.cenarius.EndGameResponse} EndGameResponse instance
             */
            EndGameResponse.create = function create(properties) {
                return new EndGameResponse(properties);
            };

            /**
             * Encodes the specified EndGameResponse message. Does not implicitly {@link pb.cenarius.EndGameResponse.verify|verify} messages.
             * @function encode
             * @memberof pb.cenarius.EndGameResponse
             * @static
             * @param {pb.cenarius.IEndGameResponse} message EndGameResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EndGameResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.gameID != null && message.hasOwnProperty("gameID"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.gameID);
                if (message.bonus != null && message.hasOwnProperty("bonus"))
                    for (var keys = Object.keys(message.bonus), i = 0; i < keys.length; ++i) {
                        writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 0 =*/8).int64(keys[i]);
                        $root.pb.common.GameBonus.encode(message.bonus[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                    }
                return writer;
            };

            /**
             * Encodes the specified EndGameResponse message, length delimited. Does not implicitly {@link pb.cenarius.EndGameResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.cenarius.EndGameResponse
             * @static
             * @param {pb.cenarius.IEndGameResponse} message EndGameResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EndGameResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EndGameResponse message from the specified reader or buffer.
             * @function decode
             * @memberof pb.cenarius.EndGameResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.cenarius.EndGameResponse} EndGameResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EndGameResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.cenarius.EndGameResponse(), key;
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.gameID = reader.int64();
                        break;
                    case 2:
                        reader.skip().pos++;
                        if (message.bonus === $util.emptyObject)
                            message.bonus = {};
                        key = reader.int64();
                        reader.pos++;
                        message.bonus[typeof key === "object" ? $util.longToHash(key) : key] = $root.pb.common.GameBonus.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EndGameResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.cenarius.EndGameResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.cenarius.EndGameResponse} EndGameResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EndGameResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EndGameResponse message.
             * @function verify
             * @memberof pb.cenarius.EndGameResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EndGameResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.gameID != null && message.hasOwnProperty("gameID"))
                    if (!$util.isInteger(message.gameID) && !(message.gameID && $util.isInteger(message.gameID.low) && $util.isInteger(message.gameID.high)))
                        return "gameID: integer|Long expected";
                if (message.bonus != null && message.hasOwnProperty("bonus")) {
                    if (!$util.isObject(message.bonus))
                        return "bonus: object expected";
                    var key = Object.keys(message.bonus);
                    for (var i = 0; i < key.length; ++i) {
                        if (!$util.key64Re.test(key[i]))
                            return "bonus: integer|Long key{k:int64} expected";
                        {
                            var error = $root.pb.common.GameBonus.verify(message.bonus[key[i]]);
                            if (error)
                                return "bonus." + error;
                        }
                    }
                }
                return null;
            };

            /**
             * Creates an EndGameResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.cenarius.EndGameResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.cenarius.EndGameResponse} EndGameResponse
             */
            EndGameResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.cenarius.EndGameResponse)
                    return object;
                var message = new $root.pb.cenarius.EndGameResponse();
                if (object.gameID != null)
                    if ($util.Long)
                        (message.gameID = $util.Long.fromValue(object.gameID)).unsigned = false;
                    else if (typeof object.gameID === "string")
                        message.gameID = parseInt(object.gameID, 10);
                    else if (typeof object.gameID === "number")
                        message.gameID = object.gameID;
                    else if (typeof object.gameID === "object")
                        message.gameID = new $util.LongBits(object.gameID.low >>> 0, object.gameID.high >>> 0).toNumber();
                if (object.bonus) {
                    if (typeof object.bonus !== "object")
                        throw TypeError(".pb.cenarius.EndGameResponse.bonus: object expected");
                    message.bonus = {};
                    for (var keys = Object.keys(object.bonus), i = 0; i < keys.length; ++i) {
                        if (typeof object.bonus[keys[i]] !== "object")
                            throw TypeError(".pb.cenarius.EndGameResponse.bonus: object expected");
                        message.bonus[keys[i]] = $root.pb.common.GameBonus.fromObject(object.bonus[keys[i]]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an EndGameResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.cenarius.EndGameResponse
             * @static
             * @param {pb.cenarius.EndGameResponse} message EndGameResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EndGameResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.objects || options.defaults)
                    object.bonus = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.gameID = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.gameID = options.longs === String ? "0" : 0;
                if (message.gameID != null && message.hasOwnProperty("gameID"))
                    if (typeof message.gameID === "number")
                        object.gameID = options.longs === String ? String(message.gameID) : message.gameID;
                    else
                        object.gameID = options.longs === String ? $util.Long.prototype.toString.call(message.gameID) : options.longs === Number ? new $util.LongBits(message.gameID.low >>> 0, message.gameID.high >>> 0).toNumber() : message.gameID;
                var keys2;
                if (message.bonus && (keys2 = Object.keys(message.bonus)).length) {
                    object.bonus = {};
                    for (var j = 0; j < keys2.length; ++j)
                        object.bonus[keys2[j]] = $root.pb.common.GameBonus.toObject(message.bonus[keys2[j]], options);
                }
                return object;
            };

            /**
             * Converts this EndGameResponse to JSON.
             * @function toJSON
             * @memberof pb.cenarius.EndGameResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EndGameResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EndGameResponse;
        })();

        cenarius.SendTextMessageReq = (function() {

            /**
             * Properties of a SendTextMessageReq.
             * @memberof pb.cenarius
             * @interface ISendTextMessageReq
             * @property {Array.<string>|null} [receiver] SendTextMessageReq receiver
             * @property {string|null} [text] SendTextMessageReq text
             */

            /**
             * Constructs a new SendTextMessageReq.
             * @memberof pb.cenarius
             * @classdesc Represents a SendTextMessageReq.
             * @implements ISendTextMessageReq
             * @constructor
             * @param {pb.cenarius.ISendTextMessageReq=} [properties] Properties to set
             */
            function SendTextMessageReq(properties) {
                this.receiver = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SendTextMessageReq receiver.
             * @member {Array.<string>} receiver
             * @memberof pb.cenarius.SendTextMessageReq
             * @instance
             */
            SendTextMessageReq.prototype.receiver = $util.emptyArray;

            /**
             * SendTextMessageReq text.
             * @member {string} text
             * @memberof pb.cenarius.SendTextMessageReq
             * @instance
             */
            SendTextMessageReq.prototype.text = "";

            /**
             * Creates a new SendTextMessageReq instance using the specified properties.
             * @function create
             * @memberof pb.cenarius.SendTextMessageReq
             * @static
             * @param {pb.cenarius.ISendTextMessageReq=} [properties] Properties to set
             * @returns {pb.cenarius.SendTextMessageReq} SendTextMessageReq instance
             */
            SendTextMessageReq.create = function create(properties) {
                return new SendTextMessageReq(properties);
            };

            /**
             * Encodes the specified SendTextMessageReq message. Does not implicitly {@link pb.cenarius.SendTextMessageReq.verify|verify} messages.
             * @function encode
             * @memberof pb.cenarius.SendTextMessageReq
             * @static
             * @param {pb.cenarius.ISendTextMessageReq} message SendTextMessageReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SendTextMessageReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.receiver != null && message.receiver.length)
                    for (var i = 0; i < message.receiver.length; ++i)
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.receiver[i]);
                if (message.text != null && message.hasOwnProperty("text"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);
                return writer;
            };

            /**
             * Encodes the specified SendTextMessageReq message, length delimited. Does not implicitly {@link pb.cenarius.SendTextMessageReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.cenarius.SendTextMessageReq
             * @static
             * @param {pb.cenarius.ISendTextMessageReq} message SendTextMessageReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SendTextMessageReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SendTextMessageReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.cenarius.SendTextMessageReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.cenarius.SendTextMessageReq} SendTextMessageReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SendTextMessageReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.cenarius.SendTextMessageReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.receiver && message.receiver.length))
                            message.receiver = [];
                        message.receiver.push(reader.string());
                        break;
                    case 2:
                        message.text = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SendTextMessageReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.cenarius.SendTextMessageReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.cenarius.SendTextMessageReq} SendTextMessageReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SendTextMessageReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SendTextMessageReq message.
             * @function verify
             * @memberof pb.cenarius.SendTextMessageReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SendTextMessageReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.receiver != null && message.hasOwnProperty("receiver")) {
                    if (!Array.isArray(message.receiver))
                        return "receiver: array expected";
                    for (var i = 0; i < message.receiver.length; ++i)
                        if (!$util.isString(message.receiver[i]))
                            return "receiver: string[] expected";
                }
                if (message.text != null && message.hasOwnProperty("text"))
                    if (!$util.isString(message.text))
                        return "text: string expected";
                return null;
            };

            /**
             * Creates a SendTextMessageReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.cenarius.SendTextMessageReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.cenarius.SendTextMessageReq} SendTextMessageReq
             */
            SendTextMessageReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.cenarius.SendTextMessageReq)
                    return object;
                var message = new $root.pb.cenarius.SendTextMessageReq();
                if (object.receiver) {
                    if (!Array.isArray(object.receiver))
                        throw TypeError(".pb.cenarius.SendTextMessageReq.receiver: array expected");
                    message.receiver = [];
                    for (var i = 0; i < object.receiver.length; ++i)
                        message.receiver[i] = String(object.receiver[i]);
                }
                if (object.text != null)
                    message.text = String(object.text);
                return message;
            };

            /**
             * Creates a plain object from a SendTextMessageReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.cenarius.SendTextMessageReq
             * @static
             * @param {pb.cenarius.SendTextMessageReq} message SendTextMessageReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SendTextMessageReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.receiver = [];
                if (options.defaults)
                    object.text = "";
                if (message.receiver && message.receiver.length) {
                    object.receiver = [];
                    for (var j = 0; j < message.receiver.length; ++j)
                        object.receiver[j] = message.receiver[j];
                }
                if (message.text != null && message.hasOwnProperty("text"))
                    object.text = message.text;
                return object;
            };

            /**
             * Converts this SendTextMessageReq to JSON.
             * @function toJSON
             * @memberof pb.cenarius.SendTextMessageReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SendTextMessageReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SendTextMessageReq;
        })();

        cenarius.CenariusService = (function() {

            /**
             * Constructs a new CenariusService service.
             * @memberof pb.cenarius
             * @classdesc Represents a CenariusService
             * @extends $protobuf.rpc.Service
             * @constructor
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             */
            function CenariusService(rpcImpl, requestDelimited, responseDelimited) {
                $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
            }

            (CenariusService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = CenariusService;

            /**
             * Creates new CenariusService service using the specified rpc implementation.
             * @function create
             * @memberof pb.cenarius.CenariusService
             * @static
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             * @returns {CenariusService} RPC service. Useful where requests and/or responses are streamed.
             */
            CenariusService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                return new this(rpcImpl, requestDelimited, responseDelimited);
            };

            /**
             * Callback as used by {@link pb.cenarius.CenariusService#authenticate}.
             * @memberof pb.cenarius.CenariusService
             * @typedef AuthenticateCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pb.common.PlayerInfo} [response] PlayerInfo
             */

            /**
             * Calls Authenticate.
             * @function authenticate
             * @memberof pb.cenarius.CenariusService
             * @instance
             * @param {pb.cenarius.IAuthenticationReq} request AuthenticationReq message or plain object
             * @param {pb.cenarius.CenariusService.AuthenticateCallback} callback Node-style callback called with the error, if any, and PlayerInfo
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(CenariusService.prototype.authenticate = function authenticate(request, callback) {
                return this.rpcCall(authenticate, $root.pb.cenarius.AuthenticationReq, $root.pb.common.PlayerInfo, request, callback);
            }, "name", { value: "Authenticate" });

            /**
             * Calls Authenticate.
             * @function authenticate
             * @memberof pb.cenarius.CenariusService
             * @instance
             * @param {pb.cenarius.IAuthenticationReq} request AuthenticationReq message or plain object
             * @returns {Promise<pb.common.PlayerInfo>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pb.cenarius.CenariusService#getPlayerInfo}.
             * @memberof pb.cenarius.CenariusService
             * @typedef GetPlayerInfoCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pb.cenarius.GetPlayerInfoRsp} [response] GetPlayerInfoRsp
             */

            /**
             * Calls GetPlayerInfo.
             * @function getPlayerInfo
             * @memberof pb.cenarius.CenariusService
             * @instance
             * @param {pb.cenarius.IGetPlayerInfoReq} request GetPlayerInfoReq message or plain object
             * @param {pb.cenarius.CenariusService.GetPlayerInfoCallback} callback Node-style callback called with the error, if any, and GetPlayerInfoRsp
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(CenariusService.prototype.getPlayerInfo = function getPlayerInfo(request, callback) {
                return this.rpcCall(getPlayerInfo, $root.pb.cenarius.GetPlayerInfoReq, $root.pb.cenarius.GetPlayerInfoRsp, request, callback);
            }, "name", { value: "GetPlayerInfo" });

            /**
             * Calls GetPlayerInfo.
             * @function getPlayerInfo
             * @memberof pb.cenarius.CenariusService
             * @instance
             * @param {pb.cenarius.IGetPlayerInfoReq} request GetPlayerInfoReq message or plain object
             * @returns {Promise<pb.cenarius.GetPlayerInfoRsp>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pb.cenarius.CenariusService#pullRoles}.
             * @memberof pb.cenarius.CenariusService
             * @typedef PullRolesCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pb.cenarius.PullRolesRsp} [response] PullRolesRsp
             */

            /**
             * Calls PullRoles.
             * @function pullRoles
             * @memberof pb.cenarius.CenariusService
             * @instance
             * @param {google.protobuf.IEmpty} request Empty message or plain object
             * @param {pb.cenarius.CenariusService.PullRolesCallback} callback Node-style callback called with the error, if any, and PullRolesRsp
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(CenariusService.prototype.pullRoles = function pullRoles(request, callback) {
                return this.rpcCall(pullRoles, $root.google.protobuf.Empty, $root.pb.cenarius.PullRolesRsp, request, callback);
            }, "name", { value: "PullRoles" });

            /**
             * Calls PullRoles.
             * @function pullRoles
             * @memberof pb.cenarius.CenariusService
             * @instance
             * @param {google.protobuf.IEmpty} request Empty message or plain object
             * @returns {Promise<pb.cenarius.PullRolesRsp>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pb.cenarius.CenariusService#fetchUserRoles}.
             * @memberof pb.cenarius.CenariusService
             * @typedef FetchUserRolesCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pb.cenarius.FetchUserRolesRsp} [response] FetchUserRolesRsp
             */

            /**
             * Calls FetchUserRoles.
             * @function fetchUserRoles
             * @memberof pb.cenarius.CenariusService
             * @instance
             * @param {pb.cenarius.IFetchUserRolesReq} request FetchUserRolesReq message or plain object
             * @param {pb.cenarius.CenariusService.FetchUserRolesCallback} callback Node-style callback called with the error, if any, and FetchUserRolesRsp
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(CenariusService.prototype.fetchUserRoles = function fetchUserRoles(request, callback) {
                return this.rpcCall(fetchUserRoles, $root.pb.cenarius.FetchUserRolesReq, $root.pb.cenarius.FetchUserRolesRsp, request, callback);
            }, "name", { value: "FetchUserRoles" });

            /**
             * Calls FetchUserRoles.
             * @function fetchUserRoles
             * @memberof pb.cenarius.CenariusService
             * @instance
             * @param {pb.cenarius.IFetchUserRolesReq} request FetchUserRolesReq message or plain object
             * @returns {Promise<pb.cenarius.FetchUserRolesRsp>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pb.cenarius.CenariusService#batchFetchUserRoles}.
             * @memberof pb.cenarius.CenariusService
             * @typedef BatchFetchUserRolesCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pb.cenarius.BatchFetchUserRolesRsp} [response] BatchFetchUserRolesRsp
             */

            /**
             * Calls BatchFetchUserRoles.
             * @function batchFetchUserRoles
             * @memberof pb.cenarius.CenariusService
             * @instance
             * @param {pb.cenarius.IBatchFetchUserRolesReq} request BatchFetchUserRolesReq message or plain object
             * @param {pb.cenarius.CenariusService.BatchFetchUserRolesCallback} callback Node-style callback called with the error, if any, and BatchFetchUserRolesRsp
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(CenariusService.prototype.batchFetchUserRoles = function batchFetchUserRoles(request, callback) {
                return this.rpcCall(batchFetchUserRoles, $root.pb.cenarius.BatchFetchUserRolesReq, $root.pb.cenarius.BatchFetchUserRolesRsp, request, callback);
            }, "name", { value: "BatchFetchUserRoles" });

            /**
             * Calls BatchFetchUserRoles.
             * @function batchFetchUserRoles
             * @memberof pb.cenarius.CenariusService
             * @instance
             * @param {pb.cenarius.IBatchFetchUserRolesReq} request BatchFetchUserRolesReq message or plain object
             * @returns {Promise<pb.cenarius.BatchFetchUserRolesRsp>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pb.cenarius.CenariusService#listBots}.
             * @memberof pb.cenarius.CenariusService
             * @typedef ListBotsCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pb.cenarius.ListBotsRsp} [response] ListBotsRsp
             */

            /**
             * Calls ListBots.
             * @function listBots
             * @memberof pb.cenarius.CenariusService
             * @instance
             * @param {pb.cenarius.IListBotsReq} request ListBotsReq message or plain object
             * @param {pb.cenarius.CenariusService.ListBotsCallback} callback Node-style callback called with the error, if any, and ListBotsRsp
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(CenariusService.prototype.listBots = function listBots(request, callback) {
                return this.rpcCall(listBots, $root.pb.cenarius.ListBotsReq, $root.pb.cenarius.ListBotsRsp, request, callback);
            }, "name", { value: "ListBots" });

            /**
             * Calls ListBots.
             * @function listBots
             * @memberof pb.cenarius.CenariusService
             * @instance
             * @param {pb.cenarius.IListBotsReq} request ListBotsReq message or plain object
             * @returns {Promise<pb.cenarius.ListBotsRsp>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pb.cenarius.CenariusService#endGame}.
             * @memberof pb.cenarius.CenariusService
             * @typedef EndGameCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pb.cenarius.EndGameResponse} [response] EndGameResponse
             */

            /**
             * Calls EndGame.
             * @function endGame
             * @memberof pb.cenarius.CenariusService
             * @instance
             * @param {pb.cenarius.IEndGameRequest} request EndGameRequest message or plain object
             * @param {pb.cenarius.CenariusService.EndGameCallback} callback Node-style callback called with the error, if any, and EndGameResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(CenariusService.prototype.endGame = function endGame(request, callback) {
                return this.rpcCall(endGame, $root.pb.cenarius.EndGameRequest, $root.pb.cenarius.EndGameResponse, request, callback);
            }, "name", { value: "EndGame" });

            /**
             * Calls EndGame.
             * @function endGame
             * @memberof pb.cenarius.CenariusService
             * @instance
             * @param {pb.cenarius.IEndGameRequest} request EndGameRequest message or plain object
             * @returns {Promise<pb.cenarius.EndGameResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pb.cenarius.CenariusService#sendTextMessage}.
             * @memberof pb.cenarius.CenariusService
             * @typedef SendTextMessageCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {google.protobuf.Empty} [response] Empty
             */

            /**
             * Calls SendTextMessage.
             * @function sendTextMessage
             * @memberof pb.cenarius.CenariusService
             * @instance
             * @param {pb.cenarius.ISendTextMessageReq} request SendTextMessageReq message or plain object
             * @param {pb.cenarius.CenariusService.SendTextMessageCallback} callback Node-style callback called with the error, if any, and Empty
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(CenariusService.prototype.sendTextMessage = function sendTextMessage(request, callback) {
                return this.rpcCall(sendTextMessage, $root.pb.cenarius.SendTextMessageReq, $root.google.protobuf.Empty, request, callback);
            }, "name", { value: "SendTextMessage" });

            /**
             * Calls SendTextMessage.
             * @function sendTextMessage
             * @memberof pb.cenarius.CenariusService
             * @instance
             * @param {pb.cenarius.ISendTextMessageReq} request SendTextMessageReq message or plain object
             * @returns {Promise<google.protobuf.Empty>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pb.cenarius.CenariusService#getUserDefinedRole}.
             * @memberof pb.cenarius.CenariusService
             * @typedef GetUserDefinedRoleCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pb.cenarius.Role} [response] Role
             */

            /**
             * Calls GetUserDefinedRole.
             * @function getUserDefinedRole
             * @memberof pb.cenarius.CenariusService
             * @instance
             * @param {pb.cenarius.IGetUserDefinedRoleReq} request GetUserDefinedRoleReq message or plain object
             * @param {pb.cenarius.CenariusService.GetUserDefinedRoleCallback} callback Node-style callback called with the error, if any, and Role
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(CenariusService.prototype.getUserDefinedRole = function getUserDefinedRole(request, callback) {
                return this.rpcCall(getUserDefinedRole, $root.pb.cenarius.GetUserDefinedRoleReq, $root.pb.cenarius.Role, request, callback);
            }, "name", { value: "GetUserDefinedRole" });

            /**
             * Calls GetUserDefinedRole.
             * @function getUserDefinedRole
             * @memberof pb.cenarius.CenariusService
             * @instance
             * @param {pb.cenarius.IGetUserDefinedRoleReq} request GetUserDefinedRoleReq message or plain object
             * @returns {Promise<pb.cenarius.Role>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pb.cenarius.CenariusService#sendGameInvitation}.
             * @memberof pb.cenarius.CenariusService
             * @typedef SendGameInvitationCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {google.protobuf.Empty} [response] Empty
             */

            /**
             * Calls SendGameInvitation.
             * @function sendGameInvitation
             * @memberof pb.cenarius.CenariusService
             * @instance
             * @param {pb.cenarius.ISendGameInvitationReq} request SendGameInvitationReq message or plain object
             * @param {pb.cenarius.CenariusService.SendGameInvitationCallback} callback Node-style callback called with the error, if any, and Empty
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(CenariusService.prototype.sendGameInvitation = function sendGameInvitation(request, callback) {
                return this.rpcCall(sendGameInvitation, $root.pb.cenarius.SendGameInvitationReq, $root.google.protobuf.Empty, request, callback);
            }, "name", { value: "SendGameInvitation" });

            /**
             * Calls SendGameInvitation.
             * @function sendGameInvitation
             * @memberof pb.cenarius.CenariusService
             * @instance
             * @param {pb.cenarius.ISendGameInvitationReq} request SendGameInvitationReq message or plain object
             * @returns {Promise<google.protobuf.Empty>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pb.cenarius.CenariusService#consumeTrainingGame}.
             * @memberof pb.cenarius.CenariusService
             * @typedef ConsumeTrainingGameCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {google.protobuf.Empty} [response] Empty
             */

            /**
             * Calls ConsumeTrainingGame.
             * @function consumeTrainingGame
             * @memberof pb.cenarius.CenariusService
             * @instance
             * @param {pb.cenarius.IConsumeTrainingReq} request ConsumeTrainingReq message or plain object
             * @param {pb.cenarius.CenariusService.ConsumeTrainingGameCallback} callback Node-style callback called with the error, if any, and Empty
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(CenariusService.prototype.consumeTrainingGame = function consumeTrainingGame(request, callback) {
                return this.rpcCall(consumeTrainingGame, $root.pb.cenarius.ConsumeTrainingReq, $root.google.protobuf.Empty, request, callback);
            }, "name", { value: "ConsumeTrainingGame" });

            /**
             * Calls ConsumeTrainingGame.
             * @function consumeTrainingGame
             * @memberof pb.cenarius.CenariusService
             * @instance
             * @param {pb.cenarius.IConsumeTrainingReq} request ConsumeTrainingReq message or plain object
             * @returns {Promise<google.protobuf.Empty>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pb.cenarius.CenariusService#checkTrainingGameBalance}.
             * @memberof pb.cenarius.CenariusService
             * @typedef CheckTrainingGameBalanceCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pb.cenarius.TrainingGameBalanceRsp} [response] TrainingGameBalanceRsp
             */

            /**
             * Calls CheckTrainingGameBalance.
             * @function checkTrainingGameBalance
             * @memberof pb.cenarius.CenariusService
             * @instance
             * @param {pb.cenarius.ITrainingGameBalanceReq} request TrainingGameBalanceReq message or plain object
             * @param {pb.cenarius.CenariusService.CheckTrainingGameBalanceCallback} callback Node-style callback called with the error, if any, and TrainingGameBalanceRsp
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(CenariusService.prototype.checkTrainingGameBalance = function checkTrainingGameBalance(request, callback) {
                return this.rpcCall(checkTrainingGameBalance, $root.pb.cenarius.TrainingGameBalanceReq, $root.pb.cenarius.TrainingGameBalanceRsp, request, callback);
            }, "name", { value: "CheckTrainingGameBalance" });

            /**
             * Calls CheckTrainingGameBalance.
             * @function checkTrainingGameBalance
             * @memberof pb.cenarius.CenariusService
             * @instance
             * @param {pb.cenarius.ITrainingGameBalanceReq} request TrainingGameBalanceReq message or plain object
             * @returns {Promise<pb.cenarius.TrainingGameBalanceRsp>} Promise
             * @variation 2
             */

            return CenariusService;
        })();

        cenarius.SendGameInvitationReq = (function() {

            /**
             * Properties of a SendGameInvitationReq.
             * @memberof pb.cenarius
             * @interface ISendGameInvitationReq
             * @property {Long|null} [invitorId] SendGameInvitationReq invitorId
             * @property {Long|null} [inviteeId] SendGameInvitationReq inviteeId
             * @property {string|null} [roomId] SendGameInvitationReq roomId
             * @property {string|null} [groupId] SendGameInvitationReq groupId
             */

            /**
             * Constructs a new SendGameInvitationReq.
             * @memberof pb.cenarius
             * @classdesc Represents a SendGameInvitationReq.
             * @implements ISendGameInvitationReq
             * @constructor
             * @param {pb.cenarius.ISendGameInvitationReq=} [properties] Properties to set
             */
            function SendGameInvitationReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SendGameInvitationReq invitorId.
             * @member {Long} invitorId
             * @memberof pb.cenarius.SendGameInvitationReq
             * @instance
             */
            SendGameInvitationReq.prototype.invitorId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * SendGameInvitationReq inviteeId.
             * @member {Long} inviteeId
             * @memberof pb.cenarius.SendGameInvitationReq
             * @instance
             */
            SendGameInvitationReq.prototype.inviteeId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * SendGameInvitationReq roomId.
             * @member {string} roomId
             * @memberof pb.cenarius.SendGameInvitationReq
             * @instance
             */
            SendGameInvitationReq.prototype.roomId = "";

            /**
             * SendGameInvitationReq groupId.
             * @member {string} groupId
             * @memberof pb.cenarius.SendGameInvitationReq
             * @instance
             */
            SendGameInvitationReq.prototype.groupId = "";

            /**
             * Creates a new SendGameInvitationReq instance using the specified properties.
             * @function create
             * @memberof pb.cenarius.SendGameInvitationReq
             * @static
             * @param {pb.cenarius.ISendGameInvitationReq=} [properties] Properties to set
             * @returns {pb.cenarius.SendGameInvitationReq} SendGameInvitationReq instance
             */
            SendGameInvitationReq.create = function create(properties) {
                return new SendGameInvitationReq(properties);
            };

            /**
             * Encodes the specified SendGameInvitationReq message. Does not implicitly {@link pb.cenarius.SendGameInvitationReq.verify|verify} messages.
             * @function encode
             * @memberof pb.cenarius.SendGameInvitationReq
             * @static
             * @param {pb.cenarius.ISendGameInvitationReq} message SendGameInvitationReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SendGameInvitationReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.invitorId != null && message.hasOwnProperty("invitorId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.invitorId);
                if (message.inviteeId != null && message.hasOwnProperty("inviteeId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.inviteeId);
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.roomId);
                if (message.groupId != null && message.hasOwnProperty("groupId"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.groupId);
                return writer;
            };

            /**
             * Encodes the specified SendGameInvitationReq message, length delimited. Does not implicitly {@link pb.cenarius.SendGameInvitationReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.cenarius.SendGameInvitationReq
             * @static
             * @param {pb.cenarius.ISendGameInvitationReq} message SendGameInvitationReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SendGameInvitationReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SendGameInvitationReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.cenarius.SendGameInvitationReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.cenarius.SendGameInvitationReq} SendGameInvitationReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SendGameInvitationReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.cenarius.SendGameInvitationReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.invitorId = reader.int64();
                        break;
                    case 2:
                        message.inviteeId = reader.int64();
                        break;
                    case 3:
                        message.roomId = reader.string();
                        break;
                    case 4:
                        message.groupId = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SendGameInvitationReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.cenarius.SendGameInvitationReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.cenarius.SendGameInvitationReq} SendGameInvitationReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SendGameInvitationReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SendGameInvitationReq message.
             * @function verify
             * @memberof pb.cenarius.SendGameInvitationReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SendGameInvitationReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.invitorId != null && message.hasOwnProperty("invitorId"))
                    if (!$util.isInteger(message.invitorId) && !(message.invitorId && $util.isInteger(message.invitorId.low) && $util.isInteger(message.invitorId.high)))
                        return "invitorId: integer|Long expected";
                if (message.inviteeId != null && message.hasOwnProperty("inviteeId"))
                    if (!$util.isInteger(message.inviteeId) && !(message.inviteeId && $util.isInteger(message.inviteeId.low) && $util.isInteger(message.inviteeId.high)))
                        return "inviteeId: integer|Long expected";
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    if (!$util.isString(message.roomId))
                        return "roomId: string expected";
                if (message.groupId != null && message.hasOwnProperty("groupId"))
                    if (!$util.isString(message.groupId))
                        return "groupId: string expected";
                return null;
            };

            /**
             * Creates a SendGameInvitationReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.cenarius.SendGameInvitationReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.cenarius.SendGameInvitationReq} SendGameInvitationReq
             */
            SendGameInvitationReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.cenarius.SendGameInvitationReq)
                    return object;
                var message = new $root.pb.cenarius.SendGameInvitationReq();
                if (object.invitorId != null)
                    if ($util.Long)
                        (message.invitorId = $util.Long.fromValue(object.invitorId)).unsigned = false;
                    else if (typeof object.invitorId === "string")
                        message.invitorId = parseInt(object.invitorId, 10);
                    else if (typeof object.invitorId === "number")
                        message.invitorId = object.invitorId;
                    else if (typeof object.invitorId === "object")
                        message.invitorId = new $util.LongBits(object.invitorId.low >>> 0, object.invitorId.high >>> 0).toNumber();
                if (object.inviteeId != null)
                    if ($util.Long)
                        (message.inviteeId = $util.Long.fromValue(object.inviteeId)).unsigned = false;
                    else if (typeof object.inviteeId === "string")
                        message.inviteeId = parseInt(object.inviteeId, 10);
                    else if (typeof object.inviteeId === "number")
                        message.inviteeId = object.inviteeId;
                    else if (typeof object.inviteeId === "object")
                        message.inviteeId = new $util.LongBits(object.inviteeId.low >>> 0, object.inviteeId.high >>> 0).toNumber();
                if (object.roomId != null)
                    message.roomId = String(object.roomId);
                if (object.groupId != null)
                    message.groupId = String(object.groupId);
                return message;
            };

            /**
             * Creates a plain object from a SendGameInvitationReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.cenarius.SendGameInvitationReq
             * @static
             * @param {pb.cenarius.SendGameInvitationReq} message SendGameInvitationReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SendGameInvitationReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.invitorId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.invitorId = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.inviteeId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.inviteeId = options.longs === String ? "0" : 0;
                    object.roomId = "";
                    object.groupId = "";
                }
                if (message.invitorId != null && message.hasOwnProperty("invitorId"))
                    if (typeof message.invitorId === "number")
                        object.invitorId = options.longs === String ? String(message.invitorId) : message.invitorId;
                    else
                        object.invitorId = options.longs === String ? $util.Long.prototype.toString.call(message.invitorId) : options.longs === Number ? new $util.LongBits(message.invitorId.low >>> 0, message.invitorId.high >>> 0).toNumber() : message.invitorId;
                if (message.inviteeId != null && message.hasOwnProperty("inviteeId"))
                    if (typeof message.inviteeId === "number")
                        object.inviteeId = options.longs === String ? String(message.inviteeId) : message.inviteeId;
                    else
                        object.inviteeId = options.longs === String ? $util.Long.prototype.toString.call(message.inviteeId) : options.longs === Number ? new $util.LongBits(message.inviteeId.low >>> 0, message.inviteeId.high >>> 0).toNumber() : message.inviteeId;
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    object.roomId = message.roomId;
                if (message.groupId != null && message.hasOwnProperty("groupId"))
                    object.groupId = message.groupId;
                return object;
            };

            /**
             * Converts this SendGameInvitationReq to JSON.
             * @function toJSON
             * @memberof pb.cenarius.SendGameInvitationReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SendGameInvitationReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SendGameInvitationReq;
        })();

        cenarius.RoleAssetType = (function() {

            /**
             * Properties of a RoleAssetType.
             * @memberof pb.cenarius
             * @interface IRoleAssetType
             */

            /**
             * Constructs a new RoleAssetType.
             * @memberof pb.cenarius
             * @classdesc Represents a RoleAssetType.
             * @implements IRoleAssetType
             * @constructor
             * @param {pb.cenarius.IRoleAssetType=} [properties] Properties to set
             */
            function RoleAssetType(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new RoleAssetType instance using the specified properties.
             * @function create
             * @memberof pb.cenarius.RoleAssetType
             * @static
             * @param {pb.cenarius.IRoleAssetType=} [properties] Properties to set
             * @returns {pb.cenarius.RoleAssetType} RoleAssetType instance
             */
            RoleAssetType.create = function create(properties) {
                return new RoleAssetType(properties);
            };

            /**
             * Encodes the specified RoleAssetType message. Does not implicitly {@link pb.cenarius.RoleAssetType.verify|verify} messages.
             * @function encode
             * @memberof pb.cenarius.RoleAssetType
             * @static
             * @param {pb.cenarius.IRoleAssetType} message RoleAssetType message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoleAssetType.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified RoleAssetType message, length delimited. Does not implicitly {@link pb.cenarius.RoleAssetType.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.cenarius.RoleAssetType
             * @static
             * @param {pb.cenarius.IRoleAssetType} message RoleAssetType message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoleAssetType.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RoleAssetType message from the specified reader or buffer.
             * @function decode
             * @memberof pb.cenarius.RoleAssetType
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.cenarius.RoleAssetType} RoleAssetType
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoleAssetType.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.cenarius.RoleAssetType();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RoleAssetType message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.cenarius.RoleAssetType
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.cenarius.RoleAssetType} RoleAssetType
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoleAssetType.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RoleAssetType message.
             * @function verify
             * @memberof pb.cenarius.RoleAssetType
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RoleAssetType.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a RoleAssetType message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.cenarius.RoleAssetType
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.cenarius.RoleAssetType} RoleAssetType
             */
            RoleAssetType.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.cenarius.RoleAssetType)
                    return object;
                return new $root.pb.cenarius.RoleAssetType();
            };

            /**
             * Creates a plain object from a RoleAssetType message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.cenarius.RoleAssetType
             * @static
             * @param {pb.cenarius.RoleAssetType} message RoleAssetType
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RoleAssetType.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this RoleAssetType to JSON.
             * @function toJSON
             * @memberof pb.cenarius.RoleAssetType
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RoleAssetType.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Enum enum.
             * @name pb.cenarius.RoleAssetType.Enum
             * @enum {string}
             * @property {number} UNKNOWN=0 UNKNOWN value
             * @property {number} SALARY=1 SALARY value
             * @property {number} CASH=2 CASH value
             */
            RoleAssetType.Enum = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN"] = 0;
                values[valuesById[1] = "SALARY"] = 1;
                values[valuesById[2] = "CASH"] = 2;
                return values;
            })();

            return RoleAssetType;
        })();

        cenarius.RoleAsset = (function() {

            /**
             * Properties of a RoleAsset.
             * @memberof pb.cenarius
             * @interface IRoleAsset
             * @property {string|null} [id] RoleAsset id
             * @property {Long|null} [userId] RoleAsset userId
             * @property {pb.cenarius.RoleAssetType.Enum|null} [code] RoleAsset code
             * @property {string|null} [typeName] RoleAsset typeName
             * @property {string|null} [name] RoleAsset name
             * @property {Long|null} [totalAmount] RoleAsset totalAmount
             * @property {Long|null} [liabilityAmount] RoleAsset liabilityAmount
             * @property {Long|null} [monthIncome] RoleAsset monthIncome
             * @property {Long|null} [monthPayment] RoleAsset monthPayment
             */

            /**
             * Constructs a new RoleAsset.
             * @memberof pb.cenarius
             * @classdesc Represents a RoleAsset.
             * @implements IRoleAsset
             * @constructor
             * @param {pb.cenarius.IRoleAsset=} [properties] Properties to set
             */
            function RoleAsset(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RoleAsset id.
             * @member {string} id
             * @memberof pb.cenarius.RoleAsset
             * @instance
             */
            RoleAsset.prototype.id = "";

            /**
             * RoleAsset userId.
             * @member {Long} userId
             * @memberof pb.cenarius.RoleAsset
             * @instance
             */
            RoleAsset.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * RoleAsset code.
             * @member {pb.cenarius.RoleAssetType.Enum} code
             * @memberof pb.cenarius.RoleAsset
             * @instance
             */
            RoleAsset.prototype.code = 0;

            /**
             * RoleAsset typeName.
             * @member {string} typeName
             * @memberof pb.cenarius.RoleAsset
             * @instance
             */
            RoleAsset.prototype.typeName = "";

            /**
             * RoleAsset name.
             * @member {string} name
             * @memberof pb.cenarius.RoleAsset
             * @instance
             */
            RoleAsset.prototype.name = "";

            /**
             * RoleAsset totalAmount.
             * @member {Long} totalAmount
             * @memberof pb.cenarius.RoleAsset
             * @instance
             */
            RoleAsset.prototype.totalAmount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * RoleAsset liabilityAmount.
             * @member {Long} liabilityAmount
             * @memberof pb.cenarius.RoleAsset
             * @instance
             */
            RoleAsset.prototype.liabilityAmount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * RoleAsset monthIncome.
             * @member {Long} monthIncome
             * @memberof pb.cenarius.RoleAsset
             * @instance
             */
            RoleAsset.prototype.monthIncome = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * RoleAsset monthPayment.
             * @member {Long} monthPayment
             * @memberof pb.cenarius.RoleAsset
             * @instance
             */
            RoleAsset.prototype.monthPayment = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new RoleAsset instance using the specified properties.
             * @function create
             * @memberof pb.cenarius.RoleAsset
             * @static
             * @param {pb.cenarius.IRoleAsset=} [properties] Properties to set
             * @returns {pb.cenarius.RoleAsset} RoleAsset instance
             */
            RoleAsset.create = function create(properties) {
                return new RoleAsset(properties);
            };

            /**
             * Encodes the specified RoleAsset message. Does not implicitly {@link pb.cenarius.RoleAsset.verify|verify} messages.
             * @function encode
             * @memberof pb.cenarius.RoleAsset
             * @static
             * @param {pb.cenarius.IRoleAsset} message RoleAsset message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoleAsset.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.userId);
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.code);
                if (message.typeName != null && message.hasOwnProperty("typeName"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.typeName);
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.name);
                if (message.totalAmount != null && message.hasOwnProperty("totalAmount"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int64(message.totalAmount);
                if (message.liabilityAmount != null && message.hasOwnProperty("liabilityAmount"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int64(message.liabilityAmount);
                if (message.monthIncome != null && message.hasOwnProperty("monthIncome"))
                    writer.uint32(/* id 8, wireType 0 =*/64).int64(message.monthIncome);
                if (message.monthPayment != null && message.hasOwnProperty("monthPayment"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int64(message.monthPayment);
                return writer;
            };

            /**
             * Encodes the specified RoleAsset message, length delimited. Does not implicitly {@link pb.cenarius.RoleAsset.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.cenarius.RoleAsset
             * @static
             * @param {pb.cenarius.IRoleAsset} message RoleAsset message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoleAsset.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RoleAsset message from the specified reader or buffer.
             * @function decode
             * @memberof pb.cenarius.RoleAsset
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.cenarius.RoleAsset} RoleAsset
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoleAsset.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.cenarius.RoleAsset();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.string();
                        break;
                    case 2:
                        message.userId = reader.int64();
                        break;
                    case 3:
                        message.code = reader.int32();
                        break;
                    case 4:
                        message.typeName = reader.string();
                        break;
                    case 5:
                        message.name = reader.string();
                        break;
                    case 6:
                        message.totalAmount = reader.int64();
                        break;
                    case 7:
                        message.liabilityAmount = reader.int64();
                        break;
                    case 8:
                        message.monthIncome = reader.int64();
                        break;
                    case 9:
                        message.monthPayment = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RoleAsset message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.cenarius.RoleAsset
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.cenarius.RoleAsset} RoleAsset
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoleAsset.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RoleAsset message.
             * @function verify
             * @memberof pb.cenarius.RoleAsset
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RoleAsset.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isString(message.id))
                        return "id: string expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                if (message.code != null && message.hasOwnProperty("code"))
                    switch (message.code) {
                    default:
                        return "code: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.typeName != null && message.hasOwnProperty("typeName"))
                    if (!$util.isString(message.typeName))
                        return "typeName: string expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.totalAmount != null && message.hasOwnProperty("totalAmount"))
                    if (!$util.isInteger(message.totalAmount) && !(message.totalAmount && $util.isInteger(message.totalAmount.low) && $util.isInteger(message.totalAmount.high)))
                        return "totalAmount: integer|Long expected";
                if (message.liabilityAmount != null && message.hasOwnProperty("liabilityAmount"))
                    if (!$util.isInteger(message.liabilityAmount) && !(message.liabilityAmount && $util.isInteger(message.liabilityAmount.low) && $util.isInteger(message.liabilityAmount.high)))
                        return "liabilityAmount: integer|Long expected";
                if (message.monthIncome != null && message.hasOwnProperty("monthIncome"))
                    if (!$util.isInteger(message.monthIncome) && !(message.monthIncome && $util.isInteger(message.monthIncome.low) && $util.isInteger(message.monthIncome.high)))
                        return "monthIncome: integer|Long expected";
                if (message.monthPayment != null && message.hasOwnProperty("monthPayment"))
                    if (!$util.isInteger(message.monthPayment) && !(message.monthPayment && $util.isInteger(message.monthPayment.low) && $util.isInteger(message.monthPayment.high)))
                        return "monthPayment: integer|Long expected";
                return null;
            };

            /**
             * Creates a RoleAsset message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.cenarius.RoleAsset
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.cenarius.RoleAsset} RoleAsset
             */
            RoleAsset.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.cenarius.RoleAsset)
                    return object;
                var message = new $root.pb.cenarius.RoleAsset();
                if (object.id != null)
                    message.id = String(object.id);
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                switch (object.code) {
                case "UNKNOWN":
                case 0:
                    message.code = 0;
                    break;
                case "SALARY":
                case 1:
                    message.code = 1;
                    break;
                case "CASH":
                case 2:
                    message.code = 2;
                    break;
                }
                if (object.typeName != null)
                    message.typeName = String(object.typeName);
                if (object.name != null)
                    message.name = String(object.name);
                if (object.totalAmount != null)
                    if ($util.Long)
                        (message.totalAmount = $util.Long.fromValue(object.totalAmount)).unsigned = false;
                    else if (typeof object.totalAmount === "string")
                        message.totalAmount = parseInt(object.totalAmount, 10);
                    else if (typeof object.totalAmount === "number")
                        message.totalAmount = object.totalAmount;
                    else if (typeof object.totalAmount === "object")
                        message.totalAmount = new $util.LongBits(object.totalAmount.low >>> 0, object.totalAmount.high >>> 0).toNumber();
                if (object.liabilityAmount != null)
                    if ($util.Long)
                        (message.liabilityAmount = $util.Long.fromValue(object.liabilityAmount)).unsigned = false;
                    else if (typeof object.liabilityAmount === "string")
                        message.liabilityAmount = parseInt(object.liabilityAmount, 10);
                    else if (typeof object.liabilityAmount === "number")
                        message.liabilityAmount = object.liabilityAmount;
                    else if (typeof object.liabilityAmount === "object")
                        message.liabilityAmount = new $util.LongBits(object.liabilityAmount.low >>> 0, object.liabilityAmount.high >>> 0).toNumber();
                if (object.monthIncome != null)
                    if ($util.Long)
                        (message.monthIncome = $util.Long.fromValue(object.monthIncome)).unsigned = false;
                    else if (typeof object.monthIncome === "string")
                        message.monthIncome = parseInt(object.monthIncome, 10);
                    else if (typeof object.monthIncome === "number")
                        message.monthIncome = object.monthIncome;
                    else if (typeof object.monthIncome === "object")
                        message.monthIncome = new $util.LongBits(object.monthIncome.low >>> 0, object.monthIncome.high >>> 0).toNumber();
                if (object.monthPayment != null)
                    if ($util.Long)
                        (message.monthPayment = $util.Long.fromValue(object.monthPayment)).unsigned = false;
                    else if (typeof object.monthPayment === "string")
                        message.monthPayment = parseInt(object.monthPayment, 10);
                    else if (typeof object.monthPayment === "number")
                        message.monthPayment = object.monthPayment;
                    else if (typeof object.monthPayment === "object")
                        message.monthPayment = new $util.LongBits(object.monthPayment.low >>> 0, object.monthPayment.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a RoleAsset message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.cenarius.RoleAsset
             * @static
             * @param {pb.cenarius.RoleAsset} message RoleAsset
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RoleAsset.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.id = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                    object.code = options.enums === String ? "UNKNOWN" : 0;
                    object.typeName = "";
                    object.name = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.totalAmount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.totalAmount = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.liabilityAmount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.liabilityAmount = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.monthIncome = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.monthIncome = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.monthPayment = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.monthPayment = options.longs === String ? "0" : 0;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = options.enums === String ? $root.pb.cenarius.RoleAssetType.Enum[message.code] : message.code;
                if (message.typeName != null && message.hasOwnProperty("typeName"))
                    object.typeName = message.typeName;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.totalAmount != null && message.hasOwnProperty("totalAmount"))
                    if (typeof message.totalAmount === "number")
                        object.totalAmount = options.longs === String ? String(message.totalAmount) : message.totalAmount;
                    else
                        object.totalAmount = options.longs === String ? $util.Long.prototype.toString.call(message.totalAmount) : options.longs === Number ? new $util.LongBits(message.totalAmount.low >>> 0, message.totalAmount.high >>> 0).toNumber() : message.totalAmount;
                if (message.liabilityAmount != null && message.hasOwnProperty("liabilityAmount"))
                    if (typeof message.liabilityAmount === "number")
                        object.liabilityAmount = options.longs === String ? String(message.liabilityAmount) : message.liabilityAmount;
                    else
                        object.liabilityAmount = options.longs === String ? $util.Long.prototype.toString.call(message.liabilityAmount) : options.longs === Number ? new $util.LongBits(message.liabilityAmount.low >>> 0, message.liabilityAmount.high >>> 0).toNumber() : message.liabilityAmount;
                if (message.monthIncome != null && message.hasOwnProperty("monthIncome"))
                    if (typeof message.monthIncome === "number")
                        object.monthIncome = options.longs === String ? String(message.monthIncome) : message.monthIncome;
                    else
                        object.monthIncome = options.longs === String ? $util.Long.prototype.toString.call(message.monthIncome) : options.longs === Number ? new $util.LongBits(message.monthIncome.low >>> 0, message.monthIncome.high >>> 0).toNumber() : message.monthIncome;
                if (message.monthPayment != null && message.hasOwnProperty("monthPayment"))
                    if (typeof message.monthPayment === "number")
                        object.monthPayment = options.longs === String ? String(message.monthPayment) : message.monthPayment;
                    else
                        object.monthPayment = options.longs === String ? $util.Long.prototype.toString.call(message.monthPayment) : options.longs === Number ? new $util.LongBits(message.monthPayment.low >>> 0, message.monthPayment.high >>> 0).toNumber() : message.monthPayment;
                return object;
            };

            /**
             * Converts this RoleAsset to JSON.
             * @function toJSON
             * @memberof pb.cenarius.RoleAsset
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RoleAsset.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RoleAsset;
        })();

        cenarius.GetUserDefinedRoleReq = (function() {

            /**
             * Properties of a GetUserDefinedRoleReq.
             * @memberof pb.cenarius
             * @interface IGetUserDefinedRoleReq
             * @property {Long|null} [userId] GetUserDefinedRoleReq userId
             */

            /**
             * Constructs a new GetUserDefinedRoleReq.
             * @memberof pb.cenarius
             * @classdesc Represents a GetUserDefinedRoleReq.
             * @implements IGetUserDefinedRoleReq
             * @constructor
             * @param {pb.cenarius.IGetUserDefinedRoleReq=} [properties] Properties to set
             */
            function GetUserDefinedRoleReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GetUserDefinedRoleReq userId.
             * @member {Long} userId
             * @memberof pb.cenarius.GetUserDefinedRoleReq
             * @instance
             */
            GetUserDefinedRoleReq.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new GetUserDefinedRoleReq instance using the specified properties.
             * @function create
             * @memberof pb.cenarius.GetUserDefinedRoleReq
             * @static
             * @param {pb.cenarius.IGetUserDefinedRoleReq=} [properties] Properties to set
             * @returns {pb.cenarius.GetUserDefinedRoleReq} GetUserDefinedRoleReq instance
             */
            GetUserDefinedRoleReq.create = function create(properties) {
                return new GetUserDefinedRoleReq(properties);
            };

            /**
             * Encodes the specified GetUserDefinedRoleReq message. Does not implicitly {@link pb.cenarius.GetUserDefinedRoleReq.verify|verify} messages.
             * @function encode
             * @memberof pb.cenarius.GetUserDefinedRoleReq
             * @static
             * @param {pb.cenarius.IGetUserDefinedRoleReq} message GetUserDefinedRoleReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetUserDefinedRoleReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userId);
                return writer;
            };

            /**
             * Encodes the specified GetUserDefinedRoleReq message, length delimited. Does not implicitly {@link pb.cenarius.GetUserDefinedRoleReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.cenarius.GetUserDefinedRoleReq
             * @static
             * @param {pb.cenarius.IGetUserDefinedRoleReq} message GetUserDefinedRoleReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetUserDefinedRoleReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetUserDefinedRoleReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.cenarius.GetUserDefinedRoleReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.cenarius.GetUserDefinedRoleReq} GetUserDefinedRoleReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetUserDefinedRoleReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.cenarius.GetUserDefinedRoleReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.userId = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetUserDefinedRoleReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.cenarius.GetUserDefinedRoleReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.cenarius.GetUserDefinedRoleReq} GetUserDefinedRoleReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetUserDefinedRoleReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetUserDefinedRoleReq message.
             * @function verify
             * @memberof pb.cenarius.GetUserDefinedRoleReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetUserDefinedRoleReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                return null;
            };

            /**
             * Creates a GetUserDefinedRoleReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.cenarius.GetUserDefinedRoleReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.cenarius.GetUserDefinedRoleReq} GetUserDefinedRoleReq
             */
            GetUserDefinedRoleReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.cenarius.GetUserDefinedRoleReq)
                    return object;
                var message = new $root.pb.cenarius.GetUserDefinedRoleReq();
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a GetUserDefinedRoleReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.cenarius.GetUserDefinedRoleReq
             * @static
             * @param {pb.cenarius.GetUserDefinedRoleReq} message GetUserDefinedRoleReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetUserDefinedRoleReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                return object;
            };

            /**
             * Converts this GetUserDefinedRoleReq to JSON.
             * @function toJSON
             * @memberof pb.cenarius.GetUserDefinedRoleReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetUserDefinedRoleReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GetUserDefinedRoleReq;
        })();

        cenarius.TrainingGameBalanceReq = (function() {

            /**
             * Properties of a TrainingGameBalanceReq.
             * @memberof pb.cenarius
             * @interface ITrainingGameBalanceReq
             * @property {Long|null} [userID] TrainingGameBalanceReq userID
             */

            /**
             * Constructs a new TrainingGameBalanceReq.
             * @memberof pb.cenarius
             * @classdesc Represents a TrainingGameBalanceReq.
             * @implements ITrainingGameBalanceReq
             * @constructor
             * @param {pb.cenarius.ITrainingGameBalanceReq=} [properties] Properties to set
             */
            function TrainingGameBalanceReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * TrainingGameBalanceReq userID.
             * @member {Long} userID
             * @memberof pb.cenarius.TrainingGameBalanceReq
             * @instance
             */
            TrainingGameBalanceReq.prototype.userID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new TrainingGameBalanceReq instance using the specified properties.
             * @function create
             * @memberof pb.cenarius.TrainingGameBalanceReq
             * @static
             * @param {pb.cenarius.ITrainingGameBalanceReq=} [properties] Properties to set
             * @returns {pb.cenarius.TrainingGameBalanceReq} TrainingGameBalanceReq instance
             */
            TrainingGameBalanceReq.create = function create(properties) {
                return new TrainingGameBalanceReq(properties);
            };

            /**
             * Encodes the specified TrainingGameBalanceReq message. Does not implicitly {@link pb.cenarius.TrainingGameBalanceReq.verify|verify} messages.
             * @function encode
             * @memberof pb.cenarius.TrainingGameBalanceReq
             * @static
             * @param {pb.cenarius.ITrainingGameBalanceReq} message TrainingGameBalanceReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TrainingGameBalanceReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userID != null && message.hasOwnProperty("userID"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userID);
                return writer;
            };

            /**
             * Encodes the specified TrainingGameBalanceReq message, length delimited. Does not implicitly {@link pb.cenarius.TrainingGameBalanceReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.cenarius.TrainingGameBalanceReq
             * @static
             * @param {pb.cenarius.ITrainingGameBalanceReq} message TrainingGameBalanceReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TrainingGameBalanceReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TrainingGameBalanceReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.cenarius.TrainingGameBalanceReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.cenarius.TrainingGameBalanceReq} TrainingGameBalanceReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TrainingGameBalanceReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.cenarius.TrainingGameBalanceReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.userID = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a TrainingGameBalanceReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.cenarius.TrainingGameBalanceReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.cenarius.TrainingGameBalanceReq} TrainingGameBalanceReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TrainingGameBalanceReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TrainingGameBalanceReq message.
             * @function verify
             * @memberof pb.cenarius.TrainingGameBalanceReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TrainingGameBalanceReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userID != null && message.hasOwnProperty("userID"))
                    if (!$util.isInteger(message.userID) && !(message.userID && $util.isInteger(message.userID.low) && $util.isInteger(message.userID.high)))
                        return "userID: integer|Long expected";
                return null;
            };

            /**
             * Creates a TrainingGameBalanceReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.cenarius.TrainingGameBalanceReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.cenarius.TrainingGameBalanceReq} TrainingGameBalanceReq
             */
            TrainingGameBalanceReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.cenarius.TrainingGameBalanceReq)
                    return object;
                var message = new $root.pb.cenarius.TrainingGameBalanceReq();
                if (object.userID != null)
                    if ($util.Long)
                        (message.userID = $util.Long.fromValue(object.userID)).unsigned = false;
                    else if (typeof object.userID === "string")
                        message.userID = parseInt(object.userID, 10);
                    else if (typeof object.userID === "number")
                        message.userID = object.userID;
                    else if (typeof object.userID === "object")
                        message.userID = new $util.LongBits(object.userID.low >>> 0, object.userID.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a TrainingGameBalanceReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.cenarius.TrainingGameBalanceReq
             * @static
             * @param {pb.cenarius.TrainingGameBalanceReq} message TrainingGameBalanceReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TrainingGameBalanceReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userID = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userID = options.longs === String ? "0" : 0;
                if (message.userID != null && message.hasOwnProperty("userID"))
                    if (typeof message.userID === "number")
                        object.userID = options.longs === String ? String(message.userID) : message.userID;
                    else
                        object.userID = options.longs === String ? $util.Long.prototype.toString.call(message.userID) : options.longs === Number ? new $util.LongBits(message.userID.low >>> 0, message.userID.high >>> 0).toNumber() : message.userID;
                return object;
            };

            /**
             * Converts this TrainingGameBalanceReq to JSON.
             * @function toJSON
             * @memberof pb.cenarius.TrainingGameBalanceReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TrainingGameBalanceReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return TrainingGameBalanceReq;
        })();

        cenarius.TrainingGameBalanceRsp = (function() {

            /**
             * Properties of a TrainingGameBalanceRsp.
             * @memberof pb.cenarius
             * @interface ITrainingGameBalanceRsp
             * @property {number|null} [total] TrainingGameBalanceRsp total
             * @property {number|null} [consumed] TrainingGameBalanceRsp consumed
             * @property {number|null} [free] TrainingGameBalanceRsp free
             */

            /**
             * Constructs a new TrainingGameBalanceRsp.
             * @memberof pb.cenarius
             * @classdesc Represents a TrainingGameBalanceRsp.
             * @implements ITrainingGameBalanceRsp
             * @constructor
             * @param {pb.cenarius.ITrainingGameBalanceRsp=} [properties] Properties to set
             */
            function TrainingGameBalanceRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * TrainingGameBalanceRsp total.
             * @member {number} total
             * @memberof pb.cenarius.TrainingGameBalanceRsp
             * @instance
             */
            TrainingGameBalanceRsp.prototype.total = 0;

            /**
             * TrainingGameBalanceRsp consumed.
             * @member {number} consumed
             * @memberof pb.cenarius.TrainingGameBalanceRsp
             * @instance
             */
            TrainingGameBalanceRsp.prototype.consumed = 0;

            /**
             * TrainingGameBalanceRsp free.
             * @member {number} free
             * @memberof pb.cenarius.TrainingGameBalanceRsp
             * @instance
             */
            TrainingGameBalanceRsp.prototype.free = 0;

            /**
             * Creates a new TrainingGameBalanceRsp instance using the specified properties.
             * @function create
             * @memberof pb.cenarius.TrainingGameBalanceRsp
             * @static
             * @param {pb.cenarius.ITrainingGameBalanceRsp=} [properties] Properties to set
             * @returns {pb.cenarius.TrainingGameBalanceRsp} TrainingGameBalanceRsp instance
             */
            TrainingGameBalanceRsp.create = function create(properties) {
                return new TrainingGameBalanceRsp(properties);
            };

            /**
             * Encodes the specified TrainingGameBalanceRsp message. Does not implicitly {@link pb.cenarius.TrainingGameBalanceRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.cenarius.TrainingGameBalanceRsp
             * @static
             * @param {pb.cenarius.ITrainingGameBalanceRsp} message TrainingGameBalanceRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TrainingGameBalanceRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.total != null && message.hasOwnProperty("total"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.total);
                if (message.consumed != null && message.hasOwnProperty("consumed"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.consumed);
                if (message.free != null && message.hasOwnProperty("free"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.free);
                return writer;
            };

            /**
             * Encodes the specified TrainingGameBalanceRsp message, length delimited. Does not implicitly {@link pb.cenarius.TrainingGameBalanceRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.cenarius.TrainingGameBalanceRsp
             * @static
             * @param {pb.cenarius.ITrainingGameBalanceRsp} message TrainingGameBalanceRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TrainingGameBalanceRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TrainingGameBalanceRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.cenarius.TrainingGameBalanceRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.cenarius.TrainingGameBalanceRsp} TrainingGameBalanceRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TrainingGameBalanceRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.cenarius.TrainingGameBalanceRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.total = reader.int32();
                        break;
                    case 2:
                        message.consumed = reader.int32();
                        break;
                    case 3:
                        message.free = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a TrainingGameBalanceRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.cenarius.TrainingGameBalanceRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.cenarius.TrainingGameBalanceRsp} TrainingGameBalanceRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TrainingGameBalanceRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TrainingGameBalanceRsp message.
             * @function verify
             * @memberof pb.cenarius.TrainingGameBalanceRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TrainingGameBalanceRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.total != null && message.hasOwnProperty("total"))
                    if (!$util.isInteger(message.total))
                        return "total: integer expected";
                if (message.consumed != null && message.hasOwnProperty("consumed"))
                    if (!$util.isInteger(message.consumed))
                        return "consumed: integer expected";
                if (message.free != null && message.hasOwnProperty("free"))
                    if (!$util.isInteger(message.free))
                        return "free: integer expected";
                return null;
            };

            /**
             * Creates a TrainingGameBalanceRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.cenarius.TrainingGameBalanceRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.cenarius.TrainingGameBalanceRsp} TrainingGameBalanceRsp
             */
            TrainingGameBalanceRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.cenarius.TrainingGameBalanceRsp)
                    return object;
                var message = new $root.pb.cenarius.TrainingGameBalanceRsp();
                if (object.total != null)
                    message.total = object.total | 0;
                if (object.consumed != null)
                    message.consumed = object.consumed | 0;
                if (object.free != null)
                    message.free = object.free | 0;
                return message;
            };

            /**
             * Creates a plain object from a TrainingGameBalanceRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.cenarius.TrainingGameBalanceRsp
             * @static
             * @param {pb.cenarius.TrainingGameBalanceRsp} message TrainingGameBalanceRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TrainingGameBalanceRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.total = 0;
                    object.consumed = 0;
                    object.free = 0;
                }
                if (message.total != null && message.hasOwnProperty("total"))
                    object.total = message.total;
                if (message.consumed != null && message.hasOwnProperty("consumed"))
                    object.consumed = message.consumed;
                if (message.free != null && message.hasOwnProperty("free"))
                    object.free = message.free;
                return object;
            };

            /**
             * Converts this TrainingGameBalanceRsp to JSON.
             * @function toJSON
             * @memberof pb.cenarius.TrainingGameBalanceRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TrainingGameBalanceRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return TrainingGameBalanceRsp;
        })();

        cenarius.ConsumeTrainingReq = (function() {

            /**
             * Properties of a ConsumeTrainingReq.
             * @memberof pb.cenarius
             * @interface IConsumeTrainingReq
             * @property {Long|null} [userID] ConsumeTrainingReq userID
             * @property {Long|null} [gameID] ConsumeTrainingReq gameID
             */

            /**
             * Constructs a new ConsumeTrainingReq.
             * @memberof pb.cenarius
             * @classdesc Represents a ConsumeTrainingReq.
             * @implements IConsumeTrainingReq
             * @constructor
             * @param {pb.cenarius.IConsumeTrainingReq=} [properties] Properties to set
             */
            function ConsumeTrainingReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ConsumeTrainingReq userID.
             * @member {Long} userID
             * @memberof pb.cenarius.ConsumeTrainingReq
             * @instance
             */
            ConsumeTrainingReq.prototype.userID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * ConsumeTrainingReq gameID.
             * @member {Long} gameID
             * @memberof pb.cenarius.ConsumeTrainingReq
             * @instance
             */
            ConsumeTrainingReq.prototype.gameID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new ConsumeTrainingReq instance using the specified properties.
             * @function create
             * @memberof pb.cenarius.ConsumeTrainingReq
             * @static
             * @param {pb.cenarius.IConsumeTrainingReq=} [properties] Properties to set
             * @returns {pb.cenarius.ConsumeTrainingReq} ConsumeTrainingReq instance
             */
            ConsumeTrainingReq.create = function create(properties) {
                return new ConsumeTrainingReq(properties);
            };

            /**
             * Encodes the specified ConsumeTrainingReq message. Does not implicitly {@link pb.cenarius.ConsumeTrainingReq.verify|verify} messages.
             * @function encode
             * @memberof pb.cenarius.ConsumeTrainingReq
             * @static
             * @param {pb.cenarius.IConsumeTrainingReq} message ConsumeTrainingReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConsumeTrainingReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userID != null && message.hasOwnProperty("userID"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userID);
                if (message.gameID != null && message.hasOwnProperty("gameID"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.gameID);
                return writer;
            };

            /**
             * Encodes the specified ConsumeTrainingReq message, length delimited. Does not implicitly {@link pb.cenarius.ConsumeTrainingReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.cenarius.ConsumeTrainingReq
             * @static
             * @param {pb.cenarius.IConsumeTrainingReq} message ConsumeTrainingReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConsumeTrainingReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ConsumeTrainingReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.cenarius.ConsumeTrainingReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.cenarius.ConsumeTrainingReq} ConsumeTrainingReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConsumeTrainingReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.cenarius.ConsumeTrainingReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.userID = reader.int64();
                        break;
                    case 2:
                        message.gameID = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ConsumeTrainingReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.cenarius.ConsumeTrainingReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.cenarius.ConsumeTrainingReq} ConsumeTrainingReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConsumeTrainingReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ConsumeTrainingReq message.
             * @function verify
             * @memberof pb.cenarius.ConsumeTrainingReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ConsumeTrainingReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userID != null && message.hasOwnProperty("userID"))
                    if (!$util.isInteger(message.userID) && !(message.userID && $util.isInteger(message.userID.low) && $util.isInteger(message.userID.high)))
                        return "userID: integer|Long expected";
                if (message.gameID != null && message.hasOwnProperty("gameID"))
                    if (!$util.isInteger(message.gameID) && !(message.gameID && $util.isInteger(message.gameID.low) && $util.isInteger(message.gameID.high)))
                        return "gameID: integer|Long expected";
                return null;
            };

            /**
             * Creates a ConsumeTrainingReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.cenarius.ConsumeTrainingReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.cenarius.ConsumeTrainingReq} ConsumeTrainingReq
             */
            ConsumeTrainingReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.cenarius.ConsumeTrainingReq)
                    return object;
                var message = new $root.pb.cenarius.ConsumeTrainingReq();
                if (object.userID != null)
                    if ($util.Long)
                        (message.userID = $util.Long.fromValue(object.userID)).unsigned = false;
                    else if (typeof object.userID === "string")
                        message.userID = parseInt(object.userID, 10);
                    else if (typeof object.userID === "number")
                        message.userID = object.userID;
                    else if (typeof object.userID === "object")
                        message.userID = new $util.LongBits(object.userID.low >>> 0, object.userID.high >>> 0).toNumber();
                if (object.gameID != null)
                    if ($util.Long)
                        (message.gameID = $util.Long.fromValue(object.gameID)).unsigned = false;
                    else if (typeof object.gameID === "string")
                        message.gameID = parseInt(object.gameID, 10);
                    else if (typeof object.gameID === "number")
                        message.gameID = object.gameID;
                    else if (typeof object.gameID === "object")
                        message.gameID = new $util.LongBits(object.gameID.low >>> 0, object.gameID.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a ConsumeTrainingReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.cenarius.ConsumeTrainingReq
             * @static
             * @param {pb.cenarius.ConsumeTrainingReq} message ConsumeTrainingReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ConsumeTrainingReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userID = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userID = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.gameID = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.gameID = options.longs === String ? "0" : 0;
                }
                if (message.userID != null && message.hasOwnProperty("userID"))
                    if (typeof message.userID === "number")
                        object.userID = options.longs === String ? String(message.userID) : message.userID;
                    else
                        object.userID = options.longs === String ? $util.Long.prototype.toString.call(message.userID) : options.longs === Number ? new $util.LongBits(message.userID.low >>> 0, message.userID.high >>> 0).toNumber() : message.userID;
                if (message.gameID != null && message.hasOwnProperty("gameID"))
                    if (typeof message.gameID === "number")
                        object.gameID = options.longs === String ? String(message.gameID) : message.gameID;
                    else
                        object.gameID = options.longs === String ? $util.Long.prototype.toString.call(message.gameID) : options.longs === Number ? new $util.LongBits(message.gameID.low >>> 0, message.gameID.high >>> 0).toNumber() : message.gameID;
                return object;
            };

            /**
             * Converts this ConsumeTrainingReq to JSON.
             * @function toJSON
             * @memberof pb.cenarius.ConsumeTrainingReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ConsumeTrainingReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ConsumeTrainingReq;
        })();

        cenarius.ConsumeTrainingRsp = (function() {

            /**
             * Properties of a ConsumeTrainingRsp.
             * @memberof pb.cenarius
             * @interface IConsumeTrainingRsp
             * @property {Long|null} [userID] ConsumeTrainingRsp userID
             */

            /**
             * Constructs a new ConsumeTrainingRsp.
             * @memberof pb.cenarius
             * @classdesc Represents a ConsumeTrainingRsp.
             * @implements IConsumeTrainingRsp
             * @constructor
             * @param {pb.cenarius.IConsumeTrainingRsp=} [properties] Properties to set
             */
            function ConsumeTrainingRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ConsumeTrainingRsp userID.
             * @member {Long} userID
             * @memberof pb.cenarius.ConsumeTrainingRsp
             * @instance
             */
            ConsumeTrainingRsp.prototype.userID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new ConsumeTrainingRsp instance using the specified properties.
             * @function create
             * @memberof pb.cenarius.ConsumeTrainingRsp
             * @static
             * @param {pb.cenarius.IConsumeTrainingRsp=} [properties] Properties to set
             * @returns {pb.cenarius.ConsumeTrainingRsp} ConsumeTrainingRsp instance
             */
            ConsumeTrainingRsp.create = function create(properties) {
                return new ConsumeTrainingRsp(properties);
            };

            /**
             * Encodes the specified ConsumeTrainingRsp message. Does not implicitly {@link pb.cenarius.ConsumeTrainingRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.cenarius.ConsumeTrainingRsp
             * @static
             * @param {pb.cenarius.IConsumeTrainingRsp} message ConsumeTrainingRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConsumeTrainingRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userID != null && message.hasOwnProperty("userID"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.userID);
                return writer;
            };

            /**
             * Encodes the specified ConsumeTrainingRsp message, length delimited. Does not implicitly {@link pb.cenarius.ConsumeTrainingRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.cenarius.ConsumeTrainingRsp
             * @static
             * @param {pb.cenarius.IConsumeTrainingRsp} message ConsumeTrainingRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConsumeTrainingRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ConsumeTrainingRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.cenarius.ConsumeTrainingRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.cenarius.ConsumeTrainingRsp} ConsumeTrainingRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConsumeTrainingRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.cenarius.ConsumeTrainingRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        message.userID = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ConsumeTrainingRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.cenarius.ConsumeTrainingRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.cenarius.ConsumeTrainingRsp} ConsumeTrainingRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConsumeTrainingRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ConsumeTrainingRsp message.
             * @function verify
             * @memberof pb.cenarius.ConsumeTrainingRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ConsumeTrainingRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userID != null && message.hasOwnProperty("userID"))
                    if (!$util.isInteger(message.userID) && !(message.userID && $util.isInteger(message.userID.low) && $util.isInteger(message.userID.high)))
                        return "userID: integer|Long expected";
                return null;
            };

            /**
             * Creates a ConsumeTrainingRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.cenarius.ConsumeTrainingRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.cenarius.ConsumeTrainingRsp} ConsumeTrainingRsp
             */
            ConsumeTrainingRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.cenarius.ConsumeTrainingRsp)
                    return object;
                var message = new $root.pb.cenarius.ConsumeTrainingRsp();
                if (object.userID != null)
                    if ($util.Long)
                        (message.userID = $util.Long.fromValue(object.userID)).unsigned = false;
                    else if (typeof object.userID === "string")
                        message.userID = parseInt(object.userID, 10);
                    else if (typeof object.userID === "number")
                        message.userID = object.userID;
                    else if (typeof object.userID === "object")
                        message.userID = new $util.LongBits(object.userID.low >>> 0, object.userID.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a ConsumeTrainingRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.cenarius.ConsumeTrainingRsp
             * @static
             * @param {pb.cenarius.ConsumeTrainingRsp} message ConsumeTrainingRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ConsumeTrainingRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userID = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userID = options.longs === String ? "0" : 0;
                if (message.userID != null && message.hasOwnProperty("userID"))
                    if (typeof message.userID === "number")
                        object.userID = options.longs === String ? String(message.userID) : message.userID;
                    else
                        object.userID = options.longs === String ? $util.Long.prototype.toString.call(message.userID) : options.longs === Number ? new $util.LongBits(message.userID.low >>> 0, message.userID.high >>> 0).toNumber() : message.userID;
                return object;
            };

            /**
             * Converts this ConsumeTrainingRsp to JSON.
             * @function toJSON
             * @memberof pb.cenarius.ConsumeTrainingRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ConsumeTrainingRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ConsumeTrainingRsp;
        })();

        return cenarius;
    })();

    pb.common = (function() {

        /**
         * Namespace common.
         * @memberof pb
         * @namespace
         */
        var common = {};

        /**
         * SCENARIO_TYPE enum.
         * @name pb.common.SCENARIO_TYPE
         * @enum {string}
         * @property {number} S_PB_FIRST_MUST_ZORE=0 S_PB_FIRST_MUST_ZORE value
         * @property {number} S_INIT=1 S_INIT value
         * @property {number} S_CHANCE=2 S_CHANCE value
         * @property {number} S_BIG_BUSINESS=3 S_BIG_BUSINESS value
         * @property {number} S_SMALL_BUSINESS=4 S_SMALL_BUSINESS value
         * @property {number} S_MARKET_INFO=5 S_MARKET_INFO value
         * @property {number} S_ACCIDENT=6 S_ACCIDENT value
         * @property {number} S_CHARITY=7 S_CHARITY value
         * @property {number} S_UNEMPLOYMENT=8 S_UNEMPLOYMENT value
         * @property {number} S_PAYDAY=9 S_PAYDAY value
         * @property {number} S_BABY=10 S_BABY value
         * @property {number} S_WAGE_HIKE=11 S_WAGE_HIKE value
         * @property {number} S_MARKET_CHANGE=12 S_MARKET_CHANGE value
         */
        common.SCENARIO_TYPE = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "S_PB_FIRST_MUST_ZORE"] = 0;
            values[valuesById[1] = "S_INIT"] = 1;
            values[valuesById[2] = "S_CHANCE"] = 2;
            values[valuesById[3] = "S_BIG_BUSINESS"] = 3;
            values[valuesById[4] = "S_SMALL_BUSINESS"] = 4;
            values[valuesById[5] = "S_MARKET_INFO"] = 5;
            values[valuesById[6] = "S_ACCIDENT"] = 6;
            values[valuesById[7] = "S_CHARITY"] = 7;
            values[valuesById[8] = "S_UNEMPLOYMENT"] = 8;
            values[valuesById[9] = "S_PAYDAY"] = 9;
            values[valuesById[10] = "S_BABY"] = 10;
            values[valuesById[11] = "S_WAGE_HIKE"] = 11;
            values[valuesById[12] = "S_MARKET_CHANGE"] = 12;
            return values;
        })();

        /**
         * PayDayType enum.
         * @name pb.common.PayDayType
         * @enum {string}
         * @property {number} PAYDAY_PLACEHOLDER=0 PAYDAY_PLACEHOLDER value
         * @property {number} NOT_PAY_DAY=1 NOT_PAY_DAY value
         * @property {number} PAY_DAY=2 PAY_DAY value
         * @property {number} PASS_BY_PAY_DAY=3 PASS_BY_PAY_DAY value
         */
        common.PayDayType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "PAYDAY_PLACEHOLDER"] = 0;
            values[valuesById[1] = "NOT_PAY_DAY"] = 1;
            values[valuesById[2] = "PAY_DAY"] = 2;
            values[valuesById[3] = "PASS_BY_PAY_DAY"] = 3;
            return values;
        })();

        /**
         * PaymentType enum.
         * @name pb.common.PaymentType
         * @enum {string}
         * @property {number} PAYMENT_TYPE_PLACEHOLDER=0 PAYMENT_TYPE_PLACEHOLDER value
         * @property {number} PAYMENT_TYPE_CASH=1 PAYMENT_TYPE_CASH value
         * @property {number} PAYMENT_TYPE_LOAN=2 PAYMENT_TYPE_LOAN value
         * @property {number} PAYMENT_TYPE_CANNOT_PAY=3 PAYMENT_TYPE_CANNOT_PAY value
         */
        common.PaymentType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "PAYMENT_TYPE_PLACEHOLDER"] = 0;
            values[valuesById[1] = "PAYMENT_TYPE_CASH"] = 1;
            values[valuesById[2] = "PAYMENT_TYPE_LOAN"] = 2;
            values[valuesById[3] = "PAYMENT_TYPE_CANNOT_PAY"] = 3;
            return values;
        })();

        /**
         * OnlineState enum.
         * @name pb.common.OnlineState
         * @enum {string}
         * @property {number} OnlineState_unkown=0 OnlineState_unkown value
         * @property {number} online=1 online value
         * @property {number} afk=2 afk value
         * @property {number} brb=3 brb value
         * @property {number} quit=4 quit value
         */
        common.OnlineState = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "OnlineState_unkown"] = 0;
            values[valuesById[1] = "online"] = 1;
            values[valuesById[2] = "afk"] = 2;
            values[valuesById[3] = "brb"] = 3;
            values[valuesById[4] = "quit"] = 4;
            return values;
        })();

        /**
         * MatchType enum.
         * @name pb.common.MatchType
         * @enum {string}
         * @property {number} UNKNOWN=0 UNKNOWN value
         * @property {number} STANDARD=1 STANDARD value
         * @property {number} RANK=2 RANK value
         * @property {number} TRAINING=3 TRAINING value
         */
        common.MatchType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "UNKNOWN"] = 0;
            values[valuesById[1] = "STANDARD"] = 1;
            values[valuesById[2] = "RANK"] = 2;
            values[valuesById[3] = "TRAINING"] = 3;
            return values;
        })();

        common.AssetBaseReq = (function() {

            /**
             * Properties of an AssetBaseReq.
             * @memberof pb.common
             * @interface IAssetBaseReq
             * @property {Long|null} [userId] AssetBaseReq userId
             */

            /**
             * Constructs a new AssetBaseReq.
             * @memberof pb.common
             * @classdesc Represents an AssetBaseReq.
             * @implements IAssetBaseReq
             * @constructor
             * @param {pb.common.IAssetBaseReq=} [properties] Properties to set
             */
            function AssetBaseReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AssetBaseReq userId.
             * @member {Long} userId
             * @memberof pb.common.AssetBaseReq
             * @instance
             */
            AssetBaseReq.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new AssetBaseReq instance using the specified properties.
             * @function create
             * @memberof pb.common.AssetBaseReq
             * @static
             * @param {pb.common.IAssetBaseReq=} [properties] Properties to set
             * @returns {pb.common.AssetBaseReq} AssetBaseReq instance
             */
            AssetBaseReq.create = function create(properties) {
                return new AssetBaseReq(properties);
            };

            /**
             * Encodes the specified AssetBaseReq message. Does not implicitly {@link pb.common.AssetBaseReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.AssetBaseReq
             * @static
             * @param {pb.common.IAssetBaseReq} message AssetBaseReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AssetBaseReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userId);
                return writer;
            };

            /**
             * Encodes the specified AssetBaseReq message, length delimited. Does not implicitly {@link pb.common.AssetBaseReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.AssetBaseReq
             * @static
             * @param {pb.common.IAssetBaseReq} message AssetBaseReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AssetBaseReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AssetBaseReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.AssetBaseReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.AssetBaseReq} AssetBaseReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AssetBaseReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.AssetBaseReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.userId = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AssetBaseReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.AssetBaseReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.AssetBaseReq} AssetBaseReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AssetBaseReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AssetBaseReq message.
             * @function verify
             * @memberof pb.common.AssetBaseReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AssetBaseReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                return null;
            };

            /**
             * Creates an AssetBaseReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.AssetBaseReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.AssetBaseReq} AssetBaseReq
             */
            AssetBaseReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.AssetBaseReq)
                    return object;
                var message = new $root.pb.common.AssetBaseReq();
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from an AssetBaseReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.AssetBaseReq
             * @static
             * @param {pb.common.AssetBaseReq} message AssetBaseReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AssetBaseReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                return object;
            };

            /**
             * Converts this AssetBaseReq to JSON.
             * @function toJSON
             * @memberof pb.common.AssetBaseReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AssetBaseReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return AssetBaseReq;
        })();

        common.BaseRsp = (function() {

            /**
             * Properties of a BaseRsp.
             * @memberof pb.common
             * @interface IBaseRsp
             * @property {number|null} [code] BaseRsp code
             * @property {string|null} [msg] BaseRsp msg
             */

            /**
             * Constructs a new BaseRsp.
             * @memberof pb.common
             * @classdesc Represents a BaseRsp.
             * @implements IBaseRsp
             * @constructor
             * @param {pb.common.IBaseRsp=} [properties] Properties to set
             */
            function BaseRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BaseRsp code.
             * @member {number} code
             * @memberof pb.common.BaseRsp
             * @instance
             */
            BaseRsp.prototype.code = 0;

            /**
             * BaseRsp msg.
             * @member {string} msg
             * @memberof pb.common.BaseRsp
             * @instance
             */
            BaseRsp.prototype.msg = "";

            /**
             * Creates a new BaseRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.BaseRsp
             * @static
             * @param {pb.common.IBaseRsp=} [properties] Properties to set
             * @returns {pb.common.BaseRsp} BaseRsp instance
             */
            BaseRsp.create = function create(properties) {
                return new BaseRsp(properties);
            };

            /**
             * Encodes the specified BaseRsp message. Does not implicitly {@link pb.common.BaseRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.BaseRsp
             * @static
             * @param {pb.common.IBaseRsp} message BaseRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BaseRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                if (message.msg != null && message.hasOwnProperty("msg"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.msg);
                return writer;
            };

            /**
             * Encodes the specified BaseRsp message, length delimited. Does not implicitly {@link pb.common.BaseRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.BaseRsp
             * @static
             * @param {pb.common.IBaseRsp} message BaseRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BaseRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BaseRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.BaseRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.BaseRsp} BaseRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BaseRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.BaseRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.code = reader.int32();
                        break;
                    case 2:
                        message.msg = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BaseRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.BaseRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.BaseRsp} BaseRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BaseRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BaseRsp message.
             * @function verify
             * @memberof pb.common.BaseRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BaseRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                if (message.msg != null && message.hasOwnProperty("msg"))
                    if (!$util.isString(message.msg))
                        return "msg: string expected";
                return null;
            };

            /**
             * Creates a BaseRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.BaseRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.BaseRsp} BaseRsp
             */
            BaseRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.BaseRsp)
                    return object;
                var message = new $root.pb.common.BaseRsp();
                if (object.code != null)
                    message.code = object.code | 0;
                if (object.msg != null)
                    message.msg = String(object.msg);
                return message;
            };

            /**
             * Creates a plain object from a BaseRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.BaseRsp
             * @static
             * @param {pb.common.BaseRsp} message BaseRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BaseRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.code = 0;
                    object.msg = "";
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.msg != null && message.hasOwnProperty("msg"))
                    object.msg = message.msg;
                return object;
            };

            /**
             * Converts this BaseRsp to JSON.
             * @function toJSON
             * @memberof pb.common.BaseRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BaseRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BaseRsp;
        })();

        common.CommonRsp = (function() {

            /**
             * Properties of a CommonRsp.
             * @memberof pb.common
             * @interface ICommonRsp
             * @property {pb.common.IBaseRsp|null} [rsp] CommonRsp rsp
             */

            /**
             * Constructs a new CommonRsp.
             * @memberof pb.common
             * @classdesc Represents a CommonRsp.
             * @implements ICommonRsp
             * @constructor
             * @param {pb.common.ICommonRsp=} [properties] Properties to set
             */
            function CommonRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CommonRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.CommonRsp
             * @instance
             */
            CommonRsp.prototype.rsp = null;

            /**
             * Creates a new CommonRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.CommonRsp
             * @static
             * @param {pb.common.ICommonRsp=} [properties] Properties to set
             * @returns {pb.common.CommonRsp} CommonRsp instance
             */
            CommonRsp.create = function create(properties) {
                return new CommonRsp(properties);
            };

            /**
             * Encodes the specified CommonRsp message. Does not implicitly {@link pb.common.CommonRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.CommonRsp
             * @static
             * @param {pb.common.ICommonRsp} message CommonRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CommonRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified CommonRsp message, length delimited. Does not implicitly {@link pb.common.CommonRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.CommonRsp
             * @static
             * @param {pb.common.ICommonRsp} message CommonRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CommonRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CommonRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.CommonRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.CommonRsp} CommonRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CommonRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.CommonRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CommonRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.CommonRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.CommonRsp} CommonRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CommonRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CommonRsp message.
             * @function verify
             * @memberof pb.common.CommonRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CommonRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                return null;
            };

            /**
             * Creates a CommonRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.CommonRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.CommonRsp} CommonRsp
             */
            CommonRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.CommonRsp)
                    return object;
                var message = new $root.pb.common.CommonRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.CommonRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from a CommonRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.CommonRsp
             * @static
             * @param {pb.common.CommonRsp} message CommonRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CommonRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                return object;
            };

            /**
             * Converts this CommonRsp to JSON.
             * @function toJSON
             * @memberof pb.common.CommonRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CommonRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CommonRsp;
        })();

        common.GameBaseMsg = (function() {

            /**
             * Properties of a GameBaseMsg.
             * @memberof pb.common
             * @interface IGameBaseMsg
             * @property {Long|null} [userId] GameBaseMsg userId
             */

            /**
             * Constructs a new GameBaseMsg.
             * @memberof pb.common
             * @classdesc Represents a GameBaseMsg.
             * @implements IGameBaseMsg
             * @constructor
             * @param {pb.common.IGameBaseMsg=} [properties] Properties to set
             */
            function GameBaseMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GameBaseMsg userId.
             * @member {Long} userId
             * @memberof pb.common.GameBaseMsg
             * @instance
             */
            GameBaseMsg.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new GameBaseMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.GameBaseMsg
             * @static
             * @param {pb.common.IGameBaseMsg=} [properties] Properties to set
             * @returns {pb.common.GameBaseMsg} GameBaseMsg instance
             */
            GameBaseMsg.create = function create(properties) {
                return new GameBaseMsg(properties);
            };

            /**
             * Encodes the specified GameBaseMsg message. Does not implicitly {@link pb.common.GameBaseMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GameBaseMsg
             * @static
             * @param {pb.common.IGameBaseMsg} message GameBaseMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameBaseMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userId);
                return writer;
            };

            /**
             * Encodes the specified GameBaseMsg message, length delimited. Does not implicitly {@link pb.common.GameBaseMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GameBaseMsg
             * @static
             * @param {pb.common.IGameBaseMsg} message GameBaseMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameBaseMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GameBaseMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GameBaseMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GameBaseMsg} GameBaseMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameBaseMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GameBaseMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.userId = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GameBaseMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GameBaseMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GameBaseMsg} GameBaseMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameBaseMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GameBaseMsg message.
             * @function verify
             * @memberof pb.common.GameBaseMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GameBaseMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                return null;
            };

            /**
             * Creates a GameBaseMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GameBaseMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GameBaseMsg} GameBaseMsg
             */
            GameBaseMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GameBaseMsg)
                    return object;
                var message = new $root.pb.common.GameBaseMsg();
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a GameBaseMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GameBaseMsg
             * @static
             * @param {pb.common.GameBaseMsg} message GameBaseMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GameBaseMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                return object;
            };

            /**
             * Converts this GameBaseMsg to JSON.
             * @function toJSON
             * @memberof pb.common.GameBaseMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GameBaseMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GameBaseMsg;
        })();

        common.PlayerInfo = (function() {

            /**
             * Properties of a PlayerInfo.
             * @memberof pb.common
             * @interface IPlayerInfo
             * @property {Long|null} [userId] PlayerInfo userId
             * @property {string|null} [avatar] PlayerInfo avatar
             * @property {string|null} [nickname] PlayerInfo nickname
             * @property {boolean|null} [isBot] PlayerInfo isBot
             * @property {string|null} [birthday] PlayerInfo birthday
             * @property {Long|null} [assetScore] PlayerInfo assetScore
             * @property {string|null} [assetLevel] PlayerInfo assetLevel
             */

            /**
             * Constructs a new PlayerInfo.
             * @memberof pb.common
             * @classdesc Represents a PlayerInfo.
             * @implements IPlayerInfo
             * @constructor
             * @param {pb.common.IPlayerInfo=} [properties] Properties to set
             */
            function PlayerInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PlayerInfo userId.
             * @member {Long} userId
             * @memberof pb.common.PlayerInfo
             * @instance
             */
            PlayerInfo.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * PlayerInfo avatar.
             * @member {string} avatar
             * @memberof pb.common.PlayerInfo
             * @instance
             */
            PlayerInfo.prototype.avatar = "";

            /**
             * PlayerInfo nickname.
             * @member {string} nickname
             * @memberof pb.common.PlayerInfo
             * @instance
             */
            PlayerInfo.prototype.nickname = "";

            /**
             * PlayerInfo isBot.
             * @member {boolean} isBot
             * @memberof pb.common.PlayerInfo
             * @instance
             */
            PlayerInfo.prototype.isBot = false;

            /**
             * PlayerInfo birthday.
             * @member {string} birthday
             * @memberof pb.common.PlayerInfo
             * @instance
             */
            PlayerInfo.prototype.birthday = "";

            /**
             * PlayerInfo assetScore.
             * @member {Long} assetScore
             * @memberof pb.common.PlayerInfo
             * @instance
             */
            PlayerInfo.prototype.assetScore = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * PlayerInfo assetLevel.
             * @member {string} assetLevel
             * @memberof pb.common.PlayerInfo
             * @instance
             */
            PlayerInfo.prototype.assetLevel = "";

            /**
             * Creates a new PlayerInfo instance using the specified properties.
             * @function create
             * @memberof pb.common.PlayerInfo
             * @static
             * @param {pb.common.IPlayerInfo=} [properties] Properties to set
             * @returns {pb.common.PlayerInfo} PlayerInfo instance
             */
            PlayerInfo.create = function create(properties) {
                return new PlayerInfo(properties);
            };

            /**
             * Encodes the specified PlayerInfo message. Does not implicitly {@link pb.common.PlayerInfo.verify|verify} messages.
             * @function encode
             * @memberof pb.common.PlayerInfo
             * @static
             * @param {pb.common.IPlayerInfo} message PlayerInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userId);
                if (message.avatar != null && message.hasOwnProperty("avatar"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.avatar);
                if (message.nickname != null && message.hasOwnProperty("nickname"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.nickname);
                if (message.isBot != null && message.hasOwnProperty("isBot"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.isBot);
                if (message.birthday != null && message.hasOwnProperty("birthday"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.birthday);
                if (message.assetScore != null && message.hasOwnProperty("assetScore"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int64(message.assetScore);
                if (message.assetLevel != null && message.hasOwnProperty("assetLevel"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.assetLevel);
                return writer;
            };

            /**
             * Encodes the specified PlayerInfo message, length delimited. Does not implicitly {@link pb.common.PlayerInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.PlayerInfo
             * @static
             * @param {pb.common.IPlayerInfo} message PlayerInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PlayerInfo message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.PlayerInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.PlayerInfo} PlayerInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.PlayerInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.userId = reader.int64();
                        break;
                    case 3:
                        message.avatar = reader.string();
                        break;
                    case 4:
                        message.nickname = reader.string();
                        break;
                    case 5:
                        message.isBot = reader.bool();
                        break;
                    case 6:
                        message.birthday = reader.string();
                        break;
                    case 7:
                        message.assetScore = reader.int64();
                        break;
                    case 8:
                        message.assetLevel = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PlayerInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.PlayerInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.PlayerInfo} PlayerInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PlayerInfo message.
             * @function verify
             * @memberof pb.common.PlayerInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PlayerInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                if (message.avatar != null && message.hasOwnProperty("avatar"))
                    if (!$util.isString(message.avatar))
                        return "avatar: string expected";
                if (message.nickname != null && message.hasOwnProperty("nickname"))
                    if (!$util.isString(message.nickname))
                        return "nickname: string expected";
                if (message.isBot != null && message.hasOwnProperty("isBot"))
                    if (typeof message.isBot !== "boolean")
                        return "isBot: boolean expected";
                if (message.birthday != null && message.hasOwnProperty("birthday"))
                    if (!$util.isString(message.birthday))
                        return "birthday: string expected";
                if (message.assetScore != null && message.hasOwnProperty("assetScore"))
                    if (!$util.isInteger(message.assetScore) && !(message.assetScore && $util.isInteger(message.assetScore.low) && $util.isInteger(message.assetScore.high)))
                        return "assetScore: integer|Long expected";
                if (message.assetLevel != null && message.hasOwnProperty("assetLevel"))
                    if (!$util.isString(message.assetLevel))
                        return "assetLevel: string expected";
                return null;
            };

            /**
             * Creates a PlayerInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.PlayerInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.PlayerInfo} PlayerInfo
             */
            PlayerInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.PlayerInfo)
                    return object;
                var message = new $root.pb.common.PlayerInfo();
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                if (object.avatar != null)
                    message.avatar = String(object.avatar);
                if (object.nickname != null)
                    message.nickname = String(object.nickname);
                if (object.isBot != null)
                    message.isBot = Boolean(object.isBot);
                if (object.birthday != null)
                    message.birthday = String(object.birthday);
                if (object.assetScore != null)
                    if ($util.Long)
                        (message.assetScore = $util.Long.fromValue(object.assetScore)).unsigned = false;
                    else if (typeof object.assetScore === "string")
                        message.assetScore = parseInt(object.assetScore, 10);
                    else if (typeof object.assetScore === "number")
                        message.assetScore = object.assetScore;
                    else if (typeof object.assetScore === "object")
                        message.assetScore = new $util.LongBits(object.assetScore.low >>> 0, object.assetScore.high >>> 0).toNumber();
                if (object.assetLevel != null)
                    message.assetLevel = String(object.assetLevel);
                return message;
            };

            /**
             * Creates a plain object from a PlayerInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.PlayerInfo
             * @static
             * @param {pb.common.PlayerInfo} message PlayerInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PlayerInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                    object.avatar = "";
                    object.nickname = "";
                    object.isBot = false;
                    object.birthday = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.assetScore = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.assetScore = options.longs === String ? "0" : 0;
                    object.assetLevel = "";
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                if (message.avatar != null && message.hasOwnProperty("avatar"))
                    object.avatar = message.avatar;
                if (message.nickname != null && message.hasOwnProperty("nickname"))
                    object.nickname = message.nickname;
                if (message.isBot != null && message.hasOwnProperty("isBot"))
                    object.isBot = message.isBot;
                if (message.birthday != null && message.hasOwnProperty("birthday"))
                    object.birthday = message.birthday;
                if (message.assetScore != null && message.hasOwnProperty("assetScore"))
                    if (typeof message.assetScore === "number")
                        object.assetScore = options.longs === String ? String(message.assetScore) : message.assetScore;
                    else
                        object.assetScore = options.longs === String ? $util.Long.prototype.toString.call(message.assetScore) : options.longs === Number ? new $util.LongBits(message.assetScore.low >>> 0, message.assetScore.high >>> 0).toNumber() : message.assetScore;
                if (message.assetLevel != null && message.hasOwnProperty("assetLevel"))
                    object.assetLevel = message.assetLevel;
                return object;
            };

            /**
             * Converts this PlayerInfo to JSON.
             * @function toJSON
             * @memberof pb.common.PlayerInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PlayerInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PlayerInfo;
        })();

        common.RoomInfo = (function() {

            /**
             * Properties of a RoomInfo.
             * @memberof pb.common
             * @interface IRoomInfo
             * @property {string|null} [roomId] RoomInfo roomId
             * @property {Long|null} [ownerId] RoomInfo ownerId
             * @property {Array.<pb.common.IPlayerInfo>|null} [members] RoomInfo members
             * @property {number|null} [size] RoomInfo size
             * @property {pb.common.MatchType|null} [matchType] RoomInfo matchType
             * @property {number|null} [roomNum] RoomInfo roomNum
             * @property {pb.common.IRoomOption|null} [opt] RoomInfo opt
             * @property {boolean|null} [OptChanged] RoomInfo OptChanged
             */

            /**
             * Constructs a new RoomInfo.
             * @memberof pb.common
             * @classdesc Represents a RoomInfo.
             * @implements IRoomInfo
             * @constructor
             * @param {pb.common.IRoomInfo=} [properties] Properties to set
             */
            function RoomInfo(properties) {
                this.members = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RoomInfo roomId.
             * @member {string} roomId
             * @memberof pb.common.RoomInfo
             * @instance
             */
            RoomInfo.prototype.roomId = "";

            /**
             * RoomInfo ownerId.
             * @member {Long} ownerId
             * @memberof pb.common.RoomInfo
             * @instance
             */
            RoomInfo.prototype.ownerId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * RoomInfo members.
             * @member {Array.<pb.common.IPlayerInfo>} members
             * @memberof pb.common.RoomInfo
             * @instance
             */
            RoomInfo.prototype.members = $util.emptyArray;

            /**
             * RoomInfo size.
             * @member {number} size
             * @memberof pb.common.RoomInfo
             * @instance
             */
            RoomInfo.prototype.size = 0;

            /**
             * RoomInfo matchType.
             * @member {pb.common.MatchType} matchType
             * @memberof pb.common.RoomInfo
             * @instance
             */
            RoomInfo.prototype.matchType = 0;

            /**
             * RoomInfo roomNum.
             * @member {number} roomNum
             * @memberof pb.common.RoomInfo
             * @instance
             */
            RoomInfo.prototype.roomNum = 0;

            /**
             * RoomInfo opt.
             * @member {pb.common.IRoomOption|null|undefined} opt
             * @memberof pb.common.RoomInfo
             * @instance
             */
            RoomInfo.prototype.opt = null;

            /**
             * RoomInfo OptChanged.
             * @member {boolean} OptChanged
             * @memberof pb.common.RoomInfo
             * @instance
             */
            RoomInfo.prototype.OptChanged = false;

            /**
             * Creates a new RoomInfo instance using the specified properties.
             * @function create
             * @memberof pb.common.RoomInfo
             * @static
             * @param {pb.common.IRoomInfo=} [properties] Properties to set
             * @returns {pb.common.RoomInfo} RoomInfo instance
             */
            RoomInfo.create = function create(properties) {
                return new RoomInfo(properties);
            };

            /**
             * Encodes the specified RoomInfo message. Does not implicitly {@link pb.common.RoomInfo.verify|verify} messages.
             * @function encode
             * @memberof pb.common.RoomInfo
             * @static
             * @param {pb.common.IRoomInfo} message RoomInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoomInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
                if (message.ownerId != null && message.hasOwnProperty("ownerId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.ownerId);
                if (message.members != null && message.members.length)
                    for (var i = 0; i < message.members.length; ++i)
                        $root.pb.common.PlayerInfo.encode(message.members[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.size != null && message.hasOwnProperty("size"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.size);
                if (message.matchType != null && message.hasOwnProperty("matchType"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.matchType);
                if (message.roomNum != null && message.hasOwnProperty("roomNum"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.roomNum);
                if (message.opt != null && message.hasOwnProperty("opt"))
                    $root.pb.common.RoomOption.encode(message.opt, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.OptChanged != null && message.hasOwnProperty("OptChanged"))
                    writer.uint32(/* id 8, wireType 0 =*/64).bool(message.OptChanged);
                return writer;
            };

            /**
             * Encodes the specified RoomInfo message, length delimited. Does not implicitly {@link pb.common.RoomInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.RoomInfo
             * @static
             * @param {pb.common.IRoomInfo} message RoomInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoomInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RoomInfo message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.RoomInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.RoomInfo} RoomInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoomInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.RoomInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.roomId = reader.string();
                        break;
                    case 2:
                        message.ownerId = reader.int64();
                        break;
                    case 3:
                        if (!(message.members && message.members.length))
                            message.members = [];
                        message.members.push($root.pb.common.PlayerInfo.decode(reader, reader.uint32()));
                        break;
                    case 4:
                        message.size = reader.uint32();
                        break;
                    case 5:
                        message.matchType = reader.int32();
                        break;
                    case 6:
                        message.roomNum = reader.int32();
                        break;
                    case 7:
                        message.opt = $root.pb.common.RoomOption.decode(reader, reader.uint32());
                        break;
                    case 8:
                        message.OptChanged = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RoomInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.RoomInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.RoomInfo} RoomInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoomInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RoomInfo message.
             * @function verify
             * @memberof pb.common.RoomInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RoomInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    if (!$util.isString(message.roomId))
                        return "roomId: string expected";
                if (message.ownerId != null && message.hasOwnProperty("ownerId"))
                    if (!$util.isInteger(message.ownerId) && !(message.ownerId && $util.isInteger(message.ownerId.low) && $util.isInteger(message.ownerId.high)))
                        return "ownerId: integer|Long expected";
                if (message.members != null && message.hasOwnProperty("members")) {
                    if (!Array.isArray(message.members))
                        return "members: array expected";
                    for (var i = 0; i < message.members.length; ++i) {
                        var error = $root.pb.common.PlayerInfo.verify(message.members[i]);
                        if (error)
                            return "members." + error;
                    }
                }
                if (message.size != null && message.hasOwnProperty("size"))
                    if (!$util.isInteger(message.size))
                        return "size: integer expected";
                if (message.matchType != null && message.hasOwnProperty("matchType"))
                    switch (message.matchType) {
                    default:
                        return "matchType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.roomNum != null && message.hasOwnProperty("roomNum"))
                    if (!$util.isInteger(message.roomNum))
                        return "roomNum: integer expected";
                if (message.opt != null && message.hasOwnProperty("opt")) {
                    var error = $root.pb.common.RoomOption.verify(message.opt);
                    if (error)
                        return "opt." + error;
                }
                if (message.OptChanged != null && message.hasOwnProperty("OptChanged"))
                    if (typeof message.OptChanged !== "boolean")
                        return "OptChanged: boolean expected";
                return null;
            };

            /**
             * Creates a RoomInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.RoomInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.RoomInfo} RoomInfo
             */
            RoomInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.RoomInfo)
                    return object;
                var message = new $root.pb.common.RoomInfo();
                if (object.roomId != null)
                    message.roomId = String(object.roomId);
                if (object.ownerId != null)
                    if ($util.Long)
                        (message.ownerId = $util.Long.fromValue(object.ownerId)).unsigned = false;
                    else if (typeof object.ownerId === "string")
                        message.ownerId = parseInt(object.ownerId, 10);
                    else if (typeof object.ownerId === "number")
                        message.ownerId = object.ownerId;
                    else if (typeof object.ownerId === "object")
                        message.ownerId = new $util.LongBits(object.ownerId.low >>> 0, object.ownerId.high >>> 0).toNumber();
                if (object.members) {
                    if (!Array.isArray(object.members))
                        throw TypeError(".pb.common.RoomInfo.members: array expected");
                    message.members = [];
                    for (var i = 0; i < object.members.length; ++i) {
                        if (typeof object.members[i] !== "object")
                            throw TypeError(".pb.common.RoomInfo.members: object expected");
                        message.members[i] = $root.pb.common.PlayerInfo.fromObject(object.members[i]);
                    }
                }
                if (object.size != null)
                    message.size = object.size >>> 0;
                switch (object.matchType) {
                case "UNKNOWN":
                case 0:
                    message.matchType = 0;
                    break;
                case "STANDARD":
                case 1:
                    message.matchType = 1;
                    break;
                case "RANK":
                case 2:
                    message.matchType = 2;
                    break;
                case "TRAINING":
                case 3:
                    message.matchType = 3;
                    break;
                }
                if (object.roomNum != null)
                    message.roomNum = object.roomNum | 0;
                if (object.opt != null) {
                    if (typeof object.opt !== "object")
                        throw TypeError(".pb.common.RoomInfo.opt: object expected");
                    message.opt = $root.pb.common.RoomOption.fromObject(object.opt);
                }
                if (object.OptChanged != null)
                    message.OptChanged = Boolean(object.OptChanged);
                return message;
            };

            /**
             * Creates a plain object from a RoomInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.RoomInfo
             * @static
             * @param {pb.common.RoomInfo} message RoomInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RoomInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.members = [];
                if (options.defaults) {
                    object.roomId = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.ownerId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.ownerId = options.longs === String ? "0" : 0;
                    object.size = 0;
                    object.matchType = options.enums === String ? "UNKNOWN" : 0;
                    object.roomNum = 0;
                    object.opt = null;
                    object.OptChanged = false;
                }
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    object.roomId = message.roomId;
                if (message.ownerId != null && message.hasOwnProperty("ownerId"))
                    if (typeof message.ownerId === "number")
                        object.ownerId = options.longs === String ? String(message.ownerId) : message.ownerId;
                    else
                        object.ownerId = options.longs === String ? $util.Long.prototype.toString.call(message.ownerId) : options.longs === Number ? new $util.LongBits(message.ownerId.low >>> 0, message.ownerId.high >>> 0).toNumber() : message.ownerId;
                if (message.members && message.members.length) {
                    object.members = [];
                    for (var j = 0; j < message.members.length; ++j)
                        object.members[j] = $root.pb.common.PlayerInfo.toObject(message.members[j], options);
                }
                if (message.size != null && message.hasOwnProperty("size"))
                    object.size = message.size;
                if (message.matchType != null && message.hasOwnProperty("matchType"))
                    object.matchType = options.enums === String ? $root.pb.common.MatchType[message.matchType] : message.matchType;
                if (message.roomNum != null && message.hasOwnProperty("roomNum"))
                    object.roomNum = message.roomNum;
                if (message.opt != null && message.hasOwnProperty("opt"))
                    object.opt = $root.pb.common.RoomOption.toObject(message.opt, options);
                if (message.OptChanged != null && message.hasOwnProperty("OptChanged"))
                    object.OptChanged = message.OptChanged;
                return object;
            };

            /**
             * Converts this RoomInfo to JSON.
             * @function toJSON
             * @memberof pb.common.RoomInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RoomInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RoomInfo;
        })();

        common.RoomOption = (function() {

            /**
             * Properties of a RoomOption.
             * @memberof pb.common
             * @interface IRoomOption
             * @property {number|null} [roomSize] RoomOption roomSize
             * @property {number|null} [playDuration] RoomOption playDuration
             * @property {Long|null} [mapId] RoomOption mapId
             */

            /**
             * Constructs a new RoomOption.
             * @memberof pb.common
             * @classdesc Represents a RoomOption.
             * @implements IRoomOption
             * @constructor
             * @param {pb.common.IRoomOption=} [properties] Properties to set
             */
            function RoomOption(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RoomOption roomSize.
             * @member {number} roomSize
             * @memberof pb.common.RoomOption
             * @instance
             */
            RoomOption.prototype.roomSize = 0;

            /**
             * RoomOption playDuration.
             * @member {number} playDuration
             * @memberof pb.common.RoomOption
             * @instance
             */
            RoomOption.prototype.playDuration = 0;

            /**
             * RoomOption mapId.
             * @member {Long} mapId
             * @memberof pb.common.RoomOption
             * @instance
             */
            RoomOption.prototype.mapId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new RoomOption instance using the specified properties.
             * @function create
             * @memberof pb.common.RoomOption
             * @static
             * @param {pb.common.IRoomOption=} [properties] Properties to set
             * @returns {pb.common.RoomOption} RoomOption instance
             */
            RoomOption.create = function create(properties) {
                return new RoomOption(properties);
            };

            /**
             * Encodes the specified RoomOption message. Does not implicitly {@link pb.common.RoomOption.verify|verify} messages.
             * @function encode
             * @memberof pb.common.RoomOption
             * @static
             * @param {pb.common.IRoomOption} message RoomOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoomOption.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.roomSize != null && message.hasOwnProperty("roomSize"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.roomSize);
                if (message.playDuration != null && message.hasOwnProperty("playDuration"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.playDuration);
                if (message.mapId != null && message.hasOwnProperty("mapId"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.mapId);
                return writer;
            };

            /**
             * Encodes the specified RoomOption message, length delimited. Does not implicitly {@link pb.common.RoomOption.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.RoomOption
             * @static
             * @param {pb.common.IRoomOption} message RoomOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoomOption.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RoomOption message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.RoomOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.RoomOption} RoomOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoomOption.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.RoomOption();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        message.roomSize = reader.int32();
                        break;
                    case 3:
                        message.playDuration = reader.int32();
                        break;
                    case 4:
                        message.mapId = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RoomOption message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.RoomOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.RoomOption} RoomOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoomOption.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RoomOption message.
             * @function verify
             * @memberof pb.common.RoomOption
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RoomOption.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.roomSize != null && message.hasOwnProperty("roomSize"))
                    if (!$util.isInteger(message.roomSize))
                        return "roomSize: integer expected";
                if (message.playDuration != null && message.hasOwnProperty("playDuration"))
                    if (!$util.isInteger(message.playDuration))
                        return "playDuration: integer expected";
                if (message.mapId != null && message.hasOwnProperty("mapId"))
                    if (!$util.isInteger(message.mapId) && !(message.mapId && $util.isInteger(message.mapId.low) && $util.isInteger(message.mapId.high)))
                        return "mapId: integer|Long expected";
                return null;
            };

            /**
             * Creates a RoomOption message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.RoomOption
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.RoomOption} RoomOption
             */
            RoomOption.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.RoomOption)
                    return object;
                var message = new $root.pb.common.RoomOption();
                if (object.roomSize != null)
                    message.roomSize = object.roomSize | 0;
                if (object.playDuration != null)
                    message.playDuration = object.playDuration | 0;
                if (object.mapId != null)
                    if ($util.Long)
                        (message.mapId = $util.Long.fromValue(object.mapId)).unsigned = false;
                    else if (typeof object.mapId === "string")
                        message.mapId = parseInt(object.mapId, 10);
                    else if (typeof object.mapId === "number")
                        message.mapId = object.mapId;
                    else if (typeof object.mapId === "object")
                        message.mapId = new $util.LongBits(object.mapId.low >>> 0, object.mapId.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a RoomOption message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.RoomOption
             * @static
             * @param {pb.common.RoomOption} message RoomOption
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RoomOption.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.roomSize = 0;
                    object.playDuration = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.mapId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.mapId = options.longs === String ? "0" : 0;
                }
                if (message.roomSize != null && message.hasOwnProperty("roomSize"))
                    object.roomSize = message.roomSize;
                if (message.playDuration != null && message.hasOwnProperty("playDuration"))
                    object.playDuration = message.playDuration;
                if (message.mapId != null && message.hasOwnProperty("mapId"))
                    if (typeof message.mapId === "number")
                        object.mapId = options.longs === String ? String(message.mapId) : message.mapId;
                    else
                        object.mapId = options.longs === String ? $util.Long.prototype.toString.call(message.mapId) : options.longs === Number ? new $util.LongBits(message.mapId.low >>> 0, message.mapId.high >>> 0).toNumber() : message.mapId;
                return object;
            };

            /**
             * Converts this RoomOption to JSON.
             * @function toJSON
             * @memberof pb.common.RoomOption
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RoomOption.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RoomOption;
        })();

        /**
         * PlayerState enum.
         * @name pb.common.PlayerState
         * @enum {string}
         * @property {number} PLAYER_STATE_BEGIN=0 PLAYER_STATE_BEGIN value
         * @property {number} PLAYER_STATE_IN_ROOM=1 PLAYER_STATE_IN_ROOM value
         * @property {number} PLAYER_STATE_MATCHING=2 PLAYER_STATE_MATCHING value
         * @property {number} PLAYER_STATE_MATCHED=3 PLAYER_STATE_MATCHED value
         * @property {number} PLAYER_STATE_READY=4 PLAYER_STATE_READY value
         * @property {number} PLAYER_STATE_PLAYING=5 PLAYER_STATE_PLAYING value
         */
        common.PlayerState = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "PLAYER_STATE_BEGIN"] = 0;
            values[valuesById[1] = "PLAYER_STATE_IN_ROOM"] = 1;
            values[valuesById[2] = "PLAYER_STATE_MATCHING"] = 2;
            values[valuesById[3] = "PLAYER_STATE_MATCHED"] = 3;
            values[valuesById[4] = "PLAYER_STATE_READY"] = 4;
            values[valuesById[5] = "PLAYER_STATE_PLAYING"] = 5;
            return values;
        })();

        common.Level = (function() {

            /**
             * Properties of a Level.
             * @memberof pb.common
             * @interface ILevel
             * @property {Long|null} [value] Level value
             * @property {Long|null} [lowExp] Level lowExp
             * @property {Long|null} [highExp] Level highExp
             */

            /**
             * Constructs a new Level.
             * @memberof pb.common
             * @classdesc Represents a Level.
             * @implements ILevel
             * @constructor
             * @param {pb.common.ILevel=} [properties] Properties to set
             */
            function Level(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Level value.
             * @member {Long} value
             * @memberof pb.common.Level
             * @instance
             */
            Level.prototype.value = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Level lowExp.
             * @member {Long} lowExp
             * @memberof pb.common.Level
             * @instance
             */
            Level.prototype.lowExp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Level highExp.
             * @member {Long} highExp
             * @memberof pb.common.Level
             * @instance
             */
            Level.prototype.highExp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new Level instance using the specified properties.
             * @function create
             * @memberof pb.common.Level
             * @static
             * @param {pb.common.ILevel=} [properties] Properties to set
             * @returns {pb.common.Level} Level instance
             */
            Level.create = function create(properties) {
                return new Level(properties);
            };

            /**
             * Encodes the specified Level message. Does not implicitly {@link pb.common.Level.verify|verify} messages.
             * @function encode
             * @memberof pb.common.Level
             * @static
             * @param {pb.common.ILevel} message Level message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Level.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.value != null && message.hasOwnProperty("value"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.value);
                if (message.lowExp != null && message.hasOwnProperty("lowExp"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.lowExp);
                if (message.highExp != null && message.hasOwnProperty("highExp"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.highExp);
                return writer;
            };

            /**
             * Encodes the specified Level message, length delimited. Does not implicitly {@link pb.common.Level.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.Level
             * @static
             * @param {pb.common.ILevel} message Level message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Level.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Level message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.Level
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.Level} Level
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Level.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.Level();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.value = reader.int64();
                        break;
                    case 2:
                        message.lowExp = reader.int64();
                        break;
                    case 3:
                        message.highExp = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Level message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.Level
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.Level} Level
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Level.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Level message.
             * @function verify
             * @memberof pb.common.Level
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Level.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!$util.isInteger(message.value) && !(message.value && $util.isInteger(message.value.low) && $util.isInteger(message.value.high)))
                        return "value: integer|Long expected";
                if (message.lowExp != null && message.hasOwnProperty("lowExp"))
                    if (!$util.isInteger(message.lowExp) && !(message.lowExp && $util.isInteger(message.lowExp.low) && $util.isInteger(message.lowExp.high)))
                        return "lowExp: integer|Long expected";
                if (message.highExp != null && message.hasOwnProperty("highExp"))
                    if (!$util.isInteger(message.highExp) && !(message.highExp && $util.isInteger(message.highExp.low) && $util.isInteger(message.highExp.high)))
                        return "highExp: integer|Long expected";
                return null;
            };

            /**
             * Creates a Level message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.Level
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.Level} Level
             */
            Level.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.Level)
                    return object;
                var message = new $root.pb.common.Level();
                if (object.value != null)
                    if ($util.Long)
                        (message.value = $util.Long.fromValue(object.value)).unsigned = false;
                    else if (typeof object.value === "string")
                        message.value = parseInt(object.value, 10);
                    else if (typeof object.value === "number")
                        message.value = object.value;
                    else if (typeof object.value === "object")
                        message.value = new $util.LongBits(object.value.low >>> 0, object.value.high >>> 0).toNumber();
                if (object.lowExp != null)
                    if ($util.Long)
                        (message.lowExp = $util.Long.fromValue(object.lowExp)).unsigned = false;
                    else if (typeof object.lowExp === "string")
                        message.lowExp = parseInt(object.lowExp, 10);
                    else if (typeof object.lowExp === "number")
                        message.lowExp = object.lowExp;
                    else if (typeof object.lowExp === "object")
                        message.lowExp = new $util.LongBits(object.lowExp.low >>> 0, object.lowExp.high >>> 0).toNumber();
                if (object.highExp != null)
                    if ($util.Long)
                        (message.highExp = $util.Long.fromValue(object.highExp)).unsigned = false;
                    else if (typeof object.highExp === "string")
                        message.highExp = parseInt(object.highExp, 10);
                    else if (typeof object.highExp === "number")
                        message.highExp = object.highExp;
                    else if (typeof object.highExp === "object")
                        message.highExp = new $util.LongBits(object.highExp.low >>> 0, object.highExp.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a Level message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.Level
             * @static
             * @param {pb.common.Level} message Level
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Level.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.value = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.lowExp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.lowExp = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.highExp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.highExp = options.longs === String ? "0" : 0;
                }
                if (message.value != null && message.hasOwnProperty("value"))
                    if (typeof message.value === "number")
                        object.value = options.longs === String ? String(message.value) : message.value;
                    else
                        object.value = options.longs === String ? $util.Long.prototype.toString.call(message.value) : options.longs === Number ? new $util.LongBits(message.value.low >>> 0, message.value.high >>> 0).toNumber() : message.value;
                if (message.lowExp != null && message.hasOwnProperty("lowExp"))
                    if (typeof message.lowExp === "number")
                        object.lowExp = options.longs === String ? String(message.lowExp) : message.lowExp;
                    else
                        object.lowExp = options.longs === String ? $util.Long.prototype.toString.call(message.lowExp) : options.longs === Number ? new $util.LongBits(message.lowExp.low >>> 0, message.lowExp.high >>> 0).toNumber() : message.lowExp;
                if (message.highExp != null && message.hasOwnProperty("highExp"))
                    if (typeof message.highExp === "number")
                        object.highExp = options.longs === String ? String(message.highExp) : message.highExp;
                    else
                        object.highExp = options.longs === String ? $util.Long.prototype.toString.call(message.highExp) : options.longs === Number ? new $util.LongBits(message.highExp.low >>> 0, message.highExp.high >>> 0).toNumber() : message.highExp;
                return object;
            };

            /**
             * Converts this Level to JSON.
             * @function toJSON
             * @memberof pb.common.Level
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Level.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Level;
        })();

        common.AssetScoreField = (function() {

            /**
             * Properties of an AssetScoreField.
             * @memberof pb.common
             * @interface IAssetScoreField
             * @property {string|null} [title] AssetScoreField title
             * @property {Long|null} [value] AssetScoreField value
             */

            /**
             * Constructs a new AssetScoreField.
             * @memberof pb.common
             * @classdesc Represents an AssetScoreField.
             * @implements IAssetScoreField
             * @constructor
             * @param {pb.common.IAssetScoreField=} [properties] Properties to set
             */
            function AssetScoreField(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AssetScoreField title.
             * @member {string} title
             * @memberof pb.common.AssetScoreField
             * @instance
             */
            AssetScoreField.prototype.title = "";

            /**
             * AssetScoreField value.
             * @member {Long} value
             * @memberof pb.common.AssetScoreField
             * @instance
             */
            AssetScoreField.prototype.value = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new AssetScoreField instance using the specified properties.
             * @function create
             * @memberof pb.common.AssetScoreField
             * @static
             * @param {pb.common.IAssetScoreField=} [properties] Properties to set
             * @returns {pb.common.AssetScoreField} AssetScoreField instance
             */
            AssetScoreField.create = function create(properties) {
                return new AssetScoreField(properties);
            };

            /**
             * Encodes the specified AssetScoreField message. Does not implicitly {@link pb.common.AssetScoreField.verify|verify} messages.
             * @function encode
             * @memberof pb.common.AssetScoreField
             * @static
             * @param {pb.common.IAssetScoreField} message AssetScoreField message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AssetScoreField.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.title != null && message.hasOwnProperty("title"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                if (message.value != null && message.hasOwnProperty("value"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.value);
                return writer;
            };

            /**
             * Encodes the specified AssetScoreField message, length delimited. Does not implicitly {@link pb.common.AssetScoreField.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.AssetScoreField
             * @static
             * @param {pb.common.IAssetScoreField} message AssetScoreField message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AssetScoreField.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AssetScoreField message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.AssetScoreField
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.AssetScoreField} AssetScoreField
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AssetScoreField.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.AssetScoreField();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.title = reader.string();
                        break;
                    case 2:
                        message.value = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AssetScoreField message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.AssetScoreField
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.AssetScoreField} AssetScoreField
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AssetScoreField.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AssetScoreField message.
             * @function verify
             * @memberof pb.common.AssetScoreField
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AssetScoreField.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.title != null && message.hasOwnProperty("title"))
                    if (!$util.isString(message.title))
                        return "title: string expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!$util.isInteger(message.value) && !(message.value && $util.isInteger(message.value.low) && $util.isInteger(message.value.high)))
                        return "value: integer|Long expected";
                return null;
            };

            /**
             * Creates an AssetScoreField message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.AssetScoreField
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.AssetScoreField} AssetScoreField
             */
            AssetScoreField.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.AssetScoreField)
                    return object;
                var message = new $root.pb.common.AssetScoreField();
                if (object.title != null)
                    message.title = String(object.title);
                if (object.value != null)
                    if ($util.Long)
                        (message.value = $util.Long.fromValue(object.value)).unsigned = false;
                    else if (typeof object.value === "string")
                        message.value = parseInt(object.value, 10);
                    else if (typeof object.value === "number")
                        message.value = object.value;
                    else if (typeof object.value === "object")
                        message.value = new $util.LongBits(object.value.low >>> 0, object.value.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from an AssetScoreField message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.AssetScoreField
             * @static
             * @param {pb.common.AssetScoreField} message AssetScoreField
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AssetScoreField.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.title = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.value = options.longs === String ? "0" : 0;
                }
                if (message.title != null && message.hasOwnProperty("title"))
                    object.title = message.title;
                if (message.value != null && message.hasOwnProperty("value"))
                    if (typeof message.value === "number")
                        object.value = options.longs === String ? String(message.value) : message.value;
                    else
                        object.value = options.longs === String ? $util.Long.prototype.toString.call(message.value) : options.longs === Number ? new $util.LongBits(message.value.low >>> 0, message.value.high >>> 0).toNumber() : message.value;
                return object;
            };

            /**
             * Converts this AssetScoreField to JSON.
             * @function toJSON
             * @memberof pb.common.AssetScoreField
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AssetScoreField.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return AssetScoreField;
        })();

        common.GameBonus = (function() {

            /**
             * Properties of a GameBonus.
             * @memberof pb.common
             * @interface IGameBonus
             * @property {Long|null} [userID] GameBonus userID
             * @property {number|null} [bonusGold] GameBonus bonusGold
             * @property {number|null} [extraGold] GameBonus extraGold
             * @property {number|null} [gold] GameBonus gold
             * @property {number|null} [bonusExp] GameBonus bonusExp
             * @property {number|null} [extraExp] GameBonus extraExp
             * @property {number|null} [exp] GameBonus exp
             * @property {Array.<pb.common.ILevel>|null} [levels] GameBonus levels
             * @property {pb.common.GameBonus.IforRank|null} [rankBonus] GameBonus rankBonus
             */

            /**
             * Constructs a new GameBonus.
             * @memberof pb.common
             * @classdesc Represents a GameBonus.
             * @implements IGameBonus
             * @constructor
             * @param {pb.common.IGameBonus=} [properties] Properties to set
             */
            function GameBonus(properties) {
                this.levels = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GameBonus userID.
             * @member {Long} userID
             * @memberof pb.common.GameBonus
             * @instance
             */
            GameBonus.prototype.userID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * GameBonus bonusGold.
             * @member {number} bonusGold
             * @memberof pb.common.GameBonus
             * @instance
             */
            GameBonus.prototype.bonusGold = 0;

            /**
             * GameBonus extraGold.
             * @member {number} extraGold
             * @memberof pb.common.GameBonus
             * @instance
             */
            GameBonus.prototype.extraGold = 0;

            /**
             * GameBonus gold.
             * @member {number} gold
             * @memberof pb.common.GameBonus
             * @instance
             */
            GameBonus.prototype.gold = 0;

            /**
             * GameBonus bonusExp.
             * @member {number} bonusExp
             * @memberof pb.common.GameBonus
             * @instance
             */
            GameBonus.prototype.bonusExp = 0;

            /**
             * GameBonus extraExp.
             * @member {number} extraExp
             * @memberof pb.common.GameBonus
             * @instance
             */
            GameBonus.prototype.extraExp = 0;

            /**
             * GameBonus exp.
             * @member {number} exp
             * @memberof pb.common.GameBonus
             * @instance
             */
            GameBonus.prototype.exp = 0;

            /**
             * GameBonus levels.
             * @member {Array.<pb.common.ILevel>} levels
             * @memberof pb.common.GameBonus
             * @instance
             */
            GameBonus.prototype.levels = $util.emptyArray;

            /**
             * GameBonus rankBonus.
             * @member {pb.common.GameBonus.IforRank|null|undefined} rankBonus
             * @memberof pb.common.GameBonus
             * @instance
             */
            GameBonus.prototype.rankBonus = null;

            /**
             * Creates a new GameBonus instance using the specified properties.
             * @function create
             * @memberof pb.common.GameBonus
             * @static
             * @param {pb.common.IGameBonus=} [properties] Properties to set
             * @returns {pb.common.GameBonus} GameBonus instance
             */
            GameBonus.create = function create(properties) {
                return new GameBonus(properties);
            };

            /**
             * Encodes the specified GameBonus message. Does not implicitly {@link pb.common.GameBonus.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GameBonus
             * @static
             * @param {pb.common.IGameBonus} message GameBonus message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameBonus.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userID != null && message.hasOwnProperty("userID"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userID);
                if (message.bonusGold != null && message.hasOwnProperty("bonusGold"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.bonusGold);
                if (message.extraGold != null && message.hasOwnProperty("extraGold"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.extraGold);
                if (message.gold != null && message.hasOwnProperty("gold"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.gold);
                if (message.bonusExp != null && message.hasOwnProperty("bonusExp"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.bonusExp);
                if (message.extraExp != null && message.hasOwnProperty("extraExp"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.extraExp);
                if (message.exp != null && message.hasOwnProperty("exp"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int32(message.exp);
                if (message.levels != null && message.levels.length)
                    for (var i = 0; i < message.levels.length; ++i)
                        $root.pb.common.Level.encode(message.levels[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.rankBonus != null && message.hasOwnProperty("rankBonus"))
                    $root.pb.common.GameBonus.forRank.encode(message.rankBonus, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GameBonus message, length delimited. Does not implicitly {@link pb.common.GameBonus.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GameBonus
             * @static
             * @param {pb.common.IGameBonus} message GameBonus message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameBonus.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GameBonus message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GameBonus
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GameBonus} GameBonus
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameBonus.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GameBonus();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.userID = reader.int64();
                        break;
                    case 2:
                        message.bonusGold = reader.int32();
                        break;
                    case 3:
                        message.extraGold = reader.int32();
                        break;
                    case 4:
                        message.gold = reader.int32();
                        break;
                    case 5:
                        message.bonusExp = reader.int32();
                        break;
                    case 6:
                        message.extraExp = reader.int32();
                        break;
                    case 7:
                        message.exp = reader.int32();
                        break;
                    case 8:
                        if (!(message.levels && message.levels.length))
                            message.levels = [];
                        message.levels.push($root.pb.common.Level.decode(reader, reader.uint32()));
                        break;
                    case 9:
                        message.rankBonus = $root.pb.common.GameBonus.forRank.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GameBonus message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GameBonus
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GameBonus} GameBonus
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameBonus.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GameBonus message.
             * @function verify
             * @memberof pb.common.GameBonus
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GameBonus.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userID != null && message.hasOwnProperty("userID"))
                    if (!$util.isInteger(message.userID) && !(message.userID && $util.isInteger(message.userID.low) && $util.isInteger(message.userID.high)))
                        return "userID: integer|Long expected";
                if (message.bonusGold != null && message.hasOwnProperty("bonusGold"))
                    if (!$util.isInteger(message.bonusGold))
                        return "bonusGold: integer expected";
                if (message.extraGold != null && message.hasOwnProperty("extraGold"))
                    if (!$util.isInteger(message.extraGold))
                        return "extraGold: integer expected";
                if (message.gold != null && message.hasOwnProperty("gold"))
                    if (!$util.isInteger(message.gold))
                        return "gold: integer expected";
                if (message.bonusExp != null && message.hasOwnProperty("bonusExp"))
                    if (!$util.isInteger(message.bonusExp))
                        return "bonusExp: integer expected";
                if (message.extraExp != null && message.hasOwnProperty("extraExp"))
                    if (!$util.isInteger(message.extraExp))
                        return "extraExp: integer expected";
                if (message.exp != null && message.hasOwnProperty("exp"))
                    if (!$util.isInteger(message.exp))
                        return "exp: integer expected";
                if (message.levels != null && message.hasOwnProperty("levels")) {
                    if (!Array.isArray(message.levels))
                        return "levels: array expected";
                    for (var i = 0; i < message.levels.length; ++i) {
                        var error = $root.pb.common.Level.verify(message.levels[i]);
                        if (error)
                            return "levels." + error;
                    }
                }
                if (message.rankBonus != null && message.hasOwnProperty("rankBonus")) {
                    var error = $root.pb.common.GameBonus.forRank.verify(message.rankBonus);
                    if (error)
                        return "rankBonus." + error;
                }
                return null;
            };

            /**
             * Creates a GameBonus message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GameBonus
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GameBonus} GameBonus
             */
            GameBonus.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GameBonus)
                    return object;
                var message = new $root.pb.common.GameBonus();
                if (object.userID != null)
                    if ($util.Long)
                        (message.userID = $util.Long.fromValue(object.userID)).unsigned = false;
                    else if (typeof object.userID === "string")
                        message.userID = parseInt(object.userID, 10);
                    else if (typeof object.userID === "number")
                        message.userID = object.userID;
                    else if (typeof object.userID === "object")
                        message.userID = new $util.LongBits(object.userID.low >>> 0, object.userID.high >>> 0).toNumber();
                if (object.bonusGold != null)
                    message.bonusGold = object.bonusGold | 0;
                if (object.extraGold != null)
                    message.extraGold = object.extraGold | 0;
                if (object.gold != null)
                    message.gold = object.gold | 0;
                if (object.bonusExp != null)
                    message.bonusExp = object.bonusExp | 0;
                if (object.extraExp != null)
                    message.extraExp = object.extraExp | 0;
                if (object.exp != null)
                    message.exp = object.exp | 0;
                if (object.levels) {
                    if (!Array.isArray(object.levels))
                        throw TypeError(".pb.common.GameBonus.levels: array expected");
                    message.levels = [];
                    for (var i = 0; i < object.levels.length; ++i) {
                        if (typeof object.levels[i] !== "object")
                            throw TypeError(".pb.common.GameBonus.levels: object expected");
                        message.levels[i] = $root.pb.common.Level.fromObject(object.levels[i]);
                    }
                }
                if (object.rankBonus != null) {
                    if (typeof object.rankBonus !== "object")
                        throw TypeError(".pb.common.GameBonus.rankBonus: object expected");
                    message.rankBonus = $root.pb.common.GameBonus.forRank.fromObject(object.rankBonus);
                }
                return message;
            };

            /**
             * Creates a plain object from a GameBonus message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GameBonus
             * @static
             * @param {pb.common.GameBonus} message GameBonus
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GameBonus.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.levels = [];
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userID = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userID = options.longs === String ? "0" : 0;
                    object.bonusGold = 0;
                    object.extraGold = 0;
                    object.gold = 0;
                    object.bonusExp = 0;
                    object.extraExp = 0;
                    object.exp = 0;
                    object.rankBonus = null;
                }
                if (message.userID != null && message.hasOwnProperty("userID"))
                    if (typeof message.userID === "number")
                        object.userID = options.longs === String ? String(message.userID) : message.userID;
                    else
                        object.userID = options.longs === String ? $util.Long.prototype.toString.call(message.userID) : options.longs === Number ? new $util.LongBits(message.userID.low >>> 0, message.userID.high >>> 0).toNumber() : message.userID;
                if (message.bonusGold != null && message.hasOwnProperty("bonusGold"))
                    object.bonusGold = message.bonusGold;
                if (message.extraGold != null && message.hasOwnProperty("extraGold"))
                    object.extraGold = message.extraGold;
                if (message.gold != null && message.hasOwnProperty("gold"))
                    object.gold = message.gold;
                if (message.bonusExp != null && message.hasOwnProperty("bonusExp"))
                    object.bonusExp = message.bonusExp;
                if (message.extraExp != null && message.hasOwnProperty("extraExp"))
                    object.extraExp = message.extraExp;
                if (message.exp != null && message.hasOwnProperty("exp"))
                    object.exp = message.exp;
                if (message.levels && message.levels.length) {
                    object.levels = [];
                    for (var j = 0; j < message.levels.length; ++j)
                        object.levels[j] = $root.pb.common.Level.toObject(message.levels[j], options);
                }
                if (message.rankBonus != null && message.hasOwnProperty("rankBonus"))
                    object.rankBonus = $root.pb.common.GameBonus.forRank.toObject(message.rankBonus, options);
                return object;
            };

            /**
             * Converts this GameBonus to JSON.
             * @function toJSON
             * @memberof pb.common.GameBonus
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GameBonus.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            GameBonus.forRank = (function() {

                /**
                 * Properties of a forRank.
                 * @memberof pb.common.GameBonus
                 * @interface IforRank
                 * @property {Long|null} [assetScore] forRank assetScore
                 * @property {Array.<pb.common.IAssetScoreField>|null} [assetScoreItems] forRank assetScoreItems
                 * @property {string|null} [assetLevel] forRank assetLevel
                 * @property {string|null} [accBonus] forRank accBonus
                 * @property {string|null} [accTotal] forRank accTotal
                 */

                /**
                 * Constructs a new forRank.
                 * @memberof pb.common.GameBonus
                 * @classdesc Represents a forRank.
                 * @implements IforRank
                 * @constructor
                 * @param {pb.common.GameBonus.IforRank=} [properties] Properties to set
                 */
                function forRank(properties) {
                    this.assetScoreItems = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * forRank assetScore.
                 * @member {Long} assetScore
                 * @memberof pb.common.GameBonus.forRank
                 * @instance
                 */
                forRank.prototype.assetScore = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * forRank assetScoreItems.
                 * @member {Array.<pb.common.IAssetScoreField>} assetScoreItems
                 * @memberof pb.common.GameBonus.forRank
                 * @instance
                 */
                forRank.prototype.assetScoreItems = $util.emptyArray;

                /**
                 * forRank assetLevel.
                 * @member {string} assetLevel
                 * @memberof pb.common.GameBonus.forRank
                 * @instance
                 */
                forRank.prototype.assetLevel = "";

                /**
                 * forRank accBonus.
                 * @member {string} accBonus
                 * @memberof pb.common.GameBonus.forRank
                 * @instance
                 */
                forRank.prototype.accBonus = "";

                /**
                 * forRank accTotal.
                 * @member {string} accTotal
                 * @memberof pb.common.GameBonus.forRank
                 * @instance
                 */
                forRank.prototype.accTotal = "";

                /**
                 * Creates a new forRank instance using the specified properties.
                 * @function create
                 * @memberof pb.common.GameBonus.forRank
                 * @static
                 * @param {pb.common.GameBonus.IforRank=} [properties] Properties to set
                 * @returns {pb.common.GameBonus.forRank} forRank instance
                 */
                forRank.create = function create(properties) {
                    return new forRank(properties);
                };

                /**
                 * Encodes the specified forRank message. Does not implicitly {@link pb.common.GameBonus.forRank.verify|verify} messages.
                 * @function encode
                 * @memberof pb.common.GameBonus.forRank
                 * @static
                 * @param {pb.common.GameBonus.IforRank} message forRank message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                forRank.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.assetScore != null && message.hasOwnProperty("assetScore"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.assetScore);
                    if (message.assetScoreItems != null && message.assetScoreItems.length)
                        for (var i = 0; i < message.assetScoreItems.length; ++i)
                            $root.pb.common.AssetScoreField.encode(message.assetScoreItems[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.assetLevel != null && message.hasOwnProperty("assetLevel"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.assetLevel);
                    if (message.accBonus != null && message.hasOwnProperty("accBonus"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.accBonus);
                    if (message.accTotal != null && message.hasOwnProperty("accTotal"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.accTotal);
                    return writer;
                };

                /**
                 * Encodes the specified forRank message, length delimited. Does not implicitly {@link pb.common.GameBonus.forRank.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof pb.common.GameBonus.forRank
                 * @static
                 * @param {pb.common.GameBonus.IforRank} message forRank message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                forRank.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a forRank message from the specified reader or buffer.
                 * @function decode
                 * @memberof pb.common.GameBonus.forRank
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {pb.common.GameBonus.forRank} forRank
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                forRank.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GameBonus.forRank();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.assetScore = reader.int64();
                            break;
                        case 2:
                            if (!(message.assetScoreItems && message.assetScoreItems.length))
                                message.assetScoreItems = [];
                            message.assetScoreItems.push($root.pb.common.AssetScoreField.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.assetLevel = reader.string();
                            break;
                        case 4:
                            message.accBonus = reader.string();
                            break;
                        case 5:
                            message.accTotal = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a forRank message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof pb.common.GameBonus.forRank
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {pb.common.GameBonus.forRank} forRank
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                forRank.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a forRank message.
                 * @function verify
                 * @memberof pb.common.GameBonus.forRank
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                forRank.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.assetScore != null && message.hasOwnProperty("assetScore"))
                        if (!$util.isInteger(message.assetScore) && !(message.assetScore && $util.isInteger(message.assetScore.low) && $util.isInteger(message.assetScore.high)))
                            return "assetScore: integer|Long expected";
                    if (message.assetScoreItems != null && message.hasOwnProperty("assetScoreItems")) {
                        if (!Array.isArray(message.assetScoreItems))
                            return "assetScoreItems: array expected";
                        for (var i = 0; i < message.assetScoreItems.length; ++i) {
                            var error = $root.pb.common.AssetScoreField.verify(message.assetScoreItems[i]);
                            if (error)
                                return "assetScoreItems." + error;
                        }
                    }
                    if (message.assetLevel != null && message.hasOwnProperty("assetLevel"))
                        if (!$util.isString(message.assetLevel))
                            return "assetLevel: string expected";
                    if (message.accBonus != null && message.hasOwnProperty("accBonus"))
                        if (!$util.isString(message.accBonus))
                            return "accBonus: string expected";
                    if (message.accTotal != null && message.hasOwnProperty("accTotal"))
                        if (!$util.isString(message.accTotal))
                            return "accTotal: string expected";
                    return null;
                };

                /**
                 * Creates a forRank message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof pb.common.GameBonus.forRank
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {pb.common.GameBonus.forRank} forRank
                 */
                forRank.fromObject = function fromObject(object) {
                    if (object instanceof $root.pb.common.GameBonus.forRank)
                        return object;
                    var message = new $root.pb.common.GameBonus.forRank();
                    if (object.assetScore != null)
                        if ($util.Long)
                            (message.assetScore = $util.Long.fromValue(object.assetScore)).unsigned = false;
                        else if (typeof object.assetScore === "string")
                            message.assetScore = parseInt(object.assetScore, 10);
                        else if (typeof object.assetScore === "number")
                            message.assetScore = object.assetScore;
                        else if (typeof object.assetScore === "object")
                            message.assetScore = new $util.LongBits(object.assetScore.low >>> 0, object.assetScore.high >>> 0).toNumber();
                    if (object.assetScoreItems) {
                        if (!Array.isArray(object.assetScoreItems))
                            throw TypeError(".pb.common.GameBonus.forRank.assetScoreItems: array expected");
                        message.assetScoreItems = [];
                        for (var i = 0; i < object.assetScoreItems.length; ++i) {
                            if (typeof object.assetScoreItems[i] !== "object")
                                throw TypeError(".pb.common.GameBonus.forRank.assetScoreItems: object expected");
                            message.assetScoreItems[i] = $root.pb.common.AssetScoreField.fromObject(object.assetScoreItems[i]);
                        }
                    }
                    if (object.assetLevel != null)
                        message.assetLevel = String(object.assetLevel);
                    if (object.accBonus != null)
                        message.accBonus = String(object.accBonus);
                    if (object.accTotal != null)
                        message.accTotal = String(object.accTotal);
                    return message;
                };

                /**
                 * Creates a plain object from a forRank message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof pb.common.GameBonus.forRank
                 * @static
                 * @param {pb.common.GameBonus.forRank} message forRank
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                forRank.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.assetScoreItems = [];
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.assetScore = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.assetScore = options.longs === String ? "0" : 0;
                        object.assetLevel = "";
                        object.accBonus = "";
                        object.accTotal = "";
                    }
                    if (message.assetScore != null && message.hasOwnProperty("assetScore"))
                        if (typeof message.assetScore === "number")
                            object.assetScore = options.longs === String ? String(message.assetScore) : message.assetScore;
                        else
                            object.assetScore = options.longs === String ? $util.Long.prototype.toString.call(message.assetScore) : options.longs === Number ? new $util.LongBits(message.assetScore.low >>> 0, message.assetScore.high >>> 0).toNumber() : message.assetScore;
                    if (message.assetScoreItems && message.assetScoreItems.length) {
                        object.assetScoreItems = [];
                        for (var j = 0; j < message.assetScoreItems.length; ++j)
                            object.assetScoreItems[j] = $root.pb.common.AssetScoreField.toObject(message.assetScoreItems[j], options);
                    }
                    if (message.assetLevel != null && message.hasOwnProperty("assetLevel"))
                        object.assetLevel = message.assetLevel;
                    if (message.accBonus != null && message.hasOwnProperty("accBonus"))
                        object.accBonus = message.accBonus;
                    if (message.accTotal != null && message.hasOwnProperty("accTotal"))
                        object.accTotal = message.accTotal;
                    return object;
                };

                /**
                 * Converts this forRank to JSON.
                 * @function toJSON
                 * @memberof pb.common.GameBonus.forRank
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                forRank.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return forRank;
            })();

            return GameBonus;
        })();

        common.PaginationReq = (function() {

            /**
             * Properties of a PaginationReq.
             * @memberof pb.common
             * @interface IPaginationReq
             * @property {number|null} [page] PaginationReq page
             * @property {number|null} [perPage] PaginationReq perPage
             */

            /**
             * Constructs a new PaginationReq.
             * @memberof pb.common
             * @classdesc Represents a PaginationReq.
             * @implements IPaginationReq
             * @constructor
             * @param {pb.common.IPaginationReq=} [properties] Properties to set
             */
            function PaginationReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PaginationReq page.
             * @member {number} page
             * @memberof pb.common.PaginationReq
             * @instance
             */
            PaginationReq.prototype.page = 0;

            /**
             * PaginationReq perPage.
             * @member {number} perPage
             * @memberof pb.common.PaginationReq
             * @instance
             */
            PaginationReq.prototype.perPage = 0;

            /**
             * Creates a new PaginationReq instance using the specified properties.
             * @function create
             * @memberof pb.common.PaginationReq
             * @static
             * @param {pb.common.IPaginationReq=} [properties] Properties to set
             * @returns {pb.common.PaginationReq} PaginationReq instance
             */
            PaginationReq.create = function create(properties) {
                return new PaginationReq(properties);
            };

            /**
             * Encodes the specified PaginationReq message. Does not implicitly {@link pb.common.PaginationReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.PaginationReq
             * @static
             * @param {pb.common.IPaginationReq} message PaginationReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PaginationReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.page != null && message.hasOwnProperty("page"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.page);
                if (message.perPage != null && message.hasOwnProperty("perPage"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.perPage);
                return writer;
            };

            /**
             * Encodes the specified PaginationReq message, length delimited. Does not implicitly {@link pb.common.PaginationReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.PaginationReq
             * @static
             * @param {pb.common.IPaginationReq} message PaginationReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PaginationReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PaginationReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.PaginationReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.PaginationReq} PaginationReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PaginationReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.PaginationReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.page = reader.int32();
                        break;
                    case 2:
                        message.perPage = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PaginationReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.PaginationReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.PaginationReq} PaginationReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PaginationReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PaginationReq message.
             * @function verify
             * @memberof pb.common.PaginationReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PaginationReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.page != null && message.hasOwnProperty("page"))
                    if (!$util.isInteger(message.page))
                        return "page: integer expected";
                if (message.perPage != null && message.hasOwnProperty("perPage"))
                    if (!$util.isInteger(message.perPage))
                        return "perPage: integer expected";
                return null;
            };

            /**
             * Creates a PaginationReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.PaginationReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.PaginationReq} PaginationReq
             */
            PaginationReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.PaginationReq)
                    return object;
                var message = new $root.pb.common.PaginationReq();
                if (object.page != null)
                    message.page = object.page | 0;
                if (object.perPage != null)
                    message.perPage = object.perPage | 0;
                return message;
            };

            /**
             * Creates a plain object from a PaginationReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.PaginationReq
             * @static
             * @param {pb.common.PaginationReq} message PaginationReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PaginationReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.page = 0;
                    object.perPage = 0;
                }
                if (message.page != null && message.hasOwnProperty("page"))
                    object.page = message.page;
                if (message.perPage != null && message.hasOwnProperty("perPage"))
                    object.perPage = message.perPage;
                return object;
            };

            /**
             * Converts this PaginationReq to JSON.
             * @function toJSON
             * @memberof pb.common.PaginationReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PaginationReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PaginationReq;
        })();

        common.PaginationRsp = (function() {

            /**
             * Properties of a PaginationRsp.
             * @memberof pb.common
             * @interface IPaginationRsp
             * @property {number|null} [page] PaginationRsp page
             * @property {number|null} [perPage] PaginationRsp perPage
             * @property {number|null} [totalCount] PaginationRsp totalCount
             * @property {number|null} [totalPages] PaginationRsp totalPages
             */

            /**
             * Constructs a new PaginationRsp.
             * @memberof pb.common
             * @classdesc Represents a PaginationRsp.
             * @implements IPaginationRsp
             * @constructor
             * @param {pb.common.IPaginationRsp=} [properties] Properties to set
             */
            function PaginationRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PaginationRsp page.
             * @member {number} page
             * @memberof pb.common.PaginationRsp
             * @instance
             */
            PaginationRsp.prototype.page = 0;

            /**
             * PaginationRsp perPage.
             * @member {number} perPage
             * @memberof pb.common.PaginationRsp
             * @instance
             */
            PaginationRsp.prototype.perPage = 0;

            /**
             * PaginationRsp totalCount.
             * @member {number} totalCount
             * @memberof pb.common.PaginationRsp
             * @instance
             */
            PaginationRsp.prototype.totalCount = 0;

            /**
             * PaginationRsp totalPages.
             * @member {number} totalPages
             * @memberof pb.common.PaginationRsp
             * @instance
             */
            PaginationRsp.prototype.totalPages = 0;

            /**
             * Creates a new PaginationRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.PaginationRsp
             * @static
             * @param {pb.common.IPaginationRsp=} [properties] Properties to set
             * @returns {pb.common.PaginationRsp} PaginationRsp instance
             */
            PaginationRsp.create = function create(properties) {
                return new PaginationRsp(properties);
            };

            /**
             * Encodes the specified PaginationRsp message. Does not implicitly {@link pb.common.PaginationRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.PaginationRsp
             * @static
             * @param {pb.common.IPaginationRsp} message PaginationRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PaginationRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.page != null && message.hasOwnProperty("page"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.page);
                if (message.perPage != null && message.hasOwnProperty("perPage"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.perPage);
                if (message.totalCount != null && message.hasOwnProperty("totalCount"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.totalCount);
                if (message.totalPages != null && message.hasOwnProperty("totalPages"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.totalPages);
                return writer;
            };

            /**
             * Encodes the specified PaginationRsp message, length delimited. Does not implicitly {@link pb.common.PaginationRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.PaginationRsp
             * @static
             * @param {pb.common.IPaginationRsp} message PaginationRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PaginationRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PaginationRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.PaginationRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.PaginationRsp} PaginationRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PaginationRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.PaginationRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.page = reader.int32();
                        break;
                    case 2:
                        message.perPage = reader.int32();
                        break;
                    case 3:
                        message.totalCount = reader.int32();
                        break;
                    case 4:
                        message.totalPages = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PaginationRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.PaginationRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.PaginationRsp} PaginationRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PaginationRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PaginationRsp message.
             * @function verify
             * @memberof pb.common.PaginationRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PaginationRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.page != null && message.hasOwnProperty("page"))
                    if (!$util.isInteger(message.page))
                        return "page: integer expected";
                if (message.perPage != null && message.hasOwnProperty("perPage"))
                    if (!$util.isInteger(message.perPage))
                        return "perPage: integer expected";
                if (message.totalCount != null && message.hasOwnProperty("totalCount"))
                    if (!$util.isInteger(message.totalCount))
                        return "totalCount: integer expected";
                if (message.totalPages != null && message.hasOwnProperty("totalPages"))
                    if (!$util.isInteger(message.totalPages))
                        return "totalPages: integer expected";
                return null;
            };

            /**
             * Creates a PaginationRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.PaginationRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.PaginationRsp} PaginationRsp
             */
            PaginationRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.PaginationRsp)
                    return object;
                var message = new $root.pb.common.PaginationRsp();
                if (object.page != null)
                    message.page = object.page | 0;
                if (object.perPage != null)
                    message.perPage = object.perPage | 0;
                if (object.totalCount != null)
                    message.totalCount = object.totalCount | 0;
                if (object.totalPages != null)
                    message.totalPages = object.totalPages | 0;
                return message;
            };

            /**
             * Creates a plain object from a PaginationRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.PaginationRsp
             * @static
             * @param {pb.common.PaginationRsp} message PaginationRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PaginationRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.page = 0;
                    object.perPage = 0;
                    object.totalCount = 0;
                    object.totalPages = 0;
                }
                if (message.page != null && message.hasOwnProperty("page"))
                    object.page = message.page;
                if (message.perPage != null && message.hasOwnProperty("perPage"))
                    object.perPage = message.perPage;
                if (message.totalCount != null && message.hasOwnProperty("totalCount"))
                    object.totalCount = message.totalCount;
                if (message.totalPages != null && message.hasOwnProperty("totalPages"))
                    object.totalPages = message.totalPages;
                return object;
            };

            /**
             * Converts this PaginationRsp to JSON.
             * @function toJSON
             * @memberof pb.common.PaginationRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PaginationRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PaginationRsp;
        })();

        common.DetailValue = (function() {

            /**
             * Properties of a DetailValue.
             * @memberof pb.common
             * @interface IDetailValue
             * @property {string|null} [name] DetailValue name
             * @property {string|null} [code] DetailValue code
             * @property {Long|null} [value] DetailValue value
             * @property {string|null} [category] DetailValue category
             * @property {Long|null} [unitPrice] DetailValue unitPrice
             * @property {Long|null} [liabilities] DetailValue liabilities
             * @property {Long|null} [income] DetailValue income
             * @property {Long|null} [expense] DetailValue expense
             * @property {Long|null} [shard] DetailValue shard
             * @property {Long|null} [mark] DetailValue mark
             * @property {string|null} [imgFile] DetailValue imgFile
             * @property {string|null} [desc] DetailValue desc
             * @property {Long|null} [downPayment] DetailValue downPayment
             * @property {number|null} [downPaymentPCT] DetailValue downPaymentPCT
             * @property {number|null} [interestRatePCT] DetailValue interestRatePCT
             * @property {number|null} [yieldRatePCT] DetailValue yieldRatePCT
             * @property {Long|null} [highPrice] DetailValue highPrice
             * @property {Long|null} [lowPrice] DetailValue lowPrice
             */

            /**
             * Constructs a new DetailValue.
             * @memberof pb.common
             * @classdesc Represents a DetailValue.
             * @implements IDetailValue
             * @constructor
             * @param {pb.common.IDetailValue=} [properties] Properties to set
             */
            function DetailValue(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DetailValue name.
             * @member {string} name
             * @memberof pb.common.DetailValue
             * @instance
             */
            DetailValue.prototype.name = "";

            /**
             * DetailValue code.
             * @member {string} code
             * @memberof pb.common.DetailValue
             * @instance
             */
            DetailValue.prototype.code = "";

            /**
             * DetailValue value.
             * @member {Long} value
             * @memberof pb.common.DetailValue
             * @instance
             */
            DetailValue.prototype.value = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * DetailValue category.
             * @member {string} category
             * @memberof pb.common.DetailValue
             * @instance
             */
            DetailValue.prototype.category = "";

            /**
             * DetailValue unitPrice.
             * @member {Long} unitPrice
             * @memberof pb.common.DetailValue
             * @instance
             */
            DetailValue.prototype.unitPrice = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * DetailValue liabilities.
             * @member {Long} liabilities
             * @memberof pb.common.DetailValue
             * @instance
             */
            DetailValue.prototype.liabilities = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * DetailValue income.
             * @member {Long} income
             * @memberof pb.common.DetailValue
             * @instance
             */
            DetailValue.prototype.income = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * DetailValue expense.
             * @member {Long} expense
             * @memberof pb.common.DetailValue
             * @instance
             */
            DetailValue.prototype.expense = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * DetailValue shard.
             * @member {Long} shard
             * @memberof pb.common.DetailValue
             * @instance
             */
            DetailValue.prototype.shard = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * DetailValue mark.
             * @member {Long} mark
             * @memberof pb.common.DetailValue
             * @instance
             */
            DetailValue.prototype.mark = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * DetailValue imgFile.
             * @member {string} imgFile
             * @memberof pb.common.DetailValue
             * @instance
             */
            DetailValue.prototype.imgFile = "";

            /**
             * DetailValue desc.
             * @member {string} desc
             * @memberof pb.common.DetailValue
             * @instance
             */
            DetailValue.prototype.desc = "";

            /**
             * DetailValue downPayment.
             * @member {Long} downPayment
             * @memberof pb.common.DetailValue
             * @instance
             */
            DetailValue.prototype.downPayment = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * DetailValue downPaymentPCT.
             * @member {number} downPaymentPCT
             * @memberof pb.common.DetailValue
             * @instance
             */
            DetailValue.prototype.downPaymentPCT = 0;

            /**
             * DetailValue interestRatePCT.
             * @member {number} interestRatePCT
             * @memberof pb.common.DetailValue
             * @instance
             */
            DetailValue.prototype.interestRatePCT = 0;

            /**
             * DetailValue yieldRatePCT.
             * @member {number} yieldRatePCT
             * @memberof pb.common.DetailValue
             * @instance
             */
            DetailValue.prototype.yieldRatePCT = 0;

            /**
             * DetailValue highPrice.
             * @member {Long} highPrice
             * @memberof pb.common.DetailValue
             * @instance
             */
            DetailValue.prototype.highPrice = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * DetailValue lowPrice.
             * @member {Long} lowPrice
             * @memberof pb.common.DetailValue
             * @instance
             */
            DetailValue.prototype.lowPrice = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new DetailValue instance using the specified properties.
             * @function create
             * @memberof pb.common.DetailValue
             * @static
             * @param {pb.common.IDetailValue=} [properties] Properties to set
             * @returns {pb.common.DetailValue} DetailValue instance
             */
            DetailValue.create = function create(properties) {
                return new DetailValue(properties);
            };

            /**
             * Encodes the specified DetailValue message. Does not implicitly {@link pb.common.DetailValue.verify|verify} messages.
             * @function encode
             * @memberof pb.common.DetailValue
             * @static
             * @param {pb.common.IDetailValue} message DetailValue message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DetailValue.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.code);
                if (message.value != null && message.hasOwnProperty("value"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.value);
                if (message.category != null && message.hasOwnProperty("category"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.category);
                if (message.unitPrice != null && message.hasOwnProperty("unitPrice"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.unitPrice);
                if (message.liabilities != null && message.hasOwnProperty("liabilities"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int64(message.liabilities);
                if (message.income != null && message.hasOwnProperty("income"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int64(message.income);
                if (message.expense != null && message.hasOwnProperty("expense"))
                    writer.uint32(/* id 8, wireType 0 =*/64).int64(message.expense);
                if (message.shard != null && message.hasOwnProperty("shard"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int64(message.shard);
                if (message.mark != null && message.hasOwnProperty("mark"))
                    writer.uint32(/* id 10, wireType 0 =*/80).int64(message.mark);
                if (message.imgFile != null && message.hasOwnProperty("imgFile"))
                    writer.uint32(/* id 11, wireType 2 =*/90).string(message.imgFile);
                if (message.desc != null && message.hasOwnProperty("desc"))
                    writer.uint32(/* id 12, wireType 2 =*/98).string(message.desc);
                if (message.downPayment != null && message.hasOwnProperty("downPayment"))
                    writer.uint32(/* id 13, wireType 0 =*/104).int64(message.downPayment);
                if (message.downPaymentPCT != null && message.hasOwnProperty("downPaymentPCT"))
                    writer.uint32(/* id 14, wireType 5 =*/117).float(message.downPaymentPCT);
                if (message.interestRatePCT != null && message.hasOwnProperty("interestRatePCT"))
                    writer.uint32(/* id 15, wireType 5 =*/125).float(message.interestRatePCT);
                if (message.yieldRatePCT != null && message.hasOwnProperty("yieldRatePCT"))
                    writer.uint32(/* id 16, wireType 5 =*/133).float(message.yieldRatePCT);
                if (message.highPrice != null && message.hasOwnProperty("highPrice"))
                    writer.uint32(/* id 17, wireType 0 =*/136).int64(message.highPrice);
                if (message.lowPrice != null && message.hasOwnProperty("lowPrice"))
                    writer.uint32(/* id 18, wireType 0 =*/144).int64(message.lowPrice);
                return writer;
            };

            /**
             * Encodes the specified DetailValue message, length delimited. Does not implicitly {@link pb.common.DetailValue.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.DetailValue
             * @static
             * @param {pb.common.IDetailValue} message DetailValue message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DetailValue.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DetailValue message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.DetailValue
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.DetailValue} DetailValue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DetailValue.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.DetailValue();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.code = reader.string();
                        break;
                    case 3:
                        message.value = reader.int64();
                        break;
                    case 4:
                        message.category = reader.string();
                        break;
                    case 5:
                        message.unitPrice = reader.int64();
                        break;
                    case 6:
                        message.liabilities = reader.int64();
                        break;
                    case 7:
                        message.income = reader.int64();
                        break;
                    case 8:
                        message.expense = reader.int64();
                        break;
                    case 9:
                        message.shard = reader.int64();
                        break;
                    case 10:
                        message.mark = reader.int64();
                        break;
                    case 11:
                        message.imgFile = reader.string();
                        break;
                    case 12:
                        message.desc = reader.string();
                        break;
                    case 13:
                        message.downPayment = reader.int64();
                        break;
                    case 14:
                        message.downPaymentPCT = reader.float();
                        break;
                    case 15:
                        message.interestRatePCT = reader.float();
                        break;
                    case 16:
                        message.yieldRatePCT = reader.float();
                        break;
                    case 17:
                        message.highPrice = reader.int64();
                        break;
                    case 18:
                        message.lowPrice = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DetailValue message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.DetailValue
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.DetailValue} DetailValue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DetailValue.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DetailValue message.
             * @function verify
             * @memberof pb.common.DetailValue
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DetailValue.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isString(message.code))
                        return "code: string expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!$util.isInteger(message.value) && !(message.value && $util.isInteger(message.value.low) && $util.isInteger(message.value.high)))
                        return "value: integer|Long expected";
                if (message.category != null && message.hasOwnProperty("category"))
                    if (!$util.isString(message.category))
                        return "category: string expected";
                if (message.unitPrice != null && message.hasOwnProperty("unitPrice"))
                    if (!$util.isInteger(message.unitPrice) && !(message.unitPrice && $util.isInteger(message.unitPrice.low) && $util.isInteger(message.unitPrice.high)))
                        return "unitPrice: integer|Long expected";
                if (message.liabilities != null && message.hasOwnProperty("liabilities"))
                    if (!$util.isInteger(message.liabilities) && !(message.liabilities && $util.isInteger(message.liabilities.low) && $util.isInteger(message.liabilities.high)))
                        return "liabilities: integer|Long expected";
                if (message.income != null && message.hasOwnProperty("income"))
                    if (!$util.isInteger(message.income) && !(message.income && $util.isInteger(message.income.low) && $util.isInteger(message.income.high)))
                        return "income: integer|Long expected";
                if (message.expense != null && message.hasOwnProperty("expense"))
                    if (!$util.isInteger(message.expense) && !(message.expense && $util.isInteger(message.expense.low) && $util.isInteger(message.expense.high)))
                        return "expense: integer|Long expected";
                if (message.shard != null && message.hasOwnProperty("shard"))
                    if (!$util.isInteger(message.shard) && !(message.shard && $util.isInteger(message.shard.low) && $util.isInteger(message.shard.high)))
                        return "shard: integer|Long expected";
                if (message.mark != null && message.hasOwnProperty("mark"))
                    if (!$util.isInteger(message.mark) && !(message.mark && $util.isInteger(message.mark.low) && $util.isInteger(message.mark.high)))
                        return "mark: integer|Long expected";
                if (message.imgFile != null && message.hasOwnProperty("imgFile"))
                    if (!$util.isString(message.imgFile))
                        return "imgFile: string expected";
                if (message.desc != null && message.hasOwnProperty("desc"))
                    if (!$util.isString(message.desc))
                        return "desc: string expected";
                if (message.downPayment != null && message.hasOwnProperty("downPayment"))
                    if (!$util.isInteger(message.downPayment) && !(message.downPayment && $util.isInteger(message.downPayment.low) && $util.isInteger(message.downPayment.high)))
                        return "downPayment: integer|Long expected";
                if (message.downPaymentPCT != null && message.hasOwnProperty("downPaymentPCT"))
                    if (typeof message.downPaymentPCT !== "number")
                        return "downPaymentPCT: number expected";
                if (message.interestRatePCT != null && message.hasOwnProperty("interestRatePCT"))
                    if (typeof message.interestRatePCT !== "number")
                        return "interestRatePCT: number expected";
                if (message.yieldRatePCT != null && message.hasOwnProperty("yieldRatePCT"))
                    if (typeof message.yieldRatePCT !== "number")
                        return "yieldRatePCT: number expected";
                if (message.highPrice != null && message.hasOwnProperty("highPrice"))
                    if (!$util.isInteger(message.highPrice) && !(message.highPrice && $util.isInteger(message.highPrice.low) && $util.isInteger(message.highPrice.high)))
                        return "highPrice: integer|Long expected";
                if (message.lowPrice != null && message.hasOwnProperty("lowPrice"))
                    if (!$util.isInteger(message.lowPrice) && !(message.lowPrice && $util.isInteger(message.lowPrice.low) && $util.isInteger(message.lowPrice.high)))
                        return "lowPrice: integer|Long expected";
                return null;
            };

            /**
             * Creates a DetailValue message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.DetailValue
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.DetailValue} DetailValue
             */
            DetailValue.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.DetailValue)
                    return object;
                var message = new $root.pb.common.DetailValue();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.code != null)
                    message.code = String(object.code);
                if (object.value != null)
                    if ($util.Long)
                        (message.value = $util.Long.fromValue(object.value)).unsigned = false;
                    else if (typeof object.value === "string")
                        message.value = parseInt(object.value, 10);
                    else if (typeof object.value === "number")
                        message.value = object.value;
                    else if (typeof object.value === "object")
                        message.value = new $util.LongBits(object.value.low >>> 0, object.value.high >>> 0).toNumber();
                if (object.category != null)
                    message.category = String(object.category);
                if (object.unitPrice != null)
                    if ($util.Long)
                        (message.unitPrice = $util.Long.fromValue(object.unitPrice)).unsigned = false;
                    else if (typeof object.unitPrice === "string")
                        message.unitPrice = parseInt(object.unitPrice, 10);
                    else if (typeof object.unitPrice === "number")
                        message.unitPrice = object.unitPrice;
                    else if (typeof object.unitPrice === "object")
                        message.unitPrice = new $util.LongBits(object.unitPrice.low >>> 0, object.unitPrice.high >>> 0).toNumber();
                if (object.liabilities != null)
                    if ($util.Long)
                        (message.liabilities = $util.Long.fromValue(object.liabilities)).unsigned = false;
                    else if (typeof object.liabilities === "string")
                        message.liabilities = parseInt(object.liabilities, 10);
                    else if (typeof object.liabilities === "number")
                        message.liabilities = object.liabilities;
                    else if (typeof object.liabilities === "object")
                        message.liabilities = new $util.LongBits(object.liabilities.low >>> 0, object.liabilities.high >>> 0).toNumber();
                if (object.income != null)
                    if ($util.Long)
                        (message.income = $util.Long.fromValue(object.income)).unsigned = false;
                    else if (typeof object.income === "string")
                        message.income = parseInt(object.income, 10);
                    else if (typeof object.income === "number")
                        message.income = object.income;
                    else if (typeof object.income === "object")
                        message.income = new $util.LongBits(object.income.low >>> 0, object.income.high >>> 0).toNumber();
                if (object.expense != null)
                    if ($util.Long)
                        (message.expense = $util.Long.fromValue(object.expense)).unsigned = false;
                    else if (typeof object.expense === "string")
                        message.expense = parseInt(object.expense, 10);
                    else if (typeof object.expense === "number")
                        message.expense = object.expense;
                    else if (typeof object.expense === "object")
                        message.expense = new $util.LongBits(object.expense.low >>> 0, object.expense.high >>> 0).toNumber();
                if (object.shard != null)
                    if ($util.Long)
                        (message.shard = $util.Long.fromValue(object.shard)).unsigned = false;
                    else if (typeof object.shard === "string")
                        message.shard = parseInt(object.shard, 10);
                    else if (typeof object.shard === "number")
                        message.shard = object.shard;
                    else if (typeof object.shard === "object")
                        message.shard = new $util.LongBits(object.shard.low >>> 0, object.shard.high >>> 0).toNumber();
                if (object.mark != null)
                    if ($util.Long)
                        (message.mark = $util.Long.fromValue(object.mark)).unsigned = false;
                    else if (typeof object.mark === "string")
                        message.mark = parseInt(object.mark, 10);
                    else if (typeof object.mark === "number")
                        message.mark = object.mark;
                    else if (typeof object.mark === "object")
                        message.mark = new $util.LongBits(object.mark.low >>> 0, object.mark.high >>> 0).toNumber();
                if (object.imgFile != null)
                    message.imgFile = String(object.imgFile);
                if (object.desc != null)
                    message.desc = String(object.desc);
                if (object.downPayment != null)
                    if ($util.Long)
                        (message.downPayment = $util.Long.fromValue(object.downPayment)).unsigned = false;
                    else if (typeof object.downPayment === "string")
                        message.downPayment = parseInt(object.downPayment, 10);
                    else if (typeof object.downPayment === "number")
                        message.downPayment = object.downPayment;
                    else if (typeof object.downPayment === "object")
                        message.downPayment = new $util.LongBits(object.downPayment.low >>> 0, object.downPayment.high >>> 0).toNumber();
                if (object.downPaymentPCT != null)
                    message.downPaymentPCT = Number(object.downPaymentPCT);
                if (object.interestRatePCT != null)
                    message.interestRatePCT = Number(object.interestRatePCT);
                if (object.yieldRatePCT != null)
                    message.yieldRatePCT = Number(object.yieldRatePCT);
                if (object.highPrice != null)
                    if ($util.Long)
                        (message.highPrice = $util.Long.fromValue(object.highPrice)).unsigned = false;
                    else if (typeof object.highPrice === "string")
                        message.highPrice = parseInt(object.highPrice, 10);
                    else if (typeof object.highPrice === "number")
                        message.highPrice = object.highPrice;
                    else if (typeof object.highPrice === "object")
                        message.highPrice = new $util.LongBits(object.highPrice.low >>> 0, object.highPrice.high >>> 0).toNumber();
                if (object.lowPrice != null)
                    if ($util.Long)
                        (message.lowPrice = $util.Long.fromValue(object.lowPrice)).unsigned = false;
                    else if (typeof object.lowPrice === "string")
                        message.lowPrice = parseInt(object.lowPrice, 10);
                    else if (typeof object.lowPrice === "number")
                        message.lowPrice = object.lowPrice;
                    else if (typeof object.lowPrice === "object")
                        message.lowPrice = new $util.LongBits(object.lowPrice.low >>> 0, object.lowPrice.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a DetailValue message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.DetailValue
             * @static
             * @param {pb.common.DetailValue} message DetailValue
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DetailValue.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    object.code = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.value = options.longs === String ? "0" : 0;
                    object.category = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.unitPrice = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.unitPrice = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.liabilities = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.liabilities = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.income = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.income = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.expense = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.expense = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.shard = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.shard = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.mark = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.mark = options.longs === String ? "0" : 0;
                    object.imgFile = "";
                    object.desc = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.downPayment = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.downPayment = options.longs === String ? "0" : 0;
                    object.downPaymentPCT = 0;
                    object.interestRatePCT = 0;
                    object.yieldRatePCT = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.highPrice = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.highPrice = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.lowPrice = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.lowPrice = options.longs === String ? "0" : 0;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.value != null && message.hasOwnProperty("value"))
                    if (typeof message.value === "number")
                        object.value = options.longs === String ? String(message.value) : message.value;
                    else
                        object.value = options.longs === String ? $util.Long.prototype.toString.call(message.value) : options.longs === Number ? new $util.LongBits(message.value.low >>> 0, message.value.high >>> 0).toNumber() : message.value;
                if (message.category != null && message.hasOwnProperty("category"))
                    object.category = message.category;
                if (message.unitPrice != null && message.hasOwnProperty("unitPrice"))
                    if (typeof message.unitPrice === "number")
                        object.unitPrice = options.longs === String ? String(message.unitPrice) : message.unitPrice;
                    else
                        object.unitPrice = options.longs === String ? $util.Long.prototype.toString.call(message.unitPrice) : options.longs === Number ? new $util.LongBits(message.unitPrice.low >>> 0, message.unitPrice.high >>> 0).toNumber() : message.unitPrice;
                if (message.liabilities != null && message.hasOwnProperty("liabilities"))
                    if (typeof message.liabilities === "number")
                        object.liabilities = options.longs === String ? String(message.liabilities) : message.liabilities;
                    else
                        object.liabilities = options.longs === String ? $util.Long.prototype.toString.call(message.liabilities) : options.longs === Number ? new $util.LongBits(message.liabilities.low >>> 0, message.liabilities.high >>> 0).toNumber() : message.liabilities;
                if (message.income != null && message.hasOwnProperty("income"))
                    if (typeof message.income === "number")
                        object.income = options.longs === String ? String(message.income) : message.income;
                    else
                        object.income = options.longs === String ? $util.Long.prototype.toString.call(message.income) : options.longs === Number ? new $util.LongBits(message.income.low >>> 0, message.income.high >>> 0).toNumber() : message.income;
                if (message.expense != null && message.hasOwnProperty("expense"))
                    if (typeof message.expense === "number")
                        object.expense = options.longs === String ? String(message.expense) : message.expense;
                    else
                        object.expense = options.longs === String ? $util.Long.prototype.toString.call(message.expense) : options.longs === Number ? new $util.LongBits(message.expense.low >>> 0, message.expense.high >>> 0).toNumber() : message.expense;
                if (message.shard != null && message.hasOwnProperty("shard"))
                    if (typeof message.shard === "number")
                        object.shard = options.longs === String ? String(message.shard) : message.shard;
                    else
                        object.shard = options.longs === String ? $util.Long.prototype.toString.call(message.shard) : options.longs === Number ? new $util.LongBits(message.shard.low >>> 0, message.shard.high >>> 0).toNumber() : message.shard;
                if (message.mark != null && message.hasOwnProperty("mark"))
                    if (typeof message.mark === "number")
                        object.mark = options.longs === String ? String(message.mark) : message.mark;
                    else
                        object.mark = options.longs === String ? $util.Long.prototype.toString.call(message.mark) : options.longs === Number ? new $util.LongBits(message.mark.low >>> 0, message.mark.high >>> 0).toNumber() : message.mark;
                if (message.imgFile != null && message.hasOwnProperty("imgFile"))
                    object.imgFile = message.imgFile;
                if (message.desc != null && message.hasOwnProperty("desc"))
                    object.desc = message.desc;
                if (message.downPayment != null && message.hasOwnProperty("downPayment"))
                    if (typeof message.downPayment === "number")
                        object.downPayment = options.longs === String ? String(message.downPayment) : message.downPayment;
                    else
                        object.downPayment = options.longs === String ? $util.Long.prototype.toString.call(message.downPayment) : options.longs === Number ? new $util.LongBits(message.downPayment.low >>> 0, message.downPayment.high >>> 0).toNumber() : message.downPayment;
                if (message.downPaymentPCT != null && message.hasOwnProperty("downPaymentPCT"))
                    object.downPaymentPCT = options.json && !isFinite(message.downPaymentPCT) ? String(message.downPaymentPCT) : message.downPaymentPCT;
                if (message.interestRatePCT != null && message.hasOwnProperty("interestRatePCT"))
                    object.interestRatePCT = options.json && !isFinite(message.interestRatePCT) ? String(message.interestRatePCT) : message.interestRatePCT;
                if (message.yieldRatePCT != null && message.hasOwnProperty("yieldRatePCT"))
                    object.yieldRatePCT = options.json && !isFinite(message.yieldRatePCT) ? String(message.yieldRatePCT) : message.yieldRatePCT;
                if (message.highPrice != null && message.hasOwnProperty("highPrice"))
                    if (typeof message.highPrice === "number")
                        object.highPrice = options.longs === String ? String(message.highPrice) : message.highPrice;
                    else
                        object.highPrice = options.longs === String ? $util.Long.prototype.toString.call(message.highPrice) : options.longs === Number ? new $util.LongBits(message.highPrice.low >>> 0, message.highPrice.high >>> 0).toNumber() : message.highPrice;
                if (message.lowPrice != null && message.hasOwnProperty("lowPrice"))
                    if (typeof message.lowPrice === "number")
                        object.lowPrice = options.longs === String ? String(message.lowPrice) : message.lowPrice;
                    else
                        object.lowPrice = options.longs === String ? $util.Long.prototype.toString.call(message.lowPrice) : options.longs === Number ? new $util.LongBits(message.lowPrice.low >>> 0, message.lowPrice.high >>> 0).toNumber() : message.lowPrice;
                return object;
            };

            /**
             * Converts this DetailValue to JSON.
             * @function toJSON
             * @memberof pb.common.DetailValue
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DetailValue.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return DetailValue;
        })();

        common.TopCategory = (function() {

            /**
             * Properties of a TopCategory.
             * @memberof pb.common
             * @interface ITopCategory
             * @property {string|null} [category] TopCategory category
             * @property {string|null} [code] TopCategory code
             * @property {Array.<pb.common.IDetailValue>|null} [details] TopCategory details
             */

            /**
             * Constructs a new TopCategory.
             * @memberof pb.common
             * @classdesc Represents a TopCategory.
             * @implements ITopCategory
             * @constructor
             * @param {pb.common.ITopCategory=} [properties] Properties to set
             */
            function TopCategory(properties) {
                this.details = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * TopCategory category.
             * @member {string} category
             * @memberof pb.common.TopCategory
             * @instance
             */
            TopCategory.prototype.category = "";

            /**
             * TopCategory code.
             * @member {string} code
             * @memberof pb.common.TopCategory
             * @instance
             */
            TopCategory.prototype.code = "";

            /**
             * TopCategory details.
             * @member {Array.<pb.common.IDetailValue>} details
             * @memberof pb.common.TopCategory
             * @instance
             */
            TopCategory.prototype.details = $util.emptyArray;

            /**
             * Creates a new TopCategory instance using the specified properties.
             * @function create
             * @memberof pb.common.TopCategory
             * @static
             * @param {pb.common.ITopCategory=} [properties] Properties to set
             * @returns {pb.common.TopCategory} TopCategory instance
             */
            TopCategory.create = function create(properties) {
                return new TopCategory(properties);
            };

            /**
             * Encodes the specified TopCategory message. Does not implicitly {@link pb.common.TopCategory.verify|verify} messages.
             * @function encode
             * @memberof pb.common.TopCategory
             * @static
             * @param {pb.common.ITopCategory} message TopCategory message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TopCategory.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.category != null && message.hasOwnProperty("category"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.category);
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.code);
                if (message.details != null && message.details.length)
                    for (var i = 0; i < message.details.length; ++i)
                        $root.pb.common.DetailValue.encode(message.details[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified TopCategory message, length delimited. Does not implicitly {@link pb.common.TopCategory.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.TopCategory
             * @static
             * @param {pb.common.ITopCategory} message TopCategory message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TopCategory.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TopCategory message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.TopCategory
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.TopCategory} TopCategory
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TopCategory.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.TopCategory();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.category = reader.string();
                        break;
                    case 2:
                        message.code = reader.string();
                        break;
                    case 3:
                        if (!(message.details && message.details.length))
                            message.details = [];
                        message.details.push($root.pb.common.DetailValue.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a TopCategory message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.TopCategory
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.TopCategory} TopCategory
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TopCategory.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TopCategory message.
             * @function verify
             * @memberof pb.common.TopCategory
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TopCategory.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.category != null && message.hasOwnProperty("category"))
                    if (!$util.isString(message.category))
                        return "category: string expected";
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isString(message.code))
                        return "code: string expected";
                if (message.details != null && message.hasOwnProperty("details")) {
                    if (!Array.isArray(message.details))
                        return "details: array expected";
                    for (var i = 0; i < message.details.length; ++i) {
                        var error = $root.pb.common.DetailValue.verify(message.details[i]);
                        if (error)
                            return "details." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a TopCategory message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.TopCategory
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.TopCategory} TopCategory
             */
            TopCategory.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.TopCategory)
                    return object;
                var message = new $root.pb.common.TopCategory();
                if (object.category != null)
                    message.category = String(object.category);
                if (object.code != null)
                    message.code = String(object.code);
                if (object.details) {
                    if (!Array.isArray(object.details))
                        throw TypeError(".pb.common.TopCategory.details: array expected");
                    message.details = [];
                    for (var i = 0; i < object.details.length; ++i) {
                        if (typeof object.details[i] !== "object")
                            throw TypeError(".pb.common.TopCategory.details: object expected");
                        message.details[i] = $root.pb.common.DetailValue.fromObject(object.details[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a TopCategory message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.TopCategory
             * @static
             * @param {pb.common.TopCategory} message TopCategory
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TopCategory.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.details = [];
                if (options.defaults) {
                    object.category = "";
                    object.code = "";
                }
                if (message.category != null && message.hasOwnProperty("category"))
                    object.category = message.category;
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.details && message.details.length) {
                    object.details = [];
                    for (var j = 0; j < message.details.length; ++j)
                        object.details[j] = $root.pb.common.DetailValue.toObject(message.details[j], options);
                }
                return object;
            };

            /**
             * Converts this TopCategory to JSON.
             * @function toJSON
             * @memberof pb.common.TopCategory
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TopCategory.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return TopCategory;
        })();

        common.CashFlowStatement = (function() {

            /**
             * Properties of a CashFlowStatement.
             * @memberof pb.common
             * @interface ICashFlowStatement
             * @property {Long|null} [total] CashFlowStatement total
             * @property {Array.<pb.common.IDetailValue>|null} [details] CashFlowStatement details
             */

            /**
             * Constructs a new CashFlowStatement.
             * @memberof pb.common
             * @classdesc Represents a CashFlowStatement.
             * @implements ICashFlowStatement
             * @constructor
             * @param {pb.common.ICashFlowStatement=} [properties] Properties to set
             */
            function CashFlowStatement(properties) {
                this.details = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CashFlowStatement total.
             * @member {Long} total
             * @memberof pb.common.CashFlowStatement
             * @instance
             */
            CashFlowStatement.prototype.total = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * CashFlowStatement details.
             * @member {Array.<pb.common.IDetailValue>} details
             * @memberof pb.common.CashFlowStatement
             * @instance
             */
            CashFlowStatement.prototype.details = $util.emptyArray;

            /**
             * Creates a new CashFlowStatement instance using the specified properties.
             * @function create
             * @memberof pb.common.CashFlowStatement
             * @static
             * @param {pb.common.ICashFlowStatement=} [properties] Properties to set
             * @returns {pb.common.CashFlowStatement} CashFlowStatement instance
             */
            CashFlowStatement.create = function create(properties) {
                return new CashFlowStatement(properties);
            };

            /**
             * Encodes the specified CashFlowStatement message. Does not implicitly {@link pb.common.CashFlowStatement.verify|verify} messages.
             * @function encode
             * @memberof pb.common.CashFlowStatement
             * @static
             * @param {pb.common.ICashFlowStatement} message CashFlowStatement message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CashFlowStatement.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.total != null && message.hasOwnProperty("total"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.total);
                if (message.details != null && message.details.length)
                    for (var i = 0; i < message.details.length; ++i)
                        $root.pb.common.DetailValue.encode(message.details[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified CashFlowStatement message, length delimited. Does not implicitly {@link pb.common.CashFlowStatement.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.CashFlowStatement
             * @static
             * @param {pb.common.ICashFlowStatement} message CashFlowStatement message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CashFlowStatement.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CashFlowStatement message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.CashFlowStatement
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.CashFlowStatement} CashFlowStatement
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CashFlowStatement.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.CashFlowStatement();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.total = reader.int64();
                        break;
                    case 2:
                        if (!(message.details && message.details.length))
                            message.details = [];
                        message.details.push($root.pb.common.DetailValue.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CashFlowStatement message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.CashFlowStatement
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.CashFlowStatement} CashFlowStatement
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CashFlowStatement.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CashFlowStatement message.
             * @function verify
             * @memberof pb.common.CashFlowStatement
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CashFlowStatement.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.total != null && message.hasOwnProperty("total"))
                    if (!$util.isInteger(message.total) && !(message.total && $util.isInteger(message.total.low) && $util.isInteger(message.total.high)))
                        return "total: integer|Long expected";
                if (message.details != null && message.hasOwnProperty("details")) {
                    if (!Array.isArray(message.details))
                        return "details: array expected";
                    for (var i = 0; i < message.details.length; ++i) {
                        var error = $root.pb.common.DetailValue.verify(message.details[i]);
                        if (error)
                            return "details." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a CashFlowStatement message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.CashFlowStatement
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.CashFlowStatement} CashFlowStatement
             */
            CashFlowStatement.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.CashFlowStatement)
                    return object;
                var message = new $root.pb.common.CashFlowStatement();
                if (object.total != null)
                    if ($util.Long)
                        (message.total = $util.Long.fromValue(object.total)).unsigned = false;
                    else if (typeof object.total === "string")
                        message.total = parseInt(object.total, 10);
                    else if (typeof object.total === "number")
                        message.total = object.total;
                    else if (typeof object.total === "object")
                        message.total = new $util.LongBits(object.total.low >>> 0, object.total.high >>> 0).toNumber();
                if (object.details) {
                    if (!Array.isArray(object.details))
                        throw TypeError(".pb.common.CashFlowStatement.details: array expected");
                    message.details = [];
                    for (var i = 0; i < object.details.length; ++i) {
                        if (typeof object.details[i] !== "object")
                            throw TypeError(".pb.common.CashFlowStatement.details: object expected");
                        message.details[i] = $root.pb.common.DetailValue.fromObject(object.details[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a CashFlowStatement message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.CashFlowStatement
             * @static
             * @param {pb.common.CashFlowStatement} message CashFlowStatement
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CashFlowStatement.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.details = [];
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.total = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.total = options.longs === String ? "0" : 0;
                if (message.total != null && message.hasOwnProperty("total"))
                    if (typeof message.total === "number")
                        object.total = options.longs === String ? String(message.total) : message.total;
                    else
                        object.total = options.longs === String ? $util.Long.prototype.toString.call(message.total) : options.longs === Number ? new $util.LongBits(message.total.low >>> 0, message.total.high >>> 0).toNumber() : message.total;
                if (message.details && message.details.length) {
                    object.details = [];
                    for (var j = 0; j < message.details.length; ++j)
                        object.details[j] = $root.pb.common.DetailValue.toObject(message.details[j], options);
                }
                return object;
            };

            /**
             * Converts this CashFlowStatement to JSON.
             * @function toJSON
             * @memberof pb.common.CashFlowStatement
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CashFlowStatement.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CashFlowStatement;
        })();

        common.AssetLiabilityStatement = (function() {

            /**
             * Properties of an AssetLiabilityStatement.
             * @memberof pb.common
             * @interface IAssetLiabilityStatement
             * @property {Long|null} [assetTotal] AssetLiabilityStatement assetTotal
             * @property {Long|null} [debtsTotal] AssetLiabilityStatement debtsTotal
             * @property {Array.<pb.common.ITopCategory>|null} [assets] AssetLiabilityStatement assets
             * @property {Array.<pb.common.ITopCategory>|null} [debts] AssetLiabilityStatement debts
             */

            /**
             * Constructs a new AssetLiabilityStatement.
             * @memberof pb.common
             * @classdesc Represents an AssetLiabilityStatement.
             * @implements IAssetLiabilityStatement
             * @constructor
             * @param {pb.common.IAssetLiabilityStatement=} [properties] Properties to set
             */
            function AssetLiabilityStatement(properties) {
                this.assets = [];
                this.debts = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AssetLiabilityStatement assetTotal.
             * @member {Long} assetTotal
             * @memberof pb.common.AssetLiabilityStatement
             * @instance
             */
            AssetLiabilityStatement.prototype.assetTotal = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * AssetLiabilityStatement debtsTotal.
             * @member {Long} debtsTotal
             * @memberof pb.common.AssetLiabilityStatement
             * @instance
             */
            AssetLiabilityStatement.prototype.debtsTotal = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * AssetLiabilityStatement assets.
             * @member {Array.<pb.common.ITopCategory>} assets
             * @memberof pb.common.AssetLiabilityStatement
             * @instance
             */
            AssetLiabilityStatement.prototype.assets = $util.emptyArray;

            /**
             * AssetLiabilityStatement debts.
             * @member {Array.<pb.common.ITopCategory>} debts
             * @memberof pb.common.AssetLiabilityStatement
             * @instance
             */
            AssetLiabilityStatement.prototype.debts = $util.emptyArray;

            /**
             * Creates a new AssetLiabilityStatement instance using the specified properties.
             * @function create
             * @memberof pb.common.AssetLiabilityStatement
             * @static
             * @param {pb.common.IAssetLiabilityStatement=} [properties] Properties to set
             * @returns {pb.common.AssetLiabilityStatement} AssetLiabilityStatement instance
             */
            AssetLiabilityStatement.create = function create(properties) {
                return new AssetLiabilityStatement(properties);
            };

            /**
             * Encodes the specified AssetLiabilityStatement message. Does not implicitly {@link pb.common.AssetLiabilityStatement.verify|verify} messages.
             * @function encode
             * @memberof pb.common.AssetLiabilityStatement
             * @static
             * @param {pb.common.IAssetLiabilityStatement} message AssetLiabilityStatement message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AssetLiabilityStatement.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.assetTotal != null && message.hasOwnProperty("assetTotal"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.assetTotal);
                if (message.debtsTotal != null && message.hasOwnProperty("debtsTotal"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.debtsTotal);
                if (message.assets != null && message.assets.length)
                    for (var i = 0; i < message.assets.length; ++i)
                        $root.pb.common.TopCategory.encode(message.assets[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.debts != null && message.debts.length)
                    for (var i = 0; i < message.debts.length; ++i)
                        $root.pb.common.TopCategory.encode(message.debts[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified AssetLiabilityStatement message, length delimited. Does not implicitly {@link pb.common.AssetLiabilityStatement.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.AssetLiabilityStatement
             * @static
             * @param {pb.common.IAssetLiabilityStatement} message AssetLiabilityStatement message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AssetLiabilityStatement.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AssetLiabilityStatement message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.AssetLiabilityStatement
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.AssetLiabilityStatement} AssetLiabilityStatement
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AssetLiabilityStatement.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.AssetLiabilityStatement();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.assetTotal = reader.int64();
                        break;
                    case 2:
                        message.debtsTotal = reader.int64();
                        break;
                    case 3:
                        if (!(message.assets && message.assets.length))
                            message.assets = [];
                        message.assets.push($root.pb.common.TopCategory.decode(reader, reader.uint32()));
                        break;
                    case 4:
                        if (!(message.debts && message.debts.length))
                            message.debts = [];
                        message.debts.push($root.pb.common.TopCategory.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AssetLiabilityStatement message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.AssetLiabilityStatement
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.AssetLiabilityStatement} AssetLiabilityStatement
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AssetLiabilityStatement.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AssetLiabilityStatement message.
             * @function verify
             * @memberof pb.common.AssetLiabilityStatement
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AssetLiabilityStatement.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.assetTotal != null && message.hasOwnProperty("assetTotal"))
                    if (!$util.isInteger(message.assetTotal) && !(message.assetTotal && $util.isInteger(message.assetTotal.low) && $util.isInteger(message.assetTotal.high)))
                        return "assetTotal: integer|Long expected";
                if (message.debtsTotal != null && message.hasOwnProperty("debtsTotal"))
                    if (!$util.isInteger(message.debtsTotal) && !(message.debtsTotal && $util.isInteger(message.debtsTotal.low) && $util.isInteger(message.debtsTotal.high)))
                        return "debtsTotal: integer|Long expected";
                if (message.assets != null && message.hasOwnProperty("assets")) {
                    if (!Array.isArray(message.assets))
                        return "assets: array expected";
                    for (var i = 0; i < message.assets.length; ++i) {
                        var error = $root.pb.common.TopCategory.verify(message.assets[i]);
                        if (error)
                            return "assets." + error;
                    }
                }
                if (message.debts != null && message.hasOwnProperty("debts")) {
                    if (!Array.isArray(message.debts))
                        return "debts: array expected";
                    for (var i = 0; i < message.debts.length; ++i) {
                        var error = $root.pb.common.TopCategory.verify(message.debts[i]);
                        if (error)
                            return "debts." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an AssetLiabilityStatement message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.AssetLiabilityStatement
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.AssetLiabilityStatement} AssetLiabilityStatement
             */
            AssetLiabilityStatement.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.AssetLiabilityStatement)
                    return object;
                var message = new $root.pb.common.AssetLiabilityStatement();
                if (object.assetTotal != null)
                    if ($util.Long)
                        (message.assetTotal = $util.Long.fromValue(object.assetTotal)).unsigned = false;
                    else if (typeof object.assetTotal === "string")
                        message.assetTotal = parseInt(object.assetTotal, 10);
                    else if (typeof object.assetTotal === "number")
                        message.assetTotal = object.assetTotal;
                    else if (typeof object.assetTotal === "object")
                        message.assetTotal = new $util.LongBits(object.assetTotal.low >>> 0, object.assetTotal.high >>> 0).toNumber();
                if (object.debtsTotal != null)
                    if ($util.Long)
                        (message.debtsTotal = $util.Long.fromValue(object.debtsTotal)).unsigned = false;
                    else if (typeof object.debtsTotal === "string")
                        message.debtsTotal = parseInt(object.debtsTotal, 10);
                    else if (typeof object.debtsTotal === "number")
                        message.debtsTotal = object.debtsTotal;
                    else if (typeof object.debtsTotal === "object")
                        message.debtsTotal = new $util.LongBits(object.debtsTotal.low >>> 0, object.debtsTotal.high >>> 0).toNumber();
                if (object.assets) {
                    if (!Array.isArray(object.assets))
                        throw TypeError(".pb.common.AssetLiabilityStatement.assets: array expected");
                    message.assets = [];
                    for (var i = 0; i < object.assets.length; ++i) {
                        if (typeof object.assets[i] !== "object")
                            throw TypeError(".pb.common.AssetLiabilityStatement.assets: object expected");
                        message.assets[i] = $root.pb.common.TopCategory.fromObject(object.assets[i]);
                    }
                }
                if (object.debts) {
                    if (!Array.isArray(object.debts))
                        throw TypeError(".pb.common.AssetLiabilityStatement.debts: array expected");
                    message.debts = [];
                    for (var i = 0; i < object.debts.length; ++i) {
                        if (typeof object.debts[i] !== "object")
                            throw TypeError(".pb.common.AssetLiabilityStatement.debts: object expected");
                        message.debts[i] = $root.pb.common.TopCategory.fromObject(object.debts[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an AssetLiabilityStatement message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.AssetLiabilityStatement
             * @static
             * @param {pb.common.AssetLiabilityStatement} message AssetLiabilityStatement
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AssetLiabilityStatement.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.assets = [];
                    object.debts = [];
                }
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.assetTotal = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.assetTotal = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.debtsTotal = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.debtsTotal = options.longs === String ? "0" : 0;
                }
                if (message.assetTotal != null && message.hasOwnProperty("assetTotal"))
                    if (typeof message.assetTotal === "number")
                        object.assetTotal = options.longs === String ? String(message.assetTotal) : message.assetTotal;
                    else
                        object.assetTotal = options.longs === String ? $util.Long.prototype.toString.call(message.assetTotal) : options.longs === Number ? new $util.LongBits(message.assetTotal.low >>> 0, message.assetTotal.high >>> 0).toNumber() : message.assetTotal;
                if (message.debtsTotal != null && message.hasOwnProperty("debtsTotal"))
                    if (typeof message.debtsTotal === "number")
                        object.debtsTotal = options.longs === String ? String(message.debtsTotal) : message.debtsTotal;
                    else
                        object.debtsTotal = options.longs === String ? $util.Long.prototype.toString.call(message.debtsTotal) : options.longs === Number ? new $util.LongBits(message.debtsTotal.low >>> 0, message.debtsTotal.high >>> 0).toNumber() : message.debtsTotal;
                if (message.assets && message.assets.length) {
                    object.assets = [];
                    for (var j = 0; j < message.assets.length; ++j)
                        object.assets[j] = $root.pb.common.TopCategory.toObject(message.assets[j], options);
                }
                if (message.debts && message.debts.length) {
                    object.debts = [];
                    for (var j = 0; j < message.debts.length; ++j)
                        object.debts[j] = $root.pb.common.TopCategory.toObject(message.debts[j], options);
                }
                return object;
            };

            /**
             * Converts this AssetLiabilityStatement to JSON.
             * @function toJSON
             * @memberof pb.common.AssetLiabilityStatement
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AssetLiabilityStatement.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return AssetLiabilityStatement;
        })();

        common.MonthProfitLossStatement = (function() {

            /**
             * Properties of a MonthProfitLossStatement.
             * @memberof pb.common
             * @interface IMonthProfitLossStatement
             * @property {Long|null} [income] MonthProfitLossStatement income
             * @property {Long|null} [expense] MonthProfitLossStatement expense
             * @property {Long|null} [cashflow] MonthProfitLossStatement cashflow
             * @property {Array.<pb.common.ITopCategory>|null} [incomeTops] MonthProfitLossStatement incomeTops
             * @property {Array.<pb.common.ITopCategory>|null} [expenseTops] MonthProfitLossStatement expenseTops
             * @property {Array.<pb.common.ITopCategory>|null} [cashflowTops] MonthProfitLossStatement cashflowTops
             */

            /**
             * Constructs a new MonthProfitLossStatement.
             * @memberof pb.common
             * @classdesc Represents a MonthProfitLossStatement.
             * @implements IMonthProfitLossStatement
             * @constructor
             * @param {pb.common.IMonthProfitLossStatement=} [properties] Properties to set
             */
            function MonthProfitLossStatement(properties) {
                this.incomeTops = [];
                this.expenseTops = [];
                this.cashflowTops = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MonthProfitLossStatement income.
             * @member {Long} income
             * @memberof pb.common.MonthProfitLossStatement
             * @instance
             */
            MonthProfitLossStatement.prototype.income = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * MonthProfitLossStatement expense.
             * @member {Long} expense
             * @memberof pb.common.MonthProfitLossStatement
             * @instance
             */
            MonthProfitLossStatement.prototype.expense = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * MonthProfitLossStatement cashflow.
             * @member {Long} cashflow
             * @memberof pb.common.MonthProfitLossStatement
             * @instance
             */
            MonthProfitLossStatement.prototype.cashflow = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * MonthProfitLossStatement incomeTops.
             * @member {Array.<pb.common.ITopCategory>} incomeTops
             * @memberof pb.common.MonthProfitLossStatement
             * @instance
             */
            MonthProfitLossStatement.prototype.incomeTops = $util.emptyArray;

            /**
             * MonthProfitLossStatement expenseTops.
             * @member {Array.<pb.common.ITopCategory>} expenseTops
             * @memberof pb.common.MonthProfitLossStatement
             * @instance
             */
            MonthProfitLossStatement.prototype.expenseTops = $util.emptyArray;

            /**
             * MonthProfitLossStatement cashflowTops.
             * @member {Array.<pb.common.ITopCategory>} cashflowTops
             * @memberof pb.common.MonthProfitLossStatement
             * @instance
             */
            MonthProfitLossStatement.prototype.cashflowTops = $util.emptyArray;

            /**
             * Creates a new MonthProfitLossStatement instance using the specified properties.
             * @function create
             * @memberof pb.common.MonthProfitLossStatement
             * @static
             * @param {pb.common.IMonthProfitLossStatement=} [properties] Properties to set
             * @returns {pb.common.MonthProfitLossStatement} MonthProfitLossStatement instance
             */
            MonthProfitLossStatement.create = function create(properties) {
                return new MonthProfitLossStatement(properties);
            };

            /**
             * Encodes the specified MonthProfitLossStatement message. Does not implicitly {@link pb.common.MonthProfitLossStatement.verify|verify} messages.
             * @function encode
             * @memberof pb.common.MonthProfitLossStatement
             * @static
             * @param {pb.common.IMonthProfitLossStatement} message MonthProfitLossStatement message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MonthProfitLossStatement.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.income != null && message.hasOwnProperty("income"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.income);
                if (message.expense != null && message.hasOwnProperty("expense"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.expense);
                if (message.cashflow != null && message.hasOwnProperty("cashflow"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.cashflow);
                if (message.incomeTops != null && message.incomeTops.length)
                    for (var i = 0; i < message.incomeTops.length; ++i)
                        $root.pb.common.TopCategory.encode(message.incomeTops[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.expenseTops != null && message.expenseTops.length)
                    for (var i = 0; i < message.expenseTops.length; ++i)
                        $root.pb.common.TopCategory.encode(message.expenseTops[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.cashflowTops != null && message.cashflowTops.length)
                    for (var i = 0; i < message.cashflowTops.length; ++i)
                        $root.pb.common.TopCategory.encode(message.cashflowTops[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified MonthProfitLossStatement message, length delimited. Does not implicitly {@link pb.common.MonthProfitLossStatement.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.MonthProfitLossStatement
             * @static
             * @param {pb.common.IMonthProfitLossStatement} message MonthProfitLossStatement message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MonthProfitLossStatement.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MonthProfitLossStatement message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.MonthProfitLossStatement
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.MonthProfitLossStatement} MonthProfitLossStatement
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MonthProfitLossStatement.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.MonthProfitLossStatement();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.income = reader.int64();
                        break;
                    case 2:
                        message.expense = reader.int64();
                        break;
                    case 3:
                        message.cashflow = reader.int64();
                        break;
                    case 4:
                        if (!(message.incomeTops && message.incomeTops.length))
                            message.incomeTops = [];
                        message.incomeTops.push($root.pb.common.TopCategory.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        if (!(message.expenseTops && message.expenseTops.length))
                            message.expenseTops = [];
                        message.expenseTops.push($root.pb.common.TopCategory.decode(reader, reader.uint32()));
                        break;
                    case 6:
                        if (!(message.cashflowTops && message.cashflowTops.length))
                            message.cashflowTops = [];
                        message.cashflowTops.push($root.pb.common.TopCategory.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MonthProfitLossStatement message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.MonthProfitLossStatement
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.MonthProfitLossStatement} MonthProfitLossStatement
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MonthProfitLossStatement.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MonthProfitLossStatement message.
             * @function verify
             * @memberof pb.common.MonthProfitLossStatement
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MonthProfitLossStatement.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.income != null && message.hasOwnProperty("income"))
                    if (!$util.isInteger(message.income) && !(message.income && $util.isInteger(message.income.low) && $util.isInteger(message.income.high)))
                        return "income: integer|Long expected";
                if (message.expense != null && message.hasOwnProperty("expense"))
                    if (!$util.isInteger(message.expense) && !(message.expense && $util.isInteger(message.expense.low) && $util.isInteger(message.expense.high)))
                        return "expense: integer|Long expected";
                if (message.cashflow != null && message.hasOwnProperty("cashflow"))
                    if (!$util.isInteger(message.cashflow) && !(message.cashflow && $util.isInteger(message.cashflow.low) && $util.isInteger(message.cashflow.high)))
                        return "cashflow: integer|Long expected";
                if (message.incomeTops != null && message.hasOwnProperty("incomeTops")) {
                    if (!Array.isArray(message.incomeTops))
                        return "incomeTops: array expected";
                    for (var i = 0; i < message.incomeTops.length; ++i) {
                        var error = $root.pb.common.TopCategory.verify(message.incomeTops[i]);
                        if (error)
                            return "incomeTops." + error;
                    }
                }
                if (message.expenseTops != null && message.hasOwnProperty("expenseTops")) {
                    if (!Array.isArray(message.expenseTops))
                        return "expenseTops: array expected";
                    for (var i = 0; i < message.expenseTops.length; ++i) {
                        var error = $root.pb.common.TopCategory.verify(message.expenseTops[i]);
                        if (error)
                            return "expenseTops." + error;
                    }
                }
                if (message.cashflowTops != null && message.hasOwnProperty("cashflowTops")) {
                    if (!Array.isArray(message.cashflowTops))
                        return "cashflowTops: array expected";
                    for (var i = 0; i < message.cashflowTops.length; ++i) {
                        var error = $root.pb.common.TopCategory.verify(message.cashflowTops[i]);
                        if (error)
                            return "cashflowTops." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a MonthProfitLossStatement message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.MonthProfitLossStatement
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.MonthProfitLossStatement} MonthProfitLossStatement
             */
            MonthProfitLossStatement.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.MonthProfitLossStatement)
                    return object;
                var message = new $root.pb.common.MonthProfitLossStatement();
                if (object.income != null)
                    if ($util.Long)
                        (message.income = $util.Long.fromValue(object.income)).unsigned = false;
                    else if (typeof object.income === "string")
                        message.income = parseInt(object.income, 10);
                    else if (typeof object.income === "number")
                        message.income = object.income;
                    else if (typeof object.income === "object")
                        message.income = new $util.LongBits(object.income.low >>> 0, object.income.high >>> 0).toNumber();
                if (object.expense != null)
                    if ($util.Long)
                        (message.expense = $util.Long.fromValue(object.expense)).unsigned = false;
                    else if (typeof object.expense === "string")
                        message.expense = parseInt(object.expense, 10);
                    else if (typeof object.expense === "number")
                        message.expense = object.expense;
                    else if (typeof object.expense === "object")
                        message.expense = new $util.LongBits(object.expense.low >>> 0, object.expense.high >>> 0).toNumber();
                if (object.cashflow != null)
                    if ($util.Long)
                        (message.cashflow = $util.Long.fromValue(object.cashflow)).unsigned = false;
                    else if (typeof object.cashflow === "string")
                        message.cashflow = parseInt(object.cashflow, 10);
                    else if (typeof object.cashflow === "number")
                        message.cashflow = object.cashflow;
                    else if (typeof object.cashflow === "object")
                        message.cashflow = new $util.LongBits(object.cashflow.low >>> 0, object.cashflow.high >>> 0).toNumber();
                if (object.incomeTops) {
                    if (!Array.isArray(object.incomeTops))
                        throw TypeError(".pb.common.MonthProfitLossStatement.incomeTops: array expected");
                    message.incomeTops = [];
                    for (var i = 0; i < object.incomeTops.length; ++i) {
                        if (typeof object.incomeTops[i] !== "object")
                            throw TypeError(".pb.common.MonthProfitLossStatement.incomeTops: object expected");
                        message.incomeTops[i] = $root.pb.common.TopCategory.fromObject(object.incomeTops[i]);
                    }
                }
                if (object.expenseTops) {
                    if (!Array.isArray(object.expenseTops))
                        throw TypeError(".pb.common.MonthProfitLossStatement.expenseTops: array expected");
                    message.expenseTops = [];
                    for (var i = 0; i < object.expenseTops.length; ++i) {
                        if (typeof object.expenseTops[i] !== "object")
                            throw TypeError(".pb.common.MonthProfitLossStatement.expenseTops: object expected");
                        message.expenseTops[i] = $root.pb.common.TopCategory.fromObject(object.expenseTops[i]);
                    }
                }
                if (object.cashflowTops) {
                    if (!Array.isArray(object.cashflowTops))
                        throw TypeError(".pb.common.MonthProfitLossStatement.cashflowTops: array expected");
                    message.cashflowTops = [];
                    for (var i = 0; i < object.cashflowTops.length; ++i) {
                        if (typeof object.cashflowTops[i] !== "object")
                            throw TypeError(".pb.common.MonthProfitLossStatement.cashflowTops: object expected");
                        message.cashflowTops[i] = $root.pb.common.TopCategory.fromObject(object.cashflowTops[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a MonthProfitLossStatement message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.MonthProfitLossStatement
             * @static
             * @param {pb.common.MonthProfitLossStatement} message MonthProfitLossStatement
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MonthProfitLossStatement.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.incomeTops = [];
                    object.expenseTops = [];
                    object.cashflowTops = [];
                }
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.income = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.income = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.expense = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.expense = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.cashflow = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.cashflow = options.longs === String ? "0" : 0;
                }
                if (message.income != null && message.hasOwnProperty("income"))
                    if (typeof message.income === "number")
                        object.income = options.longs === String ? String(message.income) : message.income;
                    else
                        object.income = options.longs === String ? $util.Long.prototype.toString.call(message.income) : options.longs === Number ? new $util.LongBits(message.income.low >>> 0, message.income.high >>> 0).toNumber() : message.income;
                if (message.expense != null && message.hasOwnProperty("expense"))
                    if (typeof message.expense === "number")
                        object.expense = options.longs === String ? String(message.expense) : message.expense;
                    else
                        object.expense = options.longs === String ? $util.Long.prototype.toString.call(message.expense) : options.longs === Number ? new $util.LongBits(message.expense.low >>> 0, message.expense.high >>> 0).toNumber() : message.expense;
                if (message.cashflow != null && message.hasOwnProperty("cashflow"))
                    if (typeof message.cashflow === "number")
                        object.cashflow = options.longs === String ? String(message.cashflow) : message.cashflow;
                    else
                        object.cashflow = options.longs === String ? $util.Long.prototype.toString.call(message.cashflow) : options.longs === Number ? new $util.LongBits(message.cashflow.low >>> 0, message.cashflow.high >>> 0).toNumber() : message.cashflow;
                if (message.incomeTops && message.incomeTops.length) {
                    object.incomeTops = [];
                    for (var j = 0; j < message.incomeTops.length; ++j)
                        object.incomeTops[j] = $root.pb.common.TopCategory.toObject(message.incomeTops[j], options);
                }
                if (message.expenseTops && message.expenseTops.length) {
                    object.expenseTops = [];
                    for (var j = 0; j < message.expenseTops.length; ++j)
                        object.expenseTops[j] = $root.pb.common.TopCategory.toObject(message.expenseTops[j], options);
                }
                if (message.cashflowTops && message.cashflowTops.length) {
                    object.cashflowTops = [];
                    for (var j = 0; j < message.cashflowTops.length; ++j)
                        object.cashflowTops[j] = $root.pb.common.TopCategory.toObject(message.cashflowTops[j], options);
                }
                return object;
            };

            /**
             * Converts this MonthProfitLossStatement to JSON.
             * @function toJSON
             * @memberof pb.common.MonthProfitLossStatement
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MonthProfitLossStatement.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MonthProfitLossStatement;
        })();

        common.AssetStatement = (function() {

            /**
             * Properties of an AssetStatement.
             * @memberof pb.common
             * @interface IAssetStatement
             * @property {number|null} [degree] AssetStatement degree
             * @property {pb.common.ICashFlowStatement|null} [cashFlow] AssetStatement cashFlow
             * @property {pb.common.IAssetLiabilityStatement|null} [assetLiability] AssetStatement assetLiability
             * @property {pb.common.IMonthProfitLossStatement|null} [monthProfitLoss] AssetStatement monthProfitLoss
             */

            /**
             * Constructs a new AssetStatement.
             * @memberof pb.common
             * @classdesc Represents an AssetStatement.
             * @implements IAssetStatement
             * @constructor
             * @param {pb.common.IAssetStatement=} [properties] Properties to set
             */
            function AssetStatement(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AssetStatement degree.
             * @member {number} degree
             * @memberof pb.common.AssetStatement
             * @instance
             */
            AssetStatement.prototype.degree = 0;

            /**
             * AssetStatement cashFlow.
             * @member {pb.common.ICashFlowStatement|null|undefined} cashFlow
             * @memberof pb.common.AssetStatement
             * @instance
             */
            AssetStatement.prototype.cashFlow = null;

            /**
             * AssetStatement assetLiability.
             * @member {pb.common.IAssetLiabilityStatement|null|undefined} assetLiability
             * @memberof pb.common.AssetStatement
             * @instance
             */
            AssetStatement.prototype.assetLiability = null;

            /**
             * AssetStatement monthProfitLoss.
             * @member {pb.common.IMonthProfitLossStatement|null|undefined} monthProfitLoss
             * @memberof pb.common.AssetStatement
             * @instance
             */
            AssetStatement.prototype.monthProfitLoss = null;

            /**
             * Creates a new AssetStatement instance using the specified properties.
             * @function create
             * @memberof pb.common.AssetStatement
             * @static
             * @param {pb.common.IAssetStatement=} [properties] Properties to set
             * @returns {pb.common.AssetStatement} AssetStatement instance
             */
            AssetStatement.create = function create(properties) {
                return new AssetStatement(properties);
            };

            /**
             * Encodes the specified AssetStatement message. Does not implicitly {@link pb.common.AssetStatement.verify|verify} messages.
             * @function encode
             * @memberof pb.common.AssetStatement
             * @static
             * @param {pb.common.IAssetStatement} message AssetStatement message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AssetStatement.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.degree != null && message.hasOwnProperty("degree"))
                    writer.uint32(/* id 1, wireType 5 =*/13).float(message.degree);
                if (message.cashFlow != null && message.hasOwnProperty("cashFlow"))
                    $root.pb.common.CashFlowStatement.encode(message.cashFlow, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.assetLiability != null && message.hasOwnProperty("assetLiability"))
                    $root.pb.common.AssetLiabilityStatement.encode(message.assetLiability, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.monthProfitLoss != null && message.hasOwnProperty("monthProfitLoss"))
                    $root.pb.common.MonthProfitLossStatement.encode(message.monthProfitLoss, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified AssetStatement message, length delimited. Does not implicitly {@link pb.common.AssetStatement.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.AssetStatement
             * @static
             * @param {pb.common.IAssetStatement} message AssetStatement message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AssetStatement.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AssetStatement message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.AssetStatement
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.AssetStatement} AssetStatement
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AssetStatement.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.AssetStatement();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.degree = reader.float();
                        break;
                    case 2:
                        message.cashFlow = $root.pb.common.CashFlowStatement.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.assetLiability = $root.pb.common.AssetLiabilityStatement.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.monthProfitLoss = $root.pb.common.MonthProfitLossStatement.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AssetStatement message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.AssetStatement
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.AssetStatement} AssetStatement
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AssetStatement.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AssetStatement message.
             * @function verify
             * @memberof pb.common.AssetStatement
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AssetStatement.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.degree != null && message.hasOwnProperty("degree"))
                    if (typeof message.degree !== "number")
                        return "degree: number expected";
                if (message.cashFlow != null && message.hasOwnProperty("cashFlow")) {
                    var error = $root.pb.common.CashFlowStatement.verify(message.cashFlow);
                    if (error)
                        return "cashFlow." + error;
                }
                if (message.assetLiability != null && message.hasOwnProperty("assetLiability")) {
                    var error = $root.pb.common.AssetLiabilityStatement.verify(message.assetLiability);
                    if (error)
                        return "assetLiability." + error;
                }
                if (message.monthProfitLoss != null && message.hasOwnProperty("monthProfitLoss")) {
                    var error = $root.pb.common.MonthProfitLossStatement.verify(message.monthProfitLoss);
                    if (error)
                        return "monthProfitLoss." + error;
                }
                return null;
            };

            /**
             * Creates an AssetStatement message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.AssetStatement
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.AssetStatement} AssetStatement
             */
            AssetStatement.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.AssetStatement)
                    return object;
                var message = new $root.pb.common.AssetStatement();
                if (object.degree != null)
                    message.degree = Number(object.degree);
                if (object.cashFlow != null) {
                    if (typeof object.cashFlow !== "object")
                        throw TypeError(".pb.common.AssetStatement.cashFlow: object expected");
                    message.cashFlow = $root.pb.common.CashFlowStatement.fromObject(object.cashFlow);
                }
                if (object.assetLiability != null) {
                    if (typeof object.assetLiability !== "object")
                        throw TypeError(".pb.common.AssetStatement.assetLiability: object expected");
                    message.assetLiability = $root.pb.common.AssetLiabilityStatement.fromObject(object.assetLiability);
                }
                if (object.monthProfitLoss != null) {
                    if (typeof object.monthProfitLoss !== "object")
                        throw TypeError(".pb.common.AssetStatement.monthProfitLoss: object expected");
                    message.monthProfitLoss = $root.pb.common.MonthProfitLossStatement.fromObject(object.monthProfitLoss);
                }
                return message;
            };

            /**
             * Creates a plain object from an AssetStatement message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.AssetStatement
             * @static
             * @param {pb.common.AssetStatement} message AssetStatement
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AssetStatement.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.degree = 0;
                    object.cashFlow = null;
                    object.assetLiability = null;
                    object.monthProfitLoss = null;
                }
                if (message.degree != null && message.hasOwnProperty("degree"))
                    object.degree = options.json && !isFinite(message.degree) ? String(message.degree) : message.degree;
                if (message.cashFlow != null && message.hasOwnProperty("cashFlow"))
                    object.cashFlow = $root.pb.common.CashFlowStatement.toObject(message.cashFlow, options);
                if (message.assetLiability != null && message.hasOwnProperty("assetLiability"))
                    object.assetLiability = $root.pb.common.AssetLiabilityStatement.toObject(message.assetLiability, options);
                if (message.monthProfitLoss != null && message.hasOwnProperty("monthProfitLoss"))
                    object.monthProfitLoss = $root.pb.common.MonthProfitLossStatement.toObject(message.monthProfitLoss, options);
                return object;
            };

            /**
             * Converts this AssetStatement to JSON.
             * @function toJSON
             * @memberof pb.common.AssetStatement
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AssetStatement.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return AssetStatement;
        })();

        /**
         * SceneType enum.
         * @name pb.common.SceneType
         * @enum {string}
         * @property {number} ST_PB_PLACEHOLDER=0 ST_PB_PLACEHOLDER value
         * @property {number} CHOOSE_ROLE=999 CHOOSE_ROLE value
         * @property {number} ROLLING=1000 ROLLING value
         * @property {number} CHANCE=1001 CHANCE value
         * @property {number} CHANCE_CHOOSED=1002 CHANCE_CHOOSED value
         * @property {number} ASSET_BOUGHT=1003 ASSET_BOUGHT value
         * @property {number} AUCTION_STARTED=1004 AUCTION_STARTED value
         * @property {number} AUCTION_IGNORED=1005 AUCTION_IGNORED value
         * @property {number} AUCTION_JOINED=1006 AUCTION_JOINED value
         * @property {number} AUCTION_COMPLETED=1007 AUCTION_COMPLETED value
         * @property {number} ACCIDENT_CONSUME=1011 ACCIDENT_CONSUME value
         * @property {number} MARKET_TREND=1021 MARKET_TREND value
         * @property {number} CHILD_BORN=1031 CHILD_BORN value
         * @property {number} CHILD_BORN_REDPACKET_RECEIVED=1032 CHILD_BORN_REDPACKET_RECEIVED value
         * @property {number} CHILD_BORN_IGNORED=1033 CHILD_BORN_IGNORED value
         * @property {number} CHARITY=1040 CHARITY value
         * @property {number} UNEMPLOYMENT=1050 UNEMPLOYMENT value
         * @property {number} WAGE_HIKE=1060 WAGE_HIKE value
         * @property {number} PAYDAY=1070 PAYDAY value
         */
        common.SceneType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "ST_PB_PLACEHOLDER"] = 0;
            values[valuesById[999] = "CHOOSE_ROLE"] = 999;
            values[valuesById[1000] = "ROLLING"] = 1000;
            values[valuesById[1001] = "CHANCE"] = 1001;
            values[valuesById[1002] = "CHANCE_CHOOSED"] = 1002;
            values[valuesById[1003] = "ASSET_BOUGHT"] = 1003;
            values[valuesById[1004] = "AUCTION_STARTED"] = 1004;
            values[valuesById[1005] = "AUCTION_IGNORED"] = 1005;
            values[valuesById[1006] = "AUCTION_JOINED"] = 1006;
            values[valuesById[1007] = "AUCTION_COMPLETED"] = 1007;
            values[valuesById[1011] = "ACCIDENT_CONSUME"] = 1011;
            values[valuesById[1021] = "MARKET_TREND"] = 1021;
            values[valuesById[1031] = "CHILD_BORN"] = 1031;
            values[valuesById[1032] = "CHILD_BORN_REDPACKET_RECEIVED"] = 1032;
            values[valuesById[1033] = "CHILD_BORN_IGNORED"] = 1033;
            values[valuesById[1040] = "CHARITY"] = 1040;
            values[valuesById[1050] = "UNEMPLOYMENT"] = 1050;
            values[valuesById[1060] = "WAGE_HIKE"] = 1060;
            values[valuesById[1070] = "PAYDAY"] = 1070;
            return values;
        })();

        /**
         * ErrorCode enum.
         * @name pb.common.ErrorCode
         * @enum {string}
         * @property {number} SUCC=0 SUCC value
         * @property {number} NOT_AUTH=1 NOT_AUTH value
         * @property {number} FAILED=3 FAILED value
         * @property {number} NO_GAME=4 NO_GAME value
         * @property {number} INTERNAL_EXCEPTION=10 INTERNAL_EXCEPTION value
         * @property {number} CONN_REFUSED=11 CONN_REFUSED value
         * @property {number} UNDER_MAINTENANCE=12 UNDER_MAINTENANCE value
         * @property {number} INVALID_ARGUMENT=13 INVALID_ARGUMENT value
         * @property {number} NOT_FOUND=14 NOT_FOUND value
         * @property {number} INSUFFICIENT_TRAINING_GAME=101 INSUFFICIENT_TRAINING_GAME value
         * @property {number} ROOM_FULL=1000 ROOM_FULL value
         */
        common.ErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "SUCC"] = 0;
            values[valuesById[1] = "NOT_AUTH"] = 1;
            values[valuesById[3] = "FAILED"] = 3;
            values[valuesById[4] = "NO_GAME"] = 4;
            values[valuesById[10] = "INTERNAL_EXCEPTION"] = 10;
            values[valuesById[11] = "CONN_REFUSED"] = 11;
            values[valuesById[12] = "UNDER_MAINTENANCE"] = 12;
            values[valuesById[13] = "INVALID_ARGUMENT"] = 13;
            values[valuesById[14] = "NOT_FOUND"] = 14;
            values[valuesById[101] = "INSUFFICIENT_TRAINING_GAME"] = 101;
            values[valuesById[1000] = "ROOM_FULL"] = 1000;
            return values;
        })();

        common.GameLoginReq = (function() {

            /**
             * Properties of a GameLoginReq.
             * @memberof pb.common
             * @interface IGameLoginReq
             * @property {pb.common.IAssetBaseReq|null} [req] GameLoginReq req
             * @property {string|null} [token] GameLoginReq token
             */

            /**
             * Constructs a new GameLoginReq.
             * @memberof pb.common
             * @classdesc Represents a GameLoginReq.
             * @implements IGameLoginReq
             * @constructor
             * @param {pb.common.IGameLoginReq=} [properties] Properties to set
             */
            function GameLoginReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GameLoginReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.GameLoginReq
             * @instance
             */
            GameLoginReq.prototype.req = null;

            /**
             * GameLoginReq token.
             * @member {string} token
             * @memberof pb.common.GameLoginReq
             * @instance
             */
            GameLoginReq.prototype.token = "";

            /**
             * Creates a new GameLoginReq instance using the specified properties.
             * @function create
             * @memberof pb.common.GameLoginReq
             * @static
             * @param {pb.common.IGameLoginReq=} [properties] Properties to set
             * @returns {pb.common.GameLoginReq} GameLoginReq instance
             */
            GameLoginReq.create = function create(properties) {
                return new GameLoginReq(properties);
            };

            /**
             * Encodes the specified GameLoginReq message. Does not implicitly {@link pb.common.GameLoginReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GameLoginReq
             * @static
             * @param {pb.common.IGameLoginReq} message GameLoginReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameLoginReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.token != null && message.hasOwnProperty("token"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.token);
                return writer;
            };

            /**
             * Encodes the specified GameLoginReq message, length delimited. Does not implicitly {@link pb.common.GameLoginReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GameLoginReq
             * @static
             * @param {pb.common.IGameLoginReq} message GameLoginReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameLoginReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GameLoginReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GameLoginReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GameLoginReq} GameLoginReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameLoginReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GameLoginReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.token = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GameLoginReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GameLoginReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GameLoginReq} GameLoginReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameLoginReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GameLoginReq message.
             * @function verify
             * @memberof pb.common.GameLoginReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GameLoginReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                if (message.token != null && message.hasOwnProperty("token"))
                    if (!$util.isString(message.token))
                        return "token: string expected";
                return null;
            };

            /**
             * Creates a GameLoginReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GameLoginReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GameLoginReq} GameLoginReq
             */
            GameLoginReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GameLoginReq)
                    return object;
                var message = new $root.pb.common.GameLoginReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.GameLoginReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                if (object.token != null)
                    message.token = String(object.token);
                return message;
            };

            /**
             * Creates a plain object from a GameLoginReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GameLoginReq
             * @static
             * @param {pb.common.GameLoginReq} message GameLoginReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GameLoginReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.req = null;
                    object.token = "";
                }
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                if (message.token != null && message.hasOwnProperty("token"))
                    object.token = message.token;
                return object;
            };

            /**
             * Converts this GameLoginReq to JSON.
             * @function toJSON
             * @memberof pb.common.GameLoginReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GameLoginReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GameLoginReq;
        })();

        common.GameLoginRsp = (function() {

            /**
             * Properties of a GameLoginRsp.
             * @memberof pb.common
             * @interface IGameLoginRsp
             * @property {pb.common.IBaseRsp|null} [rsp] GameLoginRsp rsp
             */

            /**
             * Constructs a new GameLoginRsp.
             * @memberof pb.common
             * @classdesc Represents a GameLoginRsp.
             * @implements IGameLoginRsp
             * @constructor
             * @param {pb.common.IGameLoginRsp=} [properties] Properties to set
             */
            function GameLoginRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GameLoginRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.GameLoginRsp
             * @instance
             */
            GameLoginRsp.prototype.rsp = null;

            /**
             * Creates a new GameLoginRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.GameLoginRsp
             * @static
             * @param {pb.common.IGameLoginRsp=} [properties] Properties to set
             * @returns {pb.common.GameLoginRsp} GameLoginRsp instance
             */
            GameLoginRsp.create = function create(properties) {
                return new GameLoginRsp(properties);
            };

            /**
             * Encodes the specified GameLoginRsp message. Does not implicitly {@link pb.common.GameLoginRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GameLoginRsp
             * @static
             * @param {pb.common.IGameLoginRsp} message GameLoginRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameLoginRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GameLoginRsp message, length delimited. Does not implicitly {@link pb.common.GameLoginRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GameLoginRsp
             * @static
             * @param {pb.common.IGameLoginRsp} message GameLoginRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameLoginRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GameLoginRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GameLoginRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GameLoginRsp} GameLoginRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameLoginRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GameLoginRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GameLoginRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GameLoginRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GameLoginRsp} GameLoginRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameLoginRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GameLoginRsp message.
             * @function verify
             * @memberof pb.common.GameLoginRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GameLoginRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                return null;
            };

            /**
             * Creates a GameLoginRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GameLoginRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GameLoginRsp} GameLoginRsp
             */
            GameLoginRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GameLoginRsp)
                    return object;
                var message = new $root.pb.common.GameLoginRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.GameLoginRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from a GameLoginRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GameLoginRsp
             * @static
             * @param {pb.common.GameLoginRsp} message GameLoginRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GameLoginRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                return object;
            };

            /**
             * Converts this GameLoginRsp to JSON.
             * @function toJSON
             * @memberof pb.common.GameLoginRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GameLoginRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GameLoginRsp;
        })();

        common.GameQuitReq = (function() {

            /**
             * Properties of a GameQuitReq.
             * @memberof pb.common
             * @interface IGameQuitReq
             * @property {pb.common.IAssetBaseReq|null} [req] GameQuitReq req
             */

            /**
             * Constructs a new GameQuitReq.
             * @memberof pb.common
             * @classdesc Represents a GameQuitReq.
             * @implements IGameQuitReq
             * @constructor
             * @param {pb.common.IGameQuitReq=} [properties] Properties to set
             */
            function GameQuitReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GameQuitReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.GameQuitReq
             * @instance
             */
            GameQuitReq.prototype.req = null;

            /**
             * Creates a new GameQuitReq instance using the specified properties.
             * @function create
             * @memberof pb.common.GameQuitReq
             * @static
             * @param {pb.common.IGameQuitReq=} [properties] Properties to set
             * @returns {pb.common.GameQuitReq} GameQuitReq instance
             */
            GameQuitReq.create = function create(properties) {
                return new GameQuitReq(properties);
            };

            /**
             * Encodes the specified GameQuitReq message. Does not implicitly {@link pb.common.GameQuitReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GameQuitReq
             * @static
             * @param {pb.common.IGameQuitReq} message GameQuitReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameQuitReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GameQuitReq message, length delimited. Does not implicitly {@link pb.common.GameQuitReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GameQuitReq
             * @static
             * @param {pb.common.IGameQuitReq} message GameQuitReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameQuitReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GameQuitReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GameQuitReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GameQuitReq} GameQuitReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameQuitReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GameQuitReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GameQuitReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GameQuitReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GameQuitReq} GameQuitReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameQuitReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GameQuitReq message.
             * @function verify
             * @memberof pb.common.GameQuitReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GameQuitReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                return null;
            };

            /**
             * Creates a GameQuitReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GameQuitReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GameQuitReq} GameQuitReq
             */
            GameQuitReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GameQuitReq)
                    return object;
                var message = new $root.pb.common.GameQuitReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.GameQuitReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                return message;
            };

            /**
             * Creates a plain object from a GameQuitReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GameQuitReq
             * @static
             * @param {pb.common.GameQuitReq} message GameQuitReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GameQuitReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.req = null;
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                return object;
            };

            /**
             * Converts this GameQuitReq to JSON.
             * @function toJSON
             * @memberof pb.common.GameQuitReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GameQuitReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GameQuitReq;
        })();

        common.GameQuitRsp = (function() {

            /**
             * Properties of a GameQuitRsp.
             * @memberof pb.common
             * @interface IGameQuitRsp
             * @property {pb.common.IBaseRsp|null} [rsp] GameQuitRsp rsp
             */

            /**
             * Constructs a new GameQuitRsp.
             * @memberof pb.common
             * @classdesc Represents a GameQuitRsp.
             * @implements IGameQuitRsp
             * @constructor
             * @param {pb.common.IGameQuitRsp=} [properties] Properties to set
             */
            function GameQuitRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GameQuitRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.GameQuitRsp
             * @instance
             */
            GameQuitRsp.prototype.rsp = null;

            /**
             * Creates a new GameQuitRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.GameQuitRsp
             * @static
             * @param {pb.common.IGameQuitRsp=} [properties] Properties to set
             * @returns {pb.common.GameQuitRsp} GameQuitRsp instance
             */
            GameQuitRsp.create = function create(properties) {
                return new GameQuitRsp(properties);
            };

            /**
             * Encodes the specified GameQuitRsp message. Does not implicitly {@link pb.common.GameQuitRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GameQuitRsp
             * @static
             * @param {pb.common.IGameQuitRsp} message GameQuitRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameQuitRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GameQuitRsp message, length delimited. Does not implicitly {@link pb.common.GameQuitRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GameQuitRsp
             * @static
             * @param {pb.common.IGameQuitRsp} message GameQuitRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameQuitRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GameQuitRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GameQuitRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GameQuitRsp} GameQuitRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameQuitRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GameQuitRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GameQuitRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GameQuitRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GameQuitRsp} GameQuitRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameQuitRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GameQuitRsp message.
             * @function verify
             * @memberof pb.common.GameQuitRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GameQuitRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                return null;
            };

            /**
             * Creates a GameQuitRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GameQuitRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GameQuitRsp} GameQuitRsp
             */
            GameQuitRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GameQuitRsp)
                    return object;
                var message = new $root.pb.common.GameQuitRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.GameQuitRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from a GameQuitRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GameQuitRsp
             * @static
             * @param {pb.common.GameQuitRsp} message GameQuitRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GameQuitRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                return object;
            };

            /**
             * Converts this GameQuitRsp to JSON.
             * @function toJSON
             * @memberof pb.common.GameQuitRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GameQuitRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GameQuitRsp;
        })();

        common.PlayerQuitGameMsg = (function() {

            /**
             * Properties of a PlayerQuitGameMsg.
             * @memberof pb.common
             * @interface IPlayerQuitGameMsg
             * @property {Long|null} [userID] PlayerQuitGameMsg userID
             * @property {Long|null} [gameID] PlayerQuitGameMsg gameID
             */

            /**
             * Constructs a new PlayerQuitGameMsg.
             * @memberof pb.common
             * @classdesc Represents a PlayerQuitGameMsg.
             * @implements IPlayerQuitGameMsg
             * @constructor
             * @param {pb.common.IPlayerQuitGameMsg=} [properties] Properties to set
             */
            function PlayerQuitGameMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PlayerQuitGameMsg userID.
             * @member {Long} userID
             * @memberof pb.common.PlayerQuitGameMsg
             * @instance
             */
            PlayerQuitGameMsg.prototype.userID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * PlayerQuitGameMsg gameID.
             * @member {Long} gameID
             * @memberof pb.common.PlayerQuitGameMsg
             * @instance
             */
            PlayerQuitGameMsg.prototype.gameID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new PlayerQuitGameMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.PlayerQuitGameMsg
             * @static
             * @param {pb.common.IPlayerQuitGameMsg=} [properties] Properties to set
             * @returns {pb.common.PlayerQuitGameMsg} PlayerQuitGameMsg instance
             */
            PlayerQuitGameMsg.create = function create(properties) {
                return new PlayerQuitGameMsg(properties);
            };

            /**
             * Encodes the specified PlayerQuitGameMsg message. Does not implicitly {@link pb.common.PlayerQuitGameMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.PlayerQuitGameMsg
             * @static
             * @param {pb.common.IPlayerQuitGameMsg} message PlayerQuitGameMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerQuitGameMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userID != null && message.hasOwnProperty("userID"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userID);
                if (message.gameID != null && message.hasOwnProperty("gameID"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.gameID);
                return writer;
            };

            /**
             * Encodes the specified PlayerQuitGameMsg message, length delimited. Does not implicitly {@link pb.common.PlayerQuitGameMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.PlayerQuitGameMsg
             * @static
             * @param {pb.common.IPlayerQuitGameMsg} message PlayerQuitGameMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerQuitGameMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PlayerQuitGameMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.PlayerQuitGameMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.PlayerQuitGameMsg} PlayerQuitGameMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerQuitGameMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.PlayerQuitGameMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.userID = reader.int64();
                        break;
                    case 2:
                        message.gameID = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PlayerQuitGameMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.PlayerQuitGameMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.PlayerQuitGameMsg} PlayerQuitGameMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerQuitGameMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PlayerQuitGameMsg message.
             * @function verify
             * @memberof pb.common.PlayerQuitGameMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PlayerQuitGameMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userID != null && message.hasOwnProperty("userID"))
                    if (!$util.isInteger(message.userID) && !(message.userID && $util.isInteger(message.userID.low) && $util.isInteger(message.userID.high)))
                        return "userID: integer|Long expected";
                if (message.gameID != null && message.hasOwnProperty("gameID"))
                    if (!$util.isInteger(message.gameID) && !(message.gameID && $util.isInteger(message.gameID.low) && $util.isInteger(message.gameID.high)))
                        return "gameID: integer|Long expected";
                return null;
            };

            /**
             * Creates a PlayerQuitGameMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.PlayerQuitGameMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.PlayerQuitGameMsg} PlayerQuitGameMsg
             */
            PlayerQuitGameMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.PlayerQuitGameMsg)
                    return object;
                var message = new $root.pb.common.PlayerQuitGameMsg();
                if (object.userID != null)
                    if ($util.Long)
                        (message.userID = $util.Long.fromValue(object.userID)).unsigned = false;
                    else if (typeof object.userID === "string")
                        message.userID = parseInt(object.userID, 10);
                    else if (typeof object.userID === "number")
                        message.userID = object.userID;
                    else if (typeof object.userID === "object")
                        message.userID = new $util.LongBits(object.userID.low >>> 0, object.userID.high >>> 0).toNumber();
                if (object.gameID != null)
                    if ($util.Long)
                        (message.gameID = $util.Long.fromValue(object.gameID)).unsigned = false;
                    else if (typeof object.gameID === "string")
                        message.gameID = parseInt(object.gameID, 10);
                    else if (typeof object.gameID === "number")
                        message.gameID = object.gameID;
                    else if (typeof object.gameID === "object")
                        message.gameID = new $util.LongBits(object.gameID.low >>> 0, object.gameID.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a PlayerQuitGameMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.PlayerQuitGameMsg
             * @static
             * @param {pb.common.PlayerQuitGameMsg} message PlayerQuitGameMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PlayerQuitGameMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userID = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userID = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.gameID = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.gameID = options.longs === String ? "0" : 0;
                }
                if (message.userID != null && message.hasOwnProperty("userID"))
                    if (typeof message.userID === "number")
                        object.userID = options.longs === String ? String(message.userID) : message.userID;
                    else
                        object.userID = options.longs === String ? $util.Long.prototype.toString.call(message.userID) : options.longs === Number ? new $util.LongBits(message.userID.low >>> 0, message.userID.high >>> 0).toNumber() : message.userID;
                if (message.gameID != null && message.hasOwnProperty("gameID"))
                    if (typeof message.gameID === "number")
                        object.gameID = options.longs === String ? String(message.gameID) : message.gameID;
                    else
                        object.gameID = options.longs === String ? $util.Long.prototype.toString.call(message.gameID) : options.longs === Number ? new $util.LongBits(message.gameID.low >>> 0, message.gameID.high >>> 0).toNumber() : message.gameID;
                return object;
            };

            /**
             * Converts this PlayerQuitGameMsg to JSON.
             * @function toJSON
             * @memberof pb.common.PlayerQuitGameMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PlayerQuitGameMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PlayerQuitGameMsg;
        })();

        common.MatchReq = (function() {

            /**
             * Properties of a MatchReq.
             * @memberof pb.common
             * @interface IMatchReq
             * @property {pb.common.IAssetBaseReq|null} [req] MatchReq req
             */

            /**
             * Constructs a new MatchReq.
             * @memberof pb.common
             * @classdesc Represents a MatchReq.
             * @implements IMatchReq
             * @constructor
             * @param {pb.common.IMatchReq=} [properties] Properties to set
             */
            function MatchReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MatchReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.MatchReq
             * @instance
             */
            MatchReq.prototype.req = null;

            /**
             * Creates a new MatchReq instance using the specified properties.
             * @function create
             * @memberof pb.common.MatchReq
             * @static
             * @param {pb.common.IMatchReq=} [properties] Properties to set
             * @returns {pb.common.MatchReq} MatchReq instance
             */
            MatchReq.create = function create(properties) {
                return new MatchReq(properties);
            };

            /**
             * Encodes the specified MatchReq message. Does not implicitly {@link pb.common.MatchReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.MatchReq
             * @static
             * @param {pb.common.IMatchReq} message MatchReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MatchReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified MatchReq message, length delimited. Does not implicitly {@link pb.common.MatchReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.MatchReq
             * @static
             * @param {pb.common.IMatchReq} message MatchReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MatchReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MatchReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.MatchReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.MatchReq} MatchReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MatchReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.MatchReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MatchReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.MatchReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.MatchReq} MatchReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MatchReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MatchReq message.
             * @function verify
             * @memberof pb.common.MatchReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MatchReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                return null;
            };

            /**
             * Creates a MatchReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.MatchReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.MatchReq} MatchReq
             */
            MatchReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.MatchReq)
                    return object;
                var message = new $root.pb.common.MatchReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.MatchReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                return message;
            };

            /**
             * Creates a plain object from a MatchReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.MatchReq
             * @static
             * @param {pb.common.MatchReq} message MatchReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MatchReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.req = null;
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                return object;
            };

            /**
             * Converts this MatchReq to JSON.
             * @function toJSON
             * @memberof pb.common.MatchReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MatchReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MatchReq;
        })();

        common.MatchRsp = (function() {

            /**
             * Properties of a MatchRsp.
             * @memberof pb.common
             * @interface IMatchRsp
             * @property {pb.common.IBaseRsp|null} [rsp] MatchRsp rsp
             * @property {number|null} [status] MatchRsp status
             */

            /**
             * Constructs a new MatchRsp.
             * @memberof pb.common
             * @classdesc Represents a MatchRsp.
             * @implements IMatchRsp
             * @constructor
             * @param {pb.common.IMatchRsp=} [properties] Properties to set
             */
            function MatchRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MatchRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.MatchRsp
             * @instance
             */
            MatchRsp.prototype.rsp = null;

            /**
             * MatchRsp status.
             * @member {number} status
             * @memberof pb.common.MatchRsp
             * @instance
             */
            MatchRsp.prototype.status = 0;

            /**
             * Creates a new MatchRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.MatchRsp
             * @static
             * @param {pb.common.IMatchRsp=} [properties] Properties to set
             * @returns {pb.common.MatchRsp} MatchRsp instance
             */
            MatchRsp.create = function create(properties) {
                return new MatchRsp(properties);
            };

            /**
             * Encodes the specified MatchRsp message. Does not implicitly {@link pb.common.MatchRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.MatchRsp
             * @static
             * @param {pb.common.IMatchRsp} message MatchRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MatchRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.status != null && message.hasOwnProperty("status"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.status);
                return writer;
            };

            /**
             * Encodes the specified MatchRsp message, length delimited. Does not implicitly {@link pb.common.MatchRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.MatchRsp
             * @static
             * @param {pb.common.IMatchRsp} message MatchRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MatchRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MatchRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.MatchRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.MatchRsp} MatchRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MatchRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.MatchRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.status = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MatchRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.MatchRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.MatchRsp} MatchRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MatchRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MatchRsp message.
             * @function verify
             * @memberof pb.common.MatchRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MatchRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                if (message.status != null && message.hasOwnProperty("status"))
                    if (!$util.isInteger(message.status))
                        return "status: integer expected";
                return null;
            };

            /**
             * Creates a MatchRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.MatchRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.MatchRsp} MatchRsp
             */
            MatchRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.MatchRsp)
                    return object;
                var message = new $root.pb.common.MatchRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.MatchRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                if (object.status != null)
                    message.status = object.status | 0;
                return message;
            };

            /**
             * Creates a plain object from a MatchRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.MatchRsp
             * @static
             * @param {pb.common.MatchRsp} message MatchRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MatchRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.rsp = null;
                    object.status = 0;
                }
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                if (message.status != null && message.hasOwnProperty("status"))
                    object.status = message.status;
                return object;
            };

            /**
             * Converts this MatchRsp to JSON.
             * @function toJSON
             * @memberof pb.common.MatchRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MatchRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MatchRsp;
        })();

        common.MatchMsg = (function() {

            /**
             * Properties of a MatchMsg.
             * @memberof pb.common
             * @interface IMatchMsg
             * @property {number|null} [status] MatchMsg status
             * @property {string|null} [roomId] MatchMsg roomId
             * @property {Array.<pb.common.IPlayerInfo>|null} [members] MatchMsg members
             */

            /**
             * Constructs a new MatchMsg.
             * @memberof pb.common
             * @classdesc Represents a MatchMsg.
             * @implements IMatchMsg
             * @constructor
             * @param {pb.common.IMatchMsg=} [properties] Properties to set
             */
            function MatchMsg(properties) {
                this.members = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MatchMsg status.
             * @member {number} status
             * @memberof pb.common.MatchMsg
             * @instance
             */
            MatchMsg.prototype.status = 0;

            /**
             * MatchMsg roomId.
             * @member {string} roomId
             * @memberof pb.common.MatchMsg
             * @instance
             */
            MatchMsg.prototype.roomId = "";

            /**
             * MatchMsg members.
             * @member {Array.<pb.common.IPlayerInfo>} members
             * @memberof pb.common.MatchMsg
             * @instance
             */
            MatchMsg.prototype.members = $util.emptyArray;

            /**
             * Creates a new MatchMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.MatchMsg
             * @static
             * @param {pb.common.IMatchMsg=} [properties] Properties to set
             * @returns {pb.common.MatchMsg} MatchMsg instance
             */
            MatchMsg.create = function create(properties) {
                return new MatchMsg(properties);
            };

            /**
             * Encodes the specified MatchMsg message. Does not implicitly {@link pb.common.MatchMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.MatchMsg
             * @static
             * @param {pb.common.IMatchMsg} message MatchMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MatchMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.status != null && message.hasOwnProperty("status"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.status);
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.roomId);
                if (message.members != null && message.members.length)
                    for (var i = 0; i < message.members.length; ++i)
                        $root.pb.common.PlayerInfo.encode(message.members[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified MatchMsg message, length delimited. Does not implicitly {@link pb.common.MatchMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.MatchMsg
             * @static
             * @param {pb.common.IMatchMsg} message MatchMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MatchMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MatchMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.MatchMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.MatchMsg} MatchMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MatchMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.MatchMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.status = reader.int32();
                        break;
                    case 2:
                        message.roomId = reader.string();
                        break;
                    case 3:
                        if (!(message.members && message.members.length))
                            message.members = [];
                        message.members.push($root.pb.common.PlayerInfo.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MatchMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.MatchMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.MatchMsg} MatchMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MatchMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MatchMsg message.
             * @function verify
             * @memberof pb.common.MatchMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MatchMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.status != null && message.hasOwnProperty("status"))
                    if (!$util.isInteger(message.status))
                        return "status: integer expected";
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    if (!$util.isString(message.roomId))
                        return "roomId: string expected";
                if (message.members != null && message.hasOwnProperty("members")) {
                    if (!Array.isArray(message.members))
                        return "members: array expected";
                    for (var i = 0; i < message.members.length; ++i) {
                        var error = $root.pb.common.PlayerInfo.verify(message.members[i]);
                        if (error)
                            return "members." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a MatchMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.MatchMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.MatchMsg} MatchMsg
             */
            MatchMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.MatchMsg)
                    return object;
                var message = new $root.pb.common.MatchMsg();
                if (object.status != null)
                    message.status = object.status | 0;
                if (object.roomId != null)
                    message.roomId = String(object.roomId);
                if (object.members) {
                    if (!Array.isArray(object.members))
                        throw TypeError(".pb.common.MatchMsg.members: array expected");
                    message.members = [];
                    for (var i = 0; i < object.members.length; ++i) {
                        if (typeof object.members[i] !== "object")
                            throw TypeError(".pb.common.MatchMsg.members: object expected");
                        message.members[i] = $root.pb.common.PlayerInfo.fromObject(object.members[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a MatchMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.MatchMsg
             * @static
             * @param {pb.common.MatchMsg} message MatchMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MatchMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.members = [];
                if (options.defaults) {
                    object.status = 0;
                    object.roomId = "";
                }
                if (message.status != null && message.hasOwnProperty("status"))
                    object.status = message.status;
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    object.roomId = message.roomId;
                if (message.members && message.members.length) {
                    object.members = [];
                    for (var j = 0; j < message.members.length; ++j)
                        object.members[j] = $root.pb.common.PlayerInfo.toObject(message.members[j], options);
                }
                return object;
            };

            /**
             * Converts this MatchMsg to JSON.
             * @function toJSON
             * @memberof pb.common.MatchMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MatchMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MatchMsg;
        })();

        common.ExitMatchReq = (function() {

            /**
             * Properties of an ExitMatchReq.
             * @memberof pb.common
             * @interface IExitMatchReq
             * @property {string|null} [roomId] ExitMatchReq roomId
             */

            /**
             * Constructs a new ExitMatchReq.
             * @memberof pb.common
             * @classdesc Represents an ExitMatchReq.
             * @implements IExitMatchReq
             * @constructor
             * @param {pb.common.IExitMatchReq=} [properties] Properties to set
             */
            function ExitMatchReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ExitMatchReq roomId.
             * @member {string} roomId
             * @memberof pb.common.ExitMatchReq
             * @instance
             */
            ExitMatchReq.prototype.roomId = "";

            /**
             * Creates a new ExitMatchReq instance using the specified properties.
             * @function create
             * @memberof pb.common.ExitMatchReq
             * @static
             * @param {pb.common.IExitMatchReq=} [properties] Properties to set
             * @returns {pb.common.ExitMatchReq} ExitMatchReq instance
             */
            ExitMatchReq.create = function create(properties) {
                return new ExitMatchReq(properties);
            };

            /**
             * Encodes the specified ExitMatchReq message. Does not implicitly {@link pb.common.ExitMatchReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.ExitMatchReq
             * @static
             * @param {pb.common.IExitMatchReq} message ExitMatchReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExitMatchReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
                return writer;
            };

            /**
             * Encodes the specified ExitMatchReq message, length delimited. Does not implicitly {@link pb.common.ExitMatchReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.ExitMatchReq
             * @static
             * @param {pb.common.IExitMatchReq} message ExitMatchReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExitMatchReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an ExitMatchReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.ExitMatchReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.ExitMatchReq} ExitMatchReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExitMatchReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.ExitMatchReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.roomId = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an ExitMatchReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.ExitMatchReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.ExitMatchReq} ExitMatchReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExitMatchReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an ExitMatchReq message.
             * @function verify
             * @memberof pb.common.ExitMatchReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ExitMatchReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    if (!$util.isString(message.roomId))
                        return "roomId: string expected";
                return null;
            };

            /**
             * Creates an ExitMatchReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.ExitMatchReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.ExitMatchReq} ExitMatchReq
             */
            ExitMatchReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.ExitMatchReq)
                    return object;
                var message = new $root.pb.common.ExitMatchReq();
                if (object.roomId != null)
                    message.roomId = String(object.roomId);
                return message;
            };

            /**
             * Creates a plain object from an ExitMatchReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.ExitMatchReq
             * @static
             * @param {pb.common.ExitMatchReq} message ExitMatchReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ExitMatchReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.roomId = "";
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    object.roomId = message.roomId;
                return object;
            };

            /**
             * Converts this ExitMatchReq to JSON.
             * @function toJSON
             * @memberof pb.common.ExitMatchReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ExitMatchReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ExitMatchReq;
        })();

        common.ExitMatchRsp = (function() {

            /**
             * Properties of an ExitMatchRsp.
             * @memberof pb.common
             * @interface IExitMatchRsp
             * @property {pb.common.IBaseRsp|null} [rsp] ExitMatchRsp rsp
             */

            /**
             * Constructs a new ExitMatchRsp.
             * @memberof pb.common
             * @classdesc Represents an ExitMatchRsp.
             * @implements IExitMatchRsp
             * @constructor
             * @param {pb.common.IExitMatchRsp=} [properties] Properties to set
             */
            function ExitMatchRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ExitMatchRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.ExitMatchRsp
             * @instance
             */
            ExitMatchRsp.prototype.rsp = null;

            /**
             * Creates a new ExitMatchRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.ExitMatchRsp
             * @static
             * @param {pb.common.IExitMatchRsp=} [properties] Properties to set
             * @returns {pb.common.ExitMatchRsp} ExitMatchRsp instance
             */
            ExitMatchRsp.create = function create(properties) {
                return new ExitMatchRsp(properties);
            };

            /**
             * Encodes the specified ExitMatchRsp message. Does not implicitly {@link pb.common.ExitMatchRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.ExitMatchRsp
             * @static
             * @param {pb.common.IExitMatchRsp} message ExitMatchRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExitMatchRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ExitMatchRsp message, length delimited. Does not implicitly {@link pb.common.ExitMatchRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.ExitMatchRsp
             * @static
             * @param {pb.common.IExitMatchRsp} message ExitMatchRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExitMatchRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an ExitMatchRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.ExitMatchRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.ExitMatchRsp} ExitMatchRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExitMatchRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.ExitMatchRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an ExitMatchRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.ExitMatchRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.ExitMatchRsp} ExitMatchRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExitMatchRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an ExitMatchRsp message.
             * @function verify
             * @memberof pb.common.ExitMatchRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ExitMatchRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                return null;
            };

            /**
             * Creates an ExitMatchRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.ExitMatchRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.ExitMatchRsp} ExitMatchRsp
             */
            ExitMatchRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.ExitMatchRsp)
                    return object;
                var message = new $root.pb.common.ExitMatchRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.ExitMatchRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from an ExitMatchRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.ExitMatchRsp
             * @static
             * @param {pb.common.ExitMatchRsp} message ExitMatchRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ExitMatchRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                return object;
            };

            /**
             * Converts this ExitMatchRsp to JSON.
             * @function toJSON
             * @memberof pb.common.ExitMatchRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ExitMatchRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ExitMatchRsp;
        })();

        common.ExitMatchMsg = (function() {

            /**
             * Properties of an ExitMatchMsg.
             * @memberof pb.common
             * @interface IExitMatchMsg
             * @property {string|null} [roomId] ExitMatchMsg roomId
             */

            /**
             * Constructs a new ExitMatchMsg.
             * @memberof pb.common
             * @classdesc Represents an ExitMatchMsg.
             * @implements IExitMatchMsg
             * @constructor
             * @param {pb.common.IExitMatchMsg=} [properties] Properties to set
             */
            function ExitMatchMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ExitMatchMsg roomId.
             * @member {string} roomId
             * @memberof pb.common.ExitMatchMsg
             * @instance
             */
            ExitMatchMsg.prototype.roomId = "";

            /**
             * Creates a new ExitMatchMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.ExitMatchMsg
             * @static
             * @param {pb.common.IExitMatchMsg=} [properties] Properties to set
             * @returns {pb.common.ExitMatchMsg} ExitMatchMsg instance
             */
            ExitMatchMsg.create = function create(properties) {
                return new ExitMatchMsg(properties);
            };

            /**
             * Encodes the specified ExitMatchMsg message. Does not implicitly {@link pb.common.ExitMatchMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.ExitMatchMsg
             * @static
             * @param {pb.common.IExitMatchMsg} message ExitMatchMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExitMatchMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.roomId);
                return writer;
            };

            /**
             * Encodes the specified ExitMatchMsg message, length delimited. Does not implicitly {@link pb.common.ExitMatchMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.ExitMatchMsg
             * @static
             * @param {pb.common.IExitMatchMsg} message ExitMatchMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExitMatchMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an ExitMatchMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.ExitMatchMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.ExitMatchMsg} ExitMatchMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExitMatchMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.ExitMatchMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.roomId = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an ExitMatchMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.ExitMatchMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.ExitMatchMsg} ExitMatchMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExitMatchMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an ExitMatchMsg message.
             * @function verify
             * @memberof pb.common.ExitMatchMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ExitMatchMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    if (!$util.isString(message.roomId))
                        return "roomId: string expected";
                return null;
            };

            /**
             * Creates an ExitMatchMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.ExitMatchMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.ExitMatchMsg} ExitMatchMsg
             */
            ExitMatchMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.ExitMatchMsg)
                    return object;
                var message = new $root.pb.common.ExitMatchMsg();
                if (object.roomId != null)
                    message.roomId = String(object.roomId);
                return message;
            };

            /**
             * Creates a plain object from an ExitMatchMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.ExitMatchMsg
             * @static
             * @param {pb.common.ExitMatchMsg} message ExitMatchMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ExitMatchMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.roomId = "";
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    object.roomId = message.roomId;
                return object;
            };

            /**
             * Converts this ExitMatchMsg to JSON.
             * @function toJSON
             * @memberof pb.common.ExitMatchMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ExitMatchMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ExitMatchMsg;
        })();

        common.PrepareReq = (function() {

            /**
             * Properties of a PrepareReq.
             * @memberof pb.common
             * @interface IPrepareReq
             */

            /**
             * Constructs a new PrepareReq.
             * @memberof pb.common
             * @classdesc Represents a PrepareReq.
             * @implements IPrepareReq
             * @constructor
             * @param {pb.common.IPrepareReq=} [properties] Properties to set
             */
            function PrepareReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new PrepareReq instance using the specified properties.
             * @function create
             * @memberof pb.common.PrepareReq
             * @static
             * @param {pb.common.IPrepareReq=} [properties] Properties to set
             * @returns {pb.common.PrepareReq} PrepareReq instance
             */
            PrepareReq.create = function create(properties) {
                return new PrepareReq(properties);
            };

            /**
             * Encodes the specified PrepareReq message. Does not implicitly {@link pb.common.PrepareReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.PrepareReq
             * @static
             * @param {pb.common.IPrepareReq} message PrepareReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PrepareReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified PrepareReq message, length delimited. Does not implicitly {@link pb.common.PrepareReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.PrepareReq
             * @static
             * @param {pb.common.IPrepareReq} message PrepareReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PrepareReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PrepareReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.PrepareReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.PrepareReq} PrepareReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PrepareReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.PrepareReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PrepareReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.PrepareReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.PrepareReq} PrepareReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PrepareReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PrepareReq message.
             * @function verify
             * @memberof pb.common.PrepareReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PrepareReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a PrepareReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.PrepareReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.PrepareReq} PrepareReq
             */
            PrepareReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.PrepareReq)
                    return object;
                return new $root.pb.common.PrepareReq();
            };

            /**
             * Creates a plain object from a PrepareReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.PrepareReq
             * @static
             * @param {pb.common.PrepareReq} message PrepareReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PrepareReq.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this PrepareReq to JSON.
             * @function toJSON
             * @memberof pb.common.PrepareReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PrepareReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PrepareReq;
        })();

        common.PrepareRsp = (function() {

            /**
             * Properties of a PrepareRsp.
             * @memberof pb.common
             * @interface IPrepareRsp
             * @property {pb.common.IBaseRsp|null} [rsp] PrepareRsp rsp
             */

            /**
             * Constructs a new PrepareRsp.
             * @memberof pb.common
             * @classdesc Represents a PrepareRsp.
             * @implements IPrepareRsp
             * @constructor
             * @param {pb.common.IPrepareRsp=} [properties] Properties to set
             */
            function PrepareRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PrepareRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.PrepareRsp
             * @instance
             */
            PrepareRsp.prototype.rsp = null;

            /**
             * Creates a new PrepareRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.PrepareRsp
             * @static
             * @param {pb.common.IPrepareRsp=} [properties] Properties to set
             * @returns {pb.common.PrepareRsp} PrepareRsp instance
             */
            PrepareRsp.create = function create(properties) {
                return new PrepareRsp(properties);
            };

            /**
             * Encodes the specified PrepareRsp message. Does not implicitly {@link pb.common.PrepareRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.PrepareRsp
             * @static
             * @param {pb.common.IPrepareRsp} message PrepareRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PrepareRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified PrepareRsp message, length delimited. Does not implicitly {@link pb.common.PrepareRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.PrepareRsp
             * @static
             * @param {pb.common.IPrepareRsp} message PrepareRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PrepareRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PrepareRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.PrepareRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.PrepareRsp} PrepareRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PrepareRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.PrepareRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PrepareRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.PrepareRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.PrepareRsp} PrepareRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PrepareRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PrepareRsp message.
             * @function verify
             * @memberof pb.common.PrepareRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PrepareRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                return null;
            };

            /**
             * Creates a PrepareRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.PrepareRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.PrepareRsp} PrepareRsp
             */
            PrepareRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.PrepareRsp)
                    return object;
                var message = new $root.pb.common.PrepareRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.PrepareRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from a PrepareRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.PrepareRsp
             * @static
             * @param {pb.common.PrepareRsp} message PrepareRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PrepareRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                return object;
            };

            /**
             * Converts this PrepareRsp to JSON.
             * @function toJSON
             * @memberof pb.common.PrepareRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PrepareRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PrepareRsp;
        })();

        common.PrepareMsg = (function() {

            /**
             * Properties of a PrepareMsg.
             * @memberof pb.common
             * @interface IPrepareMsg
             */

            /**
             * Constructs a new PrepareMsg.
             * @memberof pb.common
             * @classdesc Represents a PrepareMsg.
             * @implements IPrepareMsg
             * @constructor
             * @param {pb.common.IPrepareMsg=} [properties] Properties to set
             */
            function PrepareMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new PrepareMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.PrepareMsg
             * @static
             * @param {pb.common.IPrepareMsg=} [properties] Properties to set
             * @returns {pb.common.PrepareMsg} PrepareMsg instance
             */
            PrepareMsg.create = function create(properties) {
                return new PrepareMsg(properties);
            };

            /**
             * Encodes the specified PrepareMsg message. Does not implicitly {@link pb.common.PrepareMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.PrepareMsg
             * @static
             * @param {pb.common.IPrepareMsg} message PrepareMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PrepareMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified PrepareMsg message, length delimited. Does not implicitly {@link pb.common.PrepareMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.PrepareMsg
             * @static
             * @param {pb.common.IPrepareMsg} message PrepareMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PrepareMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PrepareMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.PrepareMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.PrepareMsg} PrepareMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PrepareMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.PrepareMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PrepareMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.PrepareMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.PrepareMsg} PrepareMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PrepareMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PrepareMsg message.
             * @function verify
             * @memberof pb.common.PrepareMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PrepareMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a PrepareMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.PrepareMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.PrepareMsg} PrepareMsg
             */
            PrepareMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.PrepareMsg)
                    return object;
                return new $root.pb.common.PrepareMsg();
            };

            /**
             * Creates a plain object from a PrepareMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.PrepareMsg
             * @static
             * @param {pb.common.PrepareMsg} message PrepareMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PrepareMsg.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this PrepareMsg to JSON.
             * @function toJSON
             * @memberof pb.common.PrepareMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PrepareMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PrepareMsg;
        })();

        common.AnyoneTimeoutMsg = (function() {

            /**
             * Properties of an AnyoneTimeoutMsg.
             * @memberof pb.common
             * @interface IAnyoneTimeoutMsg
             */

            /**
             * Constructs a new AnyoneTimeoutMsg.
             * @memberof pb.common
             * @classdesc Represents an AnyoneTimeoutMsg.
             * @implements IAnyoneTimeoutMsg
             * @constructor
             * @param {pb.common.IAnyoneTimeoutMsg=} [properties] Properties to set
             */
            function AnyoneTimeoutMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new AnyoneTimeoutMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.AnyoneTimeoutMsg
             * @static
             * @param {pb.common.IAnyoneTimeoutMsg=} [properties] Properties to set
             * @returns {pb.common.AnyoneTimeoutMsg} AnyoneTimeoutMsg instance
             */
            AnyoneTimeoutMsg.create = function create(properties) {
                return new AnyoneTimeoutMsg(properties);
            };

            /**
             * Encodes the specified AnyoneTimeoutMsg message. Does not implicitly {@link pb.common.AnyoneTimeoutMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.AnyoneTimeoutMsg
             * @static
             * @param {pb.common.IAnyoneTimeoutMsg} message AnyoneTimeoutMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AnyoneTimeoutMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified AnyoneTimeoutMsg message, length delimited. Does not implicitly {@link pb.common.AnyoneTimeoutMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.AnyoneTimeoutMsg
             * @static
             * @param {pb.common.IAnyoneTimeoutMsg} message AnyoneTimeoutMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AnyoneTimeoutMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AnyoneTimeoutMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.AnyoneTimeoutMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.AnyoneTimeoutMsg} AnyoneTimeoutMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AnyoneTimeoutMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.AnyoneTimeoutMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AnyoneTimeoutMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.AnyoneTimeoutMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.AnyoneTimeoutMsg} AnyoneTimeoutMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AnyoneTimeoutMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AnyoneTimeoutMsg message.
             * @function verify
             * @memberof pb.common.AnyoneTimeoutMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AnyoneTimeoutMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates an AnyoneTimeoutMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.AnyoneTimeoutMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.AnyoneTimeoutMsg} AnyoneTimeoutMsg
             */
            AnyoneTimeoutMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.AnyoneTimeoutMsg)
                    return object;
                return new $root.pb.common.AnyoneTimeoutMsg();
            };

            /**
             * Creates a plain object from an AnyoneTimeoutMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.AnyoneTimeoutMsg
             * @static
             * @param {pb.common.AnyoneTimeoutMsg} message AnyoneTimeoutMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AnyoneTimeoutMsg.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this AnyoneTimeoutMsg to JSON.
             * @function toJSON
             * @memberof pb.common.AnyoneTimeoutMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AnyoneTimeoutMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return AnyoneTimeoutMsg;
        })();

        common.AllReadyMsg = (function() {

            /**
             * Properties of an AllReadyMsg.
             * @memberof pb.common
             * @interface IAllReadyMsg
             * @property {Array.<Long>|null} [userIds] AllReadyMsg userIds
             */

            /**
             * Constructs a new AllReadyMsg.
             * @memberof pb.common
             * @classdesc Represents an AllReadyMsg.
             * @implements IAllReadyMsg
             * @constructor
             * @param {pb.common.IAllReadyMsg=} [properties] Properties to set
             */
            function AllReadyMsg(properties) {
                this.userIds = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AllReadyMsg userIds.
             * @member {Array.<Long>} userIds
             * @memberof pb.common.AllReadyMsg
             * @instance
             */
            AllReadyMsg.prototype.userIds = $util.emptyArray;

            /**
             * Creates a new AllReadyMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.AllReadyMsg
             * @static
             * @param {pb.common.IAllReadyMsg=} [properties] Properties to set
             * @returns {pb.common.AllReadyMsg} AllReadyMsg instance
             */
            AllReadyMsg.create = function create(properties) {
                return new AllReadyMsg(properties);
            };

            /**
             * Encodes the specified AllReadyMsg message. Does not implicitly {@link pb.common.AllReadyMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.AllReadyMsg
             * @static
             * @param {pb.common.IAllReadyMsg} message AllReadyMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AllReadyMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userIds != null && message.userIds.length) {
                    writer.uint32(/* id 1, wireType 2 =*/10).fork();
                    for (var i = 0; i < message.userIds.length; ++i)
                        writer.int64(message.userIds[i]);
                    writer.ldelim();
                }
                return writer;
            };

            /**
             * Encodes the specified AllReadyMsg message, length delimited. Does not implicitly {@link pb.common.AllReadyMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.AllReadyMsg
             * @static
             * @param {pb.common.IAllReadyMsg} message AllReadyMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AllReadyMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AllReadyMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.AllReadyMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.AllReadyMsg} AllReadyMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AllReadyMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.AllReadyMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.userIds && message.userIds.length))
                            message.userIds = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.userIds.push(reader.int64());
                        } else
                            message.userIds.push(reader.int64());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AllReadyMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.AllReadyMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.AllReadyMsg} AllReadyMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AllReadyMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AllReadyMsg message.
             * @function verify
             * @memberof pb.common.AllReadyMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AllReadyMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userIds != null && message.hasOwnProperty("userIds")) {
                    if (!Array.isArray(message.userIds))
                        return "userIds: array expected";
                    for (var i = 0; i < message.userIds.length; ++i)
                        if (!$util.isInteger(message.userIds[i]) && !(message.userIds[i] && $util.isInteger(message.userIds[i].low) && $util.isInteger(message.userIds[i].high)))
                            return "userIds: integer|Long[] expected";
                }
                return null;
            };

            /**
             * Creates an AllReadyMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.AllReadyMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.AllReadyMsg} AllReadyMsg
             */
            AllReadyMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.AllReadyMsg)
                    return object;
                var message = new $root.pb.common.AllReadyMsg();
                if (object.userIds) {
                    if (!Array.isArray(object.userIds))
                        throw TypeError(".pb.common.AllReadyMsg.userIds: array expected");
                    message.userIds = [];
                    for (var i = 0; i < object.userIds.length; ++i)
                        if ($util.Long)
                            (message.userIds[i] = $util.Long.fromValue(object.userIds[i])).unsigned = false;
                        else if (typeof object.userIds[i] === "string")
                            message.userIds[i] = parseInt(object.userIds[i], 10);
                        else if (typeof object.userIds[i] === "number")
                            message.userIds[i] = object.userIds[i];
                        else if (typeof object.userIds[i] === "object")
                            message.userIds[i] = new $util.LongBits(object.userIds[i].low >>> 0, object.userIds[i].high >>> 0).toNumber();
                }
                return message;
            };

            /**
             * Creates a plain object from an AllReadyMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.AllReadyMsg
             * @static
             * @param {pb.common.AllReadyMsg} message AllReadyMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AllReadyMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.userIds = [];
                if (message.userIds && message.userIds.length) {
                    object.userIds = [];
                    for (var j = 0; j < message.userIds.length; ++j)
                        if (typeof message.userIds[j] === "number")
                            object.userIds[j] = options.longs === String ? String(message.userIds[j]) : message.userIds[j];
                        else
                            object.userIds[j] = options.longs === String ? $util.Long.prototype.toString.call(message.userIds[j]) : options.longs === Number ? new $util.LongBits(message.userIds[j].low >>> 0, message.userIds[j].high >>> 0).toNumber() : message.userIds[j];
                }
                return object;
            };

            /**
             * Converts this AllReadyMsg to JSON.
             * @function toJSON
             * @memberof pb.common.AllReadyMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AllReadyMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return AllReadyMsg;
        })();

        common.CheckPlayingReq = (function() {

            /**
             * Properties of a CheckPlayingReq.
             * @memberof pb.common
             * @interface ICheckPlayingReq
             * @property {pb.common.IAssetBaseReq|null} [req] CheckPlayingReq req
             */

            /**
             * Constructs a new CheckPlayingReq.
             * @memberof pb.common
             * @classdesc Represents a CheckPlayingReq.
             * @implements ICheckPlayingReq
             * @constructor
             * @param {pb.common.ICheckPlayingReq=} [properties] Properties to set
             */
            function CheckPlayingReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CheckPlayingReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.CheckPlayingReq
             * @instance
             */
            CheckPlayingReq.prototype.req = null;

            /**
             * Creates a new CheckPlayingReq instance using the specified properties.
             * @function create
             * @memberof pb.common.CheckPlayingReq
             * @static
             * @param {pb.common.ICheckPlayingReq=} [properties] Properties to set
             * @returns {pb.common.CheckPlayingReq} CheckPlayingReq instance
             */
            CheckPlayingReq.create = function create(properties) {
                return new CheckPlayingReq(properties);
            };

            /**
             * Encodes the specified CheckPlayingReq message. Does not implicitly {@link pb.common.CheckPlayingReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.CheckPlayingReq
             * @static
             * @param {pb.common.ICheckPlayingReq} message CheckPlayingReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CheckPlayingReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified CheckPlayingReq message, length delimited. Does not implicitly {@link pb.common.CheckPlayingReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.CheckPlayingReq
             * @static
             * @param {pb.common.ICheckPlayingReq} message CheckPlayingReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CheckPlayingReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CheckPlayingReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.CheckPlayingReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.CheckPlayingReq} CheckPlayingReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CheckPlayingReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.CheckPlayingReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CheckPlayingReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.CheckPlayingReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.CheckPlayingReq} CheckPlayingReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CheckPlayingReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CheckPlayingReq message.
             * @function verify
             * @memberof pb.common.CheckPlayingReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CheckPlayingReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                return null;
            };

            /**
             * Creates a CheckPlayingReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.CheckPlayingReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.CheckPlayingReq} CheckPlayingReq
             */
            CheckPlayingReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.CheckPlayingReq)
                    return object;
                var message = new $root.pb.common.CheckPlayingReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.CheckPlayingReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                return message;
            };

            /**
             * Creates a plain object from a CheckPlayingReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.CheckPlayingReq
             * @static
             * @param {pb.common.CheckPlayingReq} message CheckPlayingReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CheckPlayingReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.req = null;
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                return object;
            };

            /**
             * Converts this CheckPlayingReq to JSON.
             * @function toJSON
             * @memberof pb.common.CheckPlayingReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CheckPlayingReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CheckPlayingReq;
        })();

        common.CheckPlayingRsp = (function() {

            /**
             * Properties of a CheckPlayingRsp.
             * @memberof pb.common
             * @interface ICheckPlayingRsp
             * @property {pb.common.IBaseRsp|null} [rsp] CheckPlayingRsp rsp
             * @property {pb.common.PlayerState|null} [state] CheckPlayingRsp state
             * @property {pb.common.IRoomInfo|null} [room] CheckPlayingRsp room
             * @property {Array.<pb.common.IPlayerInfo>|null} [players] CheckPlayingRsp players
             */

            /**
             * Constructs a new CheckPlayingRsp.
             * @memberof pb.common
             * @classdesc Represents a CheckPlayingRsp.
             * @implements ICheckPlayingRsp
             * @constructor
             * @param {pb.common.ICheckPlayingRsp=} [properties] Properties to set
             */
            function CheckPlayingRsp(properties) {
                this.players = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CheckPlayingRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.CheckPlayingRsp
             * @instance
             */
            CheckPlayingRsp.prototype.rsp = null;

            /**
             * CheckPlayingRsp state.
             * @member {pb.common.PlayerState} state
             * @memberof pb.common.CheckPlayingRsp
             * @instance
             */
            CheckPlayingRsp.prototype.state = 0;

            /**
             * CheckPlayingRsp room.
             * @member {pb.common.IRoomInfo|null|undefined} room
             * @memberof pb.common.CheckPlayingRsp
             * @instance
             */
            CheckPlayingRsp.prototype.room = null;

            /**
             * CheckPlayingRsp players.
             * @member {Array.<pb.common.IPlayerInfo>} players
             * @memberof pb.common.CheckPlayingRsp
             * @instance
             */
            CheckPlayingRsp.prototype.players = $util.emptyArray;

            /**
             * Creates a new CheckPlayingRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.CheckPlayingRsp
             * @static
             * @param {pb.common.ICheckPlayingRsp=} [properties] Properties to set
             * @returns {pb.common.CheckPlayingRsp} CheckPlayingRsp instance
             */
            CheckPlayingRsp.create = function create(properties) {
                return new CheckPlayingRsp(properties);
            };

            /**
             * Encodes the specified CheckPlayingRsp message. Does not implicitly {@link pb.common.CheckPlayingRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.CheckPlayingRsp
             * @static
             * @param {pb.common.ICheckPlayingRsp} message CheckPlayingRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CheckPlayingRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.state != null && message.hasOwnProperty("state"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.state);
                if (message.room != null && message.hasOwnProperty("room"))
                    $root.pb.common.RoomInfo.encode(message.room, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.players != null && message.players.length)
                    for (var i = 0; i < message.players.length; ++i)
                        $root.pb.common.PlayerInfo.encode(message.players[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified CheckPlayingRsp message, length delimited. Does not implicitly {@link pb.common.CheckPlayingRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.CheckPlayingRsp
             * @static
             * @param {pb.common.ICheckPlayingRsp} message CheckPlayingRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CheckPlayingRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CheckPlayingRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.CheckPlayingRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.CheckPlayingRsp} CheckPlayingRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CheckPlayingRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.CheckPlayingRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.state = reader.int32();
                        break;
                    case 3:
                        message.room = $root.pb.common.RoomInfo.decode(reader, reader.uint32());
                        break;
                    case 6:
                        if (!(message.players && message.players.length))
                            message.players = [];
                        message.players.push($root.pb.common.PlayerInfo.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CheckPlayingRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.CheckPlayingRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.CheckPlayingRsp} CheckPlayingRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CheckPlayingRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CheckPlayingRsp message.
             * @function verify
             * @memberof pb.common.CheckPlayingRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CheckPlayingRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                if (message.state != null && message.hasOwnProperty("state"))
                    switch (message.state) {
                    default:
                        return "state: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                        break;
                    }
                if (message.room != null && message.hasOwnProperty("room")) {
                    var error = $root.pb.common.RoomInfo.verify(message.room);
                    if (error)
                        return "room." + error;
                }
                if (message.players != null && message.hasOwnProperty("players")) {
                    if (!Array.isArray(message.players))
                        return "players: array expected";
                    for (var i = 0; i < message.players.length; ++i) {
                        var error = $root.pb.common.PlayerInfo.verify(message.players[i]);
                        if (error)
                            return "players." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a CheckPlayingRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.CheckPlayingRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.CheckPlayingRsp} CheckPlayingRsp
             */
            CheckPlayingRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.CheckPlayingRsp)
                    return object;
                var message = new $root.pb.common.CheckPlayingRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.CheckPlayingRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                switch (object.state) {
                case "PLAYER_STATE_BEGIN":
                case 0:
                    message.state = 0;
                    break;
                case "PLAYER_STATE_IN_ROOM":
                case 1:
                    message.state = 1;
                    break;
                case "PLAYER_STATE_MATCHING":
                case 2:
                    message.state = 2;
                    break;
                case "PLAYER_STATE_MATCHED":
                case 3:
                    message.state = 3;
                    break;
                case "PLAYER_STATE_READY":
                case 4:
                    message.state = 4;
                    break;
                case "PLAYER_STATE_PLAYING":
                case 5:
                    message.state = 5;
                    break;
                }
                if (object.room != null) {
                    if (typeof object.room !== "object")
                        throw TypeError(".pb.common.CheckPlayingRsp.room: object expected");
                    message.room = $root.pb.common.RoomInfo.fromObject(object.room);
                }
                if (object.players) {
                    if (!Array.isArray(object.players))
                        throw TypeError(".pb.common.CheckPlayingRsp.players: array expected");
                    message.players = [];
                    for (var i = 0; i < object.players.length; ++i) {
                        if (typeof object.players[i] !== "object")
                            throw TypeError(".pb.common.CheckPlayingRsp.players: object expected");
                        message.players[i] = $root.pb.common.PlayerInfo.fromObject(object.players[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a CheckPlayingRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.CheckPlayingRsp
             * @static
             * @param {pb.common.CheckPlayingRsp} message CheckPlayingRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CheckPlayingRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.players = [];
                if (options.defaults) {
                    object.rsp = null;
                    object.state = options.enums === String ? "PLAYER_STATE_BEGIN" : 0;
                    object.room = null;
                }
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                if (message.state != null && message.hasOwnProperty("state"))
                    object.state = options.enums === String ? $root.pb.common.PlayerState[message.state] : message.state;
                if (message.room != null && message.hasOwnProperty("room"))
                    object.room = $root.pb.common.RoomInfo.toObject(message.room, options);
                if (message.players && message.players.length) {
                    object.players = [];
                    for (var j = 0; j < message.players.length; ++j)
                        object.players[j] = $root.pb.common.PlayerInfo.toObject(message.players[j], options);
                }
                return object;
            };

            /**
             * Converts this CheckPlayingRsp to JSON.
             * @function toJSON
             * @memberof pb.common.CheckPlayingRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CheckPlayingRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CheckPlayingRsp;
        })();

        common.SyncStateReq = (function() {

            /**
             * Properties of a SyncStateReq.
             * @memberof pb.common
             * @interface ISyncStateReq
             * @property {pb.common.IAssetBaseReq|null} [req] SyncStateReq req
             */

            /**
             * Constructs a new SyncStateReq.
             * @memberof pb.common
             * @classdesc Represents a SyncStateReq.
             * @implements ISyncStateReq
             * @constructor
             * @param {pb.common.ISyncStateReq=} [properties] Properties to set
             */
            function SyncStateReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SyncStateReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.SyncStateReq
             * @instance
             */
            SyncStateReq.prototype.req = null;

            /**
             * Creates a new SyncStateReq instance using the specified properties.
             * @function create
             * @memberof pb.common.SyncStateReq
             * @static
             * @param {pb.common.ISyncStateReq=} [properties] Properties to set
             * @returns {pb.common.SyncStateReq} SyncStateReq instance
             */
            SyncStateReq.create = function create(properties) {
                return new SyncStateReq(properties);
            };

            /**
             * Encodes the specified SyncStateReq message. Does not implicitly {@link pb.common.SyncStateReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.SyncStateReq
             * @static
             * @param {pb.common.ISyncStateReq} message SyncStateReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SyncStateReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SyncStateReq message, length delimited. Does not implicitly {@link pb.common.SyncStateReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.SyncStateReq
             * @static
             * @param {pb.common.ISyncStateReq} message SyncStateReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SyncStateReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SyncStateReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.SyncStateReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.SyncStateReq} SyncStateReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SyncStateReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.SyncStateReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SyncStateReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.SyncStateReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.SyncStateReq} SyncStateReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SyncStateReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SyncStateReq message.
             * @function verify
             * @memberof pb.common.SyncStateReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SyncStateReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                return null;
            };

            /**
             * Creates a SyncStateReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.SyncStateReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.SyncStateReq} SyncStateReq
             */
            SyncStateReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.SyncStateReq)
                    return object;
                var message = new $root.pb.common.SyncStateReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.SyncStateReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                return message;
            };

            /**
             * Creates a plain object from a SyncStateReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.SyncStateReq
             * @static
             * @param {pb.common.SyncStateReq} message SyncStateReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SyncStateReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.req = null;
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                return object;
            };

            /**
             * Converts this SyncStateReq to JSON.
             * @function toJSON
             * @memberof pb.common.SyncStateReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SyncStateReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SyncStateReq;
        })();

        common.SyncStateRsp = (function() {

            /**
             * Properties of a SyncStateRsp.
             * @memberof pb.common
             * @interface ISyncStateRsp
             * @property {pb.common.IBaseRsp|null} [rsp] SyncStateRsp rsp
             * @property {pb.common.IGameState|null} [state] SyncStateRsp state
             * @property {Array.<pb.common.IPlayerRole>|null} [playerRoles] SyncStateRsp playerRoles
             * @property {string|null} [stage] SyncStateRsp stage
             * @property {string|null} [channelID] SyncStateRsp channelID
             * @property {Array.<pb.common.IGamePlayer>|null} [players] SyncStateRsp players
             * @property {pb.common.IGameMap|null} [map] SyncStateRsp map
             * @property {pb.common.MatchType|null} [matchType] SyncStateRsp matchType
             */

            /**
             * Constructs a new SyncStateRsp.
             * @memberof pb.common
             * @classdesc Represents a SyncStateRsp.
             * @implements ISyncStateRsp
             * @constructor
             * @param {pb.common.ISyncStateRsp=} [properties] Properties to set
             */
            function SyncStateRsp(properties) {
                this.playerRoles = [];
                this.players = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SyncStateRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.SyncStateRsp
             * @instance
             */
            SyncStateRsp.prototype.rsp = null;

            /**
             * SyncStateRsp state.
             * @member {pb.common.IGameState|null|undefined} state
             * @memberof pb.common.SyncStateRsp
             * @instance
             */
            SyncStateRsp.prototype.state = null;

            /**
             * SyncStateRsp playerRoles.
             * @member {Array.<pb.common.IPlayerRole>} playerRoles
             * @memberof pb.common.SyncStateRsp
             * @instance
             */
            SyncStateRsp.prototype.playerRoles = $util.emptyArray;

            /**
             * SyncStateRsp stage.
             * @member {string} stage
             * @memberof pb.common.SyncStateRsp
             * @instance
             */
            SyncStateRsp.prototype.stage = "";

            /**
             * SyncStateRsp channelID.
             * @member {string} channelID
             * @memberof pb.common.SyncStateRsp
             * @instance
             */
            SyncStateRsp.prototype.channelID = "";

            /**
             * SyncStateRsp players.
             * @member {Array.<pb.common.IGamePlayer>} players
             * @memberof pb.common.SyncStateRsp
             * @instance
             */
            SyncStateRsp.prototype.players = $util.emptyArray;

            /**
             * SyncStateRsp map.
             * @member {pb.common.IGameMap|null|undefined} map
             * @memberof pb.common.SyncStateRsp
             * @instance
             */
            SyncStateRsp.prototype.map = null;

            /**
             * SyncStateRsp matchType.
             * @member {pb.common.MatchType} matchType
             * @memberof pb.common.SyncStateRsp
             * @instance
             */
            SyncStateRsp.prototype.matchType = 0;

            /**
             * Creates a new SyncStateRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.SyncStateRsp
             * @static
             * @param {pb.common.ISyncStateRsp=} [properties] Properties to set
             * @returns {pb.common.SyncStateRsp} SyncStateRsp instance
             */
            SyncStateRsp.create = function create(properties) {
                return new SyncStateRsp(properties);
            };

            /**
             * Encodes the specified SyncStateRsp message. Does not implicitly {@link pb.common.SyncStateRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.SyncStateRsp
             * @static
             * @param {pb.common.ISyncStateRsp} message SyncStateRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SyncStateRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.state != null && message.hasOwnProperty("state"))
                    $root.pb.common.GameState.encode(message.state, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.playerRoles != null && message.playerRoles.length)
                    for (var i = 0; i < message.playerRoles.length; ++i)
                        $root.pb.common.PlayerRole.encode(message.playerRoles[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.stage != null && message.hasOwnProperty("stage"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.stage);
                if (message.channelID != null && message.hasOwnProperty("channelID"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.channelID);
                if (message.players != null && message.players.length)
                    for (var i = 0; i < message.players.length; ++i)
                        $root.pb.common.GamePlayer.encode(message.players[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.map != null && message.hasOwnProperty("map"))
                    $root.pb.common.GameMap.encode(message.map, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.matchType != null && message.hasOwnProperty("matchType"))
                    writer.uint32(/* id 8, wireType 0 =*/64).int32(message.matchType);
                return writer;
            };

            /**
             * Encodes the specified SyncStateRsp message, length delimited. Does not implicitly {@link pb.common.SyncStateRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.SyncStateRsp
             * @static
             * @param {pb.common.ISyncStateRsp} message SyncStateRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SyncStateRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SyncStateRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.SyncStateRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.SyncStateRsp} SyncStateRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SyncStateRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.SyncStateRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.state = $root.pb.common.GameState.decode(reader, reader.uint32());
                        break;
                    case 3:
                        if (!(message.playerRoles && message.playerRoles.length))
                            message.playerRoles = [];
                        message.playerRoles.push($root.pb.common.PlayerRole.decode(reader, reader.uint32()));
                        break;
                    case 4:
                        message.stage = reader.string();
                        break;
                    case 5:
                        message.channelID = reader.string();
                        break;
                    case 6:
                        if (!(message.players && message.players.length))
                            message.players = [];
                        message.players.push($root.pb.common.GamePlayer.decode(reader, reader.uint32()));
                        break;
                    case 7:
                        message.map = $root.pb.common.GameMap.decode(reader, reader.uint32());
                        break;
                    case 8:
                        message.matchType = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SyncStateRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.SyncStateRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.SyncStateRsp} SyncStateRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SyncStateRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SyncStateRsp message.
             * @function verify
             * @memberof pb.common.SyncStateRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SyncStateRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                if (message.state != null && message.hasOwnProperty("state")) {
                    var error = $root.pb.common.GameState.verify(message.state);
                    if (error)
                        return "state." + error;
                }
                if (message.playerRoles != null && message.hasOwnProperty("playerRoles")) {
                    if (!Array.isArray(message.playerRoles))
                        return "playerRoles: array expected";
                    for (var i = 0; i < message.playerRoles.length; ++i) {
                        var error = $root.pb.common.PlayerRole.verify(message.playerRoles[i]);
                        if (error)
                            return "playerRoles." + error;
                    }
                }
                if (message.stage != null && message.hasOwnProperty("stage"))
                    if (!$util.isString(message.stage))
                        return "stage: string expected";
                if (message.channelID != null && message.hasOwnProperty("channelID"))
                    if (!$util.isString(message.channelID))
                        return "channelID: string expected";
                if (message.players != null && message.hasOwnProperty("players")) {
                    if (!Array.isArray(message.players))
                        return "players: array expected";
                    for (var i = 0; i < message.players.length; ++i) {
                        var error = $root.pb.common.GamePlayer.verify(message.players[i]);
                        if (error)
                            return "players." + error;
                    }
                }
                if (message.map != null && message.hasOwnProperty("map")) {
                    var error = $root.pb.common.GameMap.verify(message.map);
                    if (error)
                        return "map." + error;
                }
                if (message.matchType != null && message.hasOwnProperty("matchType"))
                    switch (message.matchType) {
                    default:
                        return "matchType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                return null;
            };

            /**
             * Creates a SyncStateRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.SyncStateRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.SyncStateRsp} SyncStateRsp
             */
            SyncStateRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.SyncStateRsp)
                    return object;
                var message = new $root.pb.common.SyncStateRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.SyncStateRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                if (object.state != null) {
                    if (typeof object.state !== "object")
                        throw TypeError(".pb.common.SyncStateRsp.state: object expected");
                    message.state = $root.pb.common.GameState.fromObject(object.state);
                }
                if (object.playerRoles) {
                    if (!Array.isArray(object.playerRoles))
                        throw TypeError(".pb.common.SyncStateRsp.playerRoles: array expected");
                    message.playerRoles = [];
                    for (var i = 0; i < object.playerRoles.length; ++i) {
                        if (typeof object.playerRoles[i] !== "object")
                            throw TypeError(".pb.common.SyncStateRsp.playerRoles: object expected");
                        message.playerRoles[i] = $root.pb.common.PlayerRole.fromObject(object.playerRoles[i]);
                    }
                }
                if (object.stage != null)
                    message.stage = String(object.stage);
                if (object.channelID != null)
                    message.channelID = String(object.channelID);
                if (object.players) {
                    if (!Array.isArray(object.players))
                        throw TypeError(".pb.common.SyncStateRsp.players: array expected");
                    message.players = [];
                    for (var i = 0; i < object.players.length; ++i) {
                        if (typeof object.players[i] !== "object")
                            throw TypeError(".pb.common.SyncStateRsp.players: object expected");
                        message.players[i] = $root.pb.common.GamePlayer.fromObject(object.players[i]);
                    }
                }
                if (object.map != null) {
                    if (typeof object.map !== "object")
                        throw TypeError(".pb.common.SyncStateRsp.map: object expected");
                    message.map = $root.pb.common.GameMap.fromObject(object.map);
                }
                switch (object.matchType) {
                case "UNKNOWN":
                case 0:
                    message.matchType = 0;
                    break;
                case "STANDARD":
                case 1:
                    message.matchType = 1;
                    break;
                case "RANK":
                case 2:
                    message.matchType = 2;
                    break;
                case "TRAINING":
                case 3:
                    message.matchType = 3;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a SyncStateRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.SyncStateRsp
             * @static
             * @param {pb.common.SyncStateRsp} message SyncStateRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SyncStateRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.playerRoles = [];
                    object.players = [];
                }
                if (options.defaults) {
                    object.rsp = null;
                    object.state = null;
                    object.stage = "";
                    object.channelID = "";
                    object.map = null;
                    object.matchType = options.enums === String ? "UNKNOWN" : 0;
                }
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                if (message.state != null && message.hasOwnProperty("state"))
                    object.state = $root.pb.common.GameState.toObject(message.state, options);
                if (message.playerRoles && message.playerRoles.length) {
                    object.playerRoles = [];
                    for (var j = 0; j < message.playerRoles.length; ++j)
                        object.playerRoles[j] = $root.pb.common.PlayerRole.toObject(message.playerRoles[j], options);
                }
                if (message.stage != null && message.hasOwnProperty("stage"))
                    object.stage = message.stage;
                if (message.channelID != null && message.hasOwnProperty("channelID"))
                    object.channelID = message.channelID;
                if (message.players && message.players.length) {
                    object.players = [];
                    for (var j = 0; j < message.players.length; ++j)
                        object.players[j] = $root.pb.common.GamePlayer.toObject(message.players[j], options);
                }
                if (message.map != null && message.hasOwnProperty("map"))
                    object.map = $root.pb.common.GameMap.toObject(message.map, options);
                if (message.matchType != null && message.hasOwnProperty("matchType"))
                    object.matchType = options.enums === String ? $root.pb.common.MatchType[message.matchType] : message.matchType;
                return object;
            };

            /**
             * Converts this SyncStateRsp to JSON.
             * @function toJSON
             * @memberof pb.common.SyncStateRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SyncStateRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SyncStateRsp;
        })();

        common.GamePlayer = (function() {

            /**
             * Properties of a GamePlayer.
             * @memberof pb.common
             * @interface IGamePlayer
             * @property {Long|null} [userID] GamePlayer userID
             * @property {pb.common.OnlineState|null} [onlineState] GamePlayer onlineState
             * @property {pb.common.IPlayerRole|null} [role] GamePlayer role
             * @property {pb.common.IPlayerRecord|null} [playerGameData] GamePlayer playerGameData
             * @property {pb.common.GamePlayer.IDishonorable|null} [dishonorable] GamePlayer dishonorable
             */

            /**
             * Constructs a new GamePlayer.
             * @memberof pb.common
             * @classdesc Represents a GamePlayer.
             * @implements IGamePlayer
             * @constructor
             * @param {pb.common.IGamePlayer=} [properties] Properties to set
             */
            function GamePlayer(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GamePlayer userID.
             * @member {Long} userID
             * @memberof pb.common.GamePlayer
             * @instance
             */
            GamePlayer.prototype.userID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * GamePlayer onlineState.
             * @member {pb.common.OnlineState} onlineState
             * @memberof pb.common.GamePlayer
             * @instance
             */
            GamePlayer.prototype.onlineState = 0;

            /**
             * GamePlayer role.
             * @member {pb.common.IPlayerRole|null|undefined} role
             * @memberof pb.common.GamePlayer
             * @instance
             */
            GamePlayer.prototype.role = null;

            /**
             * GamePlayer playerGameData.
             * @member {pb.common.IPlayerRecord|null|undefined} playerGameData
             * @memberof pb.common.GamePlayer
             * @instance
             */
            GamePlayer.prototype.playerGameData = null;

            /**
             * GamePlayer dishonorable.
             * @member {pb.common.GamePlayer.IDishonorable|null|undefined} dishonorable
             * @memberof pb.common.GamePlayer
             * @instance
             */
            GamePlayer.prototype.dishonorable = null;

            /**
             * Creates a new GamePlayer instance using the specified properties.
             * @function create
             * @memberof pb.common.GamePlayer
             * @static
             * @param {pb.common.IGamePlayer=} [properties] Properties to set
             * @returns {pb.common.GamePlayer} GamePlayer instance
             */
            GamePlayer.create = function create(properties) {
                return new GamePlayer(properties);
            };

            /**
             * Encodes the specified GamePlayer message. Does not implicitly {@link pb.common.GamePlayer.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GamePlayer
             * @static
             * @param {pb.common.IGamePlayer} message GamePlayer message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GamePlayer.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userID != null && message.hasOwnProperty("userID"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userID);
                if (message.onlineState != null && message.hasOwnProperty("onlineState"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.onlineState);
                if (message.role != null && message.hasOwnProperty("role"))
                    $root.pb.common.PlayerRole.encode(message.role, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.playerGameData != null && message.hasOwnProperty("playerGameData"))
                    $root.pb.common.PlayerRecord.encode(message.playerGameData, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.dishonorable != null && message.hasOwnProperty("dishonorable"))
                    $root.pb.common.GamePlayer.Dishonorable.encode(message.dishonorable, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GamePlayer message, length delimited. Does not implicitly {@link pb.common.GamePlayer.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GamePlayer
             * @static
             * @param {pb.common.IGamePlayer} message GamePlayer message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GamePlayer.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GamePlayer message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GamePlayer
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GamePlayer} GamePlayer
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GamePlayer.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GamePlayer();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.userID = reader.int64();
                        break;
                    case 2:
                        message.onlineState = reader.int32();
                        break;
                    case 3:
                        message.role = $root.pb.common.PlayerRole.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.playerGameData = $root.pb.common.PlayerRecord.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.dishonorable = $root.pb.common.GamePlayer.Dishonorable.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GamePlayer message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GamePlayer
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GamePlayer} GamePlayer
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GamePlayer.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GamePlayer message.
             * @function verify
             * @memberof pb.common.GamePlayer
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GamePlayer.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userID != null && message.hasOwnProperty("userID"))
                    if (!$util.isInteger(message.userID) && !(message.userID && $util.isInteger(message.userID.low) && $util.isInteger(message.userID.high)))
                        return "userID: integer|Long expected";
                if (message.onlineState != null && message.hasOwnProperty("onlineState"))
                    switch (message.onlineState) {
                    default:
                        return "onlineState: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                        break;
                    }
                if (message.role != null && message.hasOwnProperty("role")) {
                    var error = $root.pb.common.PlayerRole.verify(message.role);
                    if (error)
                        return "role." + error;
                }
                if (message.playerGameData != null && message.hasOwnProperty("playerGameData")) {
                    var error = $root.pb.common.PlayerRecord.verify(message.playerGameData);
                    if (error)
                        return "playerGameData." + error;
                }
                if (message.dishonorable != null && message.hasOwnProperty("dishonorable")) {
                    var error = $root.pb.common.GamePlayer.Dishonorable.verify(message.dishonorable);
                    if (error)
                        return "dishonorable." + error;
                }
                return null;
            };

            /**
             * Creates a GamePlayer message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GamePlayer
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GamePlayer} GamePlayer
             */
            GamePlayer.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GamePlayer)
                    return object;
                var message = new $root.pb.common.GamePlayer();
                if (object.userID != null)
                    if ($util.Long)
                        (message.userID = $util.Long.fromValue(object.userID)).unsigned = false;
                    else if (typeof object.userID === "string")
                        message.userID = parseInt(object.userID, 10);
                    else if (typeof object.userID === "number")
                        message.userID = object.userID;
                    else if (typeof object.userID === "object")
                        message.userID = new $util.LongBits(object.userID.low >>> 0, object.userID.high >>> 0).toNumber();
                switch (object.onlineState) {
                case "OnlineState_unkown":
                case 0:
                    message.onlineState = 0;
                    break;
                case "online":
                case 1:
                    message.onlineState = 1;
                    break;
                case "afk":
                case 2:
                    message.onlineState = 2;
                    break;
                case "brb":
                case 3:
                    message.onlineState = 3;
                    break;
                case "quit":
                case 4:
                    message.onlineState = 4;
                    break;
                }
                if (object.role != null) {
                    if (typeof object.role !== "object")
                        throw TypeError(".pb.common.GamePlayer.role: object expected");
                    message.role = $root.pb.common.PlayerRole.fromObject(object.role);
                }
                if (object.playerGameData != null) {
                    if (typeof object.playerGameData !== "object")
                        throw TypeError(".pb.common.GamePlayer.playerGameData: object expected");
                    message.playerGameData = $root.pb.common.PlayerRecord.fromObject(object.playerGameData);
                }
                if (object.dishonorable != null) {
                    if (typeof object.dishonorable !== "object")
                        throw TypeError(".pb.common.GamePlayer.dishonorable: object expected");
                    message.dishonorable = $root.pb.common.GamePlayer.Dishonorable.fromObject(object.dishonorable);
                }
                return message;
            };

            /**
             * Creates a plain object from a GamePlayer message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GamePlayer
             * @static
             * @param {pb.common.GamePlayer} message GamePlayer
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GamePlayer.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userID = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userID = options.longs === String ? "0" : 0;
                    object.onlineState = options.enums === String ? "OnlineState_unkown" : 0;
                    object.role = null;
                    object.playerGameData = null;
                    object.dishonorable = null;
                }
                if (message.userID != null && message.hasOwnProperty("userID"))
                    if (typeof message.userID === "number")
                        object.userID = options.longs === String ? String(message.userID) : message.userID;
                    else
                        object.userID = options.longs === String ? $util.Long.prototype.toString.call(message.userID) : options.longs === Number ? new $util.LongBits(message.userID.low >>> 0, message.userID.high >>> 0).toNumber() : message.userID;
                if (message.onlineState != null && message.hasOwnProperty("onlineState"))
                    object.onlineState = options.enums === String ? $root.pb.common.OnlineState[message.onlineState] : message.onlineState;
                if (message.role != null && message.hasOwnProperty("role"))
                    object.role = $root.pb.common.PlayerRole.toObject(message.role, options);
                if (message.playerGameData != null && message.hasOwnProperty("playerGameData"))
                    object.playerGameData = $root.pb.common.PlayerRecord.toObject(message.playerGameData, options);
                if (message.dishonorable != null && message.hasOwnProperty("dishonorable"))
                    object.dishonorable = $root.pb.common.GamePlayer.Dishonorable.toObject(message.dishonorable, options);
                return object;
            };

            /**
             * Converts this GamePlayer to JSON.
             * @function toJSON
             * @memberof pb.common.GamePlayer
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GamePlayer.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            GamePlayer.Dishonorable = (function() {

                /**
                 * Properties of a Dishonorable.
                 * @memberof pb.common.GamePlayer
                 * @interface IDishonorable
                 * @property {boolean|null} [punished] Dishonorable punished
                 * @property {pb.common.IDishonorLazyOpt|null} [lazyOpt] Dishonorable lazyOpt
                 */

                /**
                 * Constructs a new Dishonorable.
                 * @memberof pb.common.GamePlayer
                 * @classdesc Represents a Dishonorable.
                 * @implements IDishonorable
                 * @constructor
                 * @param {pb.common.GamePlayer.IDishonorable=} [properties] Properties to set
                 */
                function Dishonorable(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Dishonorable punished.
                 * @member {boolean} punished
                 * @memberof pb.common.GamePlayer.Dishonorable
                 * @instance
                 */
                Dishonorable.prototype.punished = false;

                /**
                 * Dishonorable lazyOpt.
                 * @member {pb.common.IDishonorLazyOpt|null|undefined} lazyOpt
                 * @memberof pb.common.GamePlayer.Dishonorable
                 * @instance
                 */
                Dishonorable.prototype.lazyOpt = null;

                /**
                 * Creates a new Dishonorable instance using the specified properties.
                 * @function create
                 * @memberof pb.common.GamePlayer.Dishonorable
                 * @static
                 * @param {pb.common.GamePlayer.IDishonorable=} [properties] Properties to set
                 * @returns {pb.common.GamePlayer.Dishonorable} Dishonorable instance
                 */
                Dishonorable.create = function create(properties) {
                    return new Dishonorable(properties);
                };

                /**
                 * Encodes the specified Dishonorable message. Does not implicitly {@link pb.common.GamePlayer.Dishonorable.verify|verify} messages.
                 * @function encode
                 * @memberof pb.common.GamePlayer.Dishonorable
                 * @static
                 * @param {pb.common.GamePlayer.IDishonorable} message Dishonorable message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Dishonorable.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.punished != null && message.hasOwnProperty("punished"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.punished);
                    if (message.lazyOpt != null && message.hasOwnProperty("lazyOpt"))
                        $root.pb.common.DishonorLazyOpt.encode(message.lazyOpt, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified Dishonorable message, length delimited. Does not implicitly {@link pb.common.GamePlayer.Dishonorable.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof pb.common.GamePlayer.Dishonorable
                 * @static
                 * @param {pb.common.GamePlayer.IDishonorable} message Dishonorable message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Dishonorable.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Dishonorable message from the specified reader or buffer.
                 * @function decode
                 * @memberof pb.common.GamePlayer.Dishonorable
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {pb.common.GamePlayer.Dishonorable} Dishonorable
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Dishonorable.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GamePlayer.Dishonorable();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.punished = reader.bool();
                            break;
                        case 2:
                            message.lazyOpt = $root.pb.common.DishonorLazyOpt.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Dishonorable message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof pb.common.GamePlayer.Dishonorable
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {pb.common.GamePlayer.Dishonorable} Dishonorable
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Dishonorable.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Dishonorable message.
                 * @function verify
                 * @memberof pb.common.GamePlayer.Dishonorable
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Dishonorable.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.punished != null && message.hasOwnProperty("punished"))
                        if (typeof message.punished !== "boolean")
                            return "punished: boolean expected";
                    if (message.lazyOpt != null && message.hasOwnProperty("lazyOpt")) {
                        var error = $root.pb.common.DishonorLazyOpt.verify(message.lazyOpt);
                        if (error)
                            return "lazyOpt." + error;
                    }
                    return null;
                };

                /**
                 * Creates a Dishonorable message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof pb.common.GamePlayer.Dishonorable
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {pb.common.GamePlayer.Dishonorable} Dishonorable
                 */
                Dishonorable.fromObject = function fromObject(object) {
                    if (object instanceof $root.pb.common.GamePlayer.Dishonorable)
                        return object;
                    var message = new $root.pb.common.GamePlayer.Dishonorable();
                    if (object.punished != null)
                        message.punished = Boolean(object.punished);
                    if (object.lazyOpt != null) {
                        if (typeof object.lazyOpt !== "object")
                            throw TypeError(".pb.common.GamePlayer.Dishonorable.lazyOpt: object expected");
                        message.lazyOpt = $root.pb.common.DishonorLazyOpt.fromObject(object.lazyOpt);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a Dishonorable message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof pb.common.GamePlayer.Dishonorable
                 * @static
                 * @param {pb.common.GamePlayer.Dishonorable} message Dishonorable
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Dishonorable.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.punished = false;
                        object.lazyOpt = null;
                    }
                    if (message.punished != null && message.hasOwnProperty("punished"))
                        object.punished = message.punished;
                    if (message.lazyOpt != null && message.hasOwnProperty("lazyOpt"))
                        object.lazyOpt = $root.pb.common.DishonorLazyOpt.toObject(message.lazyOpt, options);
                    return object;
                };

                /**
                 * Converts this Dishonorable to JSON.
                 * @function toJSON
                 * @memberof pb.common.GamePlayer.Dishonorable
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Dishonorable.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Dishonorable;
            })();

            return GamePlayer;
        })();

        common.GetRolesReq = (function() {

            /**
             * Properties of a GetRolesReq.
             * @memberof pb.common
             * @interface IGetRolesReq
             * @property {pb.common.IAssetBaseReq|null} [req] GetRolesReq req
             */

            /**
             * Constructs a new GetRolesReq.
             * @memberof pb.common
             * @classdesc Represents a GetRolesReq.
             * @implements IGetRolesReq
             * @constructor
             * @param {pb.common.IGetRolesReq=} [properties] Properties to set
             */
            function GetRolesReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GetRolesReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.GetRolesReq
             * @instance
             */
            GetRolesReq.prototype.req = null;

            /**
             * Creates a new GetRolesReq instance using the specified properties.
             * @function create
             * @memberof pb.common.GetRolesReq
             * @static
             * @param {pb.common.IGetRolesReq=} [properties] Properties to set
             * @returns {pb.common.GetRolesReq} GetRolesReq instance
             */
            GetRolesReq.create = function create(properties) {
                return new GetRolesReq(properties);
            };

            /**
             * Encodes the specified GetRolesReq message. Does not implicitly {@link pb.common.GetRolesReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GetRolesReq
             * @static
             * @param {pb.common.IGetRolesReq} message GetRolesReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetRolesReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GetRolesReq message, length delimited. Does not implicitly {@link pb.common.GetRolesReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GetRolesReq
             * @static
             * @param {pb.common.IGetRolesReq} message GetRolesReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetRolesReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetRolesReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GetRolesReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GetRolesReq} GetRolesReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetRolesReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GetRolesReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetRolesReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GetRolesReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GetRolesReq} GetRolesReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetRolesReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetRolesReq message.
             * @function verify
             * @memberof pb.common.GetRolesReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetRolesReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                return null;
            };

            /**
             * Creates a GetRolesReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GetRolesReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GetRolesReq} GetRolesReq
             */
            GetRolesReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GetRolesReq)
                    return object;
                var message = new $root.pb.common.GetRolesReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.GetRolesReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                return message;
            };

            /**
             * Creates a plain object from a GetRolesReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GetRolesReq
             * @static
             * @param {pb.common.GetRolesReq} message GetRolesReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetRolesReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.req = null;
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                return object;
            };

            /**
             * Converts this GetRolesReq to JSON.
             * @function toJSON
             * @memberof pb.common.GetRolesReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetRolesReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GetRolesReq;
        })();

        common.GetRolesRsp = (function() {

            /**
             * Properties of a GetRolesRsp.
             * @memberof pb.common
             * @interface IGetRolesRsp
             * @property {pb.common.IBaseRsp|null} [rsp] GetRolesRsp rsp
             * @property {Array.<pb.common.GetRolesRsp.IRole>|null} [data] GetRolesRsp data
             */

            /**
             * Constructs a new GetRolesRsp.
             * @memberof pb.common
             * @classdesc Represents a GetRolesRsp.
             * @implements IGetRolesRsp
             * @constructor
             * @param {pb.common.IGetRolesRsp=} [properties] Properties to set
             */
            function GetRolesRsp(properties) {
                this.data = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GetRolesRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.GetRolesRsp
             * @instance
             */
            GetRolesRsp.prototype.rsp = null;

            /**
             * GetRolesRsp data.
             * @member {Array.<pb.common.GetRolesRsp.IRole>} data
             * @memberof pb.common.GetRolesRsp
             * @instance
             */
            GetRolesRsp.prototype.data = $util.emptyArray;

            /**
             * Creates a new GetRolesRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.GetRolesRsp
             * @static
             * @param {pb.common.IGetRolesRsp=} [properties] Properties to set
             * @returns {pb.common.GetRolesRsp} GetRolesRsp instance
             */
            GetRolesRsp.create = function create(properties) {
                return new GetRolesRsp(properties);
            };

            /**
             * Encodes the specified GetRolesRsp message. Does not implicitly {@link pb.common.GetRolesRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GetRolesRsp
             * @static
             * @param {pb.common.IGetRolesRsp} message GetRolesRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetRolesRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.data != null && message.data.length)
                    for (var i = 0; i < message.data.length; ++i)
                        $root.pb.common.GetRolesRsp.Role.encode(message.data[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GetRolesRsp message, length delimited. Does not implicitly {@link pb.common.GetRolesRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GetRolesRsp
             * @static
             * @param {pb.common.IGetRolesRsp} message GetRolesRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetRolesRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetRolesRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GetRolesRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GetRolesRsp} GetRolesRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetRolesRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GetRolesRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.data && message.data.length))
                            message.data = [];
                        message.data.push($root.pb.common.GetRolesRsp.Role.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetRolesRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GetRolesRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GetRolesRsp} GetRolesRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetRolesRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetRolesRsp message.
             * @function verify
             * @memberof pb.common.GetRolesRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetRolesRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    if (!Array.isArray(message.data))
                        return "data: array expected";
                    for (var i = 0; i < message.data.length; ++i) {
                        var error = $root.pb.common.GetRolesRsp.Role.verify(message.data[i]);
                        if (error)
                            return "data." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GetRolesRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GetRolesRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GetRolesRsp} GetRolesRsp
             */
            GetRolesRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GetRolesRsp)
                    return object;
                var message = new $root.pb.common.GetRolesRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.GetRolesRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                if (object.data) {
                    if (!Array.isArray(object.data))
                        throw TypeError(".pb.common.GetRolesRsp.data: array expected");
                    message.data = [];
                    for (var i = 0; i < object.data.length; ++i) {
                        if (typeof object.data[i] !== "object")
                            throw TypeError(".pb.common.GetRolesRsp.data: object expected");
                        message.data[i] = $root.pb.common.GetRolesRsp.Role.fromObject(object.data[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GetRolesRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GetRolesRsp
             * @static
             * @param {pb.common.GetRolesRsp} message GetRolesRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetRolesRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.data = [];
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                if (message.data && message.data.length) {
                    object.data = [];
                    for (var j = 0; j < message.data.length; ++j)
                        object.data[j] = $root.pb.common.GetRolesRsp.Role.toObject(message.data[j], options);
                }
                return object;
            };

            /**
             * Converts this GetRolesRsp to JSON.
             * @function toJSON
             * @memberof pb.common.GetRolesRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetRolesRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            GetRolesRsp.Role = (function() {

                /**
                 * Properties of a Role.
                 * @memberof pb.common.GetRolesRsp
                 * @interface IRole
                 * @property {Long|null} [ID] Role ID
                 * @property {string|null} [Name] Role Name
                 * @property {number|null} [MonthExpense] Role MonthExpense
                 * @property {number|null} [MonthSalary] Role MonthSalary
                 * @property {number|null} [MonthFlow] Role MonthFlow
                 * @property {number|null} [Deposit] Role Deposit
                 * @property {number|null} [BabyExpense] Role BabyExpense
                 * @property {number|null} [WageHikePCT] Role WageHikePCT
                 * @property {string|null} [Avatar] Role Avatar
                 * @property {boolean|null} [Free] Role Free
                 * @property {boolean|null} [purchased] Role purchased
                 * @property {Array.<string>|null} [promotions] Role promotions
                 * @property {string|null} [flag] Role flag
                 */

                /**
                 * Constructs a new Role.
                 * @memberof pb.common.GetRolesRsp
                 * @classdesc Represents a Role.
                 * @implements IRole
                 * @constructor
                 * @param {pb.common.GetRolesRsp.IRole=} [properties] Properties to set
                 */
                function Role(properties) {
                    this.promotions = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Role ID.
                 * @member {Long} ID
                 * @memberof pb.common.GetRolesRsp.Role
                 * @instance
                 */
                Role.prototype.ID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * Role Name.
                 * @member {string} Name
                 * @memberof pb.common.GetRolesRsp.Role
                 * @instance
                 */
                Role.prototype.Name = "";

                /**
                 * Role MonthExpense.
                 * @member {number} MonthExpense
                 * @memberof pb.common.GetRolesRsp.Role
                 * @instance
                 */
                Role.prototype.MonthExpense = 0;

                /**
                 * Role MonthSalary.
                 * @member {number} MonthSalary
                 * @memberof pb.common.GetRolesRsp.Role
                 * @instance
                 */
                Role.prototype.MonthSalary = 0;

                /**
                 * Role MonthFlow.
                 * @member {number} MonthFlow
                 * @memberof pb.common.GetRolesRsp.Role
                 * @instance
                 */
                Role.prototype.MonthFlow = 0;

                /**
                 * Role Deposit.
                 * @member {number} Deposit
                 * @memberof pb.common.GetRolesRsp.Role
                 * @instance
                 */
                Role.prototype.Deposit = 0;

                /**
                 * Role BabyExpense.
                 * @member {number} BabyExpense
                 * @memberof pb.common.GetRolesRsp.Role
                 * @instance
                 */
                Role.prototype.BabyExpense = 0;

                /**
                 * Role WageHikePCT.
                 * @member {number} WageHikePCT
                 * @memberof pb.common.GetRolesRsp.Role
                 * @instance
                 */
                Role.prototype.WageHikePCT = 0;

                /**
                 * Role Avatar.
                 * @member {string} Avatar
                 * @memberof pb.common.GetRolesRsp.Role
                 * @instance
                 */
                Role.prototype.Avatar = "";

                /**
                 * Role Free.
                 * @member {boolean} Free
                 * @memberof pb.common.GetRolesRsp.Role
                 * @instance
                 */
                Role.prototype.Free = false;

                /**
                 * Role purchased.
                 * @member {boolean} purchased
                 * @memberof pb.common.GetRolesRsp.Role
                 * @instance
                 */
                Role.prototype.purchased = false;

                /**
                 * Role promotions.
                 * @member {Array.<string>} promotions
                 * @memberof pb.common.GetRolesRsp.Role
                 * @instance
                 */
                Role.prototype.promotions = $util.emptyArray;

                /**
                 * Role flag.
                 * @member {string} flag
                 * @memberof pb.common.GetRolesRsp.Role
                 * @instance
                 */
                Role.prototype.flag = "";

                /**
                 * Creates a new Role instance using the specified properties.
                 * @function create
                 * @memberof pb.common.GetRolesRsp.Role
                 * @static
                 * @param {pb.common.GetRolesRsp.IRole=} [properties] Properties to set
                 * @returns {pb.common.GetRolesRsp.Role} Role instance
                 */
                Role.create = function create(properties) {
                    return new Role(properties);
                };

                /**
                 * Encodes the specified Role message. Does not implicitly {@link pb.common.GetRolesRsp.Role.verify|verify} messages.
                 * @function encode
                 * @memberof pb.common.GetRolesRsp.Role
                 * @static
                 * @param {pb.common.GetRolesRsp.IRole} message Role message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Role.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.ID != null && message.hasOwnProperty("ID"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.ID);
                    if (message.Name != null && message.hasOwnProperty("Name"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.Name);
                    if (message.MonthExpense != null && message.hasOwnProperty("MonthExpense"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.MonthExpense);
                    if (message.MonthSalary != null && message.hasOwnProperty("MonthSalary"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.MonthSalary);
                    if (message.MonthFlow != null && message.hasOwnProperty("MonthFlow"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.MonthFlow);
                    if (message.Deposit != null && message.hasOwnProperty("Deposit"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.Deposit);
                    if (message.BabyExpense != null && message.hasOwnProperty("BabyExpense"))
                        writer.uint32(/* id 7, wireType 0 =*/56).int32(message.BabyExpense);
                    if (message.WageHikePCT != null && message.hasOwnProperty("WageHikePCT"))
                        writer.uint32(/* id 8, wireType 5 =*/69).float(message.WageHikePCT);
                    if (message.Avatar != null && message.hasOwnProperty("Avatar"))
                        writer.uint32(/* id 9, wireType 2 =*/74).string(message.Avatar);
                    if (message.Free != null && message.hasOwnProperty("Free"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.Free);
                    if (message.purchased != null && message.hasOwnProperty("purchased"))
                        writer.uint32(/* id 11, wireType 0 =*/88).bool(message.purchased);
                    if (message.promotions != null && message.promotions.length)
                        for (var i = 0; i < message.promotions.length; ++i)
                            writer.uint32(/* id 12, wireType 2 =*/98).string(message.promotions[i]);
                    if (message.flag != null && message.hasOwnProperty("flag"))
                        writer.uint32(/* id 13, wireType 2 =*/106).string(message.flag);
                    return writer;
                };

                /**
                 * Encodes the specified Role message, length delimited. Does not implicitly {@link pb.common.GetRolesRsp.Role.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof pb.common.GetRolesRsp.Role
                 * @static
                 * @param {pb.common.GetRolesRsp.IRole} message Role message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Role.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Role message from the specified reader or buffer.
                 * @function decode
                 * @memberof pb.common.GetRolesRsp.Role
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {pb.common.GetRolesRsp.Role} Role
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Role.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GetRolesRsp.Role();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.ID = reader.int64();
                            break;
                        case 2:
                            message.Name = reader.string();
                            break;
                        case 3:
                            message.MonthExpense = reader.int32();
                            break;
                        case 4:
                            message.MonthSalary = reader.int32();
                            break;
                        case 5:
                            message.MonthFlow = reader.int32();
                            break;
                        case 6:
                            message.Deposit = reader.int32();
                            break;
                        case 7:
                            message.BabyExpense = reader.int32();
                            break;
                        case 8:
                            message.WageHikePCT = reader.float();
                            break;
                        case 9:
                            message.Avatar = reader.string();
                            break;
                        case 10:
                            message.Free = reader.bool();
                            break;
                        case 11:
                            message.purchased = reader.bool();
                            break;
                        case 12:
                            if (!(message.promotions && message.promotions.length))
                                message.promotions = [];
                            message.promotions.push(reader.string());
                            break;
                        case 13:
                            message.flag = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Role message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof pb.common.GetRolesRsp.Role
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {pb.common.GetRolesRsp.Role} Role
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Role.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Role message.
                 * @function verify
                 * @memberof pb.common.GetRolesRsp.Role
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Role.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.ID != null && message.hasOwnProperty("ID"))
                        if (!$util.isInteger(message.ID) && !(message.ID && $util.isInteger(message.ID.low) && $util.isInteger(message.ID.high)))
                            return "ID: integer|Long expected";
                    if (message.Name != null && message.hasOwnProperty("Name"))
                        if (!$util.isString(message.Name))
                            return "Name: string expected";
                    if (message.MonthExpense != null && message.hasOwnProperty("MonthExpense"))
                        if (!$util.isInteger(message.MonthExpense))
                            return "MonthExpense: integer expected";
                    if (message.MonthSalary != null && message.hasOwnProperty("MonthSalary"))
                        if (!$util.isInteger(message.MonthSalary))
                            return "MonthSalary: integer expected";
                    if (message.MonthFlow != null && message.hasOwnProperty("MonthFlow"))
                        if (!$util.isInteger(message.MonthFlow))
                            return "MonthFlow: integer expected";
                    if (message.Deposit != null && message.hasOwnProperty("Deposit"))
                        if (!$util.isInteger(message.Deposit))
                            return "Deposit: integer expected";
                    if (message.BabyExpense != null && message.hasOwnProperty("BabyExpense"))
                        if (!$util.isInteger(message.BabyExpense))
                            return "BabyExpense: integer expected";
                    if (message.WageHikePCT != null && message.hasOwnProperty("WageHikePCT"))
                        if (typeof message.WageHikePCT !== "number")
                            return "WageHikePCT: number expected";
                    if (message.Avatar != null && message.hasOwnProperty("Avatar"))
                        if (!$util.isString(message.Avatar))
                            return "Avatar: string expected";
                    if (message.Free != null && message.hasOwnProperty("Free"))
                        if (typeof message.Free !== "boolean")
                            return "Free: boolean expected";
                    if (message.purchased != null && message.hasOwnProperty("purchased"))
                        if (typeof message.purchased !== "boolean")
                            return "purchased: boolean expected";
                    if (message.promotions != null && message.hasOwnProperty("promotions")) {
                        if (!Array.isArray(message.promotions))
                            return "promotions: array expected";
                        for (var i = 0; i < message.promotions.length; ++i)
                            if (!$util.isString(message.promotions[i]))
                                return "promotions: string[] expected";
                    }
                    if (message.flag != null && message.hasOwnProperty("flag"))
                        if (!$util.isString(message.flag))
                            return "flag: string expected";
                    return null;
                };

                /**
                 * Creates a Role message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof pb.common.GetRolesRsp.Role
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {pb.common.GetRolesRsp.Role} Role
                 */
                Role.fromObject = function fromObject(object) {
                    if (object instanceof $root.pb.common.GetRolesRsp.Role)
                        return object;
                    var message = new $root.pb.common.GetRolesRsp.Role();
                    if (object.ID != null)
                        if ($util.Long)
                            (message.ID = $util.Long.fromValue(object.ID)).unsigned = false;
                        else if (typeof object.ID === "string")
                            message.ID = parseInt(object.ID, 10);
                        else if (typeof object.ID === "number")
                            message.ID = object.ID;
                        else if (typeof object.ID === "object")
                            message.ID = new $util.LongBits(object.ID.low >>> 0, object.ID.high >>> 0).toNumber();
                    if (object.Name != null)
                        message.Name = String(object.Name);
                    if (object.MonthExpense != null)
                        message.MonthExpense = object.MonthExpense | 0;
                    if (object.MonthSalary != null)
                        message.MonthSalary = object.MonthSalary | 0;
                    if (object.MonthFlow != null)
                        message.MonthFlow = object.MonthFlow | 0;
                    if (object.Deposit != null)
                        message.Deposit = object.Deposit | 0;
                    if (object.BabyExpense != null)
                        message.BabyExpense = object.BabyExpense | 0;
                    if (object.WageHikePCT != null)
                        message.WageHikePCT = Number(object.WageHikePCT);
                    if (object.Avatar != null)
                        message.Avatar = String(object.Avatar);
                    if (object.Free != null)
                        message.Free = Boolean(object.Free);
                    if (object.purchased != null)
                        message.purchased = Boolean(object.purchased);
                    if (object.promotions) {
                        if (!Array.isArray(object.promotions))
                            throw TypeError(".pb.common.GetRolesRsp.Role.promotions: array expected");
                        message.promotions = [];
                        for (var i = 0; i < object.promotions.length; ++i)
                            message.promotions[i] = String(object.promotions[i]);
                    }
                    if (object.flag != null)
                        message.flag = String(object.flag);
                    return message;
                };

                /**
                 * Creates a plain object from a Role message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof pb.common.GetRolesRsp.Role
                 * @static
                 * @param {pb.common.GetRolesRsp.Role} message Role
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Role.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.promotions = [];
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.ID = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.ID = options.longs === String ? "0" : 0;
                        object.Name = "";
                        object.MonthExpense = 0;
                        object.MonthSalary = 0;
                        object.MonthFlow = 0;
                        object.Deposit = 0;
                        object.BabyExpense = 0;
                        object.WageHikePCT = 0;
                        object.Avatar = "";
                        object.Free = false;
                        object.purchased = false;
                        object.flag = "";
                    }
                    if (message.ID != null && message.hasOwnProperty("ID"))
                        if (typeof message.ID === "number")
                            object.ID = options.longs === String ? String(message.ID) : message.ID;
                        else
                            object.ID = options.longs === String ? $util.Long.prototype.toString.call(message.ID) : options.longs === Number ? new $util.LongBits(message.ID.low >>> 0, message.ID.high >>> 0).toNumber() : message.ID;
                    if (message.Name != null && message.hasOwnProperty("Name"))
                        object.Name = message.Name;
                    if (message.MonthExpense != null && message.hasOwnProperty("MonthExpense"))
                        object.MonthExpense = message.MonthExpense;
                    if (message.MonthSalary != null && message.hasOwnProperty("MonthSalary"))
                        object.MonthSalary = message.MonthSalary;
                    if (message.MonthFlow != null && message.hasOwnProperty("MonthFlow"))
                        object.MonthFlow = message.MonthFlow;
                    if (message.Deposit != null && message.hasOwnProperty("Deposit"))
                        object.Deposit = message.Deposit;
                    if (message.BabyExpense != null && message.hasOwnProperty("BabyExpense"))
                        object.BabyExpense = message.BabyExpense;
                    if (message.WageHikePCT != null && message.hasOwnProperty("WageHikePCT"))
                        object.WageHikePCT = options.json && !isFinite(message.WageHikePCT) ? String(message.WageHikePCT) : message.WageHikePCT;
                    if (message.Avatar != null && message.hasOwnProperty("Avatar"))
                        object.Avatar = message.Avatar;
                    if (message.Free != null && message.hasOwnProperty("Free"))
                        object.Free = message.Free;
                    if (message.purchased != null && message.hasOwnProperty("purchased"))
                        object.purchased = message.purchased;
                    if (message.promotions && message.promotions.length) {
                        object.promotions = [];
                        for (var j = 0; j < message.promotions.length; ++j)
                            object.promotions[j] = message.promotions[j];
                    }
                    if (message.flag != null && message.hasOwnProperty("flag"))
                        object.flag = message.flag;
                    return object;
                };

                /**
                 * Converts this Role to JSON.
                 * @function toJSON
                 * @memberof pb.common.GetRolesRsp.Role
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Role.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Role;
            })();

            return GetRolesRsp;
        })();

        common.SelectRoleReq = (function() {

            /**
             * Properties of a SelectRoleReq.
             * @memberof pb.common
             * @interface ISelectRoleReq
             * @property {pb.common.IAssetBaseReq|null} [req] SelectRoleReq req
             * @property {Long|null} [roleId] SelectRoleReq roleId
             */

            /**
             * Constructs a new SelectRoleReq.
             * @memberof pb.common
             * @classdesc Represents a SelectRoleReq.
             * @implements ISelectRoleReq
             * @constructor
             * @param {pb.common.ISelectRoleReq=} [properties] Properties to set
             */
            function SelectRoleReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SelectRoleReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.SelectRoleReq
             * @instance
             */
            SelectRoleReq.prototype.req = null;

            /**
             * SelectRoleReq roleId.
             * @member {Long} roleId
             * @memberof pb.common.SelectRoleReq
             * @instance
             */
            SelectRoleReq.prototype.roleId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new SelectRoleReq instance using the specified properties.
             * @function create
             * @memberof pb.common.SelectRoleReq
             * @static
             * @param {pb.common.ISelectRoleReq=} [properties] Properties to set
             * @returns {pb.common.SelectRoleReq} SelectRoleReq instance
             */
            SelectRoleReq.create = function create(properties) {
                return new SelectRoleReq(properties);
            };

            /**
             * Encodes the specified SelectRoleReq message. Does not implicitly {@link pb.common.SelectRoleReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.SelectRoleReq
             * @static
             * @param {pb.common.ISelectRoleReq} message SelectRoleReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SelectRoleReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.roleId != null && message.hasOwnProperty("roleId"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.roleId);
                return writer;
            };

            /**
             * Encodes the specified SelectRoleReq message, length delimited. Does not implicitly {@link pb.common.SelectRoleReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.SelectRoleReq
             * @static
             * @param {pb.common.ISelectRoleReq} message SelectRoleReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SelectRoleReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SelectRoleReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.SelectRoleReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.SelectRoleReq} SelectRoleReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SelectRoleReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.SelectRoleReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.roleId = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SelectRoleReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.SelectRoleReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.SelectRoleReq} SelectRoleReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SelectRoleReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SelectRoleReq message.
             * @function verify
             * @memberof pb.common.SelectRoleReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SelectRoleReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                if (message.roleId != null && message.hasOwnProperty("roleId"))
                    if (!$util.isInteger(message.roleId) && !(message.roleId && $util.isInteger(message.roleId.low) && $util.isInteger(message.roleId.high)))
                        return "roleId: integer|Long expected";
                return null;
            };

            /**
             * Creates a SelectRoleReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.SelectRoleReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.SelectRoleReq} SelectRoleReq
             */
            SelectRoleReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.SelectRoleReq)
                    return object;
                var message = new $root.pb.common.SelectRoleReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.SelectRoleReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                if (object.roleId != null)
                    if ($util.Long)
                        (message.roleId = $util.Long.fromValue(object.roleId)).unsigned = false;
                    else if (typeof object.roleId === "string")
                        message.roleId = parseInt(object.roleId, 10);
                    else if (typeof object.roleId === "number")
                        message.roleId = object.roleId;
                    else if (typeof object.roleId === "object")
                        message.roleId = new $util.LongBits(object.roleId.low >>> 0, object.roleId.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a SelectRoleReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.SelectRoleReq
             * @static
             * @param {pb.common.SelectRoleReq} message SelectRoleReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SelectRoleReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.req = null;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.roleId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.roleId = options.longs === String ? "0" : 0;
                }
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                if (message.roleId != null && message.hasOwnProperty("roleId"))
                    if (typeof message.roleId === "number")
                        object.roleId = options.longs === String ? String(message.roleId) : message.roleId;
                    else
                        object.roleId = options.longs === String ? $util.Long.prototype.toString.call(message.roleId) : options.longs === Number ? new $util.LongBits(message.roleId.low >>> 0, message.roleId.high >>> 0).toNumber() : message.roleId;
                return object;
            };

            /**
             * Converts this SelectRoleReq to JSON.
             * @function toJSON
             * @memberof pb.common.SelectRoleReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SelectRoleReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SelectRoleReq;
        })();

        common.SelectRoleRsp = (function() {

            /**
             * Properties of a SelectRoleRsp.
             * @memberof pb.common
             * @interface ISelectRoleRsp
             * @property {pb.common.IBaseRsp|null} [rsp] SelectRoleRsp rsp
             */

            /**
             * Constructs a new SelectRoleRsp.
             * @memberof pb.common
             * @classdesc Represents a SelectRoleRsp.
             * @implements ISelectRoleRsp
             * @constructor
             * @param {pb.common.ISelectRoleRsp=} [properties] Properties to set
             */
            function SelectRoleRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SelectRoleRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.SelectRoleRsp
             * @instance
             */
            SelectRoleRsp.prototype.rsp = null;

            /**
             * Creates a new SelectRoleRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.SelectRoleRsp
             * @static
             * @param {pb.common.ISelectRoleRsp=} [properties] Properties to set
             * @returns {pb.common.SelectRoleRsp} SelectRoleRsp instance
             */
            SelectRoleRsp.create = function create(properties) {
                return new SelectRoleRsp(properties);
            };

            /**
             * Encodes the specified SelectRoleRsp message. Does not implicitly {@link pb.common.SelectRoleRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.SelectRoleRsp
             * @static
             * @param {pb.common.ISelectRoleRsp} message SelectRoleRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SelectRoleRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SelectRoleRsp message, length delimited. Does not implicitly {@link pb.common.SelectRoleRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.SelectRoleRsp
             * @static
             * @param {pb.common.ISelectRoleRsp} message SelectRoleRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SelectRoleRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SelectRoleRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.SelectRoleRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.SelectRoleRsp} SelectRoleRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SelectRoleRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.SelectRoleRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SelectRoleRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.SelectRoleRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.SelectRoleRsp} SelectRoleRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SelectRoleRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SelectRoleRsp message.
             * @function verify
             * @memberof pb.common.SelectRoleRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SelectRoleRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                return null;
            };

            /**
             * Creates a SelectRoleRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.SelectRoleRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.SelectRoleRsp} SelectRoleRsp
             */
            SelectRoleRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.SelectRoleRsp)
                    return object;
                var message = new $root.pb.common.SelectRoleRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.SelectRoleRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from a SelectRoleRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.SelectRoleRsp
             * @static
             * @param {pb.common.SelectRoleRsp} message SelectRoleRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SelectRoleRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                return object;
            };

            /**
             * Converts this SelectRoleRsp to JSON.
             * @function toJSON
             * @memberof pb.common.SelectRoleRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SelectRoleRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SelectRoleRsp;
        })();

        common.SelectRoleMsg = (function() {

            /**
             * Properties of a SelectRoleMsg.
             * @memberof pb.common
             * @interface ISelectRoleMsg
             * @property {Long|null} [userId] SelectRoleMsg userId
             * @property {Long|null} [roleId] SelectRoleMsg roleId
             * @property {boolean|null} [isAllReady] SelectRoleMsg isAllReady
             */

            /**
             * Constructs a new SelectRoleMsg.
             * @memberof pb.common
             * @classdesc Represents a SelectRoleMsg.
             * @implements ISelectRoleMsg
             * @constructor
             * @param {pb.common.ISelectRoleMsg=} [properties] Properties to set
             */
            function SelectRoleMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SelectRoleMsg userId.
             * @member {Long} userId
             * @memberof pb.common.SelectRoleMsg
             * @instance
             */
            SelectRoleMsg.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * SelectRoleMsg roleId.
             * @member {Long} roleId
             * @memberof pb.common.SelectRoleMsg
             * @instance
             */
            SelectRoleMsg.prototype.roleId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * SelectRoleMsg isAllReady.
             * @member {boolean} isAllReady
             * @memberof pb.common.SelectRoleMsg
             * @instance
             */
            SelectRoleMsg.prototype.isAllReady = false;

            /**
             * Creates a new SelectRoleMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.SelectRoleMsg
             * @static
             * @param {pb.common.ISelectRoleMsg=} [properties] Properties to set
             * @returns {pb.common.SelectRoleMsg} SelectRoleMsg instance
             */
            SelectRoleMsg.create = function create(properties) {
                return new SelectRoleMsg(properties);
            };

            /**
             * Encodes the specified SelectRoleMsg message. Does not implicitly {@link pb.common.SelectRoleMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.SelectRoleMsg
             * @static
             * @param {pb.common.ISelectRoleMsg} message SelectRoleMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SelectRoleMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userId);
                if (message.roleId != null && message.hasOwnProperty("roleId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.roleId);
                if (message.isAllReady != null && message.hasOwnProperty("isAllReady"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isAllReady);
                return writer;
            };

            /**
             * Encodes the specified SelectRoleMsg message, length delimited. Does not implicitly {@link pb.common.SelectRoleMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.SelectRoleMsg
             * @static
             * @param {pb.common.ISelectRoleMsg} message SelectRoleMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SelectRoleMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SelectRoleMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.SelectRoleMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.SelectRoleMsg} SelectRoleMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SelectRoleMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.SelectRoleMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.userId = reader.int64();
                        break;
                    case 2:
                        message.roleId = reader.int64();
                        break;
                    case 3:
                        message.isAllReady = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SelectRoleMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.SelectRoleMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.SelectRoleMsg} SelectRoleMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SelectRoleMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SelectRoleMsg message.
             * @function verify
             * @memberof pb.common.SelectRoleMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SelectRoleMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                if (message.roleId != null && message.hasOwnProperty("roleId"))
                    if (!$util.isInteger(message.roleId) && !(message.roleId && $util.isInteger(message.roleId.low) && $util.isInteger(message.roleId.high)))
                        return "roleId: integer|Long expected";
                if (message.isAllReady != null && message.hasOwnProperty("isAllReady"))
                    if (typeof message.isAllReady !== "boolean")
                        return "isAllReady: boolean expected";
                return null;
            };

            /**
             * Creates a SelectRoleMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.SelectRoleMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.SelectRoleMsg} SelectRoleMsg
             */
            SelectRoleMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.SelectRoleMsg)
                    return object;
                var message = new $root.pb.common.SelectRoleMsg();
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                if (object.roleId != null)
                    if ($util.Long)
                        (message.roleId = $util.Long.fromValue(object.roleId)).unsigned = false;
                    else if (typeof object.roleId === "string")
                        message.roleId = parseInt(object.roleId, 10);
                    else if (typeof object.roleId === "number")
                        message.roleId = object.roleId;
                    else if (typeof object.roleId === "object")
                        message.roleId = new $util.LongBits(object.roleId.low >>> 0, object.roleId.high >>> 0).toNumber();
                if (object.isAllReady != null)
                    message.isAllReady = Boolean(object.isAllReady);
                return message;
            };

            /**
             * Creates a plain object from a SelectRoleMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.SelectRoleMsg
             * @static
             * @param {pb.common.SelectRoleMsg} message SelectRoleMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SelectRoleMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.roleId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.roleId = options.longs === String ? "0" : 0;
                    object.isAllReady = false;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                if (message.roleId != null && message.hasOwnProperty("roleId"))
                    if (typeof message.roleId === "number")
                        object.roleId = options.longs === String ? String(message.roleId) : message.roleId;
                    else
                        object.roleId = options.longs === String ? $util.Long.prototype.toString.call(message.roleId) : options.longs === Number ? new $util.LongBits(message.roleId.low >>> 0, message.roleId.high >>> 0).toNumber() : message.roleId;
                if (message.isAllReady != null && message.hasOwnProperty("isAllReady"))
                    object.isAllReady = message.isAllReady;
                return object;
            };

            /**
             * Converts this SelectRoleMsg to JSON.
             * @function toJSON
             * @memberof pb.common.SelectRoleMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SelectRoleMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SelectRoleMsg;
        })();

        common.PlayerBeginReq = (function() {

            /**
             * Properties of a PlayerBeginReq.
             * @memberof pb.common
             * @interface IPlayerBeginReq
             * @property {pb.common.IAssetBaseReq|null} [req] PlayerBeginReq req
             */

            /**
             * Constructs a new PlayerBeginReq.
             * @memberof pb.common
             * @classdesc Represents a PlayerBeginReq.
             * @implements IPlayerBeginReq
             * @constructor
             * @param {pb.common.IPlayerBeginReq=} [properties] Properties to set
             */
            function PlayerBeginReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PlayerBeginReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.PlayerBeginReq
             * @instance
             */
            PlayerBeginReq.prototype.req = null;

            /**
             * Creates a new PlayerBeginReq instance using the specified properties.
             * @function create
             * @memberof pb.common.PlayerBeginReq
             * @static
             * @param {pb.common.IPlayerBeginReq=} [properties] Properties to set
             * @returns {pb.common.PlayerBeginReq} PlayerBeginReq instance
             */
            PlayerBeginReq.create = function create(properties) {
                return new PlayerBeginReq(properties);
            };

            /**
             * Encodes the specified PlayerBeginReq message. Does not implicitly {@link pb.common.PlayerBeginReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.PlayerBeginReq
             * @static
             * @param {pb.common.IPlayerBeginReq} message PlayerBeginReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerBeginReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified PlayerBeginReq message, length delimited. Does not implicitly {@link pb.common.PlayerBeginReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.PlayerBeginReq
             * @static
             * @param {pb.common.IPlayerBeginReq} message PlayerBeginReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerBeginReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PlayerBeginReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.PlayerBeginReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.PlayerBeginReq} PlayerBeginReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerBeginReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.PlayerBeginReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PlayerBeginReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.PlayerBeginReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.PlayerBeginReq} PlayerBeginReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerBeginReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PlayerBeginReq message.
             * @function verify
             * @memberof pb.common.PlayerBeginReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PlayerBeginReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                return null;
            };

            /**
             * Creates a PlayerBeginReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.PlayerBeginReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.PlayerBeginReq} PlayerBeginReq
             */
            PlayerBeginReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.PlayerBeginReq)
                    return object;
                var message = new $root.pb.common.PlayerBeginReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.PlayerBeginReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                return message;
            };

            /**
             * Creates a plain object from a PlayerBeginReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.PlayerBeginReq
             * @static
             * @param {pb.common.PlayerBeginReq} message PlayerBeginReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PlayerBeginReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.req = null;
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                return object;
            };

            /**
             * Converts this PlayerBeginReq to JSON.
             * @function toJSON
             * @memberof pb.common.PlayerBeginReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PlayerBeginReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PlayerBeginReq;
        })();

        common.PlayerBeginRsp = (function() {

            /**
             * Properties of a PlayerBeginRsp.
             * @memberof pb.common
             * @interface IPlayerBeginRsp
             * @property {pb.common.IBaseRsp|null} [rsp] PlayerBeginRsp rsp
             */

            /**
             * Constructs a new PlayerBeginRsp.
             * @memberof pb.common
             * @classdesc Represents a PlayerBeginRsp.
             * @implements IPlayerBeginRsp
             * @constructor
             * @param {pb.common.IPlayerBeginRsp=} [properties] Properties to set
             */
            function PlayerBeginRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PlayerBeginRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.PlayerBeginRsp
             * @instance
             */
            PlayerBeginRsp.prototype.rsp = null;

            /**
             * Creates a new PlayerBeginRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.PlayerBeginRsp
             * @static
             * @param {pb.common.IPlayerBeginRsp=} [properties] Properties to set
             * @returns {pb.common.PlayerBeginRsp} PlayerBeginRsp instance
             */
            PlayerBeginRsp.create = function create(properties) {
                return new PlayerBeginRsp(properties);
            };

            /**
             * Encodes the specified PlayerBeginRsp message. Does not implicitly {@link pb.common.PlayerBeginRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.PlayerBeginRsp
             * @static
             * @param {pb.common.IPlayerBeginRsp} message PlayerBeginRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerBeginRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified PlayerBeginRsp message, length delimited. Does not implicitly {@link pb.common.PlayerBeginRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.PlayerBeginRsp
             * @static
             * @param {pb.common.IPlayerBeginRsp} message PlayerBeginRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerBeginRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PlayerBeginRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.PlayerBeginRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.PlayerBeginRsp} PlayerBeginRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerBeginRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.PlayerBeginRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PlayerBeginRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.PlayerBeginRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.PlayerBeginRsp} PlayerBeginRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerBeginRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PlayerBeginRsp message.
             * @function verify
             * @memberof pb.common.PlayerBeginRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PlayerBeginRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                return null;
            };

            /**
             * Creates a PlayerBeginRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.PlayerBeginRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.PlayerBeginRsp} PlayerBeginRsp
             */
            PlayerBeginRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.PlayerBeginRsp)
                    return object;
                var message = new $root.pb.common.PlayerBeginRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.PlayerBeginRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from a PlayerBeginRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.PlayerBeginRsp
             * @static
             * @param {pb.common.PlayerBeginRsp} message PlayerBeginRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PlayerBeginRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                return object;
            };

            /**
             * Converts this PlayerBeginRsp to JSON.
             * @function toJSON
             * @memberof pb.common.PlayerBeginRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PlayerBeginRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PlayerBeginRsp;
        })();

        common.PlayerOutMsg = (function() {

            /**
             * Properties of a PlayerOutMsg.
             * @memberof pb.common
             * @interface IPlayerOutMsg
             * @property {pb.common.IGameBaseMsg|null} [base] PlayerOutMsg base
             * @property {Long|null} [userId] PlayerOutMsg userId
             * @property {string|null} [msg] PlayerOutMsg msg
             * @property {string|null} [reason] PlayerOutMsg reason
             * @property {number|null} [cash] PlayerOutMsg cash
             * @property {number|null} [loanQuota] PlayerOutMsg loanQuota
             * @property {number|null} [expense] PlayerOutMsg expense
             * @property {pb.common.PlayerOutMsg.OutReasonType|null} [reasonType] PlayerOutMsg reasonType
             */

            /**
             * Constructs a new PlayerOutMsg.
             * @memberof pb.common
             * @classdesc Represents a PlayerOutMsg.
             * @implements IPlayerOutMsg
             * @constructor
             * @param {pb.common.IPlayerOutMsg=} [properties] Properties to set
             */
            function PlayerOutMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PlayerOutMsg base.
             * @member {pb.common.IGameBaseMsg|null|undefined} base
             * @memberof pb.common.PlayerOutMsg
             * @instance
             */
            PlayerOutMsg.prototype.base = null;

            /**
             * PlayerOutMsg userId.
             * @member {Long} userId
             * @memberof pb.common.PlayerOutMsg
             * @instance
             */
            PlayerOutMsg.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * PlayerOutMsg msg.
             * @member {string} msg
             * @memberof pb.common.PlayerOutMsg
             * @instance
             */
            PlayerOutMsg.prototype.msg = "";

            /**
             * PlayerOutMsg reason.
             * @member {string} reason
             * @memberof pb.common.PlayerOutMsg
             * @instance
             */
            PlayerOutMsg.prototype.reason = "";

            /**
             * PlayerOutMsg cash.
             * @member {number} cash
             * @memberof pb.common.PlayerOutMsg
             * @instance
             */
            PlayerOutMsg.prototype.cash = 0;

            /**
             * PlayerOutMsg loanQuota.
             * @member {number} loanQuota
             * @memberof pb.common.PlayerOutMsg
             * @instance
             */
            PlayerOutMsg.prototype.loanQuota = 0;

            /**
             * PlayerOutMsg expense.
             * @member {number} expense
             * @memberof pb.common.PlayerOutMsg
             * @instance
             */
            PlayerOutMsg.prototype.expense = 0;

            /**
             * PlayerOutMsg reasonType.
             * @member {pb.common.PlayerOutMsg.OutReasonType} reasonType
             * @memberof pb.common.PlayerOutMsg
             * @instance
             */
            PlayerOutMsg.prototype.reasonType = 0;

            /**
             * Creates a new PlayerOutMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.PlayerOutMsg
             * @static
             * @param {pb.common.IPlayerOutMsg=} [properties] Properties to set
             * @returns {pb.common.PlayerOutMsg} PlayerOutMsg instance
             */
            PlayerOutMsg.create = function create(properties) {
                return new PlayerOutMsg(properties);
            };

            /**
             * Encodes the specified PlayerOutMsg message. Does not implicitly {@link pb.common.PlayerOutMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.PlayerOutMsg
             * @static
             * @param {pb.common.IPlayerOutMsg} message PlayerOutMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerOutMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.base != null && message.hasOwnProperty("base"))
                    $root.pb.common.GameBaseMsg.encode(message.base, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.userId);
                if (message.msg != null && message.hasOwnProperty("msg"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.msg);
                if (message.reason != null && message.hasOwnProperty("reason"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.reason);
                if (message.cash != null && message.hasOwnProperty("cash"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.cash);
                if (message.loanQuota != null && message.hasOwnProperty("loanQuota"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int32(message.loanQuota);
                if (message.expense != null && message.hasOwnProperty("expense"))
                    writer.uint32(/* id 8, wireType 0 =*/64).int32(message.expense);
                if (message.reasonType != null && message.hasOwnProperty("reasonType"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.reasonType);
                return writer;
            };

            /**
             * Encodes the specified PlayerOutMsg message, length delimited. Does not implicitly {@link pb.common.PlayerOutMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.PlayerOutMsg
             * @static
             * @param {pb.common.IPlayerOutMsg} message PlayerOutMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerOutMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PlayerOutMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.PlayerOutMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.PlayerOutMsg} PlayerOutMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerOutMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.PlayerOutMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.base = $root.pb.common.GameBaseMsg.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.userId = reader.int64();
                        break;
                    case 4:
                        message.msg = reader.string();
                        break;
                    case 5:
                        message.reason = reader.string();
                        break;
                    case 6:
                        message.cash = reader.int32();
                        break;
                    case 7:
                        message.loanQuota = reader.int32();
                        break;
                    case 8:
                        message.expense = reader.int32();
                        break;
                    case 9:
                        message.reasonType = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PlayerOutMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.PlayerOutMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.PlayerOutMsg} PlayerOutMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerOutMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PlayerOutMsg message.
             * @function verify
             * @memberof pb.common.PlayerOutMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PlayerOutMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.base != null && message.hasOwnProperty("base")) {
                    var error = $root.pb.common.GameBaseMsg.verify(message.base);
                    if (error)
                        return "base." + error;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                if (message.msg != null && message.hasOwnProperty("msg"))
                    if (!$util.isString(message.msg))
                        return "msg: string expected";
                if (message.reason != null && message.hasOwnProperty("reason"))
                    if (!$util.isString(message.reason))
                        return "reason: string expected";
                if (message.cash != null && message.hasOwnProperty("cash"))
                    if (!$util.isInteger(message.cash))
                        return "cash: integer expected";
                if (message.loanQuota != null && message.hasOwnProperty("loanQuota"))
                    if (!$util.isInteger(message.loanQuota))
                        return "loanQuota: integer expected";
                if (message.expense != null && message.hasOwnProperty("expense"))
                    if (!$util.isInteger(message.expense))
                        return "expense: integer expected";
                if (message.reasonType != null && message.hasOwnProperty("reasonType"))
                    switch (message.reasonType) {
                    default:
                        return "reasonType: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                return null;
            };

            /**
             * Creates a PlayerOutMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.PlayerOutMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.PlayerOutMsg} PlayerOutMsg
             */
            PlayerOutMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.PlayerOutMsg)
                    return object;
                var message = new $root.pb.common.PlayerOutMsg();
                if (object.base != null) {
                    if (typeof object.base !== "object")
                        throw TypeError(".pb.common.PlayerOutMsg.base: object expected");
                    message.base = $root.pb.common.GameBaseMsg.fromObject(object.base);
                }
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                if (object.msg != null)
                    message.msg = String(object.msg);
                if (object.reason != null)
                    message.reason = String(object.reason);
                if (object.cash != null)
                    message.cash = object.cash | 0;
                if (object.loanQuota != null)
                    message.loanQuota = object.loanQuota | 0;
                if (object.expense != null)
                    message.expense = object.expense | 0;
                switch (object.reasonType) {
                case "DEFAULT":
                case 0:
                    message.reasonType = 0;
                    break;
                case "PAYDAY":
                case 1:
                    message.reasonType = 1;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a PlayerOutMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.PlayerOutMsg
             * @static
             * @param {pb.common.PlayerOutMsg} message PlayerOutMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PlayerOutMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.base = null;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                    object.msg = "";
                    object.reason = "";
                    object.cash = 0;
                    object.loanQuota = 0;
                    object.expense = 0;
                    object.reasonType = options.enums === String ? "DEFAULT" : 0;
                }
                if (message.base != null && message.hasOwnProperty("base"))
                    object.base = $root.pb.common.GameBaseMsg.toObject(message.base, options);
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                if (message.msg != null && message.hasOwnProperty("msg"))
                    object.msg = message.msg;
                if (message.reason != null && message.hasOwnProperty("reason"))
                    object.reason = message.reason;
                if (message.cash != null && message.hasOwnProperty("cash"))
                    object.cash = message.cash;
                if (message.loanQuota != null && message.hasOwnProperty("loanQuota"))
                    object.loanQuota = message.loanQuota;
                if (message.expense != null && message.hasOwnProperty("expense"))
                    object.expense = message.expense;
                if (message.reasonType != null && message.hasOwnProperty("reasonType"))
                    object.reasonType = options.enums === String ? $root.pb.common.PlayerOutMsg.OutReasonType[message.reasonType] : message.reasonType;
                return object;
            };

            /**
             * Converts this PlayerOutMsg to JSON.
             * @function toJSON
             * @memberof pb.common.PlayerOutMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PlayerOutMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * OutReasonType enum.
             * @name pb.common.PlayerOutMsg.OutReasonType
             * @enum {string}
             * @property {number} DEFAULT=0 DEFAULT value
             * @property {number} PAYDAY=1 PAYDAY value
             */
            PlayerOutMsg.OutReasonType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "DEFAULT"] = 0;
                values[valuesById[1] = "PAYDAY"] = 1;
                return values;
            })();

            return PlayerOutMsg;
        })();

        common.NextRollMsg = (function() {

            /**
             * Properties of a NextRollMsg.
             * @memberof pb.common
             * @interface INextRollMsg
             * @property {Long|null} [userId] NextRollMsg userId
             * @property {pb.common.Itimer|null} [timer] NextRollMsg timer
             */

            /**
             * Constructs a new NextRollMsg.
             * @memberof pb.common
             * @classdesc Represents a NextRollMsg.
             * @implements INextRollMsg
             * @constructor
             * @param {pb.common.INextRollMsg=} [properties] Properties to set
             */
            function NextRollMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * NextRollMsg userId.
             * @member {Long} userId
             * @memberof pb.common.NextRollMsg
             * @instance
             */
            NextRollMsg.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * NextRollMsg timer.
             * @member {pb.common.Itimer|null|undefined} timer
             * @memberof pb.common.NextRollMsg
             * @instance
             */
            NextRollMsg.prototype.timer = null;

            /**
             * Creates a new NextRollMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.NextRollMsg
             * @static
             * @param {pb.common.INextRollMsg=} [properties] Properties to set
             * @returns {pb.common.NextRollMsg} NextRollMsg instance
             */
            NextRollMsg.create = function create(properties) {
                return new NextRollMsg(properties);
            };

            /**
             * Encodes the specified NextRollMsg message. Does not implicitly {@link pb.common.NextRollMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.NextRollMsg
             * @static
             * @param {pb.common.INextRollMsg} message NextRollMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            NextRollMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userId);
                if (message.timer != null && message.hasOwnProperty("timer"))
                    $root.pb.common.timer.encode(message.timer, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified NextRollMsg message, length delimited. Does not implicitly {@link pb.common.NextRollMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.NextRollMsg
             * @static
             * @param {pb.common.INextRollMsg} message NextRollMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            NextRollMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a NextRollMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.NextRollMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.NextRollMsg} NextRollMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            NextRollMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.NextRollMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.userId = reader.int64();
                        break;
                    case 2:
                        message.timer = $root.pb.common.timer.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a NextRollMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.NextRollMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.NextRollMsg} NextRollMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            NextRollMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a NextRollMsg message.
             * @function verify
             * @memberof pb.common.NextRollMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            NextRollMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                if (message.timer != null && message.hasOwnProperty("timer")) {
                    var error = $root.pb.common.timer.verify(message.timer);
                    if (error)
                        return "timer." + error;
                }
                return null;
            };

            /**
             * Creates a NextRollMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.NextRollMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.NextRollMsg} NextRollMsg
             */
            NextRollMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.NextRollMsg)
                    return object;
                var message = new $root.pb.common.NextRollMsg();
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                if (object.timer != null) {
                    if (typeof object.timer !== "object")
                        throw TypeError(".pb.common.NextRollMsg.timer: object expected");
                    message.timer = $root.pb.common.timer.fromObject(object.timer);
                }
                return message;
            };

            /**
             * Creates a plain object from a NextRollMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.NextRollMsg
             * @static
             * @param {pb.common.NextRollMsg} message NextRollMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            NextRollMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                    object.timer = null;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                if (message.timer != null && message.hasOwnProperty("timer"))
                    object.timer = $root.pb.common.timer.toObject(message.timer, options);
                return object;
            };

            /**
             * Converts this NextRollMsg to JSON.
             * @function toJSON
             * @memberof pb.common.NextRollMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            NextRollMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return NextRollMsg;
        })();

        common.RollReq = (function() {

            /**
             * Properties of a RollReq.
             * @memberof pb.common
             * @interface IRollReq
             * @property {pb.common.IAssetBaseReq|null} [req] RollReq req
             * @property {number|null} [mockScenarioType] RollReq mockScenarioType
             * @property {number|null} [mockPayment] RollReq mockPayment
             * @property {Long|null} [mockScenarioId] RollReq mockScenarioId
             * @property {number|null} [mockPayDay] RollReq mockPayDay
             * @property {boolean|null} [mockGameOver] RollReq mockGameOver
             */

            /**
             * Constructs a new RollReq.
             * @memberof pb.common
             * @classdesc Represents a RollReq.
             * @implements IRollReq
             * @constructor
             * @param {pb.common.IRollReq=} [properties] Properties to set
             */
            function RollReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RollReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.RollReq
             * @instance
             */
            RollReq.prototype.req = null;

            /**
             * RollReq mockScenarioType.
             * @member {number} mockScenarioType
             * @memberof pb.common.RollReq
             * @instance
             */
            RollReq.prototype.mockScenarioType = 0;

            /**
             * RollReq mockPayment.
             * @member {number} mockPayment
             * @memberof pb.common.RollReq
             * @instance
             */
            RollReq.prototype.mockPayment = 0;

            /**
             * RollReq mockScenarioId.
             * @member {Long} mockScenarioId
             * @memberof pb.common.RollReq
             * @instance
             */
            RollReq.prototype.mockScenarioId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * RollReq mockPayDay.
             * @member {number} mockPayDay
             * @memberof pb.common.RollReq
             * @instance
             */
            RollReq.prototype.mockPayDay = 0;

            /**
             * RollReq mockGameOver.
             * @member {boolean} mockGameOver
             * @memberof pb.common.RollReq
             * @instance
             */
            RollReq.prototype.mockGameOver = false;

            /**
             * Creates a new RollReq instance using the specified properties.
             * @function create
             * @memberof pb.common.RollReq
             * @static
             * @param {pb.common.IRollReq=} [properties] Properties to set
             * @returns {pb.common.RollReq} RollReq instance
             */
            RollReq.create = function create(properties) {
                return new RollReq(properties);
            };

            /**
             * Encodes the specified RollReq message. Does not implicitly {@link pb.common.RollReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.RollReq
             * @static
             * @param {pb.common.IRollReq} message RollReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RollReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.mockScenarioType != null && message.hasOwnProperty("mockScenarioType"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.mockScenarioType);
                if (message.mockPayment != null && message.hasOwnProperty("mockPayment"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.mockPayment);
                if (message.mockScenarioId != null && message.hasOwnProperty("mockScenarioId"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.mockScenarioId);
                if (message.mockPayDay != null && message.hasOwnProperty("mockPayDay"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.mockPayDay);
                if (message.mockGameOver != null && message.hasOwnProperty("mockGameOver"))
                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message.mockGameOver);
                return writer;
            };

            /**
             * Encodes the specified RollReq message, length delimited. Does not implicitly {@link pb.common.RollReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.RollReq
             * @static
             * @param {pb.common.IRollReq} message RollReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RollReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RollReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.RollReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.RollReq} RollReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RollReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.RollReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.mockScenarioType = reader.int32();
                        break;
                    case 3:
                        message.mockPayment = reader.int32();
                        break;
                    case 4:
                        message.mockScenarioId = reader.int64();
                        break;
                    case 5:
                        message.mockPayDay = reader.int32();
                        break;
                    case 6:
                        message.mockGameOver = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RollReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.RollReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.RollReq} RollReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RollReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RollReq message.
             * @function verify
             * @memberof pb.common.RollReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RollReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                if (message.mockScenarioType != null && message.hasOwnProperty("mockScenarioType"))
                    if (!$util.isInteger(message.mockScenarioType))
                        return "mockScenarioType: integer expected";
                if (message.mockPayment != null && message.hasOwnProperty("mockPayment"))
                    if (!$util.isInteger(message.mockPayment))
                        return "mockPayment: integer expected";
                if (message.mockScenarioId != null && message.hasOwnProperty("mockScenarioId"))
                    if (!$util.isInteger(message.mockScenarioId) && !(message.mockScenarioId && $util.isInteger(message.mockScenarioId.low) && $util.isInteger(message.mockScenarioId.high)))
                        return "mockScenarioId: integer|Long expected";
                if (message.mockPayDay != null && message.hasOwnProperty("mockPayDay"))
                    if (!$util.isInteger(message.mockPayDay))
                        return "mockPayDay: integer expected";
                if (message.mockGameOver != null && message.hasOwnProperty("mockGameOver"))
                    if (typeof message.mockGameOver !== "boolean")
                        return "mockGameOver: boolean expected";
                return null;
            };

            /**
             * Creates a RollReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.RollReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.RollReq} RollReq
             */
            RollReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.RollReq)
                    return object;
                var message = new $root.pb.common.RollReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.RollReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                if (object.mockScenarioType != null)
                    message.mockScenarioType = object.mockScenarioType | 0;
                if (object.mockPayment != null)
                    message.mockPayment = object.mockPayment | 0;
                if (object.mockScenarioId != null)
                    if ($util.Long)
                        (message.mockScenarioId = $util.Long.fromValue(object.mockScenarioId)).unsigned = false;
                    else if (typeof object.mockScenarioId === "string")
                        message.mockScenarioId = parseInt(object.mockScenarioId, 10);
                    else if (typeof object.mockScenarioId === "number")
                        message.mockScenarioId = object.mockScenarioId;
                    else if (typeof object.mockScenarioId === "object")
                        message.mockScenarioId = new $util.LongBits(object.mockScenarioId.low >>> 0, object.mockScenarioId.high >>> 0).toNumber();
                if (object.mockPayDay != null)
                    message.mockPayDay = object.mockPayDay | 0;
                if (object.mockGameOver != null)
                    message.mockGameOver = Boolean(object.mockGameOver);
                return message;
            };

            /**
             * Creates a plain object from a RollReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.RollReq
             * @static
             * @param {pb.common.RollReq} message RollReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RollReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.req = null;
                    object.mockScenarioType = 0;
                    object.mockPayment = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.mockScenarioId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.mockScenarioId = options.longs === String ? "0" : 0;
                    object.mockPayDay = 0;
                    object.mockGameOver = false;
                }
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                if (message.mockScenarioType != null && message.hasOwnProperty("mockScenarioType"))
                    object.mockScenarioType = message.mockScenarioType;
                if (message.mockPayment != null && message.hasOwnProperty("mockPayment"))
                    object.mockPayment = message.mockPayment;
                if (message.mockScenarioId != null && message.hasOwnProperty("mockScenarioId"))
                    if (typeof message.mockScenarioId === "number")
                        object.mockScenarioId = options.longs === String ? String(message.mockScenarioId) : message.mockScenarioId;
                    else
                        object.mockScenarioId = options.longs === String ? $util.Long.prototype.toString.call(message.mockScenarioId) : options.longs === Number ? new $util.LongBits(message.mockScenarioId.low >>> 0, message.mockScenarioId.high >>> 0).toNumber() : message.mockScenarioId;
                if (message.mockPayDay != null && message.hasOwnProperty("mockPayDay"))
                    object.mockPayDay = message.mockPayDay;
                if (message.mockGameOver != null && message.hasOwnProperty("mockGameOver"))
                    object.mockGameOver = message.mockGameOver;
                return object;
            };

            /**
             * Converts this RollReq to JSON.
             * @function toJSON
             * @memberof pb.common.RollReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RollReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RollReq;
        })();

        common.RollRsp = (function() {

            /**
             * Properties of a RollRsp.
             * @memberof pb.common
             * @interface IRollRsp
             * @property {pb.common.IBaseRsp|null} [rsp] RollRsp rsp
             */

            /**
             * Constructs a new RollRsp.
             * @memberof pb.common
             * @classdesc Represents a RollRsp.
             * @implements IRollRsp
             * @constructor
             * @param {pb.common.IRollRsp=} [properties] Properties to set
             */
            function RollRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RollRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.RollRsp
             * @instance
             */
            RollRsp.prototype.rsp = null;

            /**
             * Creates a new RollRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.RollRsp
             * @static
             * @param {pb.common.IRollRsp=} [properties] Properties to set
             * @returns {pb.common.RollRsp} RollRsp instance
             */
            RollRsp.create = function create(properties) {
                return new RollRsp(properties);
            };

            /**
             * Encodes the specified RollRsp message. Does not implicitly {@link pb.common.RollRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.RollRsp
             * @static
             * @param {pb.common.IRollRsp} message RollRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RollRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified RollRsp message, length delimited. Does not implicitly {@link pb.common.RollRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.RollRsp
             * @static
             * @param {pb.common.IRollRsp} message RollRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RollRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RollRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.RollRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.RollRsp} RollRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RollRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.RollRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RollRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.RollRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.RollRsp} RollRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RollRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RollRsp message.
             * @function verify
             * @memberof pb.common.RollRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RollRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                return null;
            };

            /**
             * Creates a RollRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.RollRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.RollRsp} RollRsp
             */
            RollRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.RollRsp)
                    return object;
                var message = new $root.pb.common.RollRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.RollRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from a RollRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.RollRsp
             * @static
             * @param {pb.common.RollRsp} message RollRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RollRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                return object;
            };

            /**
             * Converts this RollRsp to JSON.
             * @function toJSON
             * @memberof pb.common.RollRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RollRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RollRsp;
        })();

        common.RollMsg = (function() {

            /**
             * Properties of a RollMsg.
             * @memberof pb.common
             * @interface IRollMsg
             * @property {pb.common.IGameBaseMsg|null} [base] RollMsg base
             * @property {number|null} [isPayDay] RollMsg isPayDay
             * @property {number|null} [num] RollMsg num
             * @property {Long|null} [scenarioId] RollMsg scenarioId
             * @property {number|null} [scenarioType] RollMsg scenarioType
             * @property {pb.common.IScenario|null} [scenario] RollMsg scenario
             * @property {pb.common.IRoundData|null} [roundData] RollMsg roundData
             * @property {pb.common.Itimer|null} [timer] RollMsg timer
             * @property {Array.<Long>|null} [traders] RollMsg traders
             * @property {pb.common.RollMsg.IRoute|null} [move] RollMsg move
             * @property {Array.<pb.common.RollMsg.ISalaryInfo>|null} [salaryInfo] RollMsg salaryInfo
             */

            /**
             * Constructs a new RollMsg.
             * @memberof pb.common
             * @classdesc Represents a RollMsg.
             * @implements IRollMsg
             * @constructor
             * @param {pb.common.IRollMsg=} [properties] Properties to set
             */
            function RollMsg(properties) {
                this.traders = [];
                this.salaryInfo = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RollMsg base.
             * @member {pb.common.IGameBaseMsg|null|undefined} base
             * @memberof pb.common.RollMsg
             * @instance
             */
            RollMsg.prototype.base = null;

            /**
             * RollMsg isPayDay.
             * @member {number} isPayDay
             * @memberof pb.common.RollMsg
             * @instance
             */
            RollMsg.prototype.isPayDay = 0;

            /**
             * RollMsg num.
             * @member {number} num
             * @memberof pb.common.RollMsg
             * @instance
             */
            RollMsg.prototype.num = 0;

            /**
             * RollMsg scenarioId.
             * @member {Long} scenarioId
             * @memberof pb.common.RollMsg
             * @instance
             */
            RollMsg.prototype.scenarioId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * RollMsg scenarioType.
             * @member {number} scenarioType
             * @memberof pb.common.RollMsg
             * @instance
             */
            RollMsg.prototype.scenarioType = 0;

            /**
             * RollMsg scenario.
             * @member {pb.common.IScenario|null|undefined} scenario
             * @memberof pb.common.RollMsg
             * @instance
             */
            RollMsg.prototype.scenario = null;

            /**
             * RollMsg roundData.
             * @member {pb.common.IRoundData|null|undefined} roundData
             * @memberof pb.common.RollMsg
             * @instance
             */
            RollMsg.prototype.roundData = null;

            /**
             * RollMsg timer.
             * @member {pb.common.Itimer|null|undefined} timer
             * @memberof pb.common.RollMsg
             * @instance
             */
            RollMsg.prototype.timer = null;

            /**
             * RollMsg traders.
             * @member {Array.<Long>} traders
             * @memberof pb.common.RollMsg
             * @instance
             */
            RollMsg.prototype.traders = $util.emptyArray;

            /**
             * RollMsg move.
             * @member {pb.common.RollMsg.IRoute|null|undefined} move
             * @memberof pb.common.RollMsg
             * @instance
             */
            RollMsg.prototype.move = null;

            /**
             * RollMsg salaryInfo.
             * @member {Array.<pb.common.RollMsg.ISalaryInfo>} salaryInfo
             * @memberof pb.common.RollMsg
             * @instance
             */
            RollMsg.prototype.salaryInfo = $util.emptyArray;

            /**
             * Creates a new RollMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.RollMsg
             * @static
             * @param {pb.common.IRollMsg=} [properties] Properties to set
             * @returns {pb.common.RollMsg} RollMsg instance
             */
            RollMsg.create = function create(properties) {
                return new RollMsg(properties);
            };

            /**
             * Encodes the specified RollMsg message. Does not implicitly {@link pb.common.RollMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.RollMsg
             * @static
             * @param {pb.common.IRollMsg} message RollMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RollMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.base != null && message.hasOwnProperty("base"))
                    $root.pb.common.GameBaseMsg.encode(message.base, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.isPayDay != null && message.hasOwnProperty("isPayDay"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.isPayDay);
                if (message.num != null && message.hasOwnProperty("num"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.num);
                if (message.scenarioId != null && message.hasOwnProperty("scenarioId"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.scenarioId);
                if (message.scenarioType != null && message.hasOwnProperty("scenarioType"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.scenarioType);
                if (message.scenario != null && message.hasOwnProperty("scenario"))
                    $root.pb.common.Scenario.encode(message.scenario, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.roundData != null && message.hasOwnProperty("roundData"))
                    $root.pb.common.RoundData.encode(message.roundData, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.timer != null && message.hasOwnProperty("timer"))
                    $root.pb.common.timer.encode(message.timer, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.traders != null && message.traders.length) {
                    writer.uint32(/* id 9, wireType 2 =*/74).fork();
                    for (var i = 0; i < message.traders.length; ++i)
                        writer.int64(message.traders[i]);
                    writer.ldelim();
                }
                if (message.move != null && message.hasOwnProperty("move"))
                    $root.pb.common.RollMsg.Route.encode(message.move, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                if (message.salaryInfo != null && message.salaryInfo.length)
                    for (var i = 0; i < message.salaryInfo.length; ++i)
                        $root.pb.common.RollMsg.SalaryInfo.encode(message.salaryInfo[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified RollMsg message, length delimited. Does not implicitly {@link pb.common.RollMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.RollMsg
             * @static
             * @param {pb.common.IRollMsg} message RollMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RollMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RollMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.RollMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.RollMsg} RollMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RollMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.RollMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.base = $root.pb.common.GameBaseMsg.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.isPayDay = reader.int32();
                        break;
                    case 3:
                        message.num = reader.int32();
                        break;
                    case 4:
                        message.scenarioId = reader.int64();
                        break;
                    case 5:
                        message.scenarioType = reader.int32();
                        break;
                    case 6:
                        message.scenario = $root.pb.common.Scenario.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message.roundData = $root.pb.common.RoundData.decode(reader, reader.uint32());
                        break;
                    case 8:
                        message.timer = $root.pb.common.timer.decode(reader, reader.uint32());
                        break;
                    case 9:
                        if (!(message.traders && message.traders.length))
                            message.traders = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.traders.push(reader.int64());
                        } else
                            message.traders.push(reader.int64());
                        break;
                    case 10:
                        message.move = $root.pb.common.RollMsg.Route.decode(reader, reader.uint32());
                        break;
                    case 11:
                        if (!(message.salaryInfo && message.salaryInfo.length))
                            message.salaryInfo = [];
                        message.salaryInfo.push($root.pb.common.RollMsg.SalaryInfo.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RollMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.RollMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.RollMsg} RollMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RollMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RollMsg message.
             * @function verify
             * @memberof pb.common.RollMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RollMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.base != null && message.hasOwnProperty("base")) {
                    var error = $root.pb.common.GameBaseMsg.verify(message.base);
                    if (error)
                        return "base." + error;
                }
                if (message.isPayDay != null && message.hasOwnProperty("isPayDay"))
                    if (!$util.isInteger(message.isPayDay))
                        return "isPayDay: integer expected";
                if (message.num != null && message.hasOwnProperty("num"))
                    if (!$util.isInteger(message.num))
                        return "num: integer expected";
                if (message.scenarioId != null && message.hasOwnProperty("scenarioId"))
                    if (!$util.isInteger(message.scenarioId) && !(message.scenarioId && $util.isInteger(message.scenarioId.low) && $util.isInteger(message.scenarioId.high)))
                        return "scenarioId: integer|Long expected";
                if (message.scenarioType != null && message.hasOwnProperty("scenarioType"))
                    if (!$util.isInteger(message.scenarioType))
                        return "scenarioType: integer expected";
                if (message.scenario != null && message.hasOwnProperty("scenario")) {
                    var error = $root.pb.common.Scenario.verify(message.scenario);
                    if (error)
                        return "scenario." + error;
                }
                if (message.roundData != null && message.hasOwnProperty("roundData")) {
                    var error = $root.pb.common.RoundData.verify(message.roundData);
                    if (error)
                        return "roundData." + error;
                }
                if (message.timer != null && message.hasOwnProperty("timer")) {
                    var error = $root.pb.common.timer.verify(message.timer);
                    if (error)
                        return "timer." + error;
                }
                if (message.traders != null && message.hasOwnProperty("traders")) {
                    if (!Array.isArray(message.traders))
                        return "traders: array expected";
                    for (var i = 0; i < message.traders.length; ++i)
                        if (!$util.isInteger(message.traders[i]) && !(message.traders[i] && $util.isInteger(message.traders[i].low) && $util.isInteger(message.traders[i].high)))
                            return "traders: integer|Long[] expected";
                }
                if (message.move != null && message.hasOwnProperty("move")) {
                    var error = $root.pb.common.RollMsg.Route.verify(message.move);
                    if (error)
                        return "move." + error;
                }
                if (message.salaryInfo != null && message.hasOwnProperty("salaryInfo")) {
                    if (!Array.isArray(message.salaryInfo))
                        return "salaryInfo: array expected";
                    for (var i = 0; i < message.salaryInfo.length; ++i) {
                        var error = $root.pb.common.RollMsg.SalaryInfo.verify(message.salaryInfo[i]);
                        if (error)
                            return "salaryInfo." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a RollMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.RollMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.RollMsg} RollMsg
             */
            RollMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.RollMsg)
                    return object;
                var message = new $root.pb.common.RollMsg();
                if (object.base != null) {
                    if (typeof object.base !== "object")
                        throw TypeError(".pb.common.RollMsg.base: object expected");
                    message.base = $root.pb.common.GameBaseMsg.fromObject(object.base);
                }
                if (object.isPayDay != null)
                    message.isPayDay = object.isPayDay | 0;
                if (object.num != null)
                    message.num = object.num | 0;
                if (object.scenarioId != null)
                    if ($util.Long)
                        (message.scenarioId = $util.Long.fromValue(object.scenarioId)).unsigned = false;
                    else if (typeof object.scenarioId === "string")
                        message.scenarioId = parseInt(object.scenarioId, 10);
                    else if (typeof object.scenarioId === "number")
                        message.scenarioId = object.scenarioId;
                    else if (typeof object.scenarioId === "object")
                        message.scenarioId = new $util.LongBits(object.scenarioId.low >>> 0, object.scenarioId.high >>> 0).toNumber();
                if (object.scenarioType != null)
                    message.scenarioType = object.scenarioType | 0;
                if (object.scenario != null) {
                    if (typeof object.scenario !== "object")
                        throw TypeError(".pb.common.RollMsg.scenario: object expected");
                    message.scenario = $root.pb.common.Scenario.fromObject(object.scenario);
                }
                if (object.roundData != null) {
                    if (typeof object.roundData !== "object")
                        throw TypeError(".pb.common.RollMsg.roundData: object expected");
                    message.roundData = $root.pb.common.RoundData.fromObject(object.roundData);
                }
                if (object.timer != null) {
                    if (typeof object.timer !== "object")
                        throw TypeError(".pb.common.RollMsg.timer: object expected");
                    message.timer = $root.pb.common.timer.fromObject(object.timer);
                }
                if (object.traders) {
                    if (!Array.isArray(object.traders))
                        throw TypeError(".pb.common.RollMsg.traders: array expected");
                    message.traders = [];
                    for (var i = 0; i < object.traders.length; ++i)
                        if ($util.Long)
                            (message.traders[i] = $util.Long.fromValue(object.traders[i])).unsigned = false;
                        else if (typeof object.traders[i] === "string")
                            message.traders[i] = parseInt(object.traders[i], 10);
                        else if (typeof object.traders[i] === "number")
                            message.traders[i] = object.traders[i];
                        else if (typeof object.traders[i] === "object")
                            message.traders[i] = new $util.LongBits(object.traders[i].low >>> 0, object.traders[i].high >>> 0).toNumber();
                }
                if (object.move != null) {
                    if (typeof object.move !== "object")
                        throw TypeError(".pb.common.RollMsg.move: object expected");
                    message.move = $root.pb.common.RollMsg.Route.fromObject(object.move);
                }
                if (object.salaryInfo) {
                    if (!Array.isArray(object.salaryInfo))
                        throw TypeError(".pb.common.RollMsg.salaryInfo: array expected");
                    message.salaryInfo = [];
                    for (var i = 0; i < object.salaryInfo.length; ++i) {
                        if (typeof object.salaryInfo[i] !== "object")
                            throw TypeError(".pb.common.RollMsg.salaryInfo: object expected");
                        message.salaryInfo[i] = $root.pb.common.RollMsg.SalaryInfo.fromObject(object.salaryInfo[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a RollMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.RollMsg
             * @static
             * @param {pb.common.RollMsg} message RollMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RollMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.traders = [];
                    object.salaryInfo = [];
                }
                if (options.defaults) {
                    object.base = null;
                    object.isPayDay = 0;
                    object.num = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.scenarioId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.scenarioId = options.longs === String ? "0" : 0;
                    object.scenarioType = 0;
                    object.scenario = null;
                    object.roundData = null;
                    object.timer = null;
                    object.move = null;
                }
                if (message.base != null && message.hasOwnProperty("base"))
                    object.base = $root.pb.common.GameBaseMsg.toObject(message.base, options);
                if (message.isPayDay != null && message.hasOwnProperty("isPayDay"))
                    object.isPayDay = message.isPayDay;
                if (message.num != null && message.hasOwnProperty("num"))
                    object.num = message.num;
                if (message.scenarioId != null && message.hasOwnProperty("scenarioId"))
                    if (typeof message.scenarioId === "number")
                        object.scenarioId = options.longs === String ? String(message.scenarioId) : message.scenarioId;
                    else
                        object.scenarioId = options.longs === String ? $util.Long.prototype.toString.call(message.scenarioId) : options.longs === Number ? new $util.LongBits(message.scenarioId.low >>> 0, message.scenarioId.high >>> 0).toNumber() : message.scenarioId;
                if (message.scenarioType != null && message.hasOwnProperty("scenarioType"))
                    object.scenarioType = message.scenarioType;
                if (message.scenario != null && message.hasOwnProperty("scenario"))
                    object.scenario = $root.pb.common.Scenario.toObject(message.scenario, options);
                if (message.roundData != null && message.hasOwnProperty("roundData"))
                    object.roundData = $root.pb.common.RoundData.toObject(message.roundData, options);
                if (message.timer != null && message.hasOwnProperty("timer"))
                    object.timer = $root.pb.common.timer.toObject(message.timer, options);
                if (message.traders && message.traders.length) {
                    object.traders = [];
                    for (var j = 0; j < message.traders.length; ++j)
                        if (typeof message.traders[j] === "number")
                            object.traders[j] = options.longs === String ? String(message.traders[j]) : message.traders[j];
                        else
                            object.traders[j] = options.longs === String ? $util.Long.prototype.toString.call(message.traders[j]) : options.longs === Number ? new $util.LongBits(message.traders[j].low >>> 0, message.traders[j].high >>> 0).toNumber() : message.traders[j];
                }
                if (message.move != null && message.hasOwnProperty("move"))
                    object.move = $root.pb.common.RollMsg.Route.toObject(message.move, options);
                if (message.salaryInfo && message.salaryInfo.length) {
                    object.salaryInfo = [];
                    for (var j = 0; j < message.salaryInfo.length; ++j)
                        object.salaryInfo[j] = $root.pb.common.RollMsg.SalaryInfo.toObject(message.salaryInfo[j], options);
                }
                return object;
            };

            /**
             * Converts this RollMsg to JSON.
             * @function toJSON
             * @memberof pb.common.RollMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RollMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            RollMsg.Route = (function() {

                /**
                 * Properties of a Route.
                 * @memberof pb.common.RollMsg
                 * @interface IRoute
                 * @property {pb.common.RollMsg.Route.ILocation|null} [src] Route src
                 * @property {pb.common.RollMsg.Route.ILocation|null} [dst] Route dst
                 */

                /**
                 * Constructs a new Route.
                 * @memberof pb.common.RollMsg
                 * @classdesc Represents a Route.
                 * @implements IRoute
                 * @constructor
                 * @param {pb.common.RollMsg.IRoute=} [properties] Properties to set
                 */
                function Route(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Route src.
                 * @member {pb.common.RollMsg.Route.ILocation|null|undefined} src
                 * @memberof pb.common.RollMsg.Route
                 * @instance
                 */
                Route.prototype.src = null;

                /**
                 * Route dst.
                 * @member {pb.common.RollMsg.Route.ILocation|null|undefined} dst
                 * @memberof pb.common.RollMsg.Route
                 * @instance
                 */
                Route.prototype.dst = null;

                /**
                 * Creates a new Route instance using the specified properties.
                 * @function create
                 * @memberof pb.common.RollMsg.Route
                 * @static
                 * @param {pb.common.RollMsg.IRoute=} [properties] Properties to set
                 * @returns {pb.common.RollMsg.Route} Route instance
                 */
                Route.create = function create(properties) {
                    return new Route(properties);
                };

                /**
                 * Encodes the specified Route message. Does not implicitly {@link pb.common.RollMsg.Route.verify|verify} messages.
                 * @function encode
                 * @memberof pb.common.RollMsg.Route
                 * @static
                 * @param {pb.common.RollMsg.IRoute} message Route message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Route.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.src != null && message.hasOwnProperty("src"))
                        $root.pb.common.RollMsg.Route.Location.encode(message.src, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.dst != null && message.hasOwnProperty("dst"))
                        $root.pb.common.RollMsg.Route.Location.encode(message.dst, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified Route message, length delimited. Does not implicitly {@link pb.common.RollMsg.Route.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof pb.common.RollMsg.Route
                 * @static
                 * @param {pb.common.RollMsg.IRoute} message Route message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Route.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Route message from the specified reader or buffer.
                 * @function decode
                 * @memberof pb.common.RollMsg.Route
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {pb.common.RollMsg.Route} Route
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Route.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.RollMsg.Route();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.src = $root.pb.common.RollMsg.Route.Location.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.dst = $root.pb.common.RollMsg.Route.Location.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Route message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof pb.common.RollMsg.Route
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {pb.common.RollMsg.Route} Route
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Route.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Route message.
                 * @function verify
                 * @memberof pb.common.RollMsg.Route
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Route.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.src != null && message.hasOwnProperty("src")) {
                        var error = $root.pb.common.RollMsg.Route.Location.verify(message.src);
                        if (error)
                            return "src." + error;
                    }
                    if (message.dst != null && message.hasOwnProperty("dst")) {
                        var error = $root.pb.common.RollMsg.Route.Location.verify(message.dst);
                        if (error)
                            return "dst." + error;
                    }
                    return null;
                };

                /**
                 * Creates a Route message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof pb.common.RollMsg.Route
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {pb.common.RollMsg.Route} Route
                 */
                Route.fromObject = function fromObject(object) {
                    if (object instanceof $root.pb.common.RollMsg.Route)
                        return object;
                    var message = new $root.pb.common.RollMsg.Route();
                    if (object.src != null) {
                        if (typeof object.src !== "object")
                            throw TypeError(".pb.common.RollMsg.Route.src: object expected");
                        message.src = $root.pb.common.RollMsg.Route.Location.fromObject(object.src);
                    }
                    if (object.dst != null) {
                        if (typeof object.dst !== "object")
                            throw TypeError(".pb.common.RollMsg.Route.dst: object expected");
                        message.dst = $root.pb.common.RollMsg.Route.Location.fromObject(object.dst);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a Route message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof pb.common.RollMsg.Route
                 * @static
                 * @param {pb.common.RollMsg.Route} message Route
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Route.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.src = null;
                        object.dst = null;
                    }
                    if (message.src != null && message.hasOwnProperty("src"))
                        object.src = $root.pb.common.RollMsg.Route.Location.toObject(message.src, options);
                    if (message.dst != null && message.hasOwnProperty("dst"))
                        object.dst = $root.pb.common.RollMsg.Route.Location.toObject(message.dst, options);
                    return object;
                };

                /**
                 * Converts this Route to JSON.
                 * @function toJSON
                 * @memberof pb.common.RollMsg.Route
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Route.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                Route.Location = (function() {

                    /**
                     * Properties of a Location.
                     * @memberof pb.common.RollMsg.Route
                     * @interface ILocation
                     * @property {number|null} [cycle] Location cycle
                     * @property {number|null} [step] Location step
                     */

                    /**
                     * Constructs a new Location.
                     * @memberof pb.common.RollMsg.Route
                     * @classdesc Represents a Location.
                     * @implements ILocation
                     * @constructor
                     * @param {pb.common.RollMsg.Route.ILocation=} [properties] Properties to set
                     */
                    function Location(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Location cycle.
                     * @member {number} cycle
                     * @memberof pb.common.RollMsg.Route.Location
                     * @instance
                     */
                    Location.prototype.cycle = 0;

                    /**
                     * Location step.
                     * @member {number} step
                     * @memberof pb.common.RollMsg.Route.Location
                     * @instance
                     */
                    Location.prototype.step = 0;

                    /**
                     * Creates a new Location instance using the specified properties.
                     * @function create
                     * @memberof pb.common.RollMsg.Route.Location
                     * @static
                     * @param {pb.common.RollMsg.Route.ILocation=} [properties] Properties to set
                     * @returns {pb.common.RollMsg.Route.Location} Location instance
                     */
                    Location.create = function create(properties) {
                        return new Location(properties);
                    };

                    /**
                     * Encodes the specified Location message. Does not implicitly {@link pb.common.RollMsg.Route.Location.verify|verify} messages.
                     * @function encode
                     * @memberof pb.common.RollMsg.Route.Location
                     * @static
                     * @param {pb.common.RollMsg.Route.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.cycle != null && message.hasOwnProperty("cycle"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.cycle);
                        if (message.step != null && message.hasOwnProperty("step"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.step);
                        return writer;
                    };

                    /**
                     * Encodes the specified Location message, length delimited. Does not implicitly {@link pb.common.RollMsg.Route.Location.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof pb.common.RollMsg.Route.Location
                     * @static
                     * @param {pb.common.RollMsg.Route.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Location message from the specified reader or buffer.
                     * @function decode
                     * @memberof pb.common.RollMsg.Route.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {pb.common.RollMsg.Route.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.RollMsg.Route.Location();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.cycle = reader.int32();
                                break;
                            case 2:
                                message.step = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Location message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof pb.common.RollMsg.Route.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {pb.common.RollMsg.Route.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Location message.
                     * @function verify
                     * @memberof pb.common.RollMsg.Route.Location
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Location.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.cycle != null && message.hasOwnProperty("cycle"))
                            if (!$util.isInteger(message.cycle))
                                return "cycle: integer expected";
                        if (message.step != null && message.hasOwnProperty("step"))
                            if (!$util.isInteger(message.step))
                                return "step: integer expected";
                        return null;
                    };

                    /**
                     * Creates a Location message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof pb.common.RollMsg.Route.Location
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {pb.common.RollMsg.Route.Location} Location
                     */
                    Location.fromObject = function fromObject(object) {
                        if (object instanceof $root.pb.common.RollMsg.Route.Location)
                            return object;
                        var message = new $root.pb.common.RollMsg.Route.Location();
                        if (object.cycle != null)
                            message.cycle = object.cycle | 0;
                        if (object.step != null)
                            message.step = object.step | 0;
                        return message;
                    };

                    /**
                     * Creates a plain object from a Location message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof pb.common.RollMsg.Route.Location
                     * @static
                     * @param {pb.common.RollMsg.Route.Location} message Location
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Location.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.cycle = 0;
                            object.step = 0;
                        }
                        if (message.cycle != null && message.hasOwnProperty("cycle"))
                            object.cycle = message.cycle;
                        if (message.step != null && message.hasOwnProperty("step"))
                            object.step = message.step;
                        return object;
                    };

                    /**
                     * Converts this Location to JSON.
                     * @function toJSON
                     * @memberof pb.common.RollMsg.Route.Location
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Location.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Location;
                })();

                return Route;
            })();

            RollMsg.SalaryInfo = (function() {

                /**
                 * Properties of a SalaryInfo.
                 * @memberof pb.common.RollMsg
                 * @interface ISalaryInfo
                 * @property {number|null} [steps] SalaryInfo steps
                 * @property {boolean|null} [willBankrupt] SalaryInfo willBankrupt
                 * @property {number|null} [salary] SalaryInfo salary
                 * @property {number|null} [cash] SalaryInfo cash
                 * @property {number|null} [loanQuota] SalaryInfo loanQuota
                 */

                /**
                 * Constructs a new SalaryInfo.
                 * @memberof pb.common.RollMsg
                 * @classdesc Represents a SalaryInfo.
                 * @implements ISalaryInfo
                 * @constructor
                 * @param {pb.common.RollMsg.ISalaryInfo=} [properties] Properties to set
                 */
                function SalaryInfo(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * SalaryInfo steps.
                 * @member {number} steps
                 * @memberof pb.common.RollMsg.SalaryInfo
                 * @instance
                 */
                SalaryInfo.prototype.steps = 0;

                /**
                 * SalaryInfo willBankrupt.
                 * @member {boolean} willBankrupt
                 * @memberof pb.common.RollMsg.SalaryInfo
                 * @instance
                 */
                SalaryInfo.prototype.willBankrupt = false;

                /**
                 * SalaryInfo salary.
                 * @member {number} salary
                 * @memberof pb.common.RollMsg.SalaryInfo
                 * @instance
                 */
                SalaryInfo.prototype.salary = 0;

                /**
                 * SalaryInfo cash.
                 * @member {number} cash
                 * @memberof pb.common.RollMsg.SalaryInfo
                 * @instance
                 */
                SalaryInfo.prototype.cash = 0;

                /**
                 * SalaryInfo loanQuota.
                 * @member {number} loanQuota
                 * @memberof pb.common.RollMsg.SalaryInfo
                 * @instance
                 */
                SalaryInfo.prototype.loanQuota = 0;

                /**
                 * Creates a new SalaryInfo instance using the specified properties.
                 * @function create
                 * @memberof pb.common.RollMsg.SalaryInfo
                 * @static
                 * @param {pb.common.RollMsg.ISalaryInfo=} [properties] Properties to set
                 * @returns {pb.common.RollMsg.SalaryInfo} SalaryInfo instance
                 */
                SalaryInfo.create = function create(properties) {
                    return new SalaryInfo(properties);
                };

                /**
                 * Encodes the specified SalaryInfo message. Does not implicitly {@link pb.common.RollMsg.SalaryInfo.verify|verify} messages.
                 * @function encode
                 * @memberof pb.common.RollMsg.SalaryInfo
                 * @static
                 * @param {pb.common.RollMsg.ISalaryInfo} message SalaryInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SalaryInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.steps != null && message.hasOwnProperty("steps"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.steps);
                    if (message.willBankrupt != null && message.hasOwnProperty("willBankrupt"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.willBankrupt);
                    if (message.salary != null && message.hasOwnProperty("salary"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.salary);
                    if (message.cash != null && message.hasOwnProperty("cash"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.cash);
                    if (message.loanQuota != null && message.hasOwnProperty("loanQuota"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.loanQuota);
                    return writer;
                };

                /**
                 * Encodes the specified SalaryInfo message, length delimited. Does not implicitly {@link pb.common.RollMsg.SalaryInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof pb.common.RollMsg.SalaryInfo
                 * @static
                 * @param {pb.common.RollMsg.ISalaryInfo} message SalaryInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SalaryInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a SalaryInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof pb.common.RollMsg.SalaryInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {pb.common.RollMsg.SalaryInfo} SalaryInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SalaryInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.RollMsg.SalaryInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.steps = reader.int32();
                            break;
                        case 2:
                            message.willBankrupt = reader.bool();
                            break;
                        case 3:
                            message.salary = reader.int32();
                            break;
                        case 4:
                            message.cash = reader.int32();
                            break;
                        case 5:
                            message.loanQuota = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a SalaryInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof pb.common.RollMsg.SalaryInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {pb.common.RollMsg.SalaryInfo} SalaryInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SalaryInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a SalaryInfo message.
                 * @function verify
                 * @memberof pb.common.RollMsg.SalaryInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SalaryInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.steps != null && message.hasOwnProperty("steps"))
                        if (!$util.isInteger(message.steps))
                            return "steps: integer expected";
                    if (message.willBankrupt != null && message.hasOwnProperty("willBankrupt"))
                        if (typeof message.willBankrupt !== "boolean")
                            return "willBankrupt: boolean expected";
                    if (message.salary != null && message.hasOwnProperty("salary"))
                        if (!$util.isInteger(message.salary))
                            return "salary: integer expected";
                    if (message.cash != null && message.hasOwnProperty("cash"))
                        if (!$util.isInteger(message.cash))
                            return "cash: integer expected";
                    if (message.loanQuota != null && message.hasOwnProperty("loanQuota"))
                        if (!$util.isInteger(message.loanQuota))
                            return "loanQuota: integer expected";
                    return null;
                };

                /**
                 * Creates a SalaryInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof pb.common.RollMsg.SalaryInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {pb.common.RollMsg.SalaryInfo} SalaryInfo
                 */
                SalaryInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.pb.common.RollMsg.SalaryInfo)
                        return object;
                    var message = new $root.pb.common.RollMsg.SalaryInfo();
                    if (object.steps != null)
                        message.steps = object.steps | 0;
                    if (object.willBankrupt != null)
                        message.willBankrupt = Boolean(object.willBankrupt);
                    if (object.salary != null)
                        message.salary = object.salary | 0;
                    if (object.cash != null)
                        message.cash = object.cash | 0;
                    if (object.loanQuota != null)
                        message.loanQuota = object.loanQuota | 0;
                    return message;
                };

                /**
                 * Creates a plain object from a SalaryInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof pb.common.RollMsg.SalaryInfo
                 * @static
                 * @param {pb.common.RollMsg.SalaryInfo} message SalaryInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SalaryInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.steps = 0;
                        object.willBankrupt = false;
                        object.salary = 0;
                        object.cash = 0;
                        object.loanQuota = 0;
                    }
                    if (message.steps != null && message.hasOwnProperty("steps"))
                        object.steps = message.steps;
                    if (message.willBankrupt != null && message.hasOwnProperty("willBankrupt"))
                        object.willBankrupt = message.willBankrupt;
                    if (message.salary != null && message.hasOwnProperty("salary"))
                        object.salary = message.salary;
                    if (message.cash != null && message.hasOwnProperty("cash"))
                        object.cash = message.cash;
                    if (message.loanQuota != null && message.hasOwnProperty("loanQuota"))
                        object.loanQuota = message.loanQuota;
                    return object;
                };

                /**
                 * Converts this SalaryInfo to JSON.
                 * @function toJSON
                 * @memberof pb.common.RollMsg.SalaryInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SalaryInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return SalaryInfo;
            })();

            return RollMsg;
        })();

        common.CompleteSalaryReq = (function() {

            /**
             * Properties of a CompleteSalaryReq.
             * @memberof pb.common
             * @interface ICompleteSalaryReq
             * @property {pb.common.IAssetBaseReq|null} [req] CompleteSalaryReq req
             */

            /**
             * Constructs a new CompleteSalaryReq.
             * @memberof pb.common
             * @classdesc Represents a CompleteSalaryReq.
             * @implements ICompleteSalaryReq
             * @constructor
             * @param {pb.common.ICompleteSalaryReq=} [properties] Properties to set
             */
            function CompleteSalaryReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CompleteSalaryReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.CompleteSalaryReq
             * @instance
             */
            CompleteSalaryReq.prototype.req = null;

            /**
             * Creates a new CompleteSalaryReq instance using the specified properties.
             * @function create
             * @memberof pb.common.CompleteSalaryReq
             * @static
             * @param {pb.common.ICompleteSalaryReq=} [properties] Properties to set
             * @returns {pb.common.CompleteSalaryReq} CompleteSalaryReq instance
             */
            CompleteSalaryReq.create = function create(properties) {
                return new CompleteSalaryReq(properties);
            };

            /**
             * Encodes the specified CompleteSalaryReq message. Does not implicitly {@link pb.common.CompleteSalaryReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.CompleteSalaryReq
             * @static
             * @param {pb.common.ICompleteSalaryReq} message CompleteSalaryReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CompleteSalaryReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified CompleteSalaryReq message, length delimited. Does not implicitly {@link pb.common.CompleteSalaryReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.CompleteSalaryReq
             * @static
             * @param {pb.common.ICompleteSalaryReq} message CompleteSalaryReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CompleteSalaryReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CompleteSalaryReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.CompleteSalaryReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.CompleteSalaryReq} CompleteSalaryReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CompleteSalaryReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.CompleteSalaryReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CompleteSalaryReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.CompleteSalaryReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.CompleteSalaryReq} CompleteSalaryReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CompleteSalaryReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CompleteSalaryReq message.
             * @function verify
             * @memberof pb.common.CompleteSalaryReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CompleteSalaryReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                return null;
            };

            /**
             * Creates a CompleteSalaryReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.CompleteSalaryReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.CompleteSalaryReq} CompleteSalaryReq
             */
            CompleteSalaryReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.CompleteSalaryReq)
                    return object;
                var message = new $root.pb.common.CompleteSalaryReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.CompleteSalaryReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                return message;
            };

            /**
             * Creates a plain object from a CompleteSalaryReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.CompleteSalaryReq
             * @static
             * @param {pb.common.CompleteSalaryReq} message CompleteSalaryReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CompleteSalaryReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.req = null;
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                return object;
            };

            /**
             * Converts this CompleteSalaryReq to JSON.
             * @function toJSON
             * @memberof pb.common.CompleteSalaryReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CompleteSalaryReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CompleteSalaryReq;
        })();

        common.CompleteSalaryRsp = (function() {

            /**
             * Properties of a CompleteSalaryRsp.
             * @memberof pb.common
             * @interface ICompleteSalaryRsp
             * @property {pb.common.IBaseRsp|null} [rsp] CompleteSalaryRsp rsp
             */

            /**
             * Constructs a new CompleteSalaryRsp.
             * @memberof pb.common
             * @classdesc Represents a CompleteSalaryRsp.
             * @implements ICompleteSalaryRsp
             * @constructor
             * @param {pb.common.ICompleteSalaryRsp=} [properties] Properties to set
             */
            function CompleteSalaryRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CompleteSalaryRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.CompleteSalaryRsp
             * @instance
             */
            CompleteSalaryRsp.prototype.rsp = null;

            /**
             * Creates a new CompleteSalaryRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.CompleteSalaryRsp
             * @static
             * @param {pb.common.ICompleteSalaryRsp=} [properties] Properties to set
             * @returns {pb.common.CompleteSalaryRsp} CompleteSalaryRsp instance
             */
            CompleteSalaryRsp.create = function create(properties) {
                return new CompleteSalaryRsp(properties);
            };

            /**
             * Encodes the specified CompleteSalaryRsp message. Does not implicitly {@link pb.common.CompleteSalaryRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.CompleteSalaryRsp
             * @static
             * @param {pb.common.ICompleteSalaryRsp} message CompleteSalaryRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CompleteSalaryRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified CompleteSalaryRsp message, length delimited. Does not implicitly {@link pb.common.CompleteSalaryRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.CompleteSalaryRsp
             * @static
             * @param {pb.common.ICompleteSalaryRsp} message CompleteSalaryRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CompleteSalaryRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CompleteSalaryRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.CompleteSalaryRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.CompleteSalaryRsp} CompleteSalaryRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CompleteSalaryRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.CompleteSalaryRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CompleteSalaryRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.CompleteSalaryRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.CompleteSalaryRsp} CompleteSalaryRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CompleteSalaryRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CompleteSalaryRsp message.
             * @function verify
             * @memberof pb.common.CompleteSalaryRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CompleteSalaryRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                return null;
            };

            /**
             * Creates a CompleteSalaryRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.CompleteSalaryRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.CompleteSalaryRsp} CompleteSalaryRsp
             */
            CompleteSalaryRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.CompleteSalaryRsp)
                    return object;
                var message = new $root.pb.common.CompleteSalaryRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.CompleteSalaryRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from a CompleteSalaryRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.CompleteSalaryRsp
             * @static
             * @param {pb.common.CompleteSalaryRsp} message CompleteSalaryRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CompleteSalaryRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                return object;
            };

            /**
             * Converts this CompleteSalaryRsp to JSON.
             * @function toJSON
             * @memberof pb.common.CompleteSalaryRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CompleteSalaryRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CompleteSalaryRsp;
        })();

        common.CompleteSalaryMsg = (function() {

            /**
             * Properties of a CompleteSalaryMsg.
             * @memberof pb.common
             * @interface ICompleteSalaryMsg
             * @property {pb.common.IGameBaseMsg|null} [base] CompleteSalaryMsg base
             */

            /**
             * Constructs a new CompleteSalaryMsg.
             * @memberof pb.common
             * @classdesc Represents a CompleteSalaryMsg.
             * @implements ICompleteSalaryMsg
             * @constructor
             * @param {pb.common.ICompleteSalaryMsg=} [properties] Properties to set
             */
            function CompleteSalaryMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CompleteSalaryMsg base.
             * @member {pb.common.IGameBaseMsg|null|undefined} base
             * @memberof pb.common.CompleteSalaryMsg
             * @instance
             */
            CompleteSalaryMsg.prototype.base = null;

            /**
             * Creates a new CompleteSalaryMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.CompleteSalaryMsg
             * @static
             * @param {pb.common.ICompleteSalaryMsg=} [properties] Properties to set
             * @returns {pb.common.CompleteSalaryMsg} CompleteSalaryMsg instance
             */
            CompleteSalaryMsg.create = function create(properties) {
                return new CompleteSalaryMsg(properties);
            };

            /**
             * Encodes the specified CompleteSalaryMsg message. Does not implicitly {@link pb.common.CompleteSalaryMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.CompleteSalaryMsg
             * @static
             * @param {pb.common.ICompleteSalaryMsg} message CompleteSalaryMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CompleteSalaryMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.base != null && message.hasOwnProperty("base"))
                    $root.pb.common.GameBaseMsg.encode(message.base, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified CompleteSalaryMsg message, length delimited. Does not implicitly {@link pb.common.CompleteSalaryMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.CompleteSalaryMsg
             * @static
             * @param {pb.common.ICompleteSalaryMsg} message CompleteSalaryMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CompleteSalaryMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CompleteSalaryMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.CompleteSalaryMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.CompleteSalaryMsg} CompleteSalaryMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CompleteSalaryMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.CompleteSalaryMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.base = $root.pb.common.GameBaseMsg.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CompleteSalaryMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.CompleteSalaryMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.CompleteSalaryMsg} CompleteSalaryMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CompleteSalaryMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CompleteSalaryMsg message.
             * @function verify
             * @memberof pb.common.CompleteSalaryMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CompleteSalaryMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.base != null && message.hasOwnProperty("base")) {
                    var error = $root.pb.common.GameBaseMsg.verify(message.base);
                    if (error)
                        return "base." + error;
                }
                return null;
            };

            /**
             * Creates a CompleteSalaryMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.CompleteSalaryMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.CompleteSalaryMsg} CompleteSalaryMsg
             */
            CompleteSalaryMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.CompleteSalaryMsg)
                    return object;
                var message = new $root.pb.common.CompleteSalaryMsg();
                if (object.base != null) {
                    if (typeof object.base !== "object")
                        throw TypeError(".pb.common.CompleteSalaryMsg.base: object expected");
                    message.base = $root.pb.common.GameBaseMsg.fromObject(object.base);
                }
                return message;
            };

            /**
             * Creates a plain object from a CompleteSalaryMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.CompleteSalaryMsg
             * @static
             * @param {pb.common.CompleteSalaryMsg} message CompleteSalaryMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CompleteSalaryMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.base = null;
                if (message.base != null && message.hasOwnProperty("base"))
                    object.base = $root.pb.common.GameBaseMsg.toObject(message.base, options);
                return object;
            };

            /**
             * Converts this CompleteSalaryMsg to JSON.
             * @function toJSON
             * @memberof pb.common.CompleteSalaryMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CompleteSalaryMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CompleteSalaryMsg;
        })();

        common.PayAccidentConsumeReq = (function() {

            /**
             * Properties of a PayAccidentConsumeReq.
             * @memberof pb.common
             * @interface IPayAccidentConsumeReq
             * @property {pb.common.IAssetBaseReq|null} [req] PayAccidentConsumeReq req
             * @property {number|null} [mockPayment] PayAccidentConsumeReq mockPayment
             */

            /**
             * Constructs a new PayAccidentConsumeReq.
             * @memberof pb.common
             * @classdesc Represents a PayAccidentConsumeReq.
             * @implements IPayAccidentConsumeReq
             * @constructor
             * @param {pb.common.IPayAccidentConsumeReq=} [properties] Properties to set
             */
            function PayAccidentConsumeReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PayAccidentConsumeReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.PayAccidentConsumeReq
             * @instance
             */
            PayAccidentConsumeReq.prototype.req = null;

            /**
             * PayAccidentConsumeReq mockPayment.
             * @member {number} mockPayment
             * @memberof pb.common.PayAccidentConsumeReq
             * @instance
             */
            PayAccidentConsumeReq.prototype.mockPayment = 0;

            /**
             * Creates a new PayAccidentConsumeReq instance using the specified properties.
             * @function create
             * @memberof pb.common.PayAccidentConsumeReq
             * @static
             * @param {pb.common.IPayAccidentConsumeReq=} [properties] Properties to set
             * @returns {pb.common.PayAccidentConsumeReq} PayAccidentConsumeReq instance
             */
            PayAccidentConsumeReq.create = function create(properties) {
                return new PayAccidentConsumeReq(properties);
            };

            /**
             * Encodes the specified PayAccidentConsumeReq message. Does not implicitly {@link pb.common.PayAccidentConsumeReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.PayAccidentConsumeReq
             * @static
             * @param {pb.common.IPayAccidentConsumeReq} message PayAccidentConsumeReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PayAccidentConsumeReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.mockPayment != null && message.hasOwnProperty("mockPayment"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.mockPayment);
                return writer;
            };

            /**
             * Encodes the specified PayAccidentConsumeReq message, length delimited. Does not implicitly {@link pb.common.PayAccidentConsumeReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.PayAccidentConsumeReq
             * @static
             * @param {pb.common.IPayAccidentConsumeReq} message PayAccidentConsumeReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PayAccidentConsumeReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PayAccidentConsumeReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.PayAccidentConsumeReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.PayAccidentConsumeReq} PayAccidentConsumeReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PayAccidentConsumeReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.PayAccidentConsumeReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.mockPayment = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PayAccidentConsumeReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.PayAccidentConsumeReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.PayAccidentConsumeReq} PayAccidentConsumeReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PayAccidentConsumeReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PayAccidentConsumeReq message.
             * @function verify
             * @memberof pb.common.PayAccidentConsumeReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PayAccidentConsumeReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                if (message.mockPayment != null && message.hasOwnProperty("mockPayment"))
                    if (!$util.isInteger(message.mockPayment))
                        return "mockPayment: integer expected";
                return null;
            };

            /**
             * Creates a PayAccidentConsumeReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.PayAccidentConsumeReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.PayAccidentConsumeReq} PayAccidentConsumeReq
             */
            PayAccidentConsumeReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.PayAccidentConsumeReq)
                    return object;
                var message = new $root.pb.common.PayAccidentConsumeReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.PayAccidentConsumeReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                if (object.mockPayment != null)
                    message.mockPayment = object.mockPayment | 0;
                return message;
            };

            /**
             * Creates a plain object from a PayAccidentConsumeReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.PayAccidentConsumeReq
             * @static
             * @param {pb.common.PayAccidentConsumeReq} message PayAccidentConsumeReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PayAccidentConsumeReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.req = null;
                    object.mockPayment = 0;
                }
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                if (message.mockPayment != null && message.hasOwnProperty("mockPayment"))
                    object.mockPayment = message.mockPayment;
                return object;
            };

            /**
             * Converts this PayAccidentConsumeReq to JSON.
             * @function toJSON
             * @memberof pb.common.PayAccidentConsumeReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PayAccidentConsumeReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PayAccidentConsumeReq;
        })();

        common.PayAccidentConsumeRsp = (function() {

            /**
             * Properties of a PayAccidentConsumeRsp.
             * @memberof pb.common
             * @interface IPayAccidentConsumeRsp
             * @property {pb.common.IBaseRsp|null} [rsp] PayAccidentConsumeRsp rsp
             * @property {number|null} [payment] PayAccidentConsumeRsp payment
             * @property {number|null} [balance] PayAccidentConsumeRsp balance
             */

            /**
             * Constructs a new PayAccidentConsumeRsp.
             * @memberof pb.common
             * @classdesc Represents a PayAccidentConsumeRsp.
             * @implements IPayAccidentConsumeRsp
             * @constructor
             * @param {pb.common.IPayAccidentConsumeRsp=} [properties] Properties to set
             */
            function PayAccidentConsumeRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PayAccidentConsumeRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.PayAccidentConsumeRsp
             * @instance
             */
            PayAccidentConsumeRsp.prototype.rsp = null;

            /**
             * PayAccidentConsumeRsp payment.
             * @member {number} payment
             * @memberof pb.common.PayAccidentConsumeRsp
             * @instance
             */
            PayAccidentConsumeRsp.prototype.payment = 0;

            /**
             * PayAccidentConsumeRsp balance.
             * @member {number} balance
             * @memberof pb.common.PayAccidentConsumeRsp
             * @instance
             */
            PayAccidentConsumeRsp.prototype.balance = 0;

            /**
             * Creates a new PayAccidentConsumeRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.PayAccidentConsumeRsp
             * @static
             * @param {pb.common.IPayAccidentConsumeRsp=} [properties] Properties to set
             * @returns {pb.common.PayAccidentConsumeRsp} PayAccidentConsumeRsp instance
             */
            PayAccidentConsumeRsp.create = function create(properties) {
                return new PayAccidentConsumeRsp(properties);
            };

            /**
             * Encodes the specified PayAccidentConsumeRsp message. Does not implicitly {@link pb.common.PayAccidentConsumeRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.PayAccidentConsumeRsp
             * @static
             * @param {pb.common.IPayAccidentConsumeRsp} message PayAccidentConsumeRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PayAccidentConsumeRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.payment != null && message.hasOwnProperty("payment"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.payment);
                if (message.balance != null && message.hasOwnProperty("balance"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.balance);
                return writer;
            };

            /**
             * Encodes the specified PayAccidentConsumeRsp message, length delimited. Does not implicitly {@link pb.common.PayAccidentConsumeRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.PayAccidentConsumeRsp
             * @static
             * @param {pb.common.IPayAccidentConsumeRsp} message PayAccidentConsumeRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PayAccidentConsumeRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PayAccidentConsumeRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.PayAccidentConsumeRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.PayAccidentConsumeRsp} PayAccidentConsumeRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PayAccidentConsumeRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.PayAccidentConsumeRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.payment = reader.int32();
                        break;
                    case 3:
                        message.balance = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PayAccidentConsumeRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.PayAccidentConsumeRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.PayAccidentConsumeRsp} PayAccidentConsumeRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PayAccidentConsumeRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PayAccidentConsumeRsp message.
             * @function verify
             * @memberof pb.common.PayAccidentConsumeRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PayAccidentConsumeRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                if (message.payment != null && message.hasOwnProperty("payment"))
                    if (!$util.isInteger(message.payment))
                        return "payment: integer expected";
                if (message.balance != null && message.hasOwnProperty("balance"))
                    if (!$util.isInteger(message.balance))
                        return "balance: integer expected";
                return null;
            };

            /**
             * Creates a PayAccidentConsumeRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.PayAccidentConsumeRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.PayAccidentConsumeRsp} PayAccidentConsumeRsp
             */
            PayAccidentConsumeRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.PayAccidentConsumeRsp)
                    return object;
                var message = new $root.pb.common.PayAccidentConsumeRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.PayAccidentConsumeRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                if (object.payment != null)
                    message.payment = object.payment | 0;
                if (object.balance != null)
                    message.balance = object.balance | 0;
                return message;
            };

            /**
             * Creates a plain object from a PayAccidentConsumeRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.PayAccidentConsumeRsp
             * @static
             * @param {pb.common.PayAccidentConsumeRsp} message PayAccidentConsumeRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PayAccidentConsumeRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.rsp = null;
                    object.payment = 0;
                    object.balance = 0;
                }
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                if (message.payment != null && message.hasOwnProperty("payment"))
                    object.payment = message.payment;
                if (message.balance != null && message.hasOwnProperty("balance"))
                    object.balance = message.balance;
                return object;
            };

            /**
             * Converts this PayAccidentConsumeRsp to JSON.
             * @function toJSON
             * @memberof pb.common.PayAccidentConsumeRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PayAccidentConsumeRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PayAccidentConsumeRsp;
        })();

        common.PayAccidentConsumeMsg = (function() {

            /**
             * Properties of a PayAccidentConsumeMsg.
             * @memberof pb.common
             * @interface IPayAccidentConsumeMsg
             * @property {pb.common.IGameBaseMsg|null} [base] PayAccidentConsumeMsg base
             * @property {pb.common.IScenario|null} [scenario] PayAccidentConsumeMsg scenario
             */

            /**
             * Constructs a new PayAccidentConsumeMsg.
             * @memberof pb.common
             * @classdesc Represents a PayAccidentConsumeMsg.
             * @implements IPayAccidentConsumeMsg
             * @constructor
             * @param {pb.common.IPayAccidentConsumeMsg=} [properties] Properties to set
             */
            function PayAccidentConsumeMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PayAccidentConsumeMsg base.
             * @member {pb.common.IGameBaseMsg|null|undefined} base
             * @memberof pb.common.PayAccidentConsumeMsg
             * @instance
             */
            PayAccidentConsumeMsg.prototype.base = null;

            /**
             * PayAccidentConsumeMsg scenario.
             * @member {pb.common.IScenario|null|undefined} scenario
             * @memberof pb.common.PayAccidentConsumeMsg
             * @instance
             */
            PayAccidentConsumeMsg.prototype.scenario = null;

            /**
             * Creates a new PayAccidentConsumeMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.PayAccidentConsumeMsg
             * @static
             * @param {pb.common.IPayAccidentConsumeMsg=} [properties] Properties to set
             * @returns {pb.common.PayAccidentConsumeMsg} PayAccidentConsumeMsg instance
             */
            PayAccidentConsumeMsg.create = function create(properties) {
                return new PayAccidentConsumeMsg(properties);
            };

            /**
             * Encodes the specified PayAccidentConsumeMsg message. Does not implicitly {@link pb.common.PayAccidentConsumeMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.PayAccidentConsumeMsg
             * @static
             * @param {pb.common.IPayAccidentConsumeMsg} message PayAccidentConsumeMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PayAccidentConsumeMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.base != null && message.hasOwnProperty("base"))
                    $root.pb.common.GameBaseMsg.encode(message.base, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.scenario != null && message.hasOwnProperty("scenario"))
                    $root.pb.common.Scenario.encode(message.scenario, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified PayAccidentConsumeMsg message, length delimited. Does not implicitly {@link pb.common.PayAccidentConsumeMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.PayAccidentConsumeMsg
             * @static
             * @param {pb.common.IPayAccidentConsumeMsg} message PayAccidentConsumeMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PayAccidentConsumeMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PayAccidentConsumeMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.PayAccidentConsumeMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.PayAccidentConsumeMsg} PayAccidentConsumeMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PayAccidentConsumeMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.PayAccidentConsumeMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.base = $root.pb.common.GameBaseMsg.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.scenario = $root.pb.common.Scenario.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PayAccidentConsumeMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.PayAccidentConsumeMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.PayAccidentConsumeMsg} PayAccidentConsumeMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PayAccidentConsumeMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PayAccidentConsumeMsg message.
             * @function verify
             * @memberof pb.common.PayAccidentConsumeMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PayAccidentConsumeMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.base != null && message.hasOwnProperty("base")) {
                    var error = $root.pb.common.GameBaseMsg.verify(message.base);
                    if (error)
                        return "base." + error;
                }
                if (message.scenario != null && message.hasOwnProperty("scenario")) {
                    var error = $root.pb.common.Scenario.verify(message.scenario);
                    if (error)
                        return "scenario." + error;
                }
                return null;
            };

            /**
             * Creates a PayAccidentConsumeMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.PayAccidentConsumeMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.PayAccidentConsumeMsg} PayAccidentConsumeMsg
             */
            PayAccidentConsumeMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.PayAccidentConsumeMsg)
                    return object;
                var message = new $root.pb.common.PayAccidentConsumeMsg();
                if (object.base != null) {
                    if (typeof object.base !== "object")
                        throw TypeError(".pb.common.PayAccidentConsumeMsg.base: object expected");
                    message.base = $root.pb.common.GameBaseMsg.fromObject(object.base);
                }
                if (object.scenario != null) {
                    if (typeof object.scenario !== "object")
                        throw TypeError(".pb.common.PayAccidentConsumeMsg.scenario: object expected");
                    message.scenario = $root.pb.common.Scenario.fromObject(object.scenario);
                }
                return message;
            };

            /**
             * Creates a plain object from a PayAccidentConsumeMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.PayAccidentConsumeMsg
             * @static
             * @param {pb.common.PayAccidentConsumeMsg} message PayAccidentConsumeMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PayAccidentConsumeMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.base = null;
                    object.scenario = null;
                }
                if (message.base != null && message.hasOwnProperty("base"))
                    object.base = $root.pb.common.GameBaseMsg.toObject(message.base, options);
                if (message.scenario != null && message.hasOwnProperty("scenario"))
                    object.scenario = $root.pb.common.Scenario.toObject(message.scenario, options);
                return object;
            };

            /**
             * Converts this PayAccidentConsumeMsg to JSON.
             * @function toJSON
             * @memberof pb.common.PayAccidentConsumeMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PayAccidentConsumeMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PayAccidentConsumeMsg;
        })();

        common.ChooseChanceReq = (function() {

            /**
             * Properties of a ChooseChanceReq.
             * @memberof pb.common
             * @interface IChooseChanceReq
             * @property {pb.common.IAssetBaseReq|null} [req] ChooseChanceReq req
             * @property {Long|null} [mockScenarioId] ChooseChanceReq mockScenarioId
             * @property {number|null} [chanceType] ChooseChanceReq chanceType
             */

            /**
             * Constructs a new ChooseChanceReq.
             * @memberof pb.common
             * @classdesc Represents a ChooseChanceReq.
             * @implements IChooseChanceReq
             * @constructor
             * @param {pb.common.IChooseChanceReq=} [properties] Properties to set
             */
            function ChooseChanceReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ChooseChanceReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.ChooseChanceReq
             * @instance
             */
            ChooseChanceReq.prototype.req = null;

            /**
             * ChooseChanceReq mockScenarioId.
             * @member {Long} mockScenarioId
             * @memberof pb.common.ChooseChanceReq
             * @instance
             */
            ChooseChanceReq.prototype.mockScenarioId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * ChooseChanceReq chanceType.
             * @member {number} chanceType
             * @memberof pb.common.ChooseChanceReq
             * @instance
             */
            ChooseChanceReq.prototype.chanceType = 0;

            /**
             * Creates a new ChooseChanceReq instance using the specified properties.
             * @function create
             * @memberof pb.common.ChooseChanceReq
             * @static
             * @param {pb.common.IChooseChanceReq=} [properties] Properties to set
             * @returns {pb.common.ChooseChanceReq} ChooseChanceReq instance
             */
            ChooseChanceReq.create = function create(properties) {
                return new ChooseChanceReq(properties);
            };

            /**
             * Encodes the specified ChooseChanceReq message. Does not implicitly {@link pb.common.ChooseChanceReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.ChooseChanceReq
             * @static
             * @param {pb.common.IChooseChanceReq} message ChooseChanceReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ChooseChanceReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.mockScenarioId != null && message.hasOwnProperty("mockScenarioId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.mockScenarioId);
                if (message.chanceType != null && message.hasOwnProperty("chanceType"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.chanceType);
                return writer;
            };

            /**
             * Encodes the specified ChooseChanceReq message, length delimited. Does not implicitly {@link pb.common.ChooseChanceReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.ChooseChanceReq
             * @static
             * @param {pb.common.IChooseChanceReq} message ChooseChanceReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ChooseChanceReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ChooseChanceReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.ChooseChanceReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.ChooseChanceReq} ChooseChanceReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ChooseChanceReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.ChooseChanceReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.mockScenarioId = reader.int64();
                        break;
                    case 3:
                        message.chanceType = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ChooseChanceReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.ChooseChanceReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.ChooseChanceReq} ChooseChanceReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ChooseChanceReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ChooseChanceReq message.
             * @function verify
             * @memberof pb.common.ChooseChanceReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ChooseChanceReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                if (message.mockScenarioId != null && message.hasOwnProperty("mockScenarioId"))
                    if (!$util.isInteger(message.mockScenarioId) && !(message.mockScenarioId && $util.isInteger(message.mockScenarioId.low) && $util.isInteger(message.mockScenarioId.high)))
                        return "mockScenarioId: integer|Long expected";
                if (message.chanceType != null && message.hasOwnProperty("chanceType"))
                    if (!$util.isInteger(message.chanceType))
                        return "chanceType: integer expected";
                return null;
            };

            /**
             * Creates a ChooseChanceReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.ChooseChanceReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.ChooseChanceReq} ChooseChanceReq
             */
            ChooseChanceReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.ChooseChanceReq)
                    return object;
                var message = new $root.pb.common.ChooseChanceReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.ChooseChanceReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                if (object.mockScenarioId != null)
                    if ($util.Long)
                        (message.mockScenarioId = $util.Long.fromValue(object.mockScenarioId)).unsigned = false;
                    else if (typeof object.mockScenarioId === "string")
                        message.mockScenarioId = parseInt(object.mockScenarioId, 10);
                    else if (typeof object.mockScenarioId === "number")
                        message.mockScenarioId = object.mockScenarioId;
                    else if (typeof object.mockScenarioId === "object")
                        message.mockScenarioId = new $util.LongBits(object.mockScenarioId.low >>> 0, object.mockScenarioId.high >>> 0).toNumber();
                if (object.chanceType != null)
                    message.chanceType = object.chanceType | 0;
                return message;
            };

            /**
             * Creates a plain object from a ChooseChanceReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.ChooseChanceReq
             * @static
             * @param {pb.common.ChooseChanceReq} message ChooseChanceReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ChooseChanceReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.req = null;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.mockScenarioId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.mockScenarioId = options.longs === String ? "0" : 0;
                    object.chanceType = 0;
                }
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                if (message.mockScenarioId != null && message.hasOwnProperty("mockScenarioId"))
                    if (typeof message.mockScenarioId === "number")
                        object.mockScenarioId = options.longs === String ? String(message.mockScenarioId) : message.mockScenarioId;
                    else
                        object.mockScenarioId = options.longs === String ? $util.Long.prototype.toString.call(message.mockScenarioId) : options.longs === Number ? new $util.LongBits(message.mockScenarioId.low >>> 0, message.mockScenarioId.high >>> 0).toNumber() : message.mockScenarioId;
                if (message.chanceType != null && message.hasOwnProperty("chanceType"))
                    object.chanceType = message.chanceType;
                return object;
            };

            /**
             * Converts this ChooseChanceReq to JSON.
             * @function toJSON
             * @memberof pb.common.ChooseChanceReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ChooseChanceReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ChooseChanceReq;
        })();

        common.ChooseChanceRsp = (function() {

            /**
             * Properties of a ChooseChanceRsp.
             * @memberof pb.common
             * @interface IChooseChanceRsp
             * @property {pb.common.IBaseRsp|null} [rsp] ChooseChanceRsp rsp
             */

            /**
             * Constructs a new ChooseChanceRsp.
             * @memberof pb.common
             * @classdesc Represents a ChooseChanceRsp.
             * @implements IChooseChanceRsp
             * @constructor
             * @param {pb.common.IChooseChanceRsp=} [properties] Properties to set
             */
            function ChooseChanceRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ChooseChanceRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.ChooseChanceRsp
             * @instance
             */
            ChooseChanceRsp.prototype.rsp = null;

            /**
             * Creates a new ChooseChanceRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.ChooseChanceRsp
             * @static
             * @param {pb.common.IChooseChanceRsp=} [properties] Properties to set
             * @returns {pb.common.ChooseChanceRsp} ChooseChanceRsp instance
             */
            ChooseChanceRsp.create = function create(properties) {
                return new ChooseChanceRsp(properties);
            };

            /**
             * Encodes the specified ChooseChanceRsp message. Does not implicitly {@link pb.common.ChooseChanceRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.ChooseChanceRsp
             * @static
             * @param {pb.common.IChooseChanceRsp} message ChooseChanceRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ChooseChanceRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ChooseChanceRsp message, length delimited. Does not implicitly {@link pb.common.ChooseChanceRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.ChooseChanceRsp
             * @static
             * @param {pb.common.IChooseChanceRsp} message ChooseChanceRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ChooseChanceRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ChooseChanceRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.ChooseChanceRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.ChooseChanceRsp} ChooseChanceRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ChooseChanceRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.ChooseChanceRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ChooseChanceRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.ChooseChanceRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.ChooseChanceRsp} ChooseChanceRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ChooseChanceRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ChooseChanceRsp message.
             * @function verify
             * @memberof pb.common.ChooseChanceRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ChooseChanceRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                return null;
            };

            /**
             * Creates a ChooseChanceRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.ChooseChanceRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.ChooseChanceRsp} ChooseChanceRsp
             */
            ChooseChanceRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.ChooseChanceRsp)
                    return object;
                var message = new $root.pb.common.ChooseChanceRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.ChooseChanceRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from a ChooseChanceRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.ChooseChanceRsp
             * @static
             * @param {pb.common.ChooseChanceRsp} message ChooseChanceRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ChooseChanceRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                return object;
            };

            /**
             * Converts this ChooseChanceRsp to JSON.
             * @function toJSON
             * @memberof pb.common.ChooseChanceRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ChooseChanceRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ChooseChanceRsp;
        })();

        common.ChooseChanceMsg = (function() {

            /**
             * Properties of a ChooseChanceMsg.
             * @memberof pb.common
             * @interface IChooseChanceMsg
             * @property {pb.common.IGameBaseMsg|null} [base] ChooseChanceMsg base
             * @property {pb.common.IScenario|null} [scenario] ChooseChanceMsg scenario
             * @property {number|null} [canSellCnt] ChooseChanceMsg canSellCnt
             * @property {pb.common.Itimer|null} [timer] ChooseChanceMsg timer
             * @property {Array.<Long>|null} [traders] ChooseChanceMsg traders
             */

            /**
             * Constructs a new ChooseChanceMsg.
             * @memberof pb.common
             * @classdesc Represents a ChooseChanceMsg.
             * @implements IChooseChanceMsg
             * @constructor
             * @param {pb.common.IChooseChanceMsg=} [properties] Properties to set
             */
            function ChooseChanceMsg(properties) {
                this.traders = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ChooseChanceMsg base.
             * @member {pb.common.IGameBaseMsg|null|undefined} base
             * @memberof pb.common.ChooseChanceMsg
             * @instance
             */
            ChooseChanceMsg.prototype.base = null;

            /**
             * ChooseChanceMsg scenario.
             * @member {pb.common.IScenario|null|undefined} scenario
             * @memberof pb.common.ChooseChanceMsg
             * @instance
             */
            ChooseChanceMsg.prototype.scenario = null;

            /**
             * ChooseChanceMsg canSellCnt.
             * @member {number} canSellCnt
             * @memberof pb.common.ChooseChanceMsg
             * @instance
             */
            ChooseChanceMsg.prototype.canSellCnt = 0;

            /**
             * ChooseChanceMsg timer.
             * @member {pb.common.Itimer|null|undefined} timer
             * @memberof pb.common.ChooseChanceMsg
             * @instance
             */
            ChooseChanceMsg.prototype.timer = null;

            /**
             * ChooseChanceMsg traders.
             * @member {Array.<Long>} traders
             * @memberof pb.common.ChooseChanceMsg
             * @instance
             */
            ChooseChanceMsg.prototype.traders = $util.emptyArray;

            /**
             * Creates a new ChooseChanceMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.ChooseChanceMsg
             * @static
             * @param {pb.common.IChooseChanceMsg=} [properties] Properties to set
             * @returns {pb.common.ChooseChanceMsg} ChooseChanceMsg instance
             */
            ChooseChanceMsg.create = function create(properties) {
                return new ChooseChanceMsg(properties);
            };

            /**
             * Encodes the specified ChooseChanceMsg message. Does not implicitly {@link pb.common.ChooseChanceMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.ChooseChanceMsg
             * @static
             * @param {pb.common.IChooseChanceMsg} message ChooseChanceMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ChooseChanceMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.base != null && message.hasOwnProperty("base"))
                    $root.pb.common.GameBaseMsg.encode(message.base, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.scenario != null && message.hasOwnProperty("scenario"))
                    $root.pb.common.Scenario.encode(message.scenario, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.canSellCnt != null && message.hasOwnProperty("canSellCnt"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.canSellCnt);
                if (message.timer != null && message.hasOwnProperty("timer"))
                    $root.pb.common.timer.encode(message.timer, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.traders != null && message.traders.length) {
                    writer.uint32(/* id 5, wireType 2 =*/42).fork();
                    for (var i = 0; i < message.traders.length; ++i)
                        writer.int64(message.traders[i]);
                    writer.ldelim();
                }
                return writer;
            };

            /**
             * Encodes the specified ChooseChanceMsg message, length delimited. Does not implicitly {@link pb.common.ChooseChanceMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.ChooseChanceMsg
             * @static
             * @param {pb.common.IChooseChanceMsg} message ChooseChanceMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ChooseChanceMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ChooseChanceMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.ChooseChanceMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.ChooseChanceMsg} ChooseChanceMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ChooseChanceMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.ChooseChanceMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.base = $root.pb.common.GameBaseMsg.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.scenario = $root.pb.common.Scenario.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.canSellCnt = reader.int32();
                        break;
                    case 4:
                        message.timer = $root.pb.common.timer.decode(reader, reader.uint32());
                        break;
                    case 5:
                        if (!(message.traders && message.traders.length))
                            message.traders = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.traders.push(reader.int64());
                        } else
                            message.traders.push(reader.int64());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ChooseChanceMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.ChooseChanceMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.ChooseChanceMsg} ChooseChanceMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ChooseChanceMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ChooseChanceMsg message.
             * @function verify
             * @memberof pb.common.ChooseChanceMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ChooseChanceMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.base != null && message.hasOwnProperty("base")) {
                    var error = $root.pb.common.GameBaseMsg.verify(message.base);
                    if (error)
                        return "base." + error;
                }
                if (message.scenario != null && message.hasOwnProperty("scenario")) {
                    var error = $root.pb.common.Scenario.verify(message.scenario);
                    if (error)
                        return "scenario." + error;
                }
                if (message.canSellCnt != null && message.hasOwnProperty("canSellCnt"))
                    if (!$util.isInteger(message.canSellCnt))
                        return "canSellCnt: integer expected";
                if (message.timer != null && message.hasOwnProperty("timer")) {
                    var error = $root.pb.common.timer.verify(message.timer);
                    if (error)
                        return "timer." + error;
                }
                if (message.traders != null && message.hasOwnProperty("traders")) {
                    if (!Array.isArray(message.traders))
                        return "traders: array expected";
                    for (var i = 0; i < message.traders.length; ++i)
                        if (!$util.isInteger(message.traders[i]) && !(message.traders[i] && $util.isInteger(message.traders[i].low) && $util.isInteger(message.traders[i].high)))
                            return "traders: integer|Long[] expected";
                }
                return null;
            };

            /**
             * Creates a ChooseChanceMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.ChooseChanceMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.ChooseChanceMsg} ChooseChanceMsg
             */
            ChooseChanceMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.ChooseChanceMsg)
                    return object;
                var message = new $root.pb.common.ChooseChanceMsg();
                if (object.base != null) {
                    if (typeof object.base !== "object")
                        throw TypeError(".pb.common.ChooseChanceMsg.base: object expected");
                    message.base = $root.pb.common.GameBaseMsg.fromObject(object.base);
                }
                if (object.scenario != null) {
                    if (typeof object.scenario !== "object")
                        throw TypeError(".pb.common.ChooseChanceMsg.scenario: object expected");
                    message.scenario = $root.pb.common.Scenario.fromObject(object.scenario);
                }
                if (object.canSellCnt != null)
                    message.canSellCnt = object.canSellCnt | 0;
                if (object.timer != null) {
                    if (typeof object.timer !== "object")
                        throw TypeError(".pb.common.ChooseChanceMsg.timer: object expected");
                    message.timer = $root.pb.common.timer.fromObject(object.timer);
                }
                if (object.traders) {
                    if (!Array.isArray(object.traders))
                        throw TypeError(".pb.common.ChooseChanceMsg.traders: array expected");
                    message.traders = [];
                    for (var i = 0; i < object.traders.length; ++i)
                        if ($util.Long)
                            (message.traders[i] = $util.Long.fromValue(object.traders[i])).unsigned = false;
                        else if (typeof object.traders[i] === "string")
                            message.traders[i] = parseInt(object.traders[i], 10);
                        else if (typeof object.traders[i] === "number")
                            message.traders[i] = object.traders[i];
                        else if (typeof object.traders[i] === "object")
                            message.traders[i] = new $util.LongBits(object.traders[i].low >>> 0, object.traders[i].high >>> 0).toNumber();
                }
                return message;
            };

            /**
             * Creates a plain object from a ChooseChanceMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.ChooseChanceMsg
             * @static
             * @param {pb.common.ChooseChanceMsg} message ChooseChanceMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ChooseChanceMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.traders = [];
                if (options.defaults) {
                    object.base = null;
                    object.scenario = null;
                    object.canSellCnt = 0;
                    object.timer = null;
                }
                if (message.base != null && message.hasOwnProperty("base"))
                    object.base = $root.pb.common.GameBaseMsg.toObject(message.base, options);
                if (message.scenario != null && message.hasOwnProperty("scenario"))
                    object.scenario = $root.pb.common.Scenario.toObject(message.scenario, options);
                if (message.canSellCnt != null && message.hasOwnProperty("canSellCnt"))
                    object.canSellCnt = message.canSellCnt;
                if (message.timer != null && message.hasOwnProperty("timer"))
                    object.timer = $root.pb.common.timer.toObject(message.timer, options);
                if (message.traders && message.traders.length) {
                    object.traders = [];
                    for (var j = 0; j < message.traders.length; ++j)
                        if (typeof message.traders[j] === "number")
                            object.traders[j] = options.longs === String ? String(message.traders[j]) : message.traders[j];
                        else
                            object.traders[j] = options.longs === String ? $util.Long.prototype.toString.call(message.traders[j]) : options.longs === Number ? new $util.LongBits(message.traders[j].low >>> 0, message.traders[j].high >>> 0).toNumber() : message.traders[j];
                }
                return object;
            };

            /**
             * Converts this ChooseChanceMsg to JSON.
             * @function toJSON
             * @memberof pb.common.ChooseChanceMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ChooseChanceMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ChooseChanceMsg;
        })();

        common.BuyReq = (function() {

            /**
             * Properties of a BuyReq.
             * @memberof pb.common
             * @interface IBuyReq
             * @property {pb.common.IAssetBaseReq|null} [req] BuyReq req
             * @property {number|null} [quantity] BuyReq quantity
             */

            /**
             * Constructs a new BuyReq.
             * @memberof pb.common
             * @classdesc Represents a BuyReq.
             * @implements IBuyReq
             * @constructor
             * @param {pb.common.IBuyReq=} [properties] Properties to set
             */
            function BuyReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BuyReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.BuyReq
             * @instance
             */
            BuyReq.prototype.req = null;

            /**
             * BuyReq quantity.
             * @member {number} quantity
             * @memberof pb.common.BuyReq
             * @instance
             */
            BuyReq.prototype.quantity = 0;

            /**
             * Creates a new BuyReq instance using the specified properties.
             * @function create
             * @memberof pb.common.BuyReq
             * @static
             * @param {pb.common.IBuyReq=} [properties] Properties to set
             * @returns {pb.common.BuyReq} BuyReq instance
             */
            BuyReq.create = function create(properties) {
                return new BuyReq(properties);
            };

            /**
             * Encodes the specified BuyReq message. Does not implicitly {@link pb.common.BuyReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.BuyReq
             * @static
             * @param {pb.common.IBuyReq} message BuyReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuyReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.quantity != null && message.hasOwnProperty("quantity"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.quantity);
                return writer;
            };

            /**
             * Encodes the specified BuyReq message, length delimited. Does not implicitly {@link pb.common.BuyReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.BuyReq
             * @static
             * @param {pb.common.IBuyReq} message BuyReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuyReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BuyReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.BuyReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.BuyReq} BuyReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuyReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.BuyReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.quantity = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BuyReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.BuyReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.BuyReq} BuyReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuyReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BuyReq message.
             * @function verify
             * @memberof pb.common.BuyReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BuyReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                if (message.quantity != null && message.hasOwnProperty("quantity"))
                    if (!$util.isInteger(message.quantity))
                        return "quantity: integer expected";
                return null;
            };

            /**
             * Creates a BuyReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.BuyReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.BuyReq} BuyReq
             */
            BuyReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.BuyReq)
                    return object;
                var message = new $root.pb.common.BuyReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.BuyReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                if (object.quantity != null)
                    message.quantity = object.quantity | 0;
                return message;
            };

            /**
             * Creates a plain object from a BuyReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.BuyReq
             * @static
             * @param {pb.common.BuyReq} message BuyReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BuyReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.req = null;
                    object.quantity = 0;
                }
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                if (message.quantity != null && message.hasOwnProperty("quantity"))
                    object.quantity = message.quantity;
                return object;
            };

            /**
             * Converts this BuyReq to JSON.
             * @function toJSON
             * @memberof pb.common.BuyReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BuyReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BuyReq;
        })();

        common.BuyRsp = (function() {

            /**
             * Properties of a BuyRsp.
             * @memberof pb.common
             * @interface IBuyRsp
             * @property {pb.common.IBaseRsp|null} [rsp] BuyRsp rsp
             */

            /**
             * Constructs a new BuyRsp.
             * @memberof pb.common
             * @classdesc Represents a BuyRsp.
             * @implements IBuyRsp
             * @constructor
             * @param {pb.common.IBuyRsp=} [properties] Properties to set
             */
            function BuyRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BuyRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.BuyRsp
             * @instance
             */
            BuyRsp.prototype.rsp = null;

            /**
             * Creates a new BuyRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.BuyRsp
             * @static
             * @param {pb.common.IBuyRsp=} [properties] Properties to set
             * @returns {pb.common.BuyRsp} BuyRsp instance
             */
            BuyRsp.create = function create(properties) {
                return new BuyRsp(properties);
            };

            /**
             * Encodes the specified BuyRsp message. Does not implicitly {@link pb.common.BuyRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.BuyRsp
             * @static
             * @param {pb.common.IBuyRsp} message BuyRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuyRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified BuyRsp message, length delimited. Does not implicitly {@link pb.common.BuyRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.BuyRsp
             * @static
             * @param {pb.common.IBuyRsp} message BuyRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuyRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BuyRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.BuyRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.BuyRsp} BuyRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuyRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.BuyRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BuyRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.BuyRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.BuyRsp} BuyRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuyRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BuyRsp message.
             * @function verify
             * @memberof pb.common.BuyRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BuyRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                return null;
            };

            /**
             * Creates a BuyRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.BuyRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.BuyRsp} BuyRsp
             */
            BuyRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.BuyRsp)
                    return object;
                var message = new $root.pb.common.BuyRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.BuyRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from a BuyRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.BuyRsp
             * @static
             * @param {pb.common.BuyRsp} message BuyRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BuyRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                return object;
            };

            /**
             * Converts this BuyRsp to JSON.
             * @function toJSON
             * @memberof pb.common.BuyRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BuyRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BuyRsp;
        })();

        common.BuyMsg = (function() {

            /**
             * Properties of a BuyMsg.
             * @memberof pb.common
             * @interface IBuyMsg
             * @property {pb.common.IGameBaseMsg|null} [base] BuyMsg base
             * @property {pb.common.IScenario|null} [scenario] BuyMsg scenario
             * @property {number|null} [quantity] BuyMsg quantity
             */

            /**
             * Constructs a new BuyMsg.
             * @memberof pb.common
             * @classdesc Represents a BuyMsg.
             * @implements IBuyMsg
             * @constructor
             * @param {pb.common.IBuyMsg=} [properties] Properties to set
             */
            function BuyMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BuyMsg base.
             * @member {pb.common.IGameBaseMsg|null|undefined} base
             * @memberof pb.common.BuyMsg
             * @instance
             */
            BuyMsg.prototype.base = null;

            /**
             * BuyMsg scenario.
             * @member {pb.common.IScenario|null|undefined} scenario
             * @memberof pb.common.BuyMsg
             * @instance
             */
            BuyMsg.prototype.scenario = null;

            /**
             * BuyMsg quantity.
             * @member {number} quantity
             * @memberof pb.common.BuyMsg
             * @instance
             */
            BuyMsg.prototype.quantity = 0;

            /**
             * Creates a new BuyMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.BuyMsg
             * @static
             * @param {pb.common.IBuyMsg=} [properties] Properties to set
             * @returns {pb.common.BuyMsg} BuyMsg instance
             */
            BuyMsg.create = function create(properties) {
                return new BuyMsg(properties);
            };

            /**
             * Encodes the specified BuyMsg message. Does not implicitly {@link pb.common.BuyMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.BuyMsg
             * @static
             * @param {pb.common.IBuyMsg} message BuyMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuyMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.base != null && message.hasOwnProperty("base"))
                    $root.pb.common.GameBaseMsg.encode(message.base, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.scenario != null && message.hasOwnProperty("scenario"))
                    $root.pb.common.Scenario.encode(message.scenario, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.quantity != null && message.hasOwnProperty("quantity"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.quantity);
                return writer;
            };

            /**
             * Encodes the specified BuyMsg message, length delimited. Does not implicitly {@link pb.common.BuyMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.BuyMsg
             * @static
             * @param {pb.common.IBuyMsg} message BuyMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BuyMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BuyMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.BuyMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.BuyMsg} BuyMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuyMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.BuyMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.base = $root.pb.common.GameBaseMsg.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.scenario = $root.pb.common.Scenario.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.quantity = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BuyMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.BuyMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.BuyMsg} BuyMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BuyMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BuyMsg message.
             * @function verify
             * @memberof pb.common.BuyMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BuyMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.base != null && message.hasOwnProperty("base")) {
                    var error = $root.pb.common.GameBaseMsg.verify(message.base);
                    if (error)
                        return "base." + error;
                }
                if (message.scenario != null && message.hasOwnProperty("scenario")) {
                    var error = $root.pb.common.Scenario.verify(message.scenario);
                    if (error)
                        return "scenario." + error;
                }
                if (message.quantity != null && message.hasOwnProperty("quantity"))
                    if (!$util.isInteger(message.quantity))
                        return "quantity: integer expected";
                return null;
            };

            /**
             * Creates a BuyMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.BuyMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.BuyMsg} BuyMsg
             */
            BuyMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.BuyMsg)
                    return object;
                var message = new $root.pb.common.BuyMsg();
                if (object.base != null) {
                    if (typeof object.base !== "object")
                        throw TypeError(".pb.common.BuyMsg.base: object expected");
                    message.base = $root.pb.common.GameBaseMsg.fromObject(object.base);
                }
                if (object.scenario != null) {
                    if (typeof object.scenario !== "object")
                        throw TypeError(".pb.common.BuyMsg.scenario: object expected");
                    message.scenario = $root.pb.common.Scenario.fromObject(object.scenario);
                }
                if (object.quantity != null)
                    message.quantity = object.quantity | 0;
                return message;
            };

            /**
             * Creates a plain object from a BuyMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.BuyMsg
             * @static
             * @param {pb.common.BuyMsg} message BuyMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BuyMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.base = null;
                    object.scenario = null;
                    object.quantity = 0;
                }
                if (message.base != null && message.hasOwnProperty("base"))
                    object.base = $root.pb.common.GameBaseMsg.toObject(message.base, options);
                if (message.scenario != null && message.hasOwnProperty("scenario"))
                    object.scenario = $root.pb.common.Scenario.toObject(message.scenario, options);
                if (message.quantity != null && message.hasOwnProperty("quantity"))
                    object.quantity = message.quantity;
                return object;
            };

            /**
             * Converts this BuyMsg to JSON.
             * @function toJSON
             * @memberof pb.common.BuyMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BuyMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BuyMsg;
        })();

        common.SellStockReq = (function() {

            /**
             * Properties of a SellStockReq.
             * @memberof pb.common
             * @interface ISellStockReq
             * @property {pb.common.IAssetBaseReq|null} [req] SellStockReq req
             * @property {number|null} [quantity] SellStockReq quantity
             * @property {Long|null} [playerAssetId] SellStockReq playerAssetId
             */

            /**
             * Constructs a new SellStockReq.
             * @memberof pb.common
             * @classdesc Represents a SellStockReq.
             * @implements ISellStockReq
             * @constructor
             * @param {pb.common.ISellStockReq=} [properties] Properties to set
             */
            function SellStockReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SellStockReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.SellStockReq
             * @instance
             */
            SellStockReq.prototype.req = null;

            /**
             * SellStockReq quantity.
             * @member {number} quantity
             * @memberof pb.common.SellStockReq
             * @instance
             */
            SellStockReq.prototype.quantity = 0;

            /**
             * SellStockReq playerAssetId.
             * @member {Long} playerAssetId
             * @memberof pb.common.SellStockReq
             * @instance
             */
            SellStockReq.prototype.playerAssetId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new SellStockReq instance using the specified properties.
             * @function create
             * @memberof pb.common.SellStockReq
             * @static
             * @param {pb.common.ISellStockReq=} [properties] Properties to set
             * @returns {pb.common.SellStockReq} SellStockReq instance
             */
            SellStockReq.create = function create(properties) {
                return new SellStockReq(properties);
            };

            /**
             * Encodes the specified SellStockReq message. Does not implicitly {@link pb.common.SellStockReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.SellStockReq
             * @static
             * @param {pb.common.ISellStockReq} message SellStockReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SellStockReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.quantity != null && message.hasOwnProperty("quantity"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.quantity);
                if (message.playerAssetId != null && message.hasOwnProperty("playerAssetId"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.playerAssetId);
                return writer;
            };

            /**
             * Encodes the specified SellStockReq message, length delimited. Does not implicitly {@link pb.common.SellStockReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.SellStockReq
             * @static
             * @param {pb.common.ISellStockReq} message SellStockReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SellStockReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SellStockReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.SellStockReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.SellStockReq} SellStockReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SellStockReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.SellStockReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.quantity = reader.int32();
                        break;
                    case 3:
                        message.playerAssetId = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SellStockReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.SellStockReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.SellStockReq} SellStockReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SellStockReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SellStockReq message.
             * @function verify
             * @memberof pb.common.SellStockReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SellStockReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                if (message.quantity != null && message.hasOwnProperty("quantity"))
                    if (!$util.isInteger(message.quantity))
                        return "quantity: integer expected";
                if (message.playerAssetId != null && message.hasOwnProperty("playerAssetId"))
                    if (!$util.isInteger(message.playerAssetId) && !(message.playerAssetId && $util.isInteger(message.playerAssetId.low) && $util.isInteger(message.playerAssetId.high)))
                        return "playerAssetId: integer|Long expected";
                return null;
            };

            /**
             * Creates a SellStockReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.SellStockReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.SellStockReq} SellStockReq
             */
            SellStockReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.SellStockReq)
                    return object;
                var message = new $root.pb.common.SellStockReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.SellStockReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                if (object.quantity != null)
                    message.quantity = object.quantity | 0;
                if (object.playerAssetId != null)
                    if ($util.Long)
                        (message.playerAssetId = $util.Long.fromValue(object.playerAssetId)).unsigned = false;
                    else if (typeof object.playerAssetId === "string")
                        message.playerAssetId = parseInt(object.playerAssetId, 10);
                    else if (typeof object.playerAssetId === "number")
                        message.playerAssetId = object.playerAssetId;
                    else if (typeof object.playerAssetId === "object")
                        message.playerAssetId = new $util.LongBits(object.playerAssetId.low >>> 0, object.playerAssetId.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a SellStockReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.SellStockReq
             * @static
             * @param {pb.common.SellStockReq} message SellStockReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SellStockReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.req = null;
                    object.quantity = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.playerAssetId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.playerAssetId = options.longs === String ? "0" : 0;
                }
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                if (message.quantity != null && message.hasOwnProperty("quantity"))
                    object.quantity = message.quantity;
                if (message.playerAssetId != null && message.hasOwnProperty("playerAssetId"))
                    if (typeof message.playerAssetId === "number")
                        object.playerAssetId = options.longs === String ? String(message.playerAssetId) : message.playerAssetId;
                    else
                        object.playerAssetId = options.longs === String ? $util.Long.prototype.toString.call(message.playerAssetId) : options.longs === Number ? new $util.LongBits(message.playerAssetId.low >>> 0, message.playerAssetId.high >>> 0).toNumber() : message.playerAssetId;
                return object;
            };

            /**
             * Converts this SellStockReq to JSON.
             * @function toJSON
             * @memberof pb.common.SellStockReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SellStockReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SellStockReq;
        })();

        common.SellStockRsp = (function() {

            /**
             * Properties of a SellStockRsp.
             * @memberof pb.common
             * @interface ISellStockRsp
             * @property {pb.common.IBaseRsp|null} [rsp] SellStockRsp rsp
             */

            /**
             * Constructs a new SellStockRsp.
             * @memberof pb.common
             * @classdesc Represents a SellStockRsp.
             * @implements ISellStockRsp
             * @constructor
             * @param {pb.common.ISellStockRsp=} [properties] Properties to set
             */
            function SellStockRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SellStockRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.SellStockRsp
             * @instance
             */
            SellStockRsp.prototype.rsp = null;

            /**
             * Creates a new SellStockRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.SellStockRsp
             * @static
             * @param {pb.common.ISellStockRsp=} [properties] Properties to set
             * @returns {pb.common.SellStockRsp} SellStockRsp instance
             */
            SellStockRsp.create = function create(properties) {
                return new SellStockRsp(properties);
            };

            /**
             * Encodes the specified SellStockRsp message. Does not implicitly {@link pb.common.SellStockRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.SellStockRsp
             * @static
             * @param {pb.common.ISellStockRsp} message SellStockRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SellStockRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SellStockRsp message, length delimited. Does not implicitly {@link pb.common.SellStockRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.SellStockRsp
             * @static
             * @param {pb.common.ISellStockRsp} message SellStockRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SellStockRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SellStockRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.SellStockRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.SellStockRsp} SellStockRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SellStockRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.SellStockRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SellStockRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.SellStockRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.SellStockRsp} SellStockRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SellStockRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SellStockRsp message.
             * @function verify
             * @memberof pb.common.SellStockRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SellStockRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                return null;
            };

            /**
             * Creates a SellStockRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.SellStockRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.SellStockRsp} SellStockRsp
             */
            SellStockRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.SellStockRsp)
                    return object;
                var message = new $root.pb.common.SellStockRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.SellStockRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from a SellStockRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.SellStockRsp
             * @static
             * @param {pb.common.SellStockRsp} message SellStockRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SellStockRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                return object;
            };

            /**
             * Converts this SellStockRsp to JSON.
             * @function toJSON
             * @memberof pb.common.SellStockRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SellStockRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SellStockRsp;
        })();

        common.SellStockMsg = (function() {

            /**
             * Properties of a SellStockMsg.
             * @memberof pb.common
             * @interface ISellStockMsg
             * @property {pb.common.IGameBaseMsg|null} [base] SellStockMsg base
             * @property {pb.common.IScenario|null} [scenario] SellStockMsg scenario
             * @property {number|null} [quantity] SellStockMsg quantity
             */

            /**
             * Constructs a new SellStockMsg.
             * @memberof pb.common
             * @classdesc Represents a SellStockMsg.
             * @implements ISellStockMsg
             * @constructor
             * @param {pb.common.ISellStockMsg=} [properties] Properties to set
             */
            function SellStockMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SellStockMsg base.
             * @member {pb.common.IGameBaseMsg|null|undefined} base
             * @memberof pb.common.SellStockMsg
             * @instance
             */
            SellStockMsg.prototype.base = null;

            /**
             * SellStockMsg scenario.
             * @member {pb.common.IScenario|null|undefined} scenario
             * @memberof pb.common.SellStockMsg
             * @instance
             */
            SellStockMsg.prototype.scenario = null;

            /**
             * SellStockMsg quantity.
             * @member {number} quantity
             * @memberof pb.common.SellStockMsg
             * @instance
             */
            SellStockMsg.prototype.quantity = 0;

            /**
             * Creates a new SellStockMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.SellStockMsg
             * @static
             * @param {pb.common.ISellStockMsg=} [properties] Properties to set
             * @returns {pb.common.SellStockMsg} SellStockMsg instance
             */
            SellStockMsg.create = function create(properties) {
                return new SellStockMsg(properties);
            };

            /**
             * Encodes the specified SellStockMsg message. Does not implicitly {@link pb.common.SellStockMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.SellStockMsg
             * @static
             * @param {pb.common.ISellStockMsg} message SellStockMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SellStockMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.base != null && message.hasOwnProperty("base"))
                    $root.pb.common.GameBaseMsg.encode(message.base, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.scenario != null && message.hasOwnProperty("scenario"))
                    $root.pb.common.Scenario.encode(message.scenario, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.quantity != null && message.hasOwnProperty("quantity"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.quantity);
                return writer;
            };

            /**
             * Encodes the specified SellStockMsg message, length delimited. Does not implicitly {@link pb.common.SellStockMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.SellStockMsg
             * @static
             * @param {pb.common.ISellStockMsg} message SellStockMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SellStockMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SellStockMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.SellStockMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.SellStockMsg} SellStockMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SellStockMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.SellStockMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.base = $root.pb.common.GameBaseMsg.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.scenario = $root.pb.common.Scenario.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.quantity = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SellStockMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.SellStockMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.SellStockMsg} SellStockMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SellStockMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SellStockMsg message.
             * @function verify
             * @memberof pb.common.SellStockMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SellStockMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.base != null && message.hasOwnProperty("base")) {
                    var error = $root.pb.common.GameBaseMsg.verify(message.base);
                    if (error)
                        return "base." + error;
                }
                if (message.scenario != null && message.hasOwnProperty("scenario")) {
                    var error = $root.pb.common.Scenario.verify(message.scenario);
                    if (error)
                        return "scenario." + error;
                }
                if (message.quantity != null && message.hasOwnProperty("quantity"))
                    if (!$util.isInteger(message.quantity))
                        return "quantity: integer expected";
                return null;
            };

            /**
             * Creates a SellStockMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.SellStockMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.SellStockMsg} SellStockMsg
             */
            SellStockMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.SellStockMsg)
                    return object;
                var message = new $root.pb.common.SellStockMsg();
                if (object.base != null) {
                    if (typeof object.base !== "object")
                        throw TypeError(".pb.common.SellStockMsg.base: object expected");
                    message.base = $root.pb.common.GameBaseMsg.fromObject(object.base);
                }
                if (object.scenario != null) {
                    if (typeof object.scenario !== "object")
                        throw TypeError(".pb.common.SellStockMsg.scenario: object expected");
                    message.scenario = $root.pb.common.Scenario.fromObject(object.scenario);
                }
                if (object.quantity != null)
                    message.quantity = object.quantity | 0;
                return message;
            };

            /**
             * Creates a plain object from a SellStockMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.SellStockMsg
             * @static
             * @param {pb.common.SellStockMsg} message SellStockMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SellStockMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.base = null;
                    object.scenario = null;
                    object.quantity = 0;
                }
                if (message.base != null && message.hasOwnProperty("base"))
                    object.base = $root.pb.common.GameBaseMsg.toObject(message.base, options);
                if (message.scenario != null && message.hasOwnProperty("scenario"))
                    object.scenario = $root.pb.common.Scenario.toObject(message.scenario, options);
                if (message.quantity != null && message.hasOwnProperty("quantity"))
                    object.quantity = message.quantity;
                return object;
            };

            /**
             * Converts this SellStockMsg to JSON.
             * @function toJSON
             * @memberof pb.common.SellStockMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SellStockMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SellStockMsg;
        })();

        common.GiveUpChanceReq = (function() {

            /**
             * Properties of a GiveUpChanceReq.
             * @memberof pb.common
             * @interface IGiveUpChanceReq
             * @property {pb.common.IAssetBaseReq|null} [base] GiveUpChanceReq base
             */

            /**
             * Constructs a new GiveUpChanceReq.
             * @memberof pb.common
             * @classdesc Represents a GiveUpChanceReq.
             * @implements IGiveUpChanceReq
             * @constructor
             * @param {pb.common.IGiveUpChanceReq=} [properties] Properties to set
             */
            function GiveUpChanceReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GiveUpChanceReq base.
             * @member {pb.common.IAssetBaseReq|null|undefined} base
             * @memberof pb.common.GiveUpChanceReq
             * @instance
             */
            GiveUpChanceReq.prototype.base = null;

            /**
             * Creates a new GiveUpChanceReq instance using the specified properties.
             * @function create
             * @memberof pb.common.GiveUpChanceReq
             * @static
             * @param {pb.common.IGiveUpChanceReq=} [properties] Properties to set
             * @returns {pb.common.GiveUpChanceReq} GiveUpChanceReq instance
             */
            GiveUpChanceReq.create = function create(properties) {
                return new GiveUpChanceReq(properties);
            };

            /**
             * Encodes the specified GiveUpChanceReq message. Does not implicitly {@link pb.common.GiveUpChanceReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GiveUpChanceReq
             * @static
             * @param {pb.common.IGiveUpChanceReq} message GiveUpChanceReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GiveUpChanceReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.base != null && message.hasOwnProperty("base"))
                    $root.pb.common.AssetBaseReq.encode(message.base, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GiveUpChanceReq message, length delimited. Does not implicitly {@link pb.common.GiveUpChanceReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GiveUpChanceReq
             * @static
             * @param {pb.common.IGiveUpChanceReq} message GiveUpChanceReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GiveUpChanceReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GiveUpChanceReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GiveUpChanceReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GiveUpChanceReq} GiveUpChanceReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GiveUpChanceReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GiveUpChanceReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.base = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GiveUpChanceReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GiveUpChanceReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GiveUpChanceReq} GiveUpChanceReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GiveUpChanceReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GiveUpChanceReq message.
             * @function verify
             * @memberof pb.common.GiveUpChanceReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GiveUpChanceReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.base != null && message.hasOwnProperty("base")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.base);
                    if (error)
                        return "base." + error;
                }
                return null;
            };

            /**
             * Creates a GiveUpChanceReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GiveUpChanceReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GiveUpChanceReq} GiveUpChanceReq
             */
            GiveUpChanceReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GiveUpChanceReq)
                    return object;
                var message = new $root.pb.common.GiveUpChanceReq();
                if (object.base != null) {
                    if (typeof object.base !== "object")
                        throw TypeError(".pb.common.GiveUpChanceReq.base: object expected");
                    message.base = $root.pb.common.AssetBaseReq.fromObject(object.base);
                }
                return message;
            };

            /**
             * Creates a plain object from a GiveUpChanceReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GiveUpChanceReq
             * @static
             * @param {pb.common.GiveUpChanceReq} message GiveUpChanceReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GiveUpChanceReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.base = null;
                if (message.base != null && message.hasOwnProperty("base"))
                    object.base = $root.pb.common.AssetBaseReq.toObject(message.base, options);
                return object;
            };

            /**
             * Converts this GiveUpChanceReq to JSON.
             * @function toJSON
             * @memberof pb.common.GiveUpChanceReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GiveUpChanceReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GiveUpChanceReq;
        })();

        common.GiveUpChanceRsp = (function() {

            /**
             * Properties of a GiveUpChanceRsp.
             * @memberof pb.common
             * @interface IGiveUpChanceRsp
             * @property {pb.common.IBaseRsp|null} [rsp] GiveUpChanceRsp rsp
             */

            /**
             * Constructs a new GiveUpChanceRsp.
             * @memberof pb.common
             * @classdesc Represents a GiveUpChanceRsp.
             * @implements IGiveUpChanceRsp
             * @constructor
             * @param {pb.common.IGiveUpChanceRsp=} [properties] Properties to set
             */
            function GiveUpChanceRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GiveUpChanceRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.GiveUpChanceRsp
             * @instance
             */
            GiveUpChanceRsp.prototype.rsp = null;

            /**
             * Creates a new GiveUpChanceRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.GiveUpChanceRsp
             * @static
             * @param {pb.common.IGiveUpChanceRsp=} [properties] Properties to set
             * @returns {pb.common.GiveUpChanceRsp} GiveUpChanceRsp instance
             */
            GiveUpChanceRsp.create = function create(properties) {
                return new GiveUpChanceRsp(properties);
            };

            /**
             * Encodes the specified GiveUpChanceRsp message. Does not implicitly {@link pb.common.GiveUpChanceRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GiveUpChanceRsp
             * @static
             * @param {pb.common.IGiveUpChanceRsp} message GiveUpChanceRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GiveUpChanceRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GiveUpChanceRsp message, length delimited. Does not implicitly {@link pb.common.GiveUpChanceRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GiveUpChanceRsp
             * @static
             * @param {pb.common.IGiveUpChanceRsp} message GiveUpChanceRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GiveUpChanceRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GiveUpChanceRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GiveUpChanceRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GiveUpChanceRsp} GiveUpChanceRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GiveUpChanceRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GiveUpChanceRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GiveUpChanceRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GiveUpChanceRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GiveUpChanceRsp} GiveUpChanceRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GiveUpChanceRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GiveUpChanceRsp message.
             * @function verify
             * @memberof pb.common.GiveUpChanceRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GiveUpChanceRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                return null;
            };

            /**
             * Creates a GiveUpChanceRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GiveUpChanceRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GiveUpChanceRsp} GiveUpChanceRsp
             */
            GiveUpChanceRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GiveUpChanceRsp)
                    return object;
                var message = new $root.pb.common.GiveUpChanceRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.GiveUpChanceRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from a GiveUpChanceRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GiveUpChanceRsp
             * @static
             * @param {pb.common.GiveUpChanceRsp} message GiveUpChanceRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GiveUpChanceRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                return object;
            };

            /**
             * Converts this GiveUpChanceRsp to JSON.
             * @function toJSON
             * @memberof pb.common.GiveUpChanceRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GiveUpChanceRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GiveUpChanceRsp;
        })();

        common.GiveUpChanceMsg = (function() {

            /**
             * Properties of a GiveUpChanceMsg.
             * @memberof pb.common
             * @interface IGiveUpChanceMsg
             * @property {pb.common.IGameBaseMsg|null} [base] GiveUpChanceMsg base
             */

            /**
             * Constructs a new GiveUpChanceMsg.
             * @memberof pb.common
             * @classdesc Represents a GiveUpChanceMsg.
             * @implements IGiveUpChanceMsg
             * @constructor
             * @param {pb.common.IGiveUpChanceMsg=} [properties] Properties to set
             */
            function GiveUpChanceMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GiveUpChanceMsg base.
             * @member {pb.common.IGameBaseMsg|null|undefined} base
             * @memberof pb.common.GiveUpChanceMsg
             * @instance
             */
            GiveUpChanceMsg.prototype.base = null;

            /**
             * Creates a new GiveUpChanceMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.GiveUpChanceMsg
             * @static
             * @param {pb.common.IGiveUpChanceMsg=} [properties] Properties to set
             * @returns {pb.common.GiveUpChanceMsg} GiveUpChanceMsg instance
             */
            GiveUpChanceMsg.create = function create(properties) {
                return new GiveUpChanceMsg(properties);
            };

            /**
             * Encodes the specified GiveUpChanceMsg message. Does not implicitly {@link pb.common.GiveUpChanceMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GiveUpChanceMsg
             * @static
             * @param {pb.common.IGiveUpChanceMsg} message GiveUpChanceMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GiveUpChanceMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.base != null && message.hasOwnProperty("base"))
                    $root.pb.common.GameBaseMsg.encode(message.base, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GiveUpChanceMsg message, length delimited. Does not implicitly {@link pb.common.GiveUpChanceMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GiveUpChanceMsg
             * @static
             * @param {pb.common.IGiveUpChanceMsg} message GiveUpChanceMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GiveUpChanceMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GiveUpChanceMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GiveUpChanceMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GiveUpChanceMsg} GiveUpChanceMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GiveUpChanceMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GiveUpChanceMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.base = $root.pb.common.GameBaseMsg.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GiveUpChanceMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GiveUpChanceMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GiveUpChanceMsg} GiveUpChanceMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GiveUpChanceMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GiveUpChanceMsg message.
             * @function verify
             * @memberof pb.common.GiveUpChanceMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GiveUpChanceMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.base != null && message.hasOwnProperty("base")) {
                    var error = $root.pb.common.GameBaseMsg.verify(message.base);
                    if (error)
                        return "base." + error;
                }
                return null;
            };

            /**
             * Creates a GiveUpChanceMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GiveUpChanceMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GiveUpChanceMsg} GiveUpChanceMsg
             */
            GiveUpChanceMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GiveUpChanceMsg)
                    return object;
                var message = new $root.pb.common.GiveUpChanceMsg();
                if (object.base != null) {
                    if (typeof object.base !== "object")
                        throw TypeError(".pb.common.GiveUpChanceMsg.base: object expected");
                    message.base = $root.pb.common.GameBaseMsg.fromObject(object.base);
                }
                return message;
            };

            /**
             * Creates a plain object from a GiveUpChanceMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GiveUpChanceMsg
             * @static
             * @param {pb.common.GiveUpChanceMsg} message GiveUpChanceMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GiveUpChanceMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.base = null;
                if (message.base != null && message.hasOwnProperty("base"))
                    object.base = $root.pb.common.GameBaseMsg.toObject(message.base, options);
                return object;
            };

            /**
             * Converts this GiveUpChanceMsg to JSON.
             * @function toJSON
             * @memberof pb.common.GiveUpChanceMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GiveUpChanceMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GiveUpChanceMsg;
        })();

        common.StartAuctionReq = (function() {

            /**
             * Properties of a StartAuctionReq.
             * @memberof pb.common
             * @interface IStartAuctionReq
             * @property {pb.common.IAssetBaseReq|null} [req] StartAuctionReq req
             * @property {number|null} [floorPrice] StartAuctionReq floorPrice
             */

            /**
             * Constructs a new StartAuctionReq.
             * @memberof pb.common
             * @classdesc Represents a StartAuctionReq.
             * @implements IStartAuctionReq
             * @constructor
             * @param {pb.common.IStartAuctionReq=} [properties] Properties to set
             */
            function StartAuctionReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * StartAuctionReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.StartAuctionReq
             * @instance
             */
            StartAuctionReq.prototype.req = null;

            /**
             * StartAuctionReq floorPrice.
             * @member {number} floorPrice
             * @memberof pb.common.StartAuctionReq
             * @instance
             */
            StartAuctionReq.prototype.floorPrice = 0;

            /**
             * Creates a new StartAuctionReq instance using the specified properties.
             * @function create
             * @memberof pb.common.StartAuctionReq
             * @static
             * @param {pb.common.IStartAuctionReq=} [properties] Properties to set
             * @returns {pb.common.StartAuctionReq} StartAuctionReq instance
             */
            StartAuctionReq.create = function create(properties) {
                return new StartAuctionReq(properties);
            };

            /**
             * Encodes the specified StartAuctionReq message. Does not implicitly {@link pb.common.StartAuctionReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.StartAuctionReq
             * @static
             * @param {pb.common.IStartAuctionReq} message StartAuctionReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StartAuctionReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.floorPrice != null && message.hasOwnProperty("floorPrice"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.floorPrice);
                return writer;
            };

            /**
             * Encodes the specified StartAuctionReq message, length delimited. Does not implicitly {@link pb.common.StartAuctionReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.StartAuctionReq
             * @static
             * @param {pb.common.IStartAuctionReq} message StartAuctionReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StartAuctionReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a StartAuctionReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.StartAuctionReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.StartAuctionReq} StartAuctionReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StartAuctionReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.StartAuctionReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.floorPrice = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a StartAuctionReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.StartAuctionReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.StartAuctionReq} StartAuctionReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StartAuctionReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a StartAuctionReq message.
             * @function verify
             * @memberof pb.common.StartAuctionReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            StartAuctionReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                if (message.floorPrice != null && message.hasOwnProperty("floorPrice"))
                    if (!$util.isInteger(message.floorPrice))
                        return "floorPrice: integer expected";
                return null;
            };

            /**
             * Creates a StartAuctionReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.StartAuctionReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.StartAuctionReq} StartAuctionReq
             */
            StartAuctionReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.StartAuctionReq)
                    return object;
                var message = new $root.pb.common.StartAuctionReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.StartAuctionReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                if (object.floorPrice != null)
                    message.floorPrice = object.floorPrice | 0;
                return message;
            };

            /**
             * Creates a plain object from a StartAuctionReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.StartAuctionReq
             * @static
             * @param {pb.common.StartAuctionReq} message StartAuctionReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            StartAuctionReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.req = null;
                    object.floorPrice = 0;
                }
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                if (message.floorPrice != null && message.hasOwnProperty("floorPrice"))
                    object.floorPrice = message.floorPrice;
                return object;
            };

            /**
             * Converts this StartAuctionReq to JSON.
             * @function toJSON
             * @memberof pb.common.StartAuctionReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            StartAuctionReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return StartAuctionReq;
        })();

        common.StartAuctionRsp = (function() {

            /**
             * Properties of a StartAuctionRsp.
             * @memberof pb.common
             * @interface IStartAuctionRsp
             * @property {pb.common.IBaseRsp|null} [rsp] StartAuctionRsp rsp
             * @property {Long|null} [auctionId] StartAuctionRsp auctionId
             */

            /**
             * Constructs a new StartAuctionRsp.
             * @memberof pb.common
             * @classdesc Represents a StartAuctionRsp.
             * @implements IStartAuctionRsp
             * @constructor
             * @param {pb.common.IStartAuctionRsp=} [properties] Properties to set
             */
            function StartAuctionRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * StartAuctionRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.StartAuctionRsp
             * @instance
             */
            StartAuctionRsp.prototype.rsp = null;

            /**
             * StartAuctionRsp auctionId.
             * @member {Long} auctionId
             * @memberof pb.common.StartAuctionRsp
             * @instance
             */
            StartAuctionRsp.prototype.auctionId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new StartAuctionRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.StartAuctionRsp
             * @static
             * @param {pb.common.IStartAuctionRsp=} [properties] Properties to set
             * @returns {pb.common.StartAuctionRsp} StartAuctionRsp instance
             */
            StartAuctionRsp.create = function create(properties) {
                return new StartAuctionRsp(properties);
            };

            /**
             * Encodes the specified StartAuctionRsp message. Does not implicitly {@link pb.common.StartAuctionRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.StartAuctionRsp
             * @static
             * @param {pb.common.IStartAuctionRsp} message StartAuctionRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StartAuctionRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.auctionId != null && message.hasOwnProperty("auctionId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.auctionId);
                return writer;
            };

            /**
             * Encodes the specified StartAuctionRsp message, length delimited. Does not implicitly {@link pb.common.StartAuctionRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.StartAuctionRsp
             * @static
             * @param {pb.common.IStartAuctionRsp} message StartAuctionRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StartAuctionRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a StartAuctionRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.StartAuctionRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.StartAuctionRsp} StartAuctionRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StartAuctionRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.StartAuctionRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.auctionId = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a StartAuctionRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.StartAuctionRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.StartAuctionRsp} StartAuctionRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StartAuctionRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a StartAuctionRsp message.
             * @function verify
             * @memberof pb.common.StartAuctionRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            StartAuctionRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                if (message.auctionId != null && message.hasOwnProperty("auctionId"))
                    if (!$util.isInteger(message.auctionId) && !(message.auctionId && $util.isInteger(message.auctionId.low) && $util.isInteger(message.auctionId.high)))
                        return "auctionId: integer|Long expected";
                return null;
            };

            /**
             * Creates a StartAuctionRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.StartAuctionRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.StartAuctionRsp} StartAuctionRsp
             */
            StartAuctionRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.StartAuctionRsp)
                    return object;
                var message = new $root.pb.common.StartAuctionRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.StartAuctionRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                if (object.auctionId != null)
                    if ($util.Long)
                        (message.auctionId = $util.Long.fromValue(object.auctionId)).unsigned = false;
                    else if (typeof object.auctionId === "string")
                        message.auctionId = parseInt(object.auctionId, 10);
                    else if (typeof object.auctionId === "number")
                        message.auctionId = object.auctionId;
                    else if (typeof object.auctionId === "object")
                        message.auctionId = new $util.LongBits(object.auctionId.low >>> 0, object.auctionId.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a StartAuctionRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.StartAuctionRsp
             * @static
             * @param {pb.common.StartAuctionRsp} message StartAuctionRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            StartAuctionRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.rsp = null;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.auctionId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.auctionId = options.longs === String ? "0" : 0;
                }
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                if (message.auctionId != null && message.hasOwnProperty("auctionId"))
                    if (typeof message.auctionId === "number")
                        object.auctionId = options.longs === String ? String(message.auctionId) : message.auctionId;
                    else
                        object.auctionId = options.longs === String ? $util.Long.prototype.toString.call(message.auctionId) : options.longs === Number ? new $util.LongBits(message.auctionId.low >>> 0, message.auctionId.high >>> 0).toNumber() : message.auctionId;
                return object;
            };

            /**
             * Converts this StartAuctionRsp to JSON.
             * @function toJSON
             * @memberof pb.common.StartAuctionRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            StartAuctionRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return StartAuctionRsp;
        })();

        common.StartAuctionMsg = (function() {

            /**
             * Properties of a StartAuctionMsg.
             * @memberof pb.common
             * @interface IStartAuctionMsg
             * @property {pb.common.IGameBaseMsg|null} [base] StartAuctionMsg base
             * @property {pb.common.IScenario|null} [scenario] StartAuctionMsg scenario
             * @property {number|null} [floorPrice] StartAuctionMsg floorPrice
             * @property {Long|null} [auctionId] StartAuctionMsg auctionId
             * @property {pb.common.Itimer|null} [timer] StartAuctionMsg timer
             * @property {number|null} [raiseTimeout] StartAuctionMsg raiseTimeout
             */

            /**
             * Constructs a new StartAuctionMsg.
             * @memberof pb.common
             * @classdesc Represents a StartAuctionMsg.
             * @implements IStartAuctionMsg
             * @constructor
             * @param {pb.common.IStartAuctionMsg=} [properties] Properties to set
             */
            function StartAuctionMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * StartAuctionMsg base.
             * @member {pb.common.IGameBaseMsg|null|undefined} base
             * @memberof pb.common.StartAuctionMsg
             * @instance
             */
            StartAuctionMsg.prototype.base = null;

            /**
             * StartAuctionMsg scenario.
             * @member {pb.common.IScenario|null|undefined} scenario
             * @memberof pb.common.StartAuctionMsg
             * @instance
             */
            StartAuctionMsg.prototype.scenario = null;

            /**
             * StartAuctionMsg floorPrice.
             * @member {number} floorPrice
             * @memberof pb.common.StartAuctionMsg
             * @instance
             */
            StartAuctionMsg.prototype.floorPrice = 0;

            /**
             * StartAuctionMsg auctionId.
             * @member {Long} auctionId
             * @memberof pb.common.StartAuctionMsg
             * @instance
             */
            StartAuctionMsg.prototype.auctionId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * StartAuctionMsg timer.
             * @member {pb.common.Itimer|null|undefined} timer
             * @memberof pb.common.StartAuctionMsg
             * @instance
             */
            StartAuctionMsg.prototype.timer = null;

            /**
             * StartAuctionMsg raiseTimeout.
             * @member {number} raiseTimeout
             * @memberof pb.common.StartAuctionMsg
             * @instance
             */
            StartAuctionMsg.prototype.raiseTimeout = 0;

            /**
             * Creates a new StartAuctionMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.StartAuctionMsg
             * @static
             * @param {pb.common.IStartAuctionMsg=} [properties] Properties to set
             * @returns {pb.common.StartAuctionMsg} StartAuctionMsg instance
             */
            StartAuctionMsg.create = function create(properties) {
                return new StartAuctionMsg(properties);
            };

            /**
             * Encodes the specified StartAuctionMsg message. Does not implicitly {@link pb.common.StartAuctionMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.StartAuctionMsg
             * @static
             * @param {pb.common.IStartAuctionMsg} message StartAuctionMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StartAuctionMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.base != null && message.hasOwnProperty("base"))
                    $root.pb.common.GameBaseMsg.encode(message.base, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.scenario != null && message.hasOwnProperty("scenario"))
                    $root.pb.common.Scenario.encode(message.scenario, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.floorPrice != null && message.hasOwnProperty("floorPrice"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.floorPrice);
                if (message.auctionId != null && message.hasOwnProperty("auctionId"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.auctionId);
                if (message.timer != null && message.hasOwnProperty("timer"))
                    $root.pb.common.timer.encode(message.timer, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.raiseTimeout != null && message.hasOwnProperty("raiseTimeout"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.raiseTimeout);
                return writer;
            };

            /**
             * Encodes the specified StartAuctionMsg message, length delimited. Does not implicitly {@link pb.common.StartAuctionMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.StartAuctionMsg
             * @static
             * @param {pb.common.IStartAuctionMsg} message StartAuctionMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StartAuctionMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a StartAuctionMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.StartAuctionMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.StartAuctionMsg} StartAuctionMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StartAuctionMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.StartAuctionMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.base = $root.pb.common.GameBaseMsg.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.scenario = $root.pb.common.Scenario.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.floorPrice = reader.int32();
                        break;
                    case 4:
                        message.auctionId = reader.int64();
                        break;
                    case 5:
                        message.timer = $root.pb.common.timer.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.raiseTimeout = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a StartAuctionMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.StartAuctionMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.StartAuctionMsg} StartAuctionMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StartAuctionMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a StartAuctionMsg message.
             * @function verify
             * @memberof pb.common.StartAuctionMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            StartAuctionMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.base != null && message.hasOwnProperty("base")) {
                    var error = $root.pb.common.GameBaseMsg.verify(message.base);
                    if (error)
                        return "base." + error;
                }
                if (message.scenario != null && message.hasOwnProperty("scenario")) {
                    var error = $root.pb.common.Scenario.verify(message.scenario);
                    if (error)
                        return "scenario." + error;
                }
                if (message.floorPrice != null && message.hasOwnProperty("floorPrice"))
                    if (!$util.isInteger(message.floorPrice))
                        return "floorPrice: integer expected";
                if (message.auctionId != null && message.hasOwnProperty("auctionId"))
                    if (!$util.isInteger(message.auctionId) && !(message.auctionId && $util.isInteger(message.auctionId.low) && $util.isInteger(message.auctionId.high)))
                        return "auctionId: integer|Long expected";
                if (message.timer != null && message.hasOwnProperty("timer")) {
                    var error = $root.pb.common.timer.verify(message.timer);
                    if (error)
                        return "timer." + error;
                }
                if (message.raiseTimeout != null && message.hasOwnProperty("raiseTimeout"))
                    if (!$util.isInteger(message.raiseTimeout))
                        return "raiseTimeout: integer expected";
                return null;
            };

            /**
             * Creates a StartAuctionMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.StartAuctionMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.StartAuctionMsg} StartAuctionMsg
             */
            StartAuctionMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.StartAuctionMsg)
                    return object;
                var message = new $root.pb.common.StartAuctionMsg();
                if (object.base != null) {
                    if (typeof object.base !== "object")
                        throw TypeError(".pb.common.StartAuctionMsg.base: object expected");
                    message.base = $root.pb.common.GameBaseMsg.fromObject(object.base);
                }
                if (object.scenario != null) {
                    if (typeof object.scenario !== "object")
                        throw TypeError(".pb.common.StartAuctionMsg.scenario: object expected");
                    message.scenario = $root.pb.common.Scenario.fromObject(object.scenario);
                }
                if (object.floorPrice != null)
                    message.floorPrice = object.floorPrice | 0;
                if (object.auctionId != null)
                    if ($util.Long)
                        (message.auctionId = $util.Long.fromValue(object.auctionId)).unsigned = false;
                    else if (typeof object.auctionId === "string")
                        message.auctionId = parseInt(object.auctionId, 10);
                    else if (typeof object.auctionId === "number")
                        message.auctionId = object.auctionId;
                    else if (typeof object.auctionId === "object")
                        message.auctionId = new $util.LongBits(object.auctionId.low >>> 0, object.auctionId.high >>> 0).toNumber();
                if (object.timer != null) {
                    if (typeof object.timer !== "object")
                        throw TypeError(".pb.common.StartAuctionMsg.timer: object expected");
                    message.timer = $root.pb.common.timer.fromObject(object.timer);
                }
                if (object.raiseTimeout != null)
                    message.raiseTimeout = object.raiseTimeout | 0;
                return message;
            };

            /**
             * Creates a plain object from a StartAuctionMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.StartAuctionMsg
             * @static
             * @param {pb.common.StartAuctionMsg} message StartAuctionMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            StartAuctionMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.base = null;
                    object.scenario = null;
                    object.floorPrice = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.auctionId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.auctionId = options.longs === String ? "0" : 0;
                    object.timer = null;
                    object.raiseTimeout = 0;
                }
                if (message.base != null && message.hasOwnProperty("base"))
                    object.base = $root.pb.common.GameBaseMsg.toObject(message.base, options);
                if (message.scenario != null && message.hasOwnProperty("scenario"))
                    object.scenario = $root.pb.common.Scenario.toObject(message.scenario, options);
                if (message.floorPrice != null && message.hasOwnProperty("floorPrice"))
                    object.floorPrice = message.floorPrice;
                if (message.auctionId != null && message.hasOwnProperty("auctionId"))
                    if (typeof message.auctionId === "number")
                        object.auctionId = options.longs === String ? String(message.auctionId) : message.auctionId;
                    else
                        object.auctionId = options.longs === String ? $util.Long.prototype.toString.call(message.auctionId) : options.longs === Number ? new $util.LongBits(message.auctionId.low >>> 0, message.auctionId.high >>> 0).toNumber() : message.auctionId;
                if (message.timer != null && message.hasOwnProperty("timer"))
                    object.timer = $root.pb.common.timer.toObject(message.timer, options);
                if (message.raiseTimeout != null && message.hasOwnProperty("raiseTimeout"))
                    object.raiseTimeout = message.raiseTimeout;
                return object;
            };

            /**
             * Converts this StartAuctionMsg to JSON.
             * @function toJSON
             * @memberof pb.common.StartAuctionMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            StartAuctionMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return StartAuctionMsg;
        })();

        common.GiveUpAuctionReq = (function() {

            /**
             * Properties of a GiveUpAuctionReq.
             * @memberof pb.common
             * @interface IGiveUpAuctionReq
             * @property {pb.common.IAssetBaseReq|null} [req] GiveUpAuctionReq req
             * @property {Long|null} [auctionId] GiveUpAuctionReq auctionId
             */

            /**
             * Constructs a new GiveUpAuctionReq.
             * @memberof pb.common
             * @classdesc Represents a GiveUpAuctionReq.
             * @implements IGiveUpAuctionReq
             * @constructor
             * @param {pb.common.IGiveUpAuctionReq=} [properties] Properties to set
             */
            function GiveUpAuctionReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GiveUpAuctionReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.GiveUpAuctionReq
             * @instance
             */
            GiveUpAuctionReq.prototype.req = null;

            /**
             * GiveUpAuctionReq auctionId.
             * @member {Long} auctionId
             * @memberof pb.common.GiveUpAuctionReq
             * @instance
             */
            GiveUpAuctionReq.prototype.auctionId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new GiveUpAuctionReq instance using the specified properties.
             * @function create
             * @memberof pb.common.GiveUpAuctionReq
             * @static
             * @param {pb.common.IGiveUpAuctionReq=} [properties] Properties to set
             * @returns {pb.common.GiveUpAuctionReq} GiveUpAuctionReq instance
             */
            GiveUpAuctionReq.create = function create(properties) {
                return new GiveUpAuctionReq(properties);
            };

            /**
             * Encodes the specified GiveUpAuctionReq message. Does not implicitly {@link pb.common.GiveUpAuctionReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GiveUpAuctionReq
             * @static
             * @param {pb.common.IGiveUpAuctionReq} message GiveUpAuctionReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GiveUpAuctionReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.auctionId != null && message.hasOwnProperty("auctionId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.auctionId);
                return writer;
            };

            /**
             * Encodes the specified GiveUpAuctionReq message, length delimited. Does not implicitly {@link pb.common.GiveUpAuctionReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GiveUpAuctionReq
             * @static
             * @param {pb.common.IGiveUpAuctionReq} message GiveUpAuctionReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GiveUpAuctionReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GiveUpAuctionReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GiveUpAuctionReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GiveUpAuctionReq} GiveUpAuctionReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GiveUpAuctionReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GiveUpAuctionReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.auctionId = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GiveUpAuctionReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GiveUpAuctionReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GiveUpAuctionReq} GiveUpAuctionReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GiveUpAuctionReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GiveUpAuctionReq message.
             * @function verify
             * @memberof pb.common.GiveUpAuctionReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GiveUpAuctionReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                if (message.auctionId != null && message.hasOwnProperty("auctionId"))
                    if (!$util.isInteger(message.auctionId) && !(message.auctionId && $util.isInteger(message.auctionId.low) && $util.isInteger(message.auctionId.high)))
                        return "auctionId: integer|Long expected";
                return null;
            };

            /**
             * Creates a GiveUpAuctionReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GiveUpAuctionReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GiveUpAuctionReq} GiveUpAuctionReq
             */
            GiveUpAuctionReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GiveUpAuctionReq)
                    return object;
                var message = new $root.pb.common.GiveUpAuctionReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.GiveUpAuctionReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                if (object.auctionId != null)
                    if ($util.Long)
                        (message.auctionId = $util.Long.fromValue(object.auctionId)).unsigned = false;
                    else if (typeof object.auctionId === "string")
                        message.auctionId = parseInt(object.auctionId, 10);
                    else if (typeof object.auctionId === "number")
                        message.auctionId = object.auctionId;
                    else if (typeof object.auctionId === "object")
                        message.auctionId = new $util.LongBits(object.auctionId.low >>> 0, object.auctionId.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a GiveUpAuctionReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GiveUpAuctionReq
             * @static
             * @param {pb.common.GiveUpAuctionReq} message GiveUpAuctionReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GiveUpAuctionReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.req = null;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.auctionId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.auctionId = options.longs === String ? "0" : 0;
                }
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                if (message.auctionId != null && message.hasOwnProperty("auctionId"))
                    if (typeof message.auctionId === "number")
                        object.auctionId = options.longs === String ? String(message.auctionId) : message.auctionId;
                    else
                        object.auctionId = options.longs === String ? $util.Long.prototype.toString.call(message.auctionId) : options.longs === Number ? new $util.LongBits(message.auctionId.low >>> 0, message.auctionId.high >>> 0).toNumber() : message.auctionId;
                return object;
            };

            /**
             * Converts this GiveUpAuctionReq to JSON.
             * @function toJSON
             * @memberof pb.common.GiveUpAuctionReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GiveUpAuctionReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GiveUpAuctionReq;
        })();

        common.GiveUpAuctionRsp = (function() {

            /**
             * Properties of a GiveUpAuctionRsp.
             * @memberof pb.common
             * @interface IGiveUpAuctionRsp
             * @property {pb.common.IBaseRsp|null} [rsp] GiveUpAuctionRsp rsp
             */

            /**
             * Constructs a new GiveUpAuctionRsp.
             * @memberof pb.common
             * @classdesc Represents a GiveUpAuctionRsp.
             * @implements IGiveUpAuctionRsp
             * @constructor
             * @param {pb.common.IGiveUpAuctionRsp=} [properties] Properties to set
             */
            function GiveUpAuctionRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GiveUpAuctionRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.GiveUpAuctionRsp
             * @instance
             */
            GiveUpAuctionRsp.prototype.rsp = null;

            /**
             * Creates a new GiveUpAuctionRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.GiveUpAuctionRsp
             * @static
             * @param {pb.common.IGiveUpAuctionRsp=} [properties] Properties to set
             * @returns {pb.common.GiveUpAuctionRsp} GiveUpAuctionRsp instance
             */
            GiveUpAuctionRsp.create = function create(properties) {
                return new GiveUpAuctionRsp(properties);
            };

            /**
             * Encodes the specified GiveUpAuctionRsp message. Does not implicitly {@link pb.common.GiveUpAuctionRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GiveUpAuctionRsp
             * @static
             * @param {pb.common.IGiveUpAuctionRsp} message GiveUpAuctionRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GiveUpAuctionRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GiveUpAuctionRsp message, length delimited. Does not implicitly {@link pb.common.GiveUpAuctionRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GiveUpAuctionRsp
             * @static
             * @param {pb.common.IGiveUpAuctionRsp} message GiveUpAuctionRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GiveUpAuctionRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GiveUpAuctionRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GiveUpAuctionRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GiveUpAuctionRsp} GiveUpAuctionRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GiveUpAuctionRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GiveUpAuctionRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GiveUpAuctionRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GiveUpAuctionRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GiveUpAuctionRsp} GiveUpAuctionRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GiveUpAuctionRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GiveUpAuctionRsp message.
             * @function verify
             * @memberof pb.common.GiveUpAuctionRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GiveUpAuctionRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                return null;
            };

            /**
             * Creates a GiveUpAuctionRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GiveUpAuctionRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GiveUpAuctionRsp} GiveUpAuctionRsp
             */
            GiveUpAuctionRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GiveUpAuctionRsp)
                    return object;
                var message = new $root.pb.common.GiveUpAuctionRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.GiveUpAuctionRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from a GiveUpAuctionRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GiveUpAuctionRsp
             * @static
             * @param {pb.common.GiveUpAuctionRsp} message GiveUpAuctionRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GiveUpAuctionRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                return object;
            };

            /**
             * Converts this GiveUpAuctionRsp to JSON.
             * @function toJSON
             * @memberof pb.common.GiveUpAuctionRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GiveUpAuctionRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GiveUpAuctionRsp;
        })();

        common.GiveUpAuctionMsg = (function() {

            /**
             * Properties of a GiveUpAuctionMsg.
             * @memberof pb.common
             * @interface IGiveUpAuctionMsg
             * @property {pb.common.IGameBaseMsg|null} [base] GiveUpAuctionMsg base
             * @property {boolean|null} [isAllReady] GiveUpAuctionMsg isAllReady
             * @property {Array.<Long>|null} [userIds] GiveUpAuctionMsg userIds
             */

            /**
             * Constructs a new GiveUpAuctionMsg.
             * @memberof pb.common
             * @classdesc Represents a GiveUpAuctionMsg.
             * @implements IGiveUpAuctionMsg
             * @constructor
             * @param {pb.common.IGiveUpAuctionMsg=} [properties] Properties to set
             */
            function GiveUpAuctionMsg(properties) {
                this.userIds = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GiveUpAuctionMsg base.
             * @member {pb.common.IGameBaseMsg|null|undefined} base
             * @memberof pb.common.GiveUpAuctionMsg
             * @instance
             */
            GiveUpAuctionMsg.prototype.base = null;

            /**
             * GiveUpAuctionMsg isAllReady.
             * @member {boolean} isAllReady
             * @memberof pb.common.GiveUpAuctionMsg
             * @instance
             */
            GiveUpAuctionMsg.prototype.isAllReady = false;

            /**
             * GiveUpAuctionMsg userIds.
             * @member {Array.<Long>} userIds
             * @memberof pb.common.GiveUpAuctionMsg
             * @instance
             */
            GiveUpAuctionMsg.prototype.userIds = $util.emptyArray;

            /**
             * Creates a new GiveUpAuctionMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.GiveUpAuctionMsg
             * @static
             * @param {pb.common.IGiveUpAuctionMsg=} [properties] Properties to set
             * @returns {pb.common.GiveUpAuctionMsg} GiveUpAuctionMsg instance
             */
            GiveUpAuctionMsg.create = function create(properties) {
                return new GiveUpAuctionMsg(properties);
            };

            /**
             * Encodes the specified GiveUpAuctionMsg message. Does not implicitly {@link pb.common.GiveUpAuctionMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GiveUpAuctionMsg
             * @static
             * @param {pb.common.IGiveUpAuctionMsg} message GiveUpAuctionMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GiveUpAuctionMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.base != null && message.hasOwnProperty("base"))
                    $root.pb.common.GameBaseMsg.encode(message.base, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.isAllReady != null && message.hasOwnProperty("isAllReady"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isAllReady);
                if (message.userIds != null && message.userIds.length) {
                    writer.uint32(/* id 3, wireType 2 =*/26).fork();
                    for (var i = 0; i < message.userIds.length; ++i)
                        writer.int64(message.userIds[i]);
                    writer.ldelim();
                }
                return writer;
            };

            /**
             * Encodes the specified GiveUpAuctionMsg message, length delimited. Does not implicitly {@link pb.common.GiveUpAuctionMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GiveUpAuctionMsg
             * @static
             * @param {pb.common.IGiveUpAuctionMsg} message GiveUpAuctionMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GiveUpAuctionMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GiveUpAuctionMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GiveUpAuctionMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GiveUpAuctionMsg} GiveUpAuctionMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GiveUpAuctionMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GiveUpAuctionMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.base = $root.pb.common.GameBaseMsg.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.isAllReady = reader.bool();
                        break;
                    case 3:
                        if (!(message.userIds && message.userIds.length))
                            message.userIds = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.userIds.push(reader.int64());
                        } else
                            message.userIds.push(reader.int64());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GiveUpAuctionMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GiveUpAuctionMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GiveUpAuctionMsg} GiveUpAuctionMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GiveUpAuctionMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GiveUpAuctionMsg message.
             * @function verify
             * @memberof pb.common.GiveUpAuctionMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GiveUpAuctionMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.base != null && message.hasOwnProperty("base")) {
                    var error = $root.pb.common.GameBaseMsg.verify(message.base);
                    if (error)
                        return "base." + error;
                }
                if (message.isAllReady != null && message.hasOwnProperty("isAllReady"))
                    if (typeof message.isAllReady !== "boolean")
                        return "isAllReady: boolean expected";
                if (message.userIds != null && message.hasOwnProperty("userIds")) {
                    if (!Array.isArray(message.userIds))
                        return "userIds: array expected";
                    for (var i = 0; i < message.userIds.length; ++i)
                        if (!$util.isInteger(message.userIds[i]) && !(message.userIds[i] && $util.isInteger(message.userIds[i].low) && $util.isInteger(message.userIds[i].high)))
                            return "userIds: integer|Long[] expected";
                }
                return null;
            };

            /**
             * Creates a GiveUpAuctionMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GiveUpAuctionMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GiveUpAuctionMsg} GiveUpAuctionMsg
             */
            GiveUpAuctionMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GiveUpAuctionMsg)
                    return object;
                var message = new $root.pb.common.GiveUpAuctionMsg();
                if (object.base != null) {
                    if (typeof object.base !== "object")
                        throw TypeError(".pb.common.GiveUpAuctionMsg.base: object expected");
                    message.base = $root.pb.common.GameBaseMsg.fromObject(object.base);
                }
                if (object.isAllReady != null)
                    message.isAllReady = Boolean(object.isAllReady);
                if (object.userIds) {
                    if (!Array.isArray(object.userIds))
                        throw TypeError(".pb.common.GiveUpAuctionMsg.userIds: array expected");
                    message.userIds = [];
                    for (var i = 0; i < object.userIds.length; ++i)
                        if ($util.Long)
                            (message.userIds[i] = $util.Long.fromValue(object.userIds[i])).unsigned = false;
                        else if (typeof object.userIds[i] === "string")
                            message.userIds[i] = parseInt(object.userIds[i], 10);
                        else if (typeof object.userIds[i] === "number")
                            message.userIds[i] = object.userIds[i];
                        else if (typeof object.userIds[i] === "object")
                            message.userIds[i] = new $util.LongBits(object.userIds[i].low >>> 0, object.userIds[i].high >>> 0).toNumber();
                }
                return message;
            };

            /**
             * Creates a plain object from a GiveUpAuctionMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GiveUpAuctionMsg
             * @static
             * @param {pb.common.GiveUpAuctionMsg} message GiveUpAuctionMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GiveUpAuctionMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.userIds = [];
                if (options.defaults) {
                    object.base = null;
                    object.isAllReady = false;
                }
                if (message.base != null && message.hasOwnProperty("base"))
                    object.base = $root.pb.common.GameBaseMsg.toObject(message.base, options);
                if (message.isAllReady != null && message.hasOwnProperty("isAllReady"))
                    object.isAllReady = message.isAllReady;
                if (message.userIds && message.userIds.length) {
                    object.userIds = [];
                    for (var j = 0; j < message.userIds.length; ++j)
                        if (typeof message.userIds[j] === "number")
                            object.userIds[j] = options.longs === String ? String(message.userIds[j]) : message.userIds[j];
                        else
                            object.userIds[j] = options.longs === String ? $util.Long.prototype.toString.call(message.userIds[j]) : options.longs === Number ? new $util.LongBits(message.userIds[j].low >>> 0, message.userIds[j].high >>> 0).toNumber() : message.userIds[j];
                }
                return object;
            };

            /**
             * Converts this GiveUpAuctionMsg to JSON.
             * @function toJSON
             * @memberof pb.common.GiveUpAuctionMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GiveUpAuctionMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GiveUpAuctionMsg;
        })();

        common.AuctionBidReq = (function() {

            /**
             * Properties of an AuctionBidReq.
             * @memberof pb.common
             * @interface IAuctionBidReq
             * @property {pb.common.IAssetBaseReq|null} [req] AuctionBidReq req
             * @property {number|null} [amount] AuctionBidReq amount
             * @property {Long|null} [auctionId] AuctionBidReq auctionId
             */

            /**
             * Constructs a new AuctionBidReq.
             * @memberof pb.common
             * @classdesc Represents an AuctionBidReq.
             * @implements IAuctionBidReq
             * @constructor
             * @param {pb.common.IAuctionBidReq=} [properties] Properties to set
             */
            function AuctionBidReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AuctionBidReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.AuctionBidReq
             * @instance
             */
            AuctionBidReq.prototype.req = null;

            /**
             * AuctionBidReq amount.
             * @member {number} amount
             * @memberof pb.common.AuctionBidReq
             * @instance
             */
            AuctionBidReq.prototype.amount = 0;

            /**
             * AuctionBidReq auctionId.
             * @member {Long} auctionId
             * @memberof pb.common.AuctionBidReq
             * @instance
             */
            AuctionBidReq.prototype.auctionId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new AuctionBidReq instance using the specified properties.
             * @function create
             * @memberof pb.common.AuctionBidReq
             * @static
             * @param {pb.common.IAuctionBidReq=} [properties] Properties to set
             * @returns {pb.common.AuctionBidReq} AuctionBidReq instance
             */
            AuctionBidReq.create = function create(properties) {
                return new AuctionBidReq(properties);
            };

            /**
             * Encodes the specified AuctionBidReq message. Does not implicitly {@link pb.common.AuctionBidReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.AuctionBidReq
             * @static
             * @param {pb.common.IAuctionBidReq} message AuctionBidReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AuctionBidReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.amount != null && message.hasOwnProperty("amount"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.amount);
                if (message.auctionId != null && message.hasOwnProperty("auctionId"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int64(message.auctionId);
                return writer;
            };

            /**
             * Encodes the specified AuctionBidReq message, length delimited. Does not implicitly {@link pb.common.AuctionBidReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.AuctionBidReq
             * @static
             * @param {pb.common.IAuctionBidReq} message AuctionBidReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AuctionBidReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AuctionBidReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.AuctionBidReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.AuctionBidReq} AuctionBidReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AuctionBidReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.AuctionBidReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.amount = reader.int32();
                        break;
                    case 7:
                        message.auctionId = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AuctionBidReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.AuctionBidReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.AuctionBidReq} AuctionBidReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AuctionBidReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AuctionBidReq message.
             * @function verify
             * @memberof pb.common.AuctionBidReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AuctionBidReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isInteger(message.amount))
                        return "amount: integer expected";
                if (message.auctionId != null && message.hasOwnProperty("auctionId"))
                    if (!$util.isInteger(message.auctionId) && !(message.auctionId && $util.isInteger(message.auctionId.low) && $util.isInteger(message.auctionId.high)))
                        return "auctionId: integer|Long expected";
                return null;
            };

            /**
             * Creates an AuctionBidReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.AuctionBidReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.AuctionBidReq} AuctionBidReq
             */
            AuctionBidReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.AuctionBidReq)
                    return object;
                var message = new $root.pb.common.AuctionBidReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.AuctionBidReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                if (object.amount != null)
                    message.amount = object.amount | 0;
                if (object.auctionId != null)
                    if ($util.Long)
                        (message.auctionId = $util.Long.fromValue(object.auctionId)).unsigned = false;
                    else if (typeof object.auctionId === "string")
                        message.auctionId = parseInt(object.auctionId, 10);
                    else if (typeof object.auctionId === "number")
                        message.auctionId = object.auctionId;
                    else if (typeof object.auctionId === "object")
                        message.auctionId = new $util.LongBits(object.auctionId.low >>> 0, object.auctionId.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from an AuctionBidReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.AuctionBidReq
             * @static
             * @param {pb.common.AuctionBidReq} message AuctionBidReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AuctionBidReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.req = null;
                    object.amount = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.auctionId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.auctionId = options.longs === String ? "0" : 0;
                }
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                if (message.amount != null && message.hasOwnProperty("amount"))
                    object.amount = message.amount;
                if (message.auctionId != null && message.hasOwnProperty("auctionId"))
                    if (typeof message.auctionId === "number")
                        object.auctionId = options.longs === String ? String(message.auctionId) : message.auctionId;
                    else
                        object.auctionId = options.longs === String ? $util.Long.prototype.toString.call(message.auctionId) : options.longs === Number ? new $util.LongBits(message.auctionId.low >>> 0, message.auctionId.high >>> 0).toNumber() : message.auctionId;
                return object;
            };

            /**
             * Converts this AuctionBidReq to JSON.
             * @function toJSON
             * @memberof pb.common.AuctionBidReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AuctionBidReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return AuctionBidReq;
        })();

        common.AuctionBidRsp = (function() {

            /**
             * Properties of an AuctionBidRsp.
             * @memberof pb.common
             * @interface IAuctionBidRsp
             * @property {pb.common.IBaseRsp|null} [rsp] AuctionBidRsp rsp
             */

            /**
             * Constructs a new AuctionBidRsp.
             * @memberof pb.common
             * @classdesc Represents an AuctionBidRsp.
             * @implements IAuctionBidRsp
             * @constructor
             * @param {pb.common.IAuctionBidRsp=} [properties] Properties to set
             */
            function AuctionBidRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AuctionBidRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.AuctionBidRsp
             * @instance
             */
            AuctionBidRsp.prototype.rsp = null;

            /**
             * Creates a new AuctionBidRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.AuctionBidRsp
             * @static
             * @param {pb.common.IAuctionBidRsp=} [properties] Properties to set
             * @returns {pb.common.AuctionBidRsp} AuctionBidRsp instance
             */
            AuctionBidRsp.create = function create(properties) {
                return new AuctionBidRsp(properties);
            };

            /**
             * Encodes the specified AuctionBidRsp message. Does not implicitly {@link pb.common.AuctionBidRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.AuctionBidRsp
             * @static
             * @param {pb.common.IAuctionBidRsp} message AuctionBidRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AuctionBidRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified AuctionBidRsp message, length delimited. Does not implicitly {@link pb.common.AuctionBidRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.AuctionBidRsp
             * @static
             * @param {pb.common.IAuctionBidRsp} message AuctionBidRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AuctionBidRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AuctionBidRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.AuctionBidRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.AuctionBidRsp} AuctionBidRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AuctionBidRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.AuctionBidRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AuctionBidRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.AuctionBidRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.AuctionBidRsp} AuctionBidRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AuctionBidRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AuctionBidRsp message.
             * @function verify
             * @memberof pb.common.AuctionBidRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AuctionBidRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                return null;
            };

            /**
             * Creates an AuctionBidRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.AuctionBidRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.AuctionBidRsp} AuctionBidRsp
             */
            AuctionBidRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.AuctionBidRsp)
                    return object;
                var message = new $root.pb.common.AuctionBidRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.AuctionBidRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from an AuctionBidRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.AuctionBidRsp
             * @static
             * @param {pb.common.AuctionBidRsp} message AuctionBidRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AuctionBidRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                return object;
            };

            /**
             * Converts this AuctionBidRsp to JSON.
             * @function toJSON
             * @memberof pb.common.AuctionBidRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AuctionBidRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return AuctionBidRsp;
        })();

        common.AuctionBidMsg = (function() {

            /**
             * Properties of an AuctionBidMsg.
             * @memberof pb.common
             * @interface IAuctionBidMsg
             * @property {pb.common.IGameBaseMsg|null} [base] AuctionBidMsg base
             * @property {number|null} [amount] AuctionBidMsg amount
             * @property {number|null} [raiseTimeout] AuctionBidMsg raiseTimeout
             */

            /**
             * Constructs a new AuctionBidMsg.
             * @memberof pb.common
             * @classdesc Represents an AuctionBidMsg.
             * @implements IAuctionBidMsg
             * @constructor
             * @param {pb.common.IAuctionBidMsg=} [properties] Properties to set
             */
            function AuctionBidMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AuctionBidMsg base.
             * @member {pb.common.IGameBaseMsg|null|undefined} base
             * @memberof pb.common.AuctionBidMsg
             * @instance
             */
            AuctionBidMsg.prototype.base = null;

            /**
             * AuctionBidMsg amount.
             * @member {number} amount
             * @memberof pb.common.AuctionBidMsg
             * @instance
             */
            AuctionBidMsg.prototype.amount = 0;

            /**
             * AuctionBidMsg raiseTimeout.
             * @member {number} raiseTimeout
             * @memberof pb.common.AuctionBidMsg
             * @instance
             */
            AuctionBidMsg.prototype.raiseTimeout = 0;

            /**
             * Creates a new AuctionBidMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.AuctionBidMsg
             * @static
             * @param {pb.common.IAuctionBidMsg=} [properties] Properties to set
             * @returns {pb.common.AuctionBidMsg} AuctionBidMsg instance
             */
            AuctionBidMsg.create = function create(properties) {
                return new AuctionBidMsg(properties);
            };

            /**
             * Encodes the specified AuctionBidMsg message. Does not implicitly {@link pb.common.AuctionBidMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.AuctionBidMsg
             * @static
             * @param {pb.common.IAuctionBidMsg} message AuctionBidMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AuctionBidMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.base != null && message.hasOwnProperty("base"))
                    $root.pb.common.GameBaseMsg.encode(message.base, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.amount != null && message.hasOwnProperty("amount"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.amount);
                if (message.raiseTimeout != null && message.hasOwnProperty("raiseTimeout"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int32(message.raiseTimeout);
                return writer;
            };

            /**
             * Encodes the specified AuctionBidMsg message, length delimited. Does not implicitly {@link pb.common.AuctionBidMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.AuctionBidMsg
             * @static
             * @param {pb.common.IAuctionBidMsg} message AuctionBidMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AuctionBidMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AuctionBidMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.AuctionBidMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.AuctionBidMsg} AuctionBidMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AuctionBidMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.AuctionBidMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.base = $root.pb.common.GameBaseMsg.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.amount = reader.int32();
                        break;
                    case 7:
                        message.raiseTimeout = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AuctionBidMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.AuctionBidMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.AuctionBidMsg} AuctionBidMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AuctionBidMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AuctionBidMsg message.
             * @function verify
             * @memberof pb.common.AuctionBidMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AuctionBidMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.base != null && message.hasOwnProperty("base")) {
                    var error = $root.pb.common.GameBaseMsg.verify(message.base);
                    if (error)
                        return "base." + error;
                }
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isInteger(message.amount))
                        return "amount: integer expected";
                if (message.raiseTimeout != null && message.hasOwnProperty("raiseTimeout"))
                    if (!$util.isInteger(message.raiseTimeout))
                        return "raiseTimeout: integer expected";
                return null;
            };

            /**
             * Creates an AuctionBidMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.AuctionBidMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.AuctionBidMsg} AuctionBidMsg
             */
            AuctionBidMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.AuctionBidMsg)
                    return object;
                var message = new $root.pb.common.AuctionBidMsg();
                if (object.base != null) {
                    if (typeof object.base !== "object")
                        throw TypeError(".pb.common.AuctionBidMsg.base: object expected");
                    message.base = $root.pb.common.GameBaseMsg.fromObject(object.base);
                }
                if (object.amount != null)
                    message.amount = object.amount | 0;
                if (object.raiseTimeout != null)
                    message.raiseTimeout = object.raiseTimeout | 0;
                return message;
            };

            /**
             * Creates a plain object from an AuctionBidMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.AuctionBidMsg
             * @static
             * @param {pb.common.AuctionBidMsg} message AuctionBidMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AuctionBidMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.base = null;
                    object.amount = 0;
                    object.raiseTimeout = 0;
                }
                if (message.base != null && message.hasOwnProperty("base"))
                    object.base = $root.pb.common.GameBaseMsg.toObject(message.base, options);
                if (message.amount != null && message.hasOwnProperty("amount"))
                    object.amount = message.amount;
                if (message.raiseTimeout != null && message.hasOwnProperty("raiseTimeout"))
                    object.raiseTimeout = message.raiseTimeout;
                return object;
            };

            /**
             * Converts this AuctionBidMsg to JSON.
             * @function toJSON
             * @memberof pb.common.AuctionBidMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AuctionBidMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return AuctionBidMsg;
        })();

        common.AuctionResultMsg = (function() {

            /**
             * Properties of an AuctionResultMsg.
             * @memberof pb.common
             * @interface IAuctionResultMsg
             * @property {boolean|null} [playerWon] AuctionResultMsg playerWon
             * @property {Long|null} [winnerId] AuctionResultMsg winnerId
             * @property {Long|null} [auctionId] AuctionResultMsg auctionId
             * @property {number|null} [amount] AuctionResultMsg amount
             */

            /**
             * Constructs a new AuctionResultMsg.
             * @memberof pb.common
             * @classdesc Represents an AuctionResultMsg.
             * @implements IAuctionResultMsg
             * @constructor
             * @param {pb.common.IAuctionResultMsg=} [properties] Properties to set
             */
            function AuctionResultMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AuctionResultMsg playerWon.
             * @member {boolean} playerWon
             * @memberof pb.common.AuctionResultMsg
             * @instance
             */
            AuctionResultMsg.prototype.playerWon = false;

            /**
             * AuctionResultMsg winnerId.
             * @member {Long} winnerId
             * @memberof pb.common.AuctionResultMsg
             * @instance
             */
            AuctionResultMsg.prototype.winnerId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * AuctionResultMsg auctionId.
             * @member {Long} auctionId
             * @memberof pb.common.AuctionResultMsg
             * @instance
             */
            AuctionResultMsg.prototype.auctionId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * AuctionResultMsg amount.
             * @member {number} amount
             * @memberof pb.common.AuctionResultMsg
             * @instance
             */
            AuctionResultMsg.prototype.amount = 0;

            /**
             * Creates a new AuctionResultMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.AuctionResultMsg
             * @static
             * @param {pb.common.IAuctionResultMsg=} [properties] Properties to set
             * @returns {pb.common.AuctionResultMsg} AuctionResultMsg instance
             */
            AuctionResultMsg.create = function create(properties) {
                return new AuctionResultMsg(properties);
            };

            /**
             * Encodes the specified AuctionResultMsg message. Does not implicitly {@link pb.common.AuctionResultMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.AuctionResultMsg
             * @static
             * @param {pb.common.IAuctionResultMsg} message AuctionResultMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AuctionResultMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.playerWon != null && message.hasOwnProperty("playerWon"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.playerWon);
                if (message.winnerId != null && message.hasOwnProperty("winnerId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.winnerId);
                if (message.auctionId != null && message.hasOwnProperty("auctionId"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.auctionId);
                if (message.amount != null && message.hasOwnProperty("amount"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.amount);
                return writer;
            };

            /**
             * Encodes the specified AuctionResultMsg message, length delimited. Does not implicitly {@link pb.common.AuctionResultMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.AuctionResultMsg
             * @static
             * @param {pb.common.IAuctionResultMsg} message AuctionResultMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AuctionResultMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AuctionResultMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.AuctionResultMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.AuctionResultMsg} AuctionResultMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AuctionResultMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.AuctionResultMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.playerWon = reader.bool();
                        break;
                    case 2:
                        message.winnerId = reader.int64();
                        break;
                    case 3:
                        message.auctionId = reader.int64();
                        break;
                    case 6:
                        message.amount = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AuctionResultMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.AuctionResultMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.AuctionResultMsg} AuctionResultMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AuctionResultMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AuctionResultMsg message.
             * @function verify
             * @memberof pb.common.AuctionResultMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AuctionResultMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.playerWon != null && message.hasOwnProperty("playerWon"))
                    if (typeof message.playerWon !== "boolean")
                        return "playerWon: boolean expected";
                if (message.winnerId != null && message.hasOwnProperty("winnerId"))
                    if (!$util.isInteger(message.winnerId) && !(message.winnerId && $util.isInteger(message.winnerId.low) && $util.isInteger(message.winnerId.high)))
                        return "winnerId: integer|Long expected";
                if (message.auctionId != null && message.hasOwnProperty("auctionId"))
                    if (!$util.isInteger(message.auctionId) && !(message.auctionId && $util.isInteger(message.auctionId.low) && $util.isInteger(message.auctionId.high)))
                        return "auctionId: integer|Long expected";
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isInteger(message.amount))
                        return "amount: integer expected";
                return null;
            };

            /**
             * Creates an AuctionResultMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.AuctionResultMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.AuctionResultMsg} AuctionResultMsg
             */
            AuctionResultMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.AuctionResultMsg)
                    return object;
                var message = new $root.pb.common.AuctionResultMsg();
                if (object.playerWon != null)
                    message.playerWon = Boolean(object.playerWon);
                if (object.winnerId != null)
                    if ($util.Long)
                        (message.winnerId = $util.Long.fromValue(object.winnerId)).unsigned = false;
                    else if (typeof object.winnerId === "string")
                        message.winnerId = parseInt(object.winnerId, 10);
                    else if (typeof object.winnerId === "number")
                        message.winnerId = object.winnerId;
                    else if (typeof object.winnerId === "object")
                        message.winnerId = new $util.LongBits(object.winnerId.low >>> 0, object.winnerId.high >>> 0).toNumber();
                if (object.auctionId != null)
                    if ($util.Long)
                        (message.auctionId = $util.Long.fromValue(object.auctionId)).unsigned = false;
                    else if (typeof object.auctionId === "string")
                        message.auctionId = parseInt(object.auctionId, 10);
                    else if (typeof object.auctionId === "number")
                        message.auctionId = object.auctionId;
                    else if (typeof object.auctionId === "object")
                        message.auctionId = new $util.LongBits(object.auctionId.low >>> 0, object.auctionId.high >>> 0).toNumber();
                if (object.amount != null)
                    message.amount = object.amount | 0;
                return message;
            };

            /**
             * Creates a plain object from an AuctionResultMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.AuctionResultMsg
             * @static
             * @param {pb.common.AuctionResultMsg} message AuctionResultMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AuctionResultMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.playerWon = false;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.winnerId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.winnerId = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.auctionId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.auctionId = options.longs === String ? "0" : 0;
                    object.amount = 0;
                }
                if (message.playerWon != null && message.hasOwnProperty("playerWon"))
                    object.playerWon = message.playerWon;
                if (message.winnerId != null && message.hasOwnProperty("winnerId"))
                    if (typeof message.winnerId === "number")
                        object.winnerId = options.longs === String ? String(message.winnerId) : message.winnerId;
                    else
                        object.winnerId = options.longs === String ? $util.Long.prototype.toString.call(message.winnerId) : options.longs === Number ? new $util.LongBits(message.winnerId.low >>> 0, message.winnerId.high >>> 0).toNumber() : message.winnerId;
                if (message.auctionId != null && message.hasOwnProperty("auctionId"))
                    if (typeof message.auctionId === "number")
                        object.auctionId = options.longs === String ? String(message.auctionId) : message.auctionId;
                    else
                        object.auctionId = options.longs === String ? $util.Long.prototype.toString.call(message.auctionId) : options.longs === Number ? new $util.LongBits(message.auctionId.low >>> 0, message.auctionId.high >>> 0).toNumber() : message.auctionId;
                if (message.amount != null && message.hasOwnProperty("amount"))
                    object.amount = message.amount;
                return object;
            };

            /**
             * Converts this AuctionResultMsg to JSON.
             * @function toJSON
             * @memberof pb.common.AuctionResultMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AuctionResultMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return AuctionResultMsg;
        })();

        common.CompleteMarketReq = (function() {

            /**
             * Properties of a CompleteMarketReq.
             * @memberof pb.common
             * @interface ICompleteMarketReq
             * @property {pb.common.IAssetBaseReq|null} [req] CompleteMarketReq req
             * @property {boolean|null} [giveup] CompleteMarketReq giveup
             */

            /**
             * Constructs a new CompleteMarketReq.
             * @memberof pb.common
             * @classdesc Represents a CompleteMarketReq.
             * @implements ICompleteMarketReq
             * @constructor
             * @param {pb.common.ICompleteMarketReq=} [properties] Properties to set
             */
            function CompleteMarketReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CompleteMarketReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.CompleteMarketReq
             * @instance
             */
            CompleteMarketReq.prototype.req = null;

            /**
             * CompleteMarketReq giveup.
             * @member {boolean} giveup
             * @memberof pb.common.CompleteMarketReq
             * @instance
             */
            CompleteMarketReq.prototype.giveup = false;

            /**
             * Creates a new CompleteMarketReq instance using the specified properties.
             * @function create
             * @memberof pb.common.CompleteMarketReq
             * @static
             * @param {pb.common.ICompleteMarketReq=} [properties] Properties to set
             * @returns {pb.common.CompleteMarketReq} CompleteMarketReq instance
             */
            CompleteMarketReq.create = function create(properties) {
                return new CompleteMarketReq(properties);
            };

            /**
             * Encodes the specified CompleteMarketReq message. Does not implicitly {@link pb.common.CompleteMarketReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.CompleteMarketReq
             * @static
             * @param {pb.common.ICompleteMarketReq} message CompleteMarketReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CompleteMarketReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.giveup != null && message.hasOwnProperty("giveup"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.giveup);
                return writer;
            };

            /**
             * Encodes the specified CompleteMarketReq message, length delimited. Does not implicitly {@link pb.common.CompleteMarketReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.CompleteMarketReq
             * @static
             * @param {pb.common.ICompleteMarketReq} message CompleteMarketReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CompleteMarketReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CompleteMarketReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.CompleteMarketReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.CompleteMarketReq} CompleteMarketReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CompleteMarketReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.CompleteMarketReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.giveup = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CompleteMarketReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.CompleteMarketReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.CompleteMarketReq} CompleteMarketReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CompleteMarketReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CompleteMarketReq message.
             * @function verify
             * @memberof pb.common.CompleteMarketReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CompleteMarketReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                if (message.giveup != null && message.hasOwnProperty("giveup"))
                    if (typeof message.giveup !== "boolean")
                        return "giveup: boolean expected";
                return null;
            };

            /**
             * Creates a CompleteMarketReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.CompleteMarketReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.CompleteMarketReq} CompleteMarketReq
             */
            CompleteMarketReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.CompleteMarketReq)
                    return object;
                var message = new $root.pb.common.CompleteMarketReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.CompleteMarketReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                if (object.giveup != null)
                    message.giveup = Boolean(object.giveup);
                return message;
            };

            /**
             * Creates a plain object from a CompleteMarketReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.CompleteMarketReq
             * @static
             * @param {pb.common.CompleteMarketReq} message CompleteMarketReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CompleteMarketReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.req = null;
                    object.giveup = false;
                }
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                if (message.giveup != null && message.hasOwnProperty("giveup"))
                    object.giveup = message.giveup;
                return object;
            };

            /**
             * Converts this CompleteMarketReq to JSON.
             * @function toJSON
             * @memberof pb.common.CompleteMarketReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CompleteMarketReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CompleteMarketReq;
        })();

        common.CompleteMarketRsp = (function() {

            /**
             * Properties of a CompleteMarketRsp.
             * @memberof pb.common
             * @interface ICompleteMarketRsp
             * @property {pb.common.IBaseRsp|null} [rsp] CompleteMarketRsp rsp
             */

            /**
             * Constructs a new CompleteMarketRsp.
             * @memberof pb.common
             * @classdesc Represents a CompleteMarketRsp.
             * @implements ICompleteMarketRsp
             * @constructor
             * @param {pb.common.ICompleteMarketRsp=} [properties] Properties to set
             */
            function CompleteMarketRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CompleteMarketRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.CompleteMarketRsp
             * @instance
             */
            CompleteMarketRsp.prototype.rsp = null;

            /**
             * Creates a new CompleteMarketRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.CompleteMarketRsp
             * @static
             * @param {pb.common.ICompleteMarketRsp=} [properties] Properties to set
             * @returns {pb.common.CompleteMarketRsp} CompleteMarketRsp instance
             */
            CompleteMarketRsp.create = function create(properties) {
                return new CompleteMarketRsp(properties);
            };

            /**
             * Encodes the specified CompleteMarketRsp message. Does not implicitly {@link pb.common.CompleteMarketRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.CompleteMarketRsp
             * @static
             * @param {pb.common.ICompleteMarketRsp} message CompleteMarketRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CompleteMarketRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified CompleteMarketRsp message, length delimited. Does not implicitly {@link pb.common.CompleteMarketRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.CompleteMarketRsp
             * @static
             * @param {pb.common.ICompleteMarketRsp} message CompleteMarketRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CompleteMarketRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CompleteMarketRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.CompleteMarketRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.CompleteMarketRsp} CompleteMarketRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CompleteMarketRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.CompleteMarketRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CompleteMarketRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.CompleteMarketRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.CompleteMarketRsp} CompleteMarketRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CompleteMarketRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CompleteMarketRsp message.
             * @function verify
             * @memberof pb.common.CompleteMarketRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CompleteMarketRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                return null;
            };

            /**
             * Creates a CompleteMarketRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.CompleteMarketRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.CompleteMarketRsp} CompleteMarketRsp
             */
            CompleteMarketRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.CompleteMarketRsp)
                    return object;
                var message = new $root.pb.common.CompleteMarketRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.CompleteMarketRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from a CompleteMarketRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.CompleteMarketRsp
             * @static
             * @param {pb.common.CompleteMarketRsp} message CompleteMarketRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CompleteMarketRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                return object;
            };

            /**
             * Converts this CompleteMarketRsp to JSON.
             * @function toJSON
             * @memberof pb.common.CompleteMarketRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CompleteMarketRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CompleteMarketRsp;
        })();

        common.CompleteMarketMsg = (function() {

            /**
             * Properties of a CompleteMarketMsg.
             * @memberof pb.common
             * @interface ICompleteMarketMsg
             * @property {pb.common.IGameBaseMsg|null} [base] CompleteMarketMsg base
             * @property {boolean|null} [giveup] CompleteMarketMsg giveup
             */

            /**
             * Constructs a new CompleteMarketMsg.
             * @memberof pb.common
             * @classdesc Represents a CompleteMarketMsg.
             * @implements ICompleteMarketMsg
             * @constructor
             * @param {pb.common.ICompleteMarketMsg=} [properties] Properties to set
             */
            function CompleteMarketMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CompleteMarketMsg base.
             * @member {pb.common.IGameBaseMsg|null|undefined} base
             * @memberof pb.common.CompleteMarketMsg
             * @instance
             */
            CompleteMarketMsg.prototype.base = null;

            /**
             * CompleteMarketMsg giveup.
             * @member {boolean} giveup
             * @memberof pb.common.CompleteMarketMsg
             * @instance
             */
            CompleteMarketMsg.prototype.giveup = false;

            /**
             * Creates a new CompleteMarketMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.CompleteMarketMsg
             * @static
             * @param {pb.common.ICompleteMarketMsg=} [properties] Properties to set
             * @returns {pb.common.CompleteMarketMsg} CompleteMarketMsg instance
             */
            CompleteMarketMsg.create = function create(properties) {
                return new CompleteMarketMsg(properties);
            };

            /**
             * Encodes the specified CompleteMarketMsg message. Does not implicitly {@link pb.common.CompleteMarketMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.CompleteMarketMsg
             * @static
             * @param {pb.common.ICompleteMarketMsg} message CompleteMarketMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CompleteMarketMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.base != null && message.hasOwnProperty("base"))
                    $root.pb.common.GameBaseMsg.encode(message.base, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.giveup != null && message.hasOwnProperty("giveup"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.giveup);
                return writer;
            };

            /**
             * Encodes the specified CompleteMarketMsg message, length delimited. Does not implicitly {@link pb.common.CompleteMarketMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.CompleteMarketMsg
             * @static
             * @param {pb.common.ICompleteMarketMsg} message CompleteMarketMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CompleteMarketMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CompleteMarketMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.CompleteMarketMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.CompleteMarketMsg} CompleteMarketMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CompleteMarketMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.CompleteMarketMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.base = $root.pb.common.GameBaseMsg.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.giveup = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CompleteMarketMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.CompleteMarketMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.CompleteMarketMsg} CompleteMarketMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CompleteMarketMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CompleteMarketMsg message.
             * @function verify
             * @memberof pb.common.CompleteMarketMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CompleteMarketMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.base != null && message.hasOwnProperty("base")) {
                    var error = $root.pb.common.GameBaseMsg.verify(message.base);
                    if (error)
                        return "base." + error;
                }
                if (message.giveup != null && message.hasOwnProperty("giveup"))
                    if (typeof message.giveup !== "boolean")
                        return "giveup: boolean expected";
                return null;
            };

            /**
             * Creates a CompleteMarketMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.CompleteMarketMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.CompleteMarketMsg} CompleteMarketMsg
             */
            CompleteMarketMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.CompleteMarketMsg)
                    return object;
                var message = new $root.pb.common.CompleteMarketMsg();
                if (object.base != null) {
                    if (typeof object.base !== "object")
                        throw TypeError(".pb.common.CompleteMarketMsg.base: object expected");
                    message.base = $root.pb.common.GameBaseMsg.fromObject(object.base);
                }
                if (object.giveup != null)
                    message.giveup = Boolean(object.giveup);
                return message;
            };

            /**
             * Creates a plain object from a CompleteMarketMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.CompleteMarketMsg
             * @static
             * @param {pb.common.CompleteMarketMsg} message CompleteMarketMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CompleteMarketMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.base = null;
                    object.giveup = false;
                }
                if (message.base != null && message.hasOwnProperty("base"))
                    object.base = $root.pb.common.GameBaseMsg.toObject(message.base, options);
                if (message.giveup != null && message.hasOwnProperty("giveup"))
                    object.giveup = message.giveup;
                return object;
            };

            /**
             * Converts this CompleteMarketMsg to JSON.
             * @function toJSON
             * @memberof pb.common.CompleteMarketMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CompleteMarketMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CompleteMarketMsg;
        })();

        common.IgnoreChildBornReq = (function() {

            /**
             * Properties of an IgnoreChildBornReq.
             * @memberof pb.common
             * @interface IIgnoreChildBornReq
             * @property {pb.common.IAssetBaseReq|null} [req] IgnoreChildBornReq req
             */

            /**
             * Constructs a new IgnoreChildBornReq.
             * @memberof pb.common
             * @classdesc Represents an IgnoreChildBornReq.
             * @implements IIgnoreChildBornReq
             * @constructor
             * @param {pb.common.IIgnoreChildBornReq=} [properties] Properties to set
             */
            function IgnoreChildBornReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * IgnoreChildBornReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.IgnoreChildBornReq
             * @instance
             */
            IgnoreChildBornReq.prototype.req = null;

            /**
             * Creates a new IgnoreChildBornReq instance using the specified properties.
             * @function create
             * @memberof pb.common.IgnoreChildBornReq
             * @static
             * @param {pb.common.IIgnoreChildBornReq=} [properties] Properties to set
             * @returns {pb.common.IgnoreChildBornReq} IgnoreChildBornReq instance
             */
            IgnoreChildBornReq.create = function create(properties) {
                return new IgnoreChildBornReq(properties);
            };

            /**
             * Encodes the specified IgnoreChildBornReq message. Does not implicitly {@link pb.common.IgnoreChildBornReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.IgnoreChildBornReq
             * @static
             * @param {pb.common.IIgnoreChildBornReq} message IgnoreChildBornReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            IgnoreChildBornReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified IgnoreChildBornReq message, length delimited. Does not implicitly {@link pb.common.IgnoreChildBornReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.IgnoreChildBornReq
             * @static
             * @param {pb.common.IIgnoreChildBornReq} message IgnoreChildBornReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            IgnoreChildBornReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an IgnoreChildBornReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.IgnoreChildBornReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.IgnoreChildBornReq} IgnoreChildBornReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            IgnoreChildBornReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.IgnoreChildBornReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an IgnoreChildBornReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.IgnoreChildBornReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.IgnoreChildBornReq} IgnoreChildBornReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            IgnoreChildBornReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an IgnoreChildBornReq message.
             * @function verify
             * @memberof pb.common.IgnoreChildBornReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            IgnoreChildBornReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                return null;
            };

            /**
             * Creates an IgnoreChildBornReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.IgnoreChildBornReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.IgnoreChildBornReq} IgnoreChildBornReq
             */
            IgnoreChildBornReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.IgnoreChildBornReq)
                    return object;
                var message = new $root.pb.common.IgnoreChildBornReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.IgnoreChildBornReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                return message;
            };

            /**
             * Creates a plain object from an IgnoreChildBornReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.IgnoreChildBornReq
             * @static
             * @param {pb.common.IgnoreChildBornReq} message IgnoreChildBornReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            IgnoreChildBornReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.req = null;
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                return object;
            };

            /**
             * Converts this IgnoreChildBornReq to JSON.
             * @function toJSON
             * @memberof pb.common.IgnoreChildBornReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            IgnoreChildBornReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return IgnoreChildBornReq;
        })();

        common.IgnoreChildBornRsp = (function() {

            /**
             * Properties of an IgnoreChildBornRsp.
             * @memberof pb.common
             * @interface IIgnoreChildBornRsp
             * @property {pb.common.IBaseRsp|null} [rsp] IgnoreChildBornRsp rsp
             */

            /**
             * Constructs a new IgnoreChildBornRsp.
             * @memberof pb.common
             * @classdesc Represents an IgnoreChildBornRsp.
             * @implements IIgnoreChildBornRsp
             * @constructor
             * @param {pb.common.IIgnoreChildBornRsp=} [properties] Properties to set
             */
            function IgnoreChildBornRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * IgnoreChildBornRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.IgnoreChildBornRsp
             * @instance
             */
            IgnoreChildBornRsp.prototype.rsp = null;

            /**
             * Creates a new IgnoreChildBornRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.IgnoreChildBornRsp
             * @static
             * @param {pb.common.IIgnoreChildBornRsp=} [properties] Properties to set
             * @returns {pb.common.IgnoreChildBornRsp} IgnoreChildBornRsp instance
             */
            IgnoreChildBornRsp.create = function create(properties) {
                return new IgnoreChildBornRsp(properties);
            };

            /**
             * Encodes the specified IgnoreChildBornRsp message. Does not implicitly {@link pb.common.IgnoreChildBornRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.IgnoreChildBornRsp
             * @static
             * @param {pb.common.IIgnoreChildBornRsp} message IgnoreChildBornRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            IgnoreChildBornRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified IgnoreChildBornRsp message, length delimited. Does not implicitly {@link pb.common.IgnoreChildBornRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.IgnoreChildBornRsp
             * @static
             * @param {pb.common.IIgnoreChildBornRsp} message IgnoreChildBornRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            IgnoreChildBornRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an IgnoreChildBornRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.IgnoreChildBornRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.IgnoreChildBornRsp} IgnoreChildBornRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            IgnoreChildBornRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.IgnoreChildBornRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an IgnoreChildBornRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.IgnoreChildBornRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.IgnoreChildBornRsp} IgnoreChildBornRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            IgnoreChildBornRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an IgnoreChildBornRsp message.
             * @function verify
             * @memberof pb.common.IgnoreChildBornRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            IgnoreChildBornRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                return null;
            };

            /**
             * Creates an IgnoreChildBornRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.IgnoreChildBornRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.IgnoreChildBornRsp} IgnoreChildBornRsp
             */
            IgnoreChildBornRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.IgnoreChildBornRsp)
                    return object;
                var message = new $root.pb.common.IgnoreChildBornRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.IgnoreChildBornRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from an IgnoreChildBornRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.IgnoreChildBornRsp
             * @static
             * @param {pb.common.IgnoreChildBornRsp} message IgnoreChildBornRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            IgnoreChildBornRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                return object;
            };

            /**
             * Converts this IgnoreChildBornRsp to JSON.
             * @function toJSON
             * @memberof pb.common.IgnoreChildBornRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            IgnoreChildBornRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return IgnoreChildBornRsp;
        })();

        common.IgnoreChildBornMsg = (function() {

            /**
             * Properties of an IgnoreChildBornMsg.
             * @memberof pb.common
             * @interface IIgnoreChildBornMsg
             * @property {pb.common.IGameBaseMsg|null} [base] IgnoreChildBornMsg base
             */

            /**
             * Constructs a new IgnoreChildBornMsg.
             * @memberof pb.common
             * @classdesc Represents an IgnoreChildBornMsg.
             * @implements IIgnoreChildBornMsg
             * @constructor
             * @param {pb.common.IIgnoreChildBornMsg=} [properties] Properties to set
             */
            function IgnoreChildBornMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * IgnoreChildBornMsg base.
             * @member {pb.common.IGameBaseMsg|null|undefined} base
             * @memberof pb.common.IgnoreChildBornMsg
             * @instance
             */
            IgnoreChildBornMsg.prototype.base = null;

            /**
             * Creates a new IgnoreChildBornMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.IgnoreChildBornMsg
             * @static
             * @param {pb.common.IIgnoreChildBornMsg=} [properties] Properties to set
             * @returns {pb.common.IgnoreChildBornMsg} IgnoreChildBornMsg instance
             */
            IgnoreChildBornMsg.create = function create(properties) {
                return new IgnoreChildBornMsg(properties);
            };

            /**
             * Encodes the specified IgnoreChildBornMsg message. Does not implicitly {@link pb.common.IgnoreChildBornMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.IgnoreChildBornMsg
             * @static
             * @param {pb.common.IIgnoreChildBornMsg} message IgnoreChildBornMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            IgnoreChildBornMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.base != null && message.hasOwnProperty("base"))
                    $root.pb.common.GameBaseMsg.encode(message.base, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified IgnoreChildBornMsg message, length delimited. Does not implicitly {@link pb.common.IgnoreChildBornMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.IgnoreChildBornMsg
             * @static
             * @param {pb.common.IIgnoreChildBornMsg} message IgnoreChildBornMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            IgnoreChildBornMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an IgnoreChildBornMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.IgnoreChildBornMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.IgnoreChildBornMsg} IgnoreChildBornMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            IgnoreChildBornMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.IgnoreChildBornMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.base = $root.pb.common.GameBaseMsg.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an IgnoreChildBornMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.IgnoreChildBornMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.IgnoreChildBornMsg} IgnoreChildBornMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            IgnoreChildBornMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an IgnoreChildBornMsg message.
             * @function verify
             * @memberof pb.common.IgnoreChildBornMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            IgnoreChildBornMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.base != null && message.hasOwnProperty("base")) {
                    var error = $root.pb.common.GameBaseMsg.verify(message.base);
                    if (error)
                        return "base." + error;
                }
                return null;
            };

            /**
             * Creates an IgnoreChildBornMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.IgnoreChildBornMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.IgnoreChildBornMsg} IgnoreChildBornMsg
             */
            IgnoreChildBornMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.IgnoreChildBornMsg)
                    return object;
                var message = new $root.pb.common.IgnoreChildBornMsg();
                if (object.base != null) {
                    if (typeof object.base !== "object")
                        throw TypeError(".pb.common.IgnoreChildBornMsg.base: object expected");
                    message.base = $root.pb.common.GameBaseMsg.fromObject(object.base);
                }
                return message;
            };

            /**
             * Creates a plain object from an IgnoreChildBornMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.IgnoreChildBornMsg
             * @static
             * @param {pb.common.IgnoreChildBornMsg} message IgnoreChildBornMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            IgnoreChildBornMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.base = null;
                if (message.base != null && message.hasOwnProperty("base"))
                    object.base = $root.pb.common.GameBaseMsg.toObject(message.base, options);
                return object;
            };

            /**
             * Converts this IgnoreChildBornMsg to JSON.
             * @function toJSON
             * @memberof pb.common.IgnoreChildBornMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            IgnoreChildBornMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return IgnoreChildBornMsg;
        })();

        common.PayChildBornRedPacketReq = (function() {

            /**
             * Properties of a PayChildBornRedPacketReq.
             * @memberof pb.common
             * @interface IPayChildBornRedPacketReq
             * @property {pb.common.IAssetBaseReq|null} [req] PayChildBornRedPacketReq req
             * @property {number|null} [amount] PayChildBornRedPacketReq amount
             */

            /**
             * Constructs a new PayChildBornRedPacketReq.
             * @memberof pb.common
             * @classdesc Represents a PayChildBornRedPacketReq.
             * @implements IPayChildBornRedPacketReq
             * @constructor
             * @param {pb.common.IPayChildBornRedPacketReq=} [properties] Properties to set
             */
            function PayChildBornRedPacketReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PayChildBornRedPacketReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.PayChildBornRedPacketReq
             * @instance
             */
            PayChildBornRedPacketReq.prototype.req = null;

            /**
             * PayChildBornRedPacketReq amount.
             * @member {number} amount
             * @memberof pb.common.PayChildBornRedPacketReq
             * @instance
             */
            PayChildBornRedPacketReq.prototype.amount = 0;

            /**
             * Creates a new PayChildBornRedPacketReq instance using the specified properties.
             * @function create
             * @memberof pb.common.PayChildBornRedPacketReq
             * @static
             * @param {pb.common.IPayChildBornRedPacketReq=} [properties] Properties to set
             * @returns {pb.common.PayChildBornRedPacketReq} PayChildBornRedPacketReq instance
             */
            PayChildBornRedPacketReq.create = function create(properties) {
                return new PayChildBornRedPacketReq(properties);
            };

            /**
             * Encodes the specified PayChildBornRedPacketReq message. Does not implicitly {@link pb.common.PayChildBornRedPacketReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.PayChildBornRedPacketReq
             * @static
             * @param {pb.common.IPayChildBornRedPacketReq} message PayChildBornRedPacketReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PayChildBornRedPacketReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.amount != null && message.hasOwnProperty("amount"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.amount);
                return writer;
            };

            /**
             * Encodes the specified PayChildBornRedPacketReq message, length delimited. Does not implicitly {@link pb.common.PayChildBornRedPacketReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.PayChildBornRedPacketReq
             * @static
             * @param {pb.common.IPayChildBornRedPacketReq} message PayChildBornRedPacketReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PayChildBornRedPacketReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PayChildBornRedPacketReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.PayChildBornRedPacketReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.PayChildBornRedPacketReq} PayChildBornRedPacketReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PayChildBornRedPacketReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.PayChildBornRedPacketReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.amount = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PayChildBornRedPacketReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.PayChildBornRedPacketReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.PayChildBornRedPacketReq} PayChildBornRedPacketReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PayChildBornRedPacketReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PayChildBornRedPacketReq message.
             * @function verify
             * @memberof pb.common.PayChildBornRedPacketReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PayChildBornRedPacketReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isInteger(message.amount))
                        return "amount: integer expected";
                return null;
            };

            /**
             * Creates a PayChildBornRedPacketReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.PayChildBornRedPacketReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.PayChildBornRedPacketReq} PayChildBornRedPacketReq
             */
            PayChildBornRedPacketReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.PayChildBornRedPacketReq)
                    return object;
                var message = new $root.pb.common.PayChildBornRedPacketReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.PayChildBornRedPacketReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                if (object.amount != null)
                    message.amount = object.amount | 0;
                return message;
            };

            /**
             * Creates a plain object from a PayChildBornRedPacketReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.PayChildBornRedPacketReq
             * @static
             * @param {pb.common.PayChildBornRedPacketReq} message PayChildBornRedPacketReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PayChildBornRedPacketReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.req = null;
                    object.amount = 0;
                }
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                if (message.amount != null && message.hasOwnProperty("amount"))
                    object.amount = message.amount;
                return object;
            };

            /**
             * Converts this PayChildBornRedPacketReq to JSON.
             * @function toJSON
             * @memberof pb.common.PayChildBornRedPacketReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PayChildBornRedPacketReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PayChildBornRedPacketReq;
        })();

        common.PayChildBornRedPacketRsp = (function() {

            /**
             * Properties of a PayChildBornRedPacketRsp.
             * @memberof pb.common
             * @interface IPayChildBornRedPacketRsp
             * @property {pb.common.IBaseRsp|null} [rsp] PayChildBornRedPacketRsp rsp
             */

            /**
             * Constructs a new PayChildBornRedPacketRsp.
             * @memberof pb.common
             * @classdesc Represents a PayChildBornRedPacketRsp.
             * @implements IPayChildBornRedPacketRsp
             * @constructor
             * @param {pb.common.IPayChildBornRedPacketRsp=} [properties] Properties to set
             */
            function PayChildBornRedPacketRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PayChildBornRedPacketRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.PayChildBornRedPacketRsp
             * @instance
             */
            PayChildBornRedPacketRsp.prototype.rsp = null;

            /**
             * Creates a new PayChildBornRedPacketRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.PayChildBornRedPacketRsp
             * @static
             * @param {pb.common.IPayChildBornRedPacketRsp=} [properties] Properties to set
             * @returns {pb.common.PayChildBornRedPacketRsp} PayChildBornRedPacketRsp instance
             */
            PayChildBornRedPacketRsp.create = function create(properties) {
                return new PayChildBornRedPacketRsp(properties);
            };

            /**
             * Encodes the specified PayChildBornRedPacketRsp message. Does not implicitly {@link pb.common.PayChildBornRedPacketRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.PayChildBornRedPacketRsp
             * @static
             * @param {pb.common.IPayChildBornRedPacketRsp} message PayChildBornRedPacketRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PayChildBornRedPacketRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified PayChildBornRedPacketRsp message, length delimited. Does not implicitly {@link pb.common.PayChildBornRedPacketRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.PayChildBornRedPacketRsp
             * @static
             * @param {pb.common.IPayChildBornRedPacketRsp} message PayChildBornRedPacketRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PayChildBornRedPacketRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PayChildBornRedPacketRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.PayChildBornRedPacketRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.PayChildBornRedPacketRsp} PayChildBornRedPacketRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PayChildBornRedPacketRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.PayChildBornRedPacketRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PayChildBornRedPacketRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.PayChildBornRedPacketRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.PayChildBornRedPacketRsp} PayChildBornRedPacketRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PayChildBornRedPacketRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PayChildBornRedPacketRsp message.
             * @function verify
             * @memberof pb.common.PayChildBornRedPacketRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PayChildBornRedPacketRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                return null;
            };

            /**
             * Creates a PayChildBornRedPacketRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.PayChildBornRedPacketRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.PayChildBornRedPacketRsp} PayChildBornRedPacketRsp
             */
            PayChildBornRedPacketRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.PayChildBornRedPacketRsp)
                    return object;
                var message = new $root.pb.common.PayChildBornRedPacketRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.PayChildBornRedPacketRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from a PayChildBornRedPacketRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.PayChildBornRedPacketRsp
             * @static
             * @param {pb.common.PayChildBornRedPacketRsp} message PayChildBornRedPacketRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PayChildBornRedPacketRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                return object;
            };

            /**
             * Converts this PayChildBornRedPacketRsp to JSON.
             * @function toJSON
             * @memberof pb.common.PayChildBornRedPacketRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PayChildBornRedPacketRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PayChildBornRedPacketRsp;
        })();

        common.PayChildBornRedPacketMsg = (function() {

            /**
             * Properties of a PayChildBornRedPacketMsg.
             * @memberof pb.common
             * @interface IPayChildBornRedPacketMsg
             * @property {pb.common.IGameBaseMsg|null} [base] PayChildBornRedPacketMsg base
             * @property {number|null} [amount] PayChildBornRedPacketMsg amount
             * @property {Long|null} [toUserId] PayChildBornRedPacketMsg toUserId
             */

            /**
             * Constructs a new PayChildBornRedPacketMsg.
             * @memberof pb.common
             * @classdesc Represents a PayChildBornRedPacketMsg.
             * @implements IPayChildBornRedPacketMsg
             * @constructor
             * @param {pb.common.IPayChildBornRedPacketMsg=} [properties] Properties to set
             */
            function PayChildBornRedPacketMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PayChildBornRedPacketMsg base.
             * @member {pb.common.IGameBaseMsg|null|undefined} base
             * @memberof pb.common.PayChildBornRedPacketMsg
             * @instance
             */
            PayChildBornRedPacketMsg.prototype.base = null;

            /**
             * PayChildBornRedPacketMsg amount.
             * @member {number} amount
             * @memberof pb.common.PayChildBornRedPacketMsg
             * @instance
             */
            PayChildBornRedPacketMsg.prototype.amount = 0;

            /**
             * PayChildBornRedPacketMsg toUserId.
             * @member {Long} toUserId
             * @memberof pb.common.PayChildBornRedPacketMsg
             * @instance
             */
            PayChildBornRedPacketMsg.prototype.toUserId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new PayChildBornRedPacketMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.PayChildBornRedPacketMsg
             * @static
             * @param {pb.common.IPayChildBornRedPacketMsg=} [properties] Properties to set
             * @returns {pb.common.PayChildBornRedPacketMsg} PayChildBornRedPacketMsg instance
             */
            PayChildBornRedPacketMsg.create = function create(properties) {
                return new PayChildBornRedPacketMsg(properties);
            };

            /**
             * Encodes the specified PayChildBornRedPacketMsg message. Does not implicitly {@link pb.common.PayChildBornRedPacketMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.PayChildBornRedPacketMsg
             * @static
             * @param {pb.common.IPayChildBornRedPacketMsg} message PayChildBornRedPacketMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PayChildBornRedPacketMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.base != null && message.hasOwnProperty("base"))
                    $root.pb.common.GameBaseMsg.encode(message.base, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.amount != null && message.hasOwnProperty("amount"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.amount);
                if (message.toUserId != null && message.hasOwnProperty("toUserId"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.toUserId);
                return writer;
            };

            /**
             * Encodes the specified PayChildBornRedPacketMsg message, length delimited. Does not implicitly {@link pb.common.PayChildBornRedPacketMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.PayChildBornRedPacketMsg
             * @static
             * @param {pb.common.IPayChildBornRedPacketMsg} message PayChildBornRedPacketMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PayChildBornRedPacketMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PayChildBornRedPacketMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.PayChildBornRedPacketMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.PayChildBornRedPacketMsg} PayChildBornRedPacketMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PayChildBornRedPacketMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.PayChildBornRedPacketMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.base = $root.pb.common.GameBaseMsg.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.amount = reader.int32();
                        break;
                    case 3:
                        message.toUserId = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PayChildBornRedPacketMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.PayChildBornRedPacketMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.PayChildBornRedPacketMsg} PayChildBornRedPacketMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PayChildBornRedPacketMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PayChildBornRedPacketMsg message.
             * @function verify
             * @memberof pb.common.PayChildBornRedPacketMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PayChildBornRedPacketMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.base != null && message.hasOwnProperty("base")) {
                    var error = $root.pb.common.GameBaseMsg.verify(message.base);
                    if (error)
                        return "base." + error;
                }
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isInteger(message.amount))
                        return "amount: integer expected";
                if (message.toUserId != null && message.hasOwnProperty("toUserId"))
                    if (!$util.isInteger(message.toUserId) && !(message.toUserId && $util.isInteger(message.toUserId.low) && $util.isInteger(message.toUserId.high)))
                        return "toUserId: integer|Long expected";
                return null;
            };

            /**
             * Creates a PayChildBornRedPacketMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.PayChildBornRedPacketMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.PayChildBornRedPacketMsg} PayChildBornRedPacketMsg
             */
            PayChildBornRedPacketMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.PayChildBornRedPacketMsg)
                    return object;
                var message = new $root.pb.common.PayChildBornRedPacketMsg();
                if (object.base != null) {
                    if (typeof object.base !== "object")
                        throw TypeError(".pb.common.PayChildBornRedPacketMsg.base: object expected");
                    message.base = $root.pb.common.GameBaseMsg.fromObject(object.base);
                }
                if (object.amount != null)
                    message.amount = object.amount | 0;
                if (object.toUserId != null)
                    if ($util.Long)
                        (message.toUserId = $util.Long.fromValue(object.toUserId)).unsigned = false;
                    else if (typeof object.toUserId === "string")
                        message.toUserId = parseInt(object.toUserId, 10);
                    else if (typeof object.toUserId === "number")
                        message.toUserId = object.toUserId;
                    else if (typeof object.toUserId === "object")
                        message.toUserId = new $util.LongBits(object.toUserId.low >>> 0, object.toUserId.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a PayChildBornRedPacketMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.PayChildBornRedPacketMsg
             * @static
             * @param {pb.common.PayChildBornRedPacketMsg} message PayChildBornRedPacketMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PayChildBornRedPacketMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.base = null;
                    object.amount = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.toUserId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.toUserId = options.longs === String ? "0" : 0;
                }
                if (message.base != null && message.hasOwnProperty("base"))
                    object.base = $root.pb.common.GameBaseMsg.toObject(message.base, options);
                if (message.amount != null && message.hasOwnProperty("amount"))
                    object.amount = message.amount;
                if (message.toUserId != null && message.hasOwnProperty("toUserId"))
                    if (typeof message.toUserId === "number")
                        object.toUserId = options.longs === String ? String(message.toUserId) : message.toUserId;
                    else
                        object.toUserId = options.longs === String ? $util.Long.prototype.toString.call(message.toUserId) : options.longs === Number ? new $util.LongBits(message.toUserId.low >>> 0, message.toUserId.high >>> 0).toNumber() : message.toUserId;
                return object;
            };

            /**
             * Converts this PayChildBornRedPacketMsg to JSON.
             * @function toJSON
             * @memberof pb.common.PayChildBornRedPacketMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PayChildBornRedPacketMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PayChildBornRedPacketMsg;
        })();

        common.SellReq = (function() {

            /**
             * Properties of a SellReq.
             * @memberof pb.common
             * @interface ISellReq
             * @property {pb.common.IAssetBaseReq|null} [req] SellReq req
             * @property {Long|null} [playerAssetId] SellReq playerAssetId
             * @property {number|null} [quantity] SellReq quantity
             */

            /**
             * Constructs a new SellReq.
             * @memberof pb.common
             * @classdesc Represents a SellReq.
             * @implements ISellReq
             * @constructor
             * @param {pb.common.ISellReq=} [properties] Properties to set
             */
            function SellReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SellReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.SellReq
             * @instance
             */
            SellReq.prototype.req = null;

            /**
             * SellReq playerAssetId.
             * @member {Long} playerAssetId
             * @memberof pb.common.SellReq
             * @instance
             */
            SellReq.prototype.playerAssetId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * SellReq quantity.
             * @member {number} quantity
             * @memberof pb.common.SellReq
             * @instance
             */
            SellReq.prototype.quantity = 0;

            /**
             * Creates a new SellReq instance using the specified properties.
             * @function create
             * @memberof pb.common.SellReq
             * @static
             * @param {pb.common.ISellReq=} [properties] Properties to set
             * @returns {pb.common.SellReq} SellReq instance
             */
            SellReq.create = function create(properties) {
                return new SellReq(properties);
            };

            /**
             * Encodes the specified SellReq message. Does not implicitly {@link pb.common.SellReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.SellReq
             * @static
             * @param {pb.common.ISellReq} message SellReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SellReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.playerAssetId != null && message.hasOwnProperty("playerAssetId"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.playerAssetId);
                if (message.quantity != null && message.hasOwnProperty("quantity"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.quantity);
                return writer;
            };

            /**
             * Encodes the specified SellReq message, length delimited. Does not implicitly {@link pb.common.SellReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.SellReq
             * @static
             * @param {pb.common.ISellReq} message SellReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SellReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SellReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.SellReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.SellReq} SellReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SellReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.SellReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.playerAssetId = reader.int64();
                        break;
                    case 6:
                        message.quantity = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SellReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.SellReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.SellReq} SellReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SellReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SellReq message.
             * @function verify
             * @memberof pb.common.SellReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SellReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                if (message.playerAssetId != null && message.hasOwnProperty("playerAssetId"))
                    if (!$util.isInteger(message.playerAssetId) && !(message.playerAssetId && $util.isInteger(message.playerAssetId.low) && $util.isInteger(message.playerAssetId.high)))
                        return "playerAssetId: integer|Long expected";
                if (message.quantity != null && message.hasOwnProperty("quantity"))
                    if (!$util.isInteger(message.quantity))
                        return "quantity: integer expected";
                return null;
            };

            /**
             * Creates a SellReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.SellReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.SellReq} SellReq
             */
            SellReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.SellReq)
                    return object;
                var message = new $root.pb.common.SellReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.SellReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                if (object.playerAssetId != null)
                    if ($util.Long)
                        (message.playerAssetId = $util.Long.fromValue(object.playerAssetId)).unsigned = false;
                    else if (typeof object.playerAssetId === "string")
                        message.playerAssetId = parseInt(object.playerAssetId, 10);
                    else if (typeof object.playerAssetId === "number")
                        message.playerAssetId = object.playerAssetId;
                    else if (typeof object.playerAssetId === "object")
                        message.playerAssetId = new $util.LongBits(object.playerAssetId.low >>> 0, object.playerAssetId.high >>> 0).toNumber();
                if (object.quantity != null)
                    message.quantity = object.quantity | 0;
                return message;
            };

            /**
             * Creates a plain object from a SellReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.SellReq
             * @static
             * @param {pb.common.SellReq} message SellReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SellReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.req = null;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.playerAssetId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.playerAssetId = options.longs === String ? "0" : 0;
                    object.quantity = 0;
                }
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                if (message.playerAssetId != null && message.hasOwnProperty("playerAssetId"))
                    if (typeof message.playerAssetId === "number")
                        object.playerAssetId = options.longs === String ? String(message.playerAssetId) : message.playerAssetId;
                    else
                        object.playerAssetId = options.longs === String ? $util.Long.prototype.toString.call(message.playerAssetId) : options.longs === Number ? new $util.LongBits(message.playerAssetId.low >>> 0, message.playerAssetId.high >>> 0).toNumber() : message.playerAssetId;
                if (message.quantity != null && message.hasOwnProperty("quantity"))
                    object.quantity = message.quantity;
                return object;
            };

            /**
             * Converts this SellReq to JSON.
             * @function toJSON
             * @memberof pb.common.SellReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SellReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SellReq;
        })();

        common.SellRsp = (function() {

            /**
             * Properties of a SellRsp.
             * @memberof pb.common
             * @interface ISellRsp
             * @property {pb.common.IBaseRsp|null} [rsp] SellRsp rsp
             */

            /**
             * Constructs a new SellRsp.
             * @memberof pb.common
             * @classdesc Represents a SellRsp.
             * @implements ISellRsp
             * @constructor
             * @param {pb.common.ISellRsp=} [properties] Properties to set
             */
            function SellRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SellRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.SellRsp
             * @instance
             */
            SellRsp.prototype.rsp = null;

            /**
             * Creates a new SellRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.SellRsp
             * @static
             * @param {pb.common.ISellRsp=} [properties] Properties to set
             * @returns {pb.common.SellRsp} SellRsp instance
             */
            SellRsp.create = function create(properties) {
                return new SellRsp(properties);
            };

            /**
             * Encodes the specified SellRsp message. Does not implicitly {@link pb.common.SellRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.SellRsp
             * @static
             * @param {pb.common.ISellRsp} message SellRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SellRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SellRsp message, length delimited. Does not implicitly {@link pb.common.SellRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.SellRsp
             * @static
             * @param {pb.common.ISellRsp} message SellRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SellRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SellRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.SellRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.SellRsp} SellRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SellRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.SellRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SellRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.SellRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.SellRsp} SellRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SellRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SellRsp message.
             * @function verify
             * @memberof pb.common.SellRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SellRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                return null;
            };

            /**
             * Creates a SellRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.SellRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.SellRsp} SellRsp
             */
            SellRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.SellRsp)
                    return object;
                var message = new $root.pb.common.SellRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.SellRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from a SellRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.SellRsp
             * @static
             * @param {pb.common.SellRsp} message SellRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SellRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                return object;
            };

            /**
             * Converts this SellRsp to JSON.
             * @function toJSON
             * @memberof pb.common.SellRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SellRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SellRsp;
        })();

        common.SellMsg = (function() {

            /**
             * Properties of a SellMsg.
             * @memberof pb.common
             * @interface ISellMsg
             * @property {pb.common.IGameBaseMsg|null} [base] SellMsg base
             * @property {number|null} [price] SellMsg price
             * @property {string|null} [name] SellMsg name
             */

            /**
             * Constructs a new SellMsg.
             * @memberof pb.common
             * @classdesc Represents a SellMsg.
             * @implements ISellMsg
             * @constructor
             * @param {pb.common.ISellMsg=} [properties] Properties to set
             */
            function SellMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SellMsg base.
             * @member {pb.common.IGameBaseMsg|null|undefined} base
             * @memberof pb.common.SellMsg
             * @instance
             */
            SellMsg.prototype.base = null;

            /**
             * SellMsg price.
             * @member {number} price
             * @memberof pb.common.SellMsg
             * @instance
             */
            SellMsg.prototype.price = 0;

            /**
             * SellMsg name.
             * @member {string} name
             * @memberof pb.common.SellMsg
             * @instance
             */
            SellMsg.prototype.name = "";

            /**
             * Creates a new SellMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.SellMsg
             * @static
             * @param {pb.common.ISellMsg=} [properties] Properties to set
             * @returns {pb.common.SellMsg} SellMsg instance
             */
            SellMsg.create = function create(properties) {
                return new SellMsg(properties);
            };

            /**
             * Encodes the specified SellMsg message. Does not implicitly {@link pb.common.SellMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.SellMsg
             * @static
             * @param {pb.common.ISellMsg} message SellMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SellMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.base != null && message.hasOwnProperty("base"))
                    $root.pb.common.GameBaseMsg.encode(message.base, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.price != null && message.hasOwnProperty("price"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.price);
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
                return writer;
            };

            /**
             * Encodes the specified SellMsg message, length delimited. Does not implicitly {@link pb.common.SellMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.SellMsg
             * @static
             * @param {pb.common.ISellMsg} message SellMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SellMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SellMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.SellMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.SellMsg} SellMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SellMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.SellMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.base = $root.pb.common.GameBaseMsg.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.price = reader.int32();
                        break;
                    case 3:
                        message.name = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SellMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.SellMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.SellMsg} SellMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SellMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SellMsg message.
             * @function verify
             * @memberof pb.common.SellMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SellMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.base != null && message.hasOwnProperty("base")) {
                    var error = $root.pb.common.GameBaseMsg.verify(message.base);
                    if (error)
                        return "base." + error;
                }
                if (message.price != null && message.hasOwnProperty("price"))
                    if (!$util.isInteger(message.price))
                        return "price: integer expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                return null;
            };

            /**
             * Creates a SellMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.SellMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.SellMsg} SellMsg
             */
            SellMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.SellMsg)
                    return object;
                var message = new $root.pb.common.SellMsg();
                if (object.base != null) {
                    if (typeof object.base !== "object")
                        throw TypeError(".pb.common.SellMsg.base: object expected");
                    message.base = $root.pb.common.GameBaseMsg.fromObject(object.base);
                }
                if (object.price != null)
                    message.price = object.price | 0;
                if (object.name != null)
                    message.name = String(object.name);
                return message;
            };

            /**
             * Creates a plain object from a SellMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.SellMsg
             * @static
             * @param {pb.common.SellMsg} message SellMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SellMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.base = null;
                    object.price = 0;
                    object.name = "";
                }
                if (message.base != null && message.hasOwnProperty("base"))
                    object.base = $root.pb.common.GameBaseMsg.toObject(message.base, options);
                if (message.price != null && message.hasOwnProperty("price"))
                    object.price = message.price;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                return object;
            };

            /**
             * Converts this SellMsg to JSON.
             * @function toJSON
             * @memberof pb.common.SellMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SellMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SellMsg;
        })();

        common.GetCanSellPlayerAssetReq = (function() {

            /**
             * Properties of a GetCanSellPlayerAssetReq.
             * @memberof pb.common
             * @interface IGetCanSellPlayerAssetReq
             * @property {pb.common.IAssetBaseReq|null} [req] GetCanSellPlayerAssetReq req
             */

            /**
             * Constructs a new GetCanSellPlayerAssetReq.
             * @memberof pb.common
             * @classdesc Represents a GetCanSellPlayerAssetReq.
             * @implements IGetCanSellPlayerAssetReq
             * @constructor
             * @param {pb.common.IGetCanSellPlayerAssetReq=} [properties] Properties to set
             */
            function GetCanSellPlayerAssetReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GetCanSellPlayerAssetReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.GetCanSellPlayerAssetReq
             * @instance
             */
            GetCanSellPlayerAssetReq.prototype.req = null;

            /**
             * Creates a new GetCanSellPlayerAssetReq instance using the specified properties.
             * @function create
             * @memberof pb.common.GetCanSellPlayerAssetReq
             * @static
             * @param {pb.common.IGetCanSellPlayerAssetReq=} [properties] Properties to set
             * @returns {pb.common.GetCanSellPlayerAssetReq} GetCanSellPlayerAssetReq instance
             */
            GetCanSellPlayerAssetReq.create = function create(properties) {
                return new GetCanSellPlayerAssetReq(properties);
            };

            /**
             * Encodes the specified GetCanSellPlayerAssetReq message. Does not implicitly {@link pb.common.GetCanSellPlayerAssetReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GetCanSellPlayerAssetReq
             * @static
             * @param {pb.common.IGetCanSellPlayerAssetReq} message GetCanSellPlayerAssetReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetCanSellPlayerAssetReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GetCanSellPlayerAssetReq message, length delimited. Does not implicitly {@link pb.common.GetCanSellPlayerAssetReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GetCanSellPlayerAssetReq
             * @static
             * @param {pb.common.IGetCanSellPlayerAssetReq} message GetCanSellPlayerAssetReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetCanSellPlayerAssetReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetCanSellPlayerAssetReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GetCanSellPlayerAssetReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GetCanSellPlayerAssetReq} GetCanSellPlayerAssetReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetCanSellPlayerAssetReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GetCanSellPlayerAssetReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetCanSellPlayerAssetReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GetCanSellPlayerAssetReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GetCanSellPlayerAssetReq} GetCanSellPlayerAssetReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetCanSellPlayerAssetReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetCanSellPlayerAssetReq message.
             * @function verify
             * @memberof pb.common.GetCanSellPlayerAssetReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetCanSellPlayerAssetReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                return null;
            };

            /**
             * Creates a GetCanSellPlayerAssetReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GetCanSellPlayerAssetReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GetCanSellPlayerAssetReq} GetCanSellPlayerAssetReq
             */
            GetCanSellPlayerAssetReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GetCanSellPlayerAssetReq)
                    return object;
                var message = new $root.pb.common.GetCanSellPlayerAssetReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.GetCanSellPlayerAssetReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                return message;
            };

            /**
             * Creates a plain object from a GetCanSellPlayerAssetReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GetCanSellPlayerAssetReq
             * @static
             * @param {pb.common.GetCanSellPlayerAssetReq} message GetCanSellPlayerAssetReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetCanSellPlayerAssetReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.req = null;
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                return object;
            };

            /**
             * Converts this GetCanSellPlayerAssetReq to JSON.
             * @function toJSON
             * @memberof pb.common.GetCanSellPlayerAssetReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetCanSellPlayerAssetReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GetCanSellPlayerAssetReq;
        })();

        common.PlayerAsset = (function() {

            /**
             * Properties of a PlayerAsset.
             * @memberof pb.common
             * @interface IPlayerAsset
             * @property {Long|null} [id] PlayerAsset id
             * @property {string|null} [name] PlayerAsset name
             * @property {string|null} [code] PlayerAsset code
             * @property {number|null} [totalPrice] PlayerAsset totalPrice
             * @property {number|null} [unitPrice] PlayerAsset unitPrice
             * @property {number|null} [downPayment] PlayerAsset downPayment
             * @property {number|null} [monthCashFlow] PlayerAsset monthCashFlow
             * @property {number|null} [liabilities] PlayerAsset liabilities
             * @property {number|null} [income] PlayerAsset income
             * @property {number|null} [expense] PlayerAsset expense
             * @property {number|null} [quantity] PlayerAsset quantity
             * @property {number|null} [shard] PlayerAsset shard
             * @property {number|null} [mark] PlayerAsset mark
             * @property {number|null} [sellPrice] PlayerAsset sellPrice
             * @property {number|null} [profit] PlayerAsset profit
             * @property {string|null} [imgFile] PlayerAsset imgFile
             */

            /**
             * Constructs a new PlayerAsset.
             * @memberof pb.common
             * @classdesc Represents a PlayerAsset.
             * @implements IPlayerAsset
             * @constructor
             * @param {pb.common.IPlayerAsset=} [properties] Properties to set
             */
            function PlayerAsset(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PlayerAsset id.
             * @member {Long} id
             * @memberof pb.common.PlayerAsset
             * @instance
             */
            PlayerAsset.prototype.id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * PlayerAsset name.
             * @member {string} name
             * @memberof pb.common.PlayerAsset
             * @instance
             */
            PlayerAsset.prototype.name = "";

            /**
             * PlayerAsset code.
             * @member {string} code
             * @memberof pb.common.PlayerAsset
             * @instance
             */
            PlayerAsset.prototype.code = "";

            /**
             * PlayerAsset totalPrice.
             * @member {number} totalPrice
             * @memberof pb.common.PlayerAsset
             * @instance
             */
            PlayerAsset.prototype.totalPrice = 0;

            /**
             * PlayerAsset unitPrice.
             * @member {number} unitPrice
             * @memberof pb.common.PlayerAsset
             * @instance
             */
            PlayerAsset.prototype.unitPrice = 0;

            /**
             * PlayerAsset downPayment.
             * @member {number} downPayment
             * @memberof pb.common.PlayerAsset
             * @instance
             */
            PlayerAsset.prototype.downPayment = 0;

            /**
             * PlayerAsset monthCashFlow.
             * @member {number} monthCashFlow
             * @memberof pb.common.PlayerAsset
             * @instance
             */
            PlayerAsset.prototype.monthCashFlow = 0;

            /**
             * PlayerAsset liabilities.
             * @member {number} liabilities
             * @memberof pb.common.PlayerAsset
             * @instance
             */
            PlayerAsset.prototype.liabilities = 0;

            /**
             * PlayerAsset income.
             * @member {number} income
             * @memberof pb.common.PlayerAsset
             * @instance
             */
            PlayerAsset.prototype.income = 0;

            /**
             * PlayerAsset expense.
             * @member {number} expense
             * @memberof pb.common.PlayerAsset
             * @instance
             */
            PlayerAsset.prototype.expense = 0;

            /**
             * PlayerAsset quantity.
             * @member {number} quantity
             * @memberof pb.common.PlayerAsset
             * @instance
             */
            PlayerAsset.prototype.quantity = 0;

            /**
             * PlayerAsset shard.
             * @member {number} shard
             * @memberof pb.common.PlayerAsset
             * @instance
             */
            PlayerAsset.prototype.shard = 0;

            /**
             * PlayerAsset mark.
             * @member {number} mark
             * @memberof pb.common.PlayerAsset
             * @instance
             */
            PlayerAsset.prototype.mark = 0;

            /**
             * PlayerAsset sellPrice.
             * @member {number} sellPrice
             * @memberof pb.common.PlayerAsset
             * @instance
             */
            PlayerAsset.prototype.sellPrice = 0;

            /**
             * PlayerAsset profit.
             * @member {number} profit
             * @memberof pb.common.PlayerAsset
             * @instance
             */
            PlayerAsset.prototype.profit = 0;

            /**
             * PlayerAsset imgFile.
             * @member {string} imgFile
             * @memberof pb.common.PlayerAsset
             * @instance
             */
            PlayerAsset.prototype.imgFile = "";

            /**
             * Creates a new PlayerAsset instance using the specified properties.
             * @function create
             * @memberof pb.common.PlayerAsset
             * @static
             * @param {pb.common.IPlayerAsset=} [properties] Properties to set
             * @returns {pb.common.PlayerAsset} PlayerAsset instance
             */
            PlayerAsset.create = function create(properties) {
                return new PlayerAsset(properties);
            };

            /**
             * Encodes the specified PlayerAsset message. Does not implicitly {@link pb.common.PlayerAsset.verify|verify} messages.
             * @function encode
             * @memberof pb.common.PlayerAsset
             * @static
             * @param {pb.common.IPlayerAsset} message PlayerAsset message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerAsset.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.id);
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.code);
                if (message.totalPrice != null && message.hasOwnProperty("totalPrice"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.totalPrice);
                if (message.unitPrice != null && message.hasOwnProperty("unitPrice"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.unitPrice);
                if (message.downPayment != null && message.hasOwnProperty("downPayment"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int32(message.downPayment);
                if (message.monthCashFlow != null && message.hasOwnProperty("monthCashFlow"))
                    writer.uint32(/* id 8, wireType 0 =*/64).int32(message.monthCashFlow);
                if (message.liabilities != null && message.hasOwnProperty("liabilities"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.liabilities);
                if (message.income != null && message.hasOwnProperty("income"))
                    writer.uint32(/* id 10, wireType 0 =*/80).int32(message.income);
                if (message.expense != null && message.hasOwnProperty("expense"))
                    writer.uint32(/* id 11, wireType 0 =*/88).int32(message.expense);
                if (message.quantity != null && message.hasOwnProperty("quantity"))
                    writer.uint32(/* id 12, wireType 0 =*/96).int32(message.quantity);
                if (message.shard != null && message.hasOwnProperty("shard"))
                    writer.uint32(/* id 13, wireType 0 =*/104).int32(message.shard);
                if (message.mark != null && message.hasOwnProperty("mark"))
                    writer.uint32(/* id 14, wireType 0 =*/112).int32(message.mark);
                if (message.sellPrice != null && message.hasOwnProperty("sellPrice"))
                    writer.uint32(/* id 15, wireType 0 =*/120).int32(message.sellPrice);
                if (message.profit != null && message.hasOwnProperty("profit"))
                    writer.uint32(/* id 16, wireType 0 =*/128).int32(message.profit);
                if (message.imgFile != null && message.hasOwnProperty("imgFile"))
                    writer.uint32(/* id 17, wireType 2 =*/138).string(message.imgFile);
                return writer;
            };

            /**
             * Encodes the specified PlayerAsset message, length delimited. Does not implicitly {@link pb.common.PlayerAsset.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.PlayerAsset
             * @static
             * @param {pb.common.IPlayerAsset} message PlayerAsset message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerAsset.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PlayerAsset message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.PlayerAsset
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.PlayerAsset} PlayerAsset
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerAsset.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.PlayerAsset();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.int64();
                        break;
                    case 2:
                        message.name = reader.string();
                        break;
                    case 4:
                        message.code = reader.string();
                        break;
                    case 5:
                        message.totalPrice = reader.int32();
                        break;
                    case 6:
                        message.unitPrice = reader.int32();
                        break;
                    case 7:
                        message.downPayment = reader.int32();
                        break;
                    case 8:
                        message.monthCashFlow = reader.int32();
                        break;
                    case 9:
                        message.liabilities = reader.int32();
                        break;
                    case 10:
                        message.income = reader.int32();
                        break;
                    case 11:
                        message.expense = reader.int32();
                        break;
                    case 12:
                        message.quantity = reader.int32();
                        break;
                    case 13:
                        message.shard = reader.int32();
                        break;
                    case 14:
                        message.mark = reader.int32();
                        break;
                    case 15:
                        message.sellPrice = reader.int32();
                        break;
                    case 16:
                        message.profit = reader.int32();
                        break;
                    case 17:
                        message.imgFile = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PlayerAsset message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.PlayerAsset
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.PlayerAsset} PlayerAsset
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerAsset.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PlayerAsset message.
             * @function verify
             * @memberof pb.common.PlayerAsset
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PlayerAsset.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                        return "id: integer|Long expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isString(message.code))
                        return "code: string expected";
                if (message.totalPrice != null && message.hasOwnProperty("totalPrice"))
                    if (!$util.isInteger(message.totalPrice))
                        return "totalPrice: integer expected";
                if (message.unitPrice != null && message.hasOwnProperty("unitPrice"))
                    if (!$util.isInteger(message.unitPrice))
                        return "unitPrice: integer expected";
                if (message.downPayment != null && message.hasOwnProperty("downPayment"))
                    if (!$util.isInteger(message.downPayment))
                        return "downPayment: integer expected";
                if (message.monthCashFlow != null && message.hasOwnProperty("monthCashFlow"))
                    if (!$util.isInteger(message.monthCashFlow))
                        return "monthCashFlow: integer expected";
                if (message.liabilities != null && message.hasOwnProperty("liabilities"))
                    if (!$util.isInteger(message.liabilities))
                        return "liabilities: integer expected";
                if (message.income != null && message.hasOwnProperty("income"))
                    if (!$util.isInteger(message.income))
                        return "income: integer expected";
                if (message.expense != null && message.hasOwnProperty("expense"))
                    if (!$util.isInteger(message.expense))
                        return "expense: integer expected";
                if (message.quantity != null && message.hasOwnProperty("quantity"))
                    if (!$util.isInteger(message.quantity))
                        return "quantity: integer expected";
                if (message.shard != null && message.hasOwnProperty("shard"))
                    if (!$util.isInteger(message.shard))
                        return "shard: integer expected";
                if (message.mark != null && message.hasOwnProperty("mark"))
                    if (!$util.isInteger(message.mark))
                        return "mark: integer expected";
                if (message.sellPrice != null && message.hasOwnProperty("sellPrice"))
                    if (!$util.isInteger(message.sellPrice))
                        return "sellPrice: integer expected";
                if (message.profit != null && message.hasOwnProperty("profit"))
                    if (!$util.isInteger(message.profit))
                        return "profit: integer expected";
                if (message.imgFile != null && message.hasOwnProperty("imgFile"))
                    if (!$util.isString(message.imgFile))
                        return "imgFile: string expected";
                return null;
            };

            /**
             * Creates a PlayerAsset message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.PlayerAsset
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.PlayerAsset} PlayerAsset
             */
            PlayerAsset.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.PlayerAsset)
                    return object;
                var message = new $root.pb.common.PlayerAsset();
                if (object.id != null)
                    if ($util.Long)
                        (message.id = $util.Long.fromValue(object.id)).unsigned = false;
                    else if (typeof object.id === "string")
                        message.id = parseInt(object.id, 10);
                    else if (typeof object.id === "number")
                        message.id = object.id;
                    else if (typeof object.id === "object")
                        message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.code != null)
                    message.code = String(object.code);
                if (object.totalPrice != null)
                    message.totalPrice = object.totalPrice | 0;
                if (object.unitPrice != null)
                    message.unitPrice = object.unitPrice | 0;
                if (object.downPayment != null)
                    message.downPayment = object.downPayment | 0;
                if (object.monthCashFlow != null)
                    message.monthCashFlow = object.monthCashFlow | 0;
                if (object.liabilities != null)
                    message.liabilities = object.liabilities | 0;
                if (object.income != null)
                    message.income = object.income | 0;
                if (object.expense != null)
                    message.expense = object.expense | 0;
                if (object.quantity != null)
                    message.quantity = object.quantity | 0;
                if (object.shard != null)
                    message.shard = object.shard | 0;
                if (object.mark != null)
                    message.mark = object.mark | 0;
                if (object.sellPrice != null)
                    message.sellPrice = object.sellPrice | 0;
                if (object.profit != null)
                    message.profit = object.profit | 0;
                if (object.imgFile != null)
                    message.imgFile = String(object.imgFile);
                return message;
            };

            /**
             * Creates a plain object from a PlayerAsset message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.PlayerAsset
             * @static
             * @param {pb.common.PlayerAsset} message PlayerAsset
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PlayerAsset.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.id = options.longs === String ? "0" : 0;
                    object.name = "";
                    object.code = "";
                    object.totalPrice = 0;
                    object.unitPrice = 0;
                    object.downPayment = 0;
                    object.monthCashFlow = 0;
                    object.liabilities = 0;
                    object.income = 0;
                    object.expense = 0;
                    object.quantity = 0;
                    object.shard = 0;
                    object.mark = 0;
                    object.sellPrice = 0;
                    object.profit = 0;
                    object.imgFile = "";
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    if (typeof message.id === "number")
                        object.id = options.longs === String ? String(message.id) : message.id;
                    else
                        object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.totalPrice != null && message.hasOwnProperty("totalPrice"))
                    object.totalPrice = message.totalPrice;
                if (message.unitPrice != null && message.hasOwnProperty("unitPrice"))
                    object.unitPrice = message.unitPrice;
                if (message.downPayment != null && message.hasOwnProperty("downPayment"))
                    object.downPayment = message.downPayment;
                if (message.monthCashFlow != null && message.hasOwnProperty("monthCashFlow"))
                    object.monthCashFlow = message.monthCashFlow;
                if (message.liabilities != null && message.hasOwnProperty("liabilities"))
                    object.liabilities = message.liabilities;
                if (message.income != null && message.hasOwnProperty("income"))
                    object.income = message.income;
                if (message.expense != null && message.hasOwnProperty("expense"))
                    object.expense = message.expense;
                if (message.quantity != null && message.hasOwnProperty("quantity"))
                    object.quantity = message.quantity;
                if (message.shard != null && message.hasOwnProperty("shard"))
                    object.shard = message.shard;
                if (message.mark != null && message.hasOwnProperty("mark"))
                    object.mark = message.mark;
                if (message.sellPrice != null && message.hasOwnProperty("sellPrice"))
                    object.sellPrice = message.sellPrice;
                if (message.profit != null && message.hasOwnProperty("profit"))
                    object.profit = message.profit;
                if (message.imgFile != null && message.hasOwnProperty("imgFile"))
                    object.imgFile = message.imgFile;
                return object;
            };

            /**
             * Converts this PlayerAsset to JSON.
             * @function toJSON
             * @memberof pb.common.PlayerAsset
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PlayerAsset.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PlayerAsset;
        })();

        common.GetCanSellPlayerAssetRsp = (function() {

            /**
             * Properties of a GetCanSellPlayerAssetRsp.
             * @memberof pb.common
             * @interface IGetCanSellPlayerAssetRsp
             * @property {pb.common.IBaseRsp|null} [rsp] GetCanSellPlayerAssetRsp rsp
             * @property {Array.<pb.common.IPlayerAsset>|null} [data] GetCanSellPlayerAssetRsp data
             */

            /**
             * Constructs a new GetCanSellPlayerAssetRsp.
             * @memberof pb.common
             * @classdesc Represents a GetCanSellPlayerAssetRsp.
             * @implements IGetCanSellPlayerAssetRsp
             * @constructor
             * @param {pb.common.IGetCanSellPlayerAssetRsp=} [properties] Properties to set
             */
            function GetCanSellPlayerAssetRsp(properties) {
                this.data = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GetCanSellPlayerAssetRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.GetCanSellPlayerAssetRsp
             * @instance
             */
            GetCanSellPlayerAssetRsp.prototype.rsp = null;

            /**
             * GetCanSellPlayerAssetRsp data.
             * @member {Array.<pb.common.IPlayerAsset>} data
             * @memberof pb.common.GetCanSellPlayerAssetRsp
             * @instance
             */
            GetCanSellPlayerAssetRsp.prototype.data = $util.emptyArray;

            /**
             * Creates a new GetCanSellPlayerAssetRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.GetCanSellPlayerAssetRsp
             * @static
             * @param {pb.common.IGetCanSellPlayerAssetRsp=} [properties] Properties to set
             * @returns {pb.common.GetCanSellPlayerAssetRsp} GetCanSellPlayerAssetRsp instance
             */
            GetCanSellPlayerAssetRsp.create = function create(properties) {
                return new GetCanSellPlayerAssetRsp(properties);
            };

            /**
             * Encodes the specified GetCanSellPlayerAssetRsp message. Does not implicitly {@link pb.common.GetCanSellPlayerAssetRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GetCanSellPlayerAssetRsp
             * @static
             * @param {pb.common.IGetCanSellPlayerAssetRsp} message GetCanSellPlayerAssetRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetCanSellPlayerAssetRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.data != null && message.data.length)
                    for (var i = 0; i < message.data.length; ++i)
                        $root.pb.common.PlayerAsset.encode(message.data[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GetCanSellPlayerAssetRsp message, length delimited. Does not implicitly {@link pb.common.GetCanSellPlayerAssetRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GetCanSellPlayerAssetRsp
             * @static
             * @param {pb.common.IGetCanSellPlayerAssetRsp} message GetCanSellPlayerAssetRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetCanSellPlayerAssetRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetCanSellPlayerAssetRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GetCanSellPlayerAssetRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GetCanSellPlayerAssetRsp} GetCanSellPlayerAssetRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetCanSellPlayerAssetRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GetCanSellPlayerAssetRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.data && message.data.length))
                            message.data = [];
                        message.data.push($root.pb.common.PlayerAsset.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetCanSellPlayerAssetRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GetCanSellPlayerAssetRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GetCanSellPlayerAssetRsp} GetCanSellPlayerAssetRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetCanSellPlayerAssetRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetCanSellPlayerAssetRsp message.
             * @function verify
             * @memberof pb.common.GetCanSellPlayerAssetRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetCanSellPlayerAssetRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    if (!Array.isArray(message.data))
                        return "data: array expected";
                    for (var i = 0; i < message.data.length; ++i) {
                        var error = $root.pb.common.PlayerAsset.verify(message.data[i]);
                        if (error)
                            return "data." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GetCanSellPlayerAssetRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GetCanSellPlayerAssetRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GetCanSellPlayerAssetRsp} GetCanSellPlayerAssetRsp
             */
            GetCanSellPlayerAssetRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GetCanSellPlayerAssetRsp)
                    return object;
                var message = new $root.pb.common.GetCanSellPlayerAssetRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.GetCanSellPlayerAssetRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                if (object.data) {
                    if (!Array.isArray(object.data))
                        throw TypeError(".pb.common.GetCanSellPlayerAssetRsp.data: array expected");
                    message.data = [];
                    for (var i = 0; i < object.data.length; ++i) {
                        if (typeof object.data[i] !== "object")
                            throw TypeError(".pb.common.GetCanSellPlayerAssetRsp.data: object expected");
                        message.data[i] = $root.pb.common.PlayerAsset.fromObject(object.data[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GetCanSellPlayerAssetRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GetCanSellPlayerAssetRsp
             * @static
             * @param {pb.common.GetCanSellPlayerAssetRsp} message GetCanSellPlayerAssetRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetCanSellPlayerAssetRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.data = [];
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                if (message.data && message.data.length) {
                    object.data = [];
                    for (var j = 0; j < message.data.length; ++j)
                        object.data[j] = $root.pb.common.PlayerAsset.toObject(message.data[j], options);
                }
                return object;
            };

            /**
             * Converts this GetCanSellPlayerAssetRsp to JSON.
             * @function toJSON
             * @memberof pb.common.GetCanSellPlayerAssetRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetCanSellPlayerAssetRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GetCanSellPlayerAssetRsp;
        })();

        common.LoanReq = (function() {

            /**
             * Properties of a LoanReq.
             * @memberof pb.common
             * @interface ILoanReq
             * @property {pb.common.IAssetBaseReq|null} [req] LoanReq req
             * @property {number|null} [amount] LoanReq amount
             */

            /**
             * Constructs a new LoanReq.
             * @memberof pb.common
             * @classdesc Represents a LoanReq.
             * @implements ILoanReq
             * @constructor
             * @param {pb.common.ILoanReq=} [properties] Properties to set
             */
            function LoanReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoanReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.LoanReq
             * @instance
             */
            LoanReq.prototype.req = null;

            /**
             * LoanReq amount.
             * @member {number} amount
             * @memberof pb.common.LoanReq
             * @instance
             */
            LoanReq.prototype.amount = 0;

            /**
             * Creates a new LoanReq instance using the specified properties.
             * @function create
             * @memberof pb.common.LoanReq
             * @static
             * @param {pb.common.ILoanReq=} [properties] Properties to set
             * @returns {pb.common.LoanReq} LoanReq instance
             */
            LoanReq.create = function create(properties) {
                return new LoanReq(properties);
            };

            /**
             * Encodes the specified LoanReq message. Does not implicitly {@link pb.common.LoanReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.LoanReq
             * @static
             * @param {pb.common.ILoanReq} message LoanReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoanReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.amount != null && message.hasOwnProperty("amount"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.amount);
                return writer;
            };

            /**
             * Encodes the specified LoanReq message, length delimited. Does not implicitly {@link pb.common.LoanReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.LoanReq
             * @static
             * @param {pb.common.ILoanReq} message LoanReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoanReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoanReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.LoanReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.LoanReq} LoanReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoanReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.LoanReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.amount = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a LoanReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.LoanReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.LoanReq} LoanReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoanReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoanReq message.
             * @function verify
             * @memberof pb.common.LoanReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoanReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isInteger(message.amount))
                        return "amount: integer expected";
                return null;
            };

            /**
             * Creates a LoanReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.LoanReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.LoanReq} LoanReq
             */
            LoanReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.LoanReq)
                    return object;
                var message = new $root.pb.common.LoanReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.LoanReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                if (object.amount != null)
                    message.amount = object.amount | 0;
                return message;
            };

            /**
             * Creates a plain object from a LoanReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.LoanReq
             * @static
             * @param {pb.common.LoanReq} message LoanReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoanReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.req = null;
                    object.amount = 0;
                }
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                if (message.amount != null && message.hasOwnProperty("amount"))
                    object.amount = message.amount;
                return object;
            };

            /**
             * Converts this LoanReq to JSON.
             * @function toJSON
             * @memberof pb.common.LoanReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoanReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return LoanReq;
        })();

        common.LoanRsp = (function() {

            /**
             * Properties of a LoanRsp.
             * @memberof pb.common
             * @interface ILoanRsp
             * @property {pb.common.IBaseRsp|null} [rsp] LoanRsp rsp
             * @property {number|null} [totalCash] LoanRsp totalCash
             */

            /**
             * Constructs a new LoanRsp.
             * @memberof pb.common
             * @classdesc Represents a LoanRsp.
             * @implements ILoanRsp
             * @constructor
             * @param {pb.common.ILoanRsp=} [properties] Properties to set
             */
            function LoanRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoanRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.LoanRsp
             * @instance
             */
            LoanRsp.prototype.rsp = null;

            /**
             * LoanRsp totalCash.
             * @member {number} totalCash
             * @memberof pb.common.LoanRsp
             * @instance
             */
            LoanRsp.prototype.totalCash = 0;

            /**
             * Creates a new LoanRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.LoanRsp
             * @static
             * @param {pb.common.ILoanRsp=} [properties] Properties to set
             * @returns {pb.common.LoanRsp} LoanRsp instance
             */
            LoanRsp.create = function create(properties) {
                return new LoanRsp(properties);
            };

            /**
             * Encodes the specified LoanRsp message. Does not implicitly {@link pb.common.LoanRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.LoanRsp
             * @static
             * @param {pb.common.ILoanRsp} message LoanRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoanRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.totalCash != null && message.hasOwnProperty("totalCash"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.totalCash);
                return writer;
            };

            /**
             * Encodes the specified LoanRsp message, length delimited. Does not implicitly {@link pb.common.LoanRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.LoanRsp
             * @static
             * @param {pb.common.ILoanRsp} message LoanRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoanRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoanRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.LoanRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.LoanRsp} LoanRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoanRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.LoanRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.totalCash = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a LoanRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.LoanRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.LoanRsp} LoanRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoanRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoanRsp message.
             * @function verify
             * @memberof pb.common.LoanRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoanRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                if (message.totalCash != null && message.hasOwnProperty("totalCash"))
                    if (!$util.isInteger(message.totalCash))
                        return "totalCash: integer expected";
                return null;
            };

            /**
             * Creates a LoanRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.LoanRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.LoanRsp} LoanRsp
             */
            LoanRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.LoanRsp)
                    return object;
                var message = new $root.pb.common.LoanRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.LoanRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                if (object.totalCash != null)
                    message.totalCash = object.totalCash | 0;
                return message;
            };

            /**
             * Creates a plain object from a LoanRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.LoanRsp
             * @static
             * @param {pb.common.LoanRsp} message LoanRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoanRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.rsp = null;
                    object.totalCash = 0;
                }
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                if (message.totalCash != null && message.hasOwnProperty("totalCash"))
                    object.totalCash = message.totalCash;
                return object;
            };

            /**
             * Converts this LoanRsp to JSON.
             * @function toJSON
             * @memberof pb.common.LoanRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoanRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return LoanRsp;
        })();

        common.LoanMsg = (function() {

            /**
             * Properties of a LoanMsg.
             * @memberof pb.common
             * @interface ILoanMsg
             * @property {pb.common.IGameBaseMsg|null} [base] LoanMsg base
             * @property {number|null} [amount] LoanMsg amount
             */

            /**
             * Constructs a new LoanMsg.
             * @memberof pb.common
             * @classdesc Represents a LoanMsg.
             * @implements ILoanMsg
             * @constructor
             * @param {pb.common.ILoanMsg=} [properties] Properties to set
             */
            function LoanMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoanMsg base.
             * @member {pb.common.IGameBaseMsg|null|undefined} base
             * @memberof pb.common.LoanMsg
             * @instance
             */
            LoanMsg.prototype.base = null;

            /**
             * LoanMsg amount.
             * @member {number} amount
             * @memberof pb.common.LoanMsg
             * @instance
             */
            LoanMsg.prototype.amount = 0;

            /**
             * Creates a new LoanMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.LoanMsg
             * @static
             * @param {pb.common.ILoanMsg=} [properties] Properties to set
             * @returns {pb.common.LoanMsg} LoanMsg instance
             */
            LoanMsg.create = function create(properties) {
                return new LoanMsg(properties);
            };

            /**
             * Encodes the specified LoanMsg message. Does not implicitly {@link pb.common.LoanMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.LoanMsg
             * @static
             * @param {pb.common.ILoanMsg} message LoanMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoanMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.base != null && message.hasOwnProperty("base"))
                    $root.pb.common.GameBaseMsg.encode(message.base, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.amount != null && message.hasOwnProperty("amount"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.amount);
                return writer;
            };

            /**
             * Encodes the specified LoanMsg message, length delimited. Does not implicitly {@link pb.common.LoanMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.LoanMsg
             * @static
             * @param {pb.common.ILoanMsg} message LoanMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoanMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoanMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.LoanMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.LoanMsg} LoanMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoanMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.LoanMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.base = $root.pb.common.GameBaseMsg.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.amount = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a LoanMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.LoanMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.LoanMsg} LoanMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoanMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoanMsg message.
             * @function verify
             * @memberof pb.common.LoanMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoanMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.base != null && message.hasOwnProperty("base")) {
                    var error = $root.pb.common.GameBaseMsg.verify(message.base);
                    if (error)
                        return "base." + error;
                }
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isInteger(message.amount))
                        return "amount: integer expected";
                return null;
            };

            /**
             * Creates a LoanMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.LoanMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.LoanMsg} LoanMsg
             */
            LoanMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.LoanMsg)
                    return object;
                var message = new $root.pb.common.LoanMsg();
                if (object.base != null) {
                    if (typeof object.base !== "object")
                        throw TypeError(".pb.common.LoanMsg.base: object expected");
                    message.base = $root.pb.common.GameBaseMsg.fromObject(object.base);
                }
                if (object.amount != null)
                    message.amount = object.amount | 0;
                return message;
            };

            /**
             * Creates a plain object from a LoanMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.LoanMsg
             * @static
             * @param {pb.common.LoanMsg} message LoanMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoanMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.base = null;
                    object.amount = 0;
                }
                if (message.base != null && message.hasOwnProperty("base"))
                    object.base = $root.pb.common.GameBaseMsg.toObject(message.base, options);
                if (message.amount != null && message.hasOwnProperty("amount"))
                    object.amount = message.amount;
                return object;
            };

            /**
             * Converts this LoanMsg to JSON.
             * @function toJSON
             * @memberof pb.common.LoanMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoanMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return LoanMsg;
        })();

        common.RepayLoanReq = (function() {

            /**
             * Properties of a RepayLoanReq.
             * @memberof pb.common
             * @interface IRepayLoanReq
             * @property {pb.common.IAssetBaseReq|null} [req] RepayLoanReq req
             * @property {Long|null} [playerAssetId] RepayLoanReq playerAssetId
             * @property {number|null} [amount] RepayLoanReq amount
             */

            /**
             * Constructs a new RepayLoanReq.
             * @memberof pb.common
             * @classdesc Represents a RepayLoanReq.
             * @implements IRepayLoanReq
             * @constructor
             * @param {pb.common.IRepayLoanReq=} [properties] Properties to set
             */
            function RepayLoanReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RepayLoanReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.RepayLoanReq
             * @instance
             */
            RepayLoanReq.prototype.req = null;

            /**
             * RepayLoanReq playerAssetId.
             * @member {Long} playerAssetId
             * @memberof pb.common.RepayLoanReq
             * @instance
             */
            RepayLoanReq.prototype.playerAssetId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * RepayLoanReq amount.
             * @member {number} amount
             * @memberof pb.common.RepayLoanReq
             * @instance
             */
            RepayLoanReq.prototype.amount = 0;

            /**
             * Creates a new RepayLoanReq instance using the specified properties.
             * @function create
             * @memberof pb.common.RepayLoanReq
             * @static
             * @param {pb.common.IRepayLoanReq=} [properties] Properties to set
             * @returns {pb.common.RepayLoanReq} RepayLoanReq instance
             */
            RepayLoanReq.create = function create(properties) {
                return new RepayLoanReq(properties);
            };

            /**
             * Encodes the specified RepayLoanReq message. Does not implicitly {@link pb.common.RepayLoanReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.RepayLoanReq
             * @static
             * @param {pb.common.IRepayLoanReq} message RepayLoanReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RepayLoanReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.playerAssetId != null && message.hasOwnProperty("playerAssetId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.playerAssetId);
                if (message.amount != null && message.hasOwnProperty("amount"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.amount);
                return writer;
            };

            /**
             * Encodes the specified RepayLoanReq message, length delimited. Does not implicitly {@link pb.common.RepayLoanReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.RepayLoanReq
             * @static
             * @param {pb.common.IRepayLoanReq} message RepayLoanReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RepayLoanReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RepayLoanReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.RepayLoanReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.RepayLoanReq} RepayLoanReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RepayLoanReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.RepayLoanReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.playerAssetId = reader.int64();
                        break;
                    case 3:
                        message.amount = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RepayLoanReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.RepayLoanReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.RepayLoanReq} RepayLoanReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RepayLoanReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RepayLoanReq message.
             * @function verify
             * @memberof pb.common.RepayLoanReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RepayLoanReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                if (message.playerAssetId != null && message.hasOwnProperty("playerAssetId"))
                    if (!$util.isInteger(message.playerAssetId) && !(message.playerAssetId && $util.isInteger(message.playerAssetId.low) && $util.isInteger(message.playerAssetId.high)))
                        return "playerAssetId: integer|Long expected";
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isInteger(message.amount))
                        return "amount: integer expected";
                return null;
            };

            /**
             * Creates a RepayLoanReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.RepayLoanReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.RepayLoanReq} RepayLoanReq
             */
            RepayLoanReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.RepayLoanReq)
                    return object;
                var message = new $root.pb.common.RepayLoanReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.RepayLoanReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                if (object.playerAssetId != null)
                    if ($util.Long)
                        (message.playerAssetId = $util.Long.fromValue(object.playerAssetId)).unsigned = false;
                    else if (typeof object.playerAssetId === "string")
                        message.playerAssetId = parseInt(object.playerAssetId, 10);
                    else if (typeof object.playerAssetId === "number")
                        message.playerAssetId = object.playerAssetId;
                    else if (typeof object.playerAssetId === "object")
                        message.playerAssetId = new $util.LongBits(object.playerAssetId.low >>> 0, object.playerAssetId.high >>> 0).toNumber();
                if (object.amount != null)
                    message.amount = object.amount | 0;
                return message;
            };

            /**
             * Creates a plain object from a RepayLoanReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.RepayLoanReq
             * @static
             * @param {pb.common.RepayLoanReq} message RepayLoanReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RepayLoanReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.req = null;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.playerAssetId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.playerAssetId = options.longs === String ? "0" : 0;
                    object.amount = 0;
                }
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                if (message.playerAssetId != null && message.hasOwnProperty("playerAssetId"))
                    if (typeof message.playerAssetId === "number")
                        object.playerAssetId = options.longs === String ? String(message.playerAssetId) : message.playerAssetId;
                    else
                        object.playerAssetId = options.longs === String ? $util.Long.prototype.toString.call(message.playerAssetId) : options.longs === Number ? new $util.LongBits(message.playerAssetId.low >>> 0, message.playerAssetId.high >>> 0).toNumber() : message.playerAssetId;
                if (message.amount != null && message.hasOwnProperty("amount"))
                    object.amount = message.amount;
                return object;
            };

            /**
             * Converts this RepayLoanReq to JSON.
             * @function toJSON
             * @memberof pb.common.RepayLoanReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RepayLoanReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RepayLoanReq;
        })();

        common.RepayLoanRsp = (function() {

            /**
             * Properties of a RepayLoanRsp.
             * @memberof pb.common
             * @interface IRepayLoanRsp
             * @property {pb.common.IBaseRsp|null} [rsp] RepayLoanRsp rsp
             */

            /**
             * Constructs a new RepayLoanRsp.
             * @memberof pb.common
             * @classdesc Represents a RepayLoanRsp.
             * @implements IRepayLoanRsp
             * @constructor
             * @param {pb.common.IRepayLoanRsp=} [properties] Properties to set
             */
            function RepayLoanRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RepayLoanRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.RepayLoanRsp
             * @instance
             */
            RepayLoanRsp.prototype.rsp = null;

            /**
             * Creates a new RepayLoanRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.RepayLoanRsp
             * @static
             * @param {pb.common.IRepayLoanRsp=} [properties] Properties to set
             * @returns {pb.common.RepayLoanRsp} RepayLoanRsp instance
             */
            RepayLoanRsp.create = function create(properties) {
                return new RepayLoanRsp(properties);
            };

            /**
             * Encodes the specified RepayLoanRsp message. Does not implicitly {@link pb.common.RepayLoanRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.RepayLoanRsp
             * @static
             * @param {pb.common.IRepayLoanRsp} message RepayLoanRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RepayLoanRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified RepayLoanRsp message, length delimited. Does not implicitly {@link pb.common.RepayLoanRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.RepayLoanRsp
             * @static
             * @param {pb.common.IRepayLoanRsp} message RepayLoanRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RepayLoanRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RepayLoanRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.RepayLoanRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.RepayLoanRsp} RepayLoanRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RepayLoanRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.RepayLoanRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RepayLoanRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.RepayLoanRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.RepayLoanRsp} RepayLoanRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RepayLoanRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RepayLoanRsp message.
             * @function verify
             * @memberof pb.common.RepayLoanRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RepayLoanRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                return null;
            };

            /**
             * Creates a RepayLoanRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.RepayLoanRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.RepayLoanRsp} RepayLoanRsp
             */
            RepayLoanRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.RepayLoanRsp)
                    return object;
                var message = new $root.pb.common.RepayLoanRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.RepayLoanRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from a RepayLoanRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.RepayLoanRsp
             * @static
             * @param {pb.common.RepayLoanRsp} message RepayLoanRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RepayLoanRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                return object;
            };

            /**
             * Converts this RepayLoanRsp to JSON.
             * @function toJSON
             * @memberof pb.common.RepayLoanRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RepayLoanRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RepayLoanRsp;
        })();

        common.RepayLiabilitiesReq = (function() {

            /**
             * Properties of a RepayLiabilitiesReq.
             * @memberof pb.common
             * @interface IRepayLiabilitiesReq
             * @property {pb.common.IAssetBaseReq|null} [req] RepayLiabilitiesReq req
             * @property {Long|null} [playerAssetId] RepayLiabilitiesReq playerAssetId
             * @property {number|null} [amount] RepayLiabilitiesReq amount
             */

            /**
             * Constructs a new RepayLiabilitiesReq.
             * @memberof pb.common
             * @classdesc Represents a RepayLiabilitiesReq.
             * @implements IRepayLiabilitiesReq
             * @constructor
             * @param {pb.common.IRepayLiabilitiesReq=} [properties] Properties to set
             */
            function RepayLiabilitiesReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RepayLiabilitiesReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.RepayLiabilitiesReq
             * @instance
             */
            RepayLiabilitiesReq.prototype.req = null;

            /**
             * RepayLiabilitiesReq playerAssetId.
             * @member {Long} playerAssetId
             * @memberof pb.common.RepayLiabilitiesReq
             * @instance
             */
            RepayLiabilitiesReq.prototype.playerAssetId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * RepayLiabilitiesReq amount.
             * @member {number} amount
             * @memberof pb.common.RepayLiabilitiesReq
             * @instance
             */
            RepayLiabilitiesReq.prototype.amount = 0;

            /**
             * Creates a new RepayLiabilitiesReq instance using the specified properties.
             * @function create
             * @memberof pb.common.RepayLiabilitiesReq
             * @static
             * @param {pb.common.IRepayLiabilitiesReq=} [properties] Properties to set
             * @returns {pb.common.RepayLiabilitiesReq} RepayLiabilitiesReq instance
             */
            RepayLiabilitiesReq.create = function create(properties) {
                return new RepayLiabilitiesReq(properties);
            };

            /**
             * Encodes the specified RepayLiabilitiesReq message. Does not implicitly {@link pb.common.RepayLiabilitiesReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.RepayLiabilitiesReq
             * @static
             * @param {pb.common.IRepayLiabilitiesReq} message RepayLiabilitiesReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RepayLiabilitiesReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.playerAssetId != null && message.hasOwnProperty("playerAssetId"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.playerAssetId);
                if (message.amount != null && message.hasOwnProperty("amount"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.amount);
                return writer;
            };

            /**
             * Encodes the specified RepayLiabilitiesReq message, length delimited. Does not implicitly {@link pb.common.RepayLiabilitiesReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.RepayLiabilitiesReq
             * @static
             * @param {pb.common.IRepayLiabilitiesReq} message RepayLiabilitiesReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RepayLiabilitiesReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RepayLiabilitiesReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.RepayLiabilitiesReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.RepayLiabilitiesReq} RepayLiabilitiesReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RepayLiabilitiesReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.RepayLiabilitiesReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.playerAssetId = reader.int64();
                        break;
                    case 6:
                        message.amount = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RepayLiabilitiesReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.RepayLiabilitiesReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.RepayLiabilitiesReq} RepayLiabilitiesReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RepayLiabilitiesReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RepayLiabilitiesReq message.
             * @function verify
             * @memberof pb.common.RepayLiabilitiesReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RepayLiabilitiesReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                if (message.playerAssetId != null && message.hasOwnProperty("playerAssetId"))
                    if (!$util.isInteger(message.playerAssetId) && !(message.playerAssetId && $util.isInteger(message.playerAssetId.low) && $util.isInteger(message.playerAssetId.high)))
                        return "playerAssetId: integer|Long expected";
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isInteger(message.amount))
                        return "amount: integer expected";
                return null;
            };

            /**
             * Creates a RepayLiabilitiesReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.RepayLiabilitiesReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.RepayLiabilitiesReq} RepayLiabilitiesReq
             */
            RepayLiabilitiesReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.RepayLiabilitiesReq)
                    return object;
                var message = new $root.pb.common.RepayLiabilitiesReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.RepayLiabilitiesReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                if (object.playerAssetId != null)
                    if ($util.Long)
                        (message.playerAssetId = $util.Long.fromValue(object.playerAssetId)).unsigned = false;
                    else if (typeof object.playerAssetId === "string")
                        message.playerAssetId = parseInt(object.playerAssetId, 10);
                    else if (typeof object.playerAssetId === "number")
                        message.playerAssetId = object.playerAssetId;
                    else if (typeof object.playerAssetId === "object")
                        message.playerAssetId = new $util.LongBits(object.playerAssetId.low >>> 0, object.playerAssetId.high >>> 0).toNumber();
                if (object.amount != null)
                    message.amount = object.amount | 0;
                return message;
            };

            /**
             * Creates a plain object from a RepayLiabilitiesReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.RepayLiabilitiesReq
             * @static
             * @param {pb.common.RepayLiabilitiesReq} message RepayLiabilitiesReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RepayLiabilitiesReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.req = null;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.playerAssetId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.playerAssetId = options.longs === String ? "0" : 0;
                    object.amount = 0;
                }
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                if (message.playerAssetId != null && message.hasOwnProperty("playerAssetId"))
                    if (typeof message.playerAssetId === "number")
                        object.playerAssetId = options.longs === String ? String(message.playerAssetId) : message.playerAssetId;
                    else
                        object.playerAssetId = options.longs === String ? $util.Long.prototype.toString.call(message.playerAssetId) : options.longs === Number ? new $util.LongBits(message.playerAssetId.low >>> 0, message.playerAssetId.high >>> 0).toNumber() : message.playerAssetId;
                if (message.amount != null && message.hasOwnProperty("amount"))
                    object.amount = message.amount;
                return object;
            };

            /**
             * Converts this RepayLiabilitiesReq to JSON.
             * @function toJSON
             * @memberof pb.common.RepayLiabilitiesReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RepayLiabilitiesReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RepayLiabilitiesReq;
        })();

        common.RepayLiabilitiesRsp = (function() {

            /**
             * Properties of a RepayLiabilitiesRsp.
             * @memberof pb.common
             * @interface IRepayLiabilitiesRsp
             * @property {pb.common.IBaseRsp|null} [rsp] RepayLiabilitiesRsp rsp
             */

            /**
             * Constructs a new RepayLiabilitiesRsp.
             * @memberof pb.common
             * @classdesc Represents a RepayLiabilitiesRsp.
             * @implements IRepayLiabilitiesRsp
             * @constructor
             * @param {pb.common.IRepayLiabilitiesRsp=} [properties] Properties to set
             */
            function RepayLiabilitiesRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RepayLiabilitiesRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.RepayLiabilitiesRsp
             * @instance
             */
            RepayLiabilitiesRsp.prototype.rsp = null;

            /**
             * Creates a new RepayLiabilitiesRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.RepayLiabilitiesRsp
             * @static
             * @param {pb.common.IRepayLiabilitiesRsp=} [properties] Properties to set
             * @returns {pb.common.RepayLiabilitiesRsp} RepayLiabilitiesRsp instance
             */
            RepayLiabilitiesRsp.create = function create(properties) {
                return new RepayLiabilitiesRsp(properties);
            };

            /**
             * Encodes the specified RepayLiabilitiesRsp message. Does not implicitly {@link pb.common.RepayLiabilitiesRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.RepayLiabilitiesRsp
             * @static
             * @param {pb.common.IRepayLiabilitiesRsp} message RepayLiabilitiesRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RepayLiabilitiesRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified RepayLiabilitiesRsp message, length delimited. Does not implicitly {@link pb.common.RepayLiabilitiesRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.RepayLiabilitiesRsp
             * @static
             * @param {pb.common.IRepayLiabilitiesRsp} message RepayLiabilitiesRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RepayLiabilitiesRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RepayLiabilitiesRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.RepayLiabilitiesRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.RepayLiabilitiesRsp} RepayLiabilitiesRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RepayLiabilitiesRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.RepayLiabilitiesRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RepayLiabilitiesRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.RepayLiabilitiesRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.RepayLiabilitiesRsp} RepayLiabilitiesRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RepayLiabilitiesRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RepayLiabilitiesRsp message.
             * @function verify
             * @memberof pb.common.RepayLiabilitiesRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RepayLiabilitiesRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                return null;
            };

            /**
             * Creates a RepayLiabilitiesRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.RepayLiabilitiesRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.RepayLiabilitiesRsp} RepayLiabilitiesRsp
             */
            RepayLiabilitiesRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.RepayLiabilitiesRsp)
                    return object;
                var message = new $root.pb.common.RepayLiabilitiesRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.RepayLiabilitiesRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from a RepayLiabilitiesRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.RepayLiabilitiesRsp
             * @static
             * @param {pb.common.RepayLiabilitiesRsp} message RepayLiabilitiesRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RepayLiabilitiesRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                return object;
            };

            /**
             * Converts this RepayLiabilitiesRsp to JSON.
             * @function toJSON
             * @memberof pb.common.RepayLiabilitiesRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RepayLiabilitiesRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RepayLiabilitiesRsp;
        })();

        common.WageHikeRollReq = (function() {

            /**
             * Properties of a WageHikeRollReq.
             * @memberof pb.common
             * @interface IWageHikeRollReq
             * @property {pb.common.IAssetBaseReq|null} [req] WageHikeRollReq req
             */

            /**
             * Constructs a new WageHikeRollReq.
             * @memberof pb.common
             * @classdesc Represents a WageHikeRollReq.
             * @implements IWageHikeRollReq
             * @constructor
             * @param {pb.common.IWageHikeRollReq=} [properties] Properties to set
             */
            function WageHikeRollReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * WageHikeRollReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.WageHikeRollReq
             * @instance
             */
            WageHikeRollReq.prototype.req = null;

            /**
             * Creates a new WageHikeRollReq instance using the specified properties.
             * @function create
             * @memberof pb.common.WageHikeRollReq
             * @static
             * @param {pb.common.IWageHikeRollReq=} [properties] Properties to set
             * @returns {pb.common.WageHikeRollReq} WageHikeRollReq instance
             */
            WageHikeRollReq.create = function create(properties) {
                return new WageHikeRollReq(properties);
            };

            /**
             * Encodes the specified WageHikeRollReq message. Does not implicitly {@link pb.common.WageHikeRollReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.WageHikeRollReq
             * @static
             * @param {pb.common.IWageHikeRollReq} message WageHikeRollReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WageHikeRollReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified WageHikeRollReq message, length delimited. Does not implicitly {@link pb.common.WageHikeRollReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.WageHikeRollReq
             * @static
             * @param {pb.common.IWageHikeRollReq} message WageHikeRollReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WageHikeRollReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a WageHikeRollReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.WageHikeRollReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.WageHikeRollReq} WageHikeRollReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WageHikeRollReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.WageHikeRollReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a WageHikeRollReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.WageHikeRollReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.WageHikeRollReq} WageHikeRollReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WageHikeRollReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a WageHikeRollReq message.
             * @function verify
             * @memberof pb.common.WageHikeRollReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            WageHikeRollReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                return null;
            };

            /**
             * Creates a WageHikeRollReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.WageHikeRollReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.WageHikeRollReq} WageHikeRollReq
             */
            WageHikeRollReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.WageHikeRollReq)
                    return object;
                var message = new $root.pb.common.WageHikeRollReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.WageHikeRollReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                return message;
            };

            /**
             * Creates a plain object from a WageHikeRollReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.WageHikeRollReq
             * @static
             * @param {pb.common.WageHikeRollReq} message WageHikeRollReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            WageHikeRollReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.req = null;
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                return object;
            };

            /**
             * Converts this WageHikeRollReq to JSON.
             * @function toJSON
             * @memberof pb.common.WageHikeRollReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            WageHikeRollReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return WageHikeRollReq;
        })();

        common.WageHikeRollRsp = (function() {

            /**
             * Properties of a WageHikeRollRsp.
             * @memberof pb.common
             * @interface IWageHikeRollRsp
             * @property {pb.common.IBaseRsp|null} [rsp] WageHikeRollRsp rsp
             */

            /**
             * Constructs a new WageHikeRollRsp.
             * @memberof pb.common
             * @classdesc Represents a WageHikeRollRsp.
             * @implements IWageHikeRollRsp
             * @constructor
             * @param {pb.common.IWageHikeRollRsp=} [properties] Properties to set
             */
            function WageHikeRollRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * WageHikeRollRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.WageHikeRollRsp
             * @instance
             */
            WageHikeRollRsp.prototype.rsp = null;

            /**
             * Creates a new WageHikeRollRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.WageHikeRollRsp
             * @static
             * @param {pb.common.IWageHikeRollRsp=} [properties] Properties to set
             * @returns {pb.common.WageHikeRollRsp} WageHikeRollRsp instance
             */
            WageHikeRollRsp.create = function create(properties) {
                return new WageHikeRollRsp(properties);
            };

            /**
             * Encodes the specified WageHikeRollRsp message. Does not implicitly {@link pb.common.WageHikeRollRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.WageHikeRollRsp
             * @static
             * @param {pb.common.IWageHikeRollRsp} message WageHikeRollRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WageHikeRollRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified WageHikeRollRsp message, length delimited. Does not implicitly {@link pb.common.WageHikeRollRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.WageHikeRollRsp
             * @static
             * @param {pb.common.IWageHikeRollRsp} message WageHikeRollRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WageHikeRollRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a WageHikeRollRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.WageHikeRollRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.WageHikeRollRsp} WageHikeRollRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WageHikeRollRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.WageHikeRollRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a WageHikeRollRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.WageHikeRollRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.WageHikeRollRsp} WageHikeRollRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WageHikeRollRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a WageHikeRollRsp message.
             * @function verify
             * @memberof pb.common.WageHikeRollRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            WageHikeRollRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                return null;
            };

            /**
             * Creates a WageHikeRollRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.WageHikeRollRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.WageHikeRollRsp} WageHikeRollRsp
             */
            WageHikeRollRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.WageHikeRollRsp)
                    return object;
                var message = new $root.pb.common.WageHikeRollRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.WageHikeRollRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from a WageHikeRollRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.WageHikeRollRsp
             * @static
             * @param {pb.common.WageHikeRollRsp} message WageHikeRollRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            WageHikeRollRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                return object;
            };

            /**
             * Converts this WageHikeRollRsp to JSON.
             * @function toJSON
             * @memberof pb.common.WageHikeRollRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            WageHikeRollRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return WageHikeRollRsp;
        })();

        common.WageHikeMsg = (function() {

            /**
             * Properties of a WageHikeMsg.
             * @memberof pb.common
             * @interface IWageHikeMsg
             * @property {pb.common.IGameBaseMsg|null} [base] WageHikeMsg base
             * @property {number|null} [num] WageHikeMsg num
             * @property {number|null} [incr] WageHikeMsg incr
             * @property {boolean|null} [isPromotion] WageHikeMsg isPromotion
             * @property {pb.common.WageHikeMsg.IPromotion|null} [promotion] WageHikeMsg promotion
             */

            /**
             * Constructs a new WageHikeMsg.
             * @memberof pb.common
             * @classdesc Represents a WageHikeMsg.
             * @implements IWageHikeMsg
             * @constructor
             * @param {pb.common.IWageHikeMsg=} [properties] Properties to set
             */
            function WageHikeMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * WageHikeMsg base.
             * @member {pb.common.IGameBaseMsg|null|undefined} base
             * @memberof pb.common.WageHikeMsg
             * @instance
             */
            WageHikeMsg.prototype.base = null;

            /**
             * WageHikeMsg num.
             * @member {number} num
             * @memberof pb.common.WageHikeMsg
             * @instance
             */
            WageHikeMsg.prototype.num = 0;

            /**
             * WageHikeMsg incr.
             * @member {number} incr
             * @memberof pb.common.WageHikeMsg
             * @instance
             */
            WageHikeMsg.prototype.incr = 0;

            /**
             * WageHikeMsg isPromotion.
             * @member {boolean} isPromotion
             * @memberof pb.common.WageHikeMsg
             * @instance
             */
            WageHikeMsg.prototype.isPromotion = false;

            /**
             * WageHikeMsg promotion.
             * @member {pb.common.WageHikeMsg.IPromotion|null|undefined} promotion
             * @memberof pb.common.WageHikeMsg
             * @instance
             */
            WageHikeMsg.prototype.promotion = null;

            /**
             * Creates a new WageHikeMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.WageHikeMsg
             * @static
             * @param {pb.common.IWageHikeMsg=} [properties] Properties to set
             * @returns {pb.common.WageHikeMsg} WageHikeMsg instance
             */
            WageHikeMsg.create = function create(properties) {
                return new WageHikeMsg(properties);
            };

            /**
             * Encodes the specified WageHikeMsg message. Does not implicitly {@link pb.common.WageHikeMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.WageHikeMsg
             * @static
             * @param {pb.common.IWageHikeMsg} message WageHikeMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WageHikeMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.base != null && message.hasOwnProperty("base"))
                    $root.pb.common.GameBaseMsg.encode(message.base, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.num != null && message.hasOwnProperty("num"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.num);
                if (message.incr != null && message.hasOwnProperty("incr"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.incr);
                if (message.isPromotion != null && message.hasOwnProperty("isPromotion"))
                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.isPromotion);
                if (message.promotion != null && message.hasOwnProperty("promotion"))
                    $root.pb.common.WageHikeMsg.Promotion.encode(message.promotion, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified WageHikeMsg message, length delimited. Does not implicitly {@link pb.common.WageHikeMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.WageHikeMsg
             * @static
             * @param {pb.common.IWageHikeMsg} message WageHikeMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WageHikeMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a WageHikeMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.WageHikeMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.WageHikeMsg} WageHikeMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WageHikeMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.WageHikeMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.base = $root.pb.common.GameBaseMsg.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.num = reader.int32();
                        break;
                    case 3:
                        message.incr = reader.int32();
                        break;
                    case 4:
                        message.isPromotion = reader.bool();
                        break;
                    case 5:
                        message.promotion = $root.pb.common.WageHikeMsg.Promotion.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a WageHikeMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.WageHikeMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.WageHikeMsg} WageHikeMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WageHikeMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a WageHikeMsg message.
             * @function verify
             * @memberof pb.common.WageHikeMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            WageHikeMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.base != null && message.hasOwnProperty("base")) {
                    var error = $root.pb.common.GameBaseMsg.verify(message.base);
                    if (error)
                        return "base." + error;
                }
                if (message.num != null && message.hasOwnProperty("num"))
                    if (!$util.isInteger(message.num))
                        return "num: integer expected";
                if (message.incr != null && message.hasOwnProperty("incr"))
                    if (!$util.isInteger(message.incr))
                        return "incr: integer expected";
                if (message.isPromotion != null && message.hasOwnProperty("isPromotion"))
                    if (typeof message.isPromotion !== "boolean")
                        return "isPromotion: boolean expected";
                if (message.promotion != null && message.hasOwnProperty("promotion")) {
                    var error = $root.pb.common.WageHikeMsg.Promotion.verify(message.promotion);
                    if (error)
                        return "promotion." + error;
                }
                return null;
            };

            /**
             * Creates a WageHikeMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.WageHikeMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.WageHikeMsg} WageHikeMsg
             */
            WageHikeMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.WageHikeMsg)
                    return object;
                var message = new $root.pb.common.WageHikeMsg();
                if (object.base != null) {
                    if (typeof object.base !== "object")
                        throw TypeError(".pb.common.WageHikeMsg.base: object expected");
                    message.base = $root.pb.common.GameBaseMsg.fromObject(object.base);
                }
                if (object.num != null)
                    message.num = object.num | 0;
                if (object.incr != null)
                    message.incr = object.incr | 0;
                if (object.isPromotion != null)
                    message.isPromotion = Boolean(object.isPromotion);
                if (object.promotion != null) {
                    if (typeof object.promotion !== "object")
                        throw TypeError(".pb.common.WageHikeMsg.promotion: object expected");
                    message.promotion = $root.pb.common.WageHikeMsg.Promotion.fromObject(object.promotion);
                }
                return message;
            };

            /**
             * Creates a plain object from a WageHikeMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.WageHikeMsg
             * @static
             * @param {pb.common.WageHikeMsg} message WageHikeMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            WageHikeMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.base = null;
                    object.num = 0;
                    object.incr = 0;
                    object.isPromotion = false;
                    object.promotion = null;
                }
                if (message.base != null && message.hasOwnProperty("base"))
                    object.base = $root.pb.common.GameBaseMsg.toObject(message.base, options);
                if (message.num != null && message.hasOwnProperty("num"))
                    object.num = message.num;
                if (message.incr != null && message.hasOwnProperty("incr"))
                    object.incr = message.incr;
                if (message.isPromotion != null && message.hasOwnProperty("isPromotion"))
                    object.isPromotion = message.isPromotion;
                if (message.promotion != null && message.hasOwnProperty("promotion"))
                    object.promotion = $root.pb.common.WageHikeMsg.Promotion.toObject(message.promotion, options);
                return object;
            };

            /**
             * Converts this WageHikeMsg to JSON.
             * @function toJSON
             * @memberof pb.common.WageHikeMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            WageHikeMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            WageHikeMsg.Promotion = (function() {

                /**
                 * Properties of a Promotion.
                 * @memberof pb.common.WageHikeMsg
                 * @interface IPromotion
                 * @property {string|null} [before] Promotion before
                 * @property {string|null} [after] Promotion after
                 */

                /**
                 * Constructs a new Promotion.
                 * @memberof pb.common.WageHikeMsg
                 * @classdesc Represents a Promotion.
                 * @implements IPromotion
                 * @constructor
                 * @param {pb.common.WageHikeMsg.IPromotion=} [properties] Properties to set
                 */
                function Promotion(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Promotion before.
                 * @member {string} before
                 * @memberof pb.common.WageHikeMsg.Promotion
                 * @instance
                 */
                Promotion.prototype.before = "";

                /**
                 * Promotion after.
                 * @member {string} after
                 * @memberof pb.common.WageHikeMsg.Promotion
                 * @instance
                 */
                Promotion.prototype.after = "";

                /**
                 * Creates a new Promotion instance using the specified properties.
                 * @function create
                 * @memberof pb.common.WageHikeMsg.Promotion
                 * @static
                 * @param {pb.common.WageHikeMsg.IPromotion=} [properties] Properties to set
                 * @returns {pb.common.WageHikeMsg.Promotion} Promotion instance
                 */
                Promotion.create = function create(properties) {
                    return new Promotion(properties);
                };

                /**
                 * Encodes the specified Promotion message. Does not implicitly {@link pb.common.WageHikeMsg.Promotion.verify|verify} messages.
                 * @function encode
                 * @memberof pb.common.WageHikeMsg.Promotion
                 * @static
                 * @param {pb.common.WageHikeMsg.IPromotion} message Promotion message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Promotion.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.before != null && message.hasOwnProperty("before"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.before);
                    if (message.after != null && message.hasOwnProperty("after"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.after);
                    return writer;
                };

                /**
                 * Encodes the specified Promotion message, length delimited. Does not implicitly {@link pb.common.WageHikeMsg.Promotion.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof pb.common.WageHikeMsg.Promotion
                 * @static
                 * @param {pb.common.WageHikeMsg.IPromotion} message Promotion message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Promotion.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Promotion message from the specified reader or buffer.
                 * @function decode
                 * @memberof pb.common.WageHikeMsg.Promotion
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {pb.common.WageHikeMsg.Promotion} Promotion
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Promotion.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.WageHikeMsg.Promotion();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.before = reader.string();
                            break;
                        case 2:
                            message.after = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Promotion message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof pb.common.WageHikeMsg.Promotion
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {pb.common.WageHikeMsg.Promotion} Promotion
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Promotion.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Promotion message.
                 * @function verify
                 * @memberof pb.common.WageHikeMsg.Promotion
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Promotion.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.before != null && message.hasOwnProperty("before"))
                        if (!$util.isString(message.before))
                            return "before: string expected";
                    if (message.after != null && message.hasOwnProperty("after"))
                        if (!$util.isString(message.after))
                            return "after: string expected";
                    return null;
                };

                /**
                 * Creates a Promotion message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof pb.common.WageHikeMsg.Promotion
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {pb.common.WageHikeMsg.Promotion} Promotion
                 */
                Promotion.fromObject = function fromObject(object) {
                    if (object instanceof $root.pb.common.WageHikeMsg.Promotion)
                        return object;
                    var message = new $root.pb.common.WageHikeMsg.Promotion();
                    if (object.before != null)
                        message.before = String(object.before);
                    if (object.after != null)
                        message.after = String(object.after);
                    return message;
                };

                /**
                 * Creates a plain object from a Promotion message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof pb.common.WageHikeMsg.Promotion
                 * @static
                 * @param {pb.common.WageHikeMsg.Promotion} message Promotion
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Promotion.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.before = "";
                        object.after = "";
                    }
                    if (message.before != null && message.hasOwnProperty("before"))
                        object.before = message.before;
                    if (message.after != null && message.hasOwnProperty("after"))
                        object.after = message.after;
                    return object;
                };

                /**
                 * Converts this Promotion to JSON.
                 * @function toJSON
                 * @memberof pb.common.WageHikeMsg.Promotion
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Promotion.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Promotion;
            })();

            return WageHikeMsg;
        })();

        common.GetFinancialReportsReq = (function() {

            /**
             * Properties of a GetFinancialReportsReq.
             * @memberof pb.common
             * @interface IGetFinancialReportsReq
             * @property {pb.common.IAssetBaseReq|null} [req] GetFinancialReportsReq req
             */

            /**
             * Constructs a new GetFinancialReportsReq.
             * @memberof pb.common
             * @classdesc Represents a GetFinancialReportsReq.
             * @implements IGetFinancialReportsReq
             * @constructor
             * @param {pb.common.IGetFinancialReportsReq=} [properties] Properties to set
             */
            function GetFinancialReportsReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GetFinancialReportsReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.GetFinancialReportsReq
             * @instance
             */
            GetFinancialReportsReq.prototype.req = null;

            /**
             * Creates a new GetFinancialReportsReq instance using the specified properties.
             * @function create
             * @memberof pb.common.GetFinancialReportsReq
             * @static
             * @param {pb.common.IGetFinancialReportsReq=} [properties] Properties to set
             * @returns {pb.common.GetFinancialReportsReq} GetFinancialReportsReq instance
             */
            GetFinancialReportsReq.create = function create(properties) {
                return new GetFinancialReportsReq(properties);
            };

            /**
             * Encodes the specified GetFinancialReportsReq message. Does not implicitly {@link pb.common.GetFinancialReportsReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GetFinancialReportsReq
             * @static
             * @param {pb.common.IGetFinancialReportsReq} message GetFinancialReportsReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetFinancialReportsReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GetFinancialReportsReq message, length delimited. Does not implicitly {@link pb.common.GetFinancialReportsReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GetFinancialReportsReq
             * @static
             * @param {pb.common.IGetFinancialReportsReq} message GetFinancialReportsReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetFinancialReportsReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetFinancialReportsReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GetFinancialReportsReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GetFinancialReportsReq} GetFinancialReportsReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetFinancialReportsReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GetFinancialReportsReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetFinancialReportsReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GetFinancialReportsReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GetFinancialReportsReq} GetFinancialReportsReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetFinancialReportsReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetFinancialReportsReq message.
             * @function verify
             * @memberof pb.common.GetFinancialReportsReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetFinancialReportsReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                return null;
            };

            /**
             * Creates a GetFinancialReportsReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GetFinancialReportsReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GetFinancialReportsReq} GetFinancialReportsReq
             */
            GetFinancialReportsReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GetFinancialReportsReq)
                    return object;
                var message = new $root.pb.common.GetFinancialReportsReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.GetFinancialReportsReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                return message;
            };

            /**
             * Creates a plain object from a GetFinancialReportsReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GetFinancialReportsReq
             * @static
             * @param {pb.common.GetFinancialReportsReq} message GetFinancialReportsReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetFinancialReportsReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.req = null;
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                return object;
            };

            /**
             * Converts this GetFinancialReportsReq to JSON.
             * @function toJSON
             * @memberof pb.common.GetFinancialReportsReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetFinancialReportsReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GetFinancialReportsReq;
        })();

        common.GetFinancialReportsRsp = (function() {

            /**
             * Properties of a GetFinancialReportsRsp.
             * @memberof pb.common
             * @interface IGetFinancialReportsRsp
             * @property {pb.common.IBaseRsp|null} [rsp] GetFinancialReportsRsp rsp
             * @property {Array.<pb.common.GetFinancialReportsRsp.IFinancialReport>|null} [data] GetFinancialReportsRsp data
             */

            /**
             * Constructs a new GetFinancialReportsRsp.
             * @memberof pb.common
             * @classdesc Represents a GetFinancialReportsRsp.
             * @implements IGetFinancialReportsRsp
             * @constructor
             * @param {pb.common.IGetFinancialReportsRsp=} [properties] Properties to set
             */
            function GetFinancialReportsRsp(properties) {
                this.data = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GetFinancialReportsRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.GetFinancialReportsRsp
             * @instance
             */
            GetFinancialReportsRsp.prototype.rsp = null;

            /**
             * GetFinancialReportsRsp data.
             * @member {Array.<pb.common.GetFinancialReportsRsp.IFinancialReport>} data
             * @memberof pb.common.GetFinancialReportsRsp
             * @instance
             */
            GetFinancialReportsRsp.prototype.data = $util.emptyArray;

            /**
             * Creates a new GetFinancialReportsRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.GetFinancialReportsRsp
             * @static
             * @param {pb.common.IGetFinancialReportsRsp=} [properties] Properties to set
             * @returns {pb.common.GetFinancialReportsRsp} GetFinancialReportsRsp instance
             */
            GetFinancialReportsRsp.create = function create(properties) {
                return new GetFinancialReportsRsp(properties);
            };

            /**
             * Encodes the specified GetFinancialReportsRsp message. Does not implicitly {@link pb.common.GetFinancialReportsRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GetFinancialReportsRsp
             * @static
             * @param {pb.common.IGetFinancialReportsRsp} message GetFinancialReportsRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetFinancialReportsRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.data != null && message.data.length)
                    for (var i = 0; i < message.data.length; ++i)
                        $root.pb.common.GetFinancialReportsRsp.FinancialReport.encode(message.data[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GetFinancialReportsRsp message, length delimited. Does not implicitly {@link pb.common.GetFinancialReportsRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GetFinancialReportsRsp
             * @static
             * @param {pb.common.IGetFinancialReportsRsp} message GetFinancialReportsRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetFinancialReportsRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetFinancialReportsRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GetFinancialReportsRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GetFinancialReportsRsp} GetFinancialReportsRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetFinancialReportsRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GetFinancialReportsRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.data && message.data.length))
                            message.data = [];
                        message.data.push($root.pb.common.GetFinancialReportsRsp.FinancialReport.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetFinancialReportsRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GetFinancialReportsRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GetFinancialReportsRsp} GetFinancialReportsRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetFinancialReportsRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetFinancialReportsRsp message.
             * @function verify
             * @memberof pb.common.GetFinancialReportsRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetFinancialReportsRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    if (!Array.isArray(message.data))
                        return "data: array expected";
                    for (var i = 0; i < message.data.length; ++i) {
                        var error = $root.pb.common.GetFinancialReportsRsp.FinancialReport.verify(message.data[i]);
                        if (error)
                            return "data." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GetFinancialReportsRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GetFinancialReportsRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GetFinancialReportsRsp} GetFinancialReportsRsp
             */
            GetFinancialReportsRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GetFinancialReportsRsp)
                    return object;
                var message = new $root.pb.common.GetFinancialReportsRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.GetFinancialReportsRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                if (object.data) {
                    if (!Array.isArray(object.data))
                        throw TypeError(".pb.common.GetFinancialReportsRsp.data: array expected");
                    message.data = [];
                    for (var i = 0; i < object.data.length; ++i) {
                        if (typeof object.data[i] !== "object")
                            throw TypeError(".pb.common.GetFinancialReportsRsp.data: object expected");
                        message.data[i] = $root.pb.common.GetFinancialReportsRsp.FinancialReport.fromObject(object.data[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GetFinancialReportsRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GetFinancialReportsRsp
             * @static
             * @param {pb.common.GetFinancialReportsRsp} message GetFinancialReportsRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetFinancialReportsRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.data = [];
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                if (message.data && message.data.length) {
                    object.data = [];
                    for (var j = 0; j < message.data.length; ++j)
                        object.data[j] = $root.pb.common.GetFinancialReportsRsp.FinancialReport.toObject(message.data[j], options);
                }
                return object;
            };

            /**
             * Converts this GetFinancialReportsRsp to JSON.
             * @function toJSON
             * @memberof pb.common.GetFinancialReportsRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetFinancialReportsRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            GetFinancialReportsRsp.FinancialReport = (function() {

                /**
                 * Properties of a FinancialReport.
                 * @memberof pb.common.GetFinancialReportsRsp
                 * @interface IFinancialReport
                 * @property {number|null} [MonthSalary] FinancialReport MonthSalary
                 * @property {number|null} [MonthExpense] FinancialReport MonthExpense
                 * @property {number|null} [MonthIncomeExSalary] FinancialReport MonthIncomeExSalary
                 * @property {number|null} [MonthCashFlow] FinancialReport MonthCashFlow
                 * @property {number|null} [TotalCash] FinancialReport TotalCash
                 */

                /**
                 * Constructs a new FinancialReport.
                 * @memberof pb.common.GetFinancialReportsRsp
                 * @classdesc Represents a FinancialReport.
                 * @implements IFinancialReport
                 * @constructor
                 * @param {pb.common.GetFinancialReportsRsp.IFinancialReport=} [properties] Properties to set
                 */
                function FinancialReport(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * FinancialReport MonthSalary.
                 * @member {number} MonthSalary
                 * @memberof pb.common.GetFinancialReportsRsp.FinancialReport
                 * @instance
                 */
                FinancialReport.prototype.MonthSalary = 0;

                /**
                 * FinancialReport MonthExpense.
                 * @member {number} MonthExpense
                 * @memberof pb.common.GetFinancialReportsRsp.FinancialReport
                 * @instance
                 */
                FinancialReport.prototype.MonthExpense = 0;

                /**
                 * FinancialReport MonthIncomeExSalary.
                 * @member {number} MonthIncomeExSalary
                 * @memberof pb.common.GetFinancialReportsRsp.FinancialReport
                 * @instance
                 */
                FinancialReport.prototype.MonthIncomeExSalary = 0;

                /**
                 * FinancialReport MonthCashFlow.
                 * @member {number} MonthCashFlow
                 * @memberof pb.common.GetFinancialReportsRsp.FinancialReport
                 * @instance
                 */
                FinancialReport.prototype.MonthCashFlow = 0;

                /**
                 * FinancialReport TotalCash.
                 * @member {number} TotalCash
                 * @memberof pb.common.GetFinancialReportsRsp.FinancialReport
                 * @instance
                 */
                FinancialReport.prototype.TotalCash = 0;

                /**
                 * Creates a new FinancialReport instance using the specified properties.
                 * @function create
                 * @memberof pb.common.GetFinancialReportsRsp.FinancialReport
                 * @static
                 * @param {pb.common.GetFinancialReportsRsp.IFinancialReport=} [properties] Properties to set
                 * @returns {pb.common.GetFinancialReportsRsp.FinancialReport} FinancialReport instance
                 */
                FinancialReport.create = function create(properties) {
                    return new FinancialReport(properties);
                };

                /**
                 * Encodes the specified FinancialReport message. Does not implicitly {@link pb.common.GetFinancialReportsRsp.FinancialReport.verify|verify} messages.
                 * @function encode
                 * @memberof pb.common.GetFinancialReportsRsp.FinancialReport
                 * @static
                 * @param {pb.common.GetFinancialReportsRsp.IFinancialReport} message FinancialReport message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FinancialReport.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.MonthSalary != null && message.hasOwnProperty("MonthSalary"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.MonthSalary);
                    if (message.MonthExpense != null && message.hasOwnProperty("MonthExpense"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.MonthExpense);
                    if (message.MonthIncomeExSalary != null && message.hasOwnProperty("MonthIncomeExSalary"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.MonthIncomeExSalary);
                    if (message.MonthCashFlow != null && message.hasOwnProperty("MonthCashFlow"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.MonthCashFlow);
                    if (message.TotalCash != null && message.hasOwnProperty("TotalCash"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.TotalCash);
                    return writer;
                };

                /**
                 * Encodes the specified FinancialReport message, length delimited. Does not implicitly {@link pb.common.GetFinancialReportsRsp.FinancialReport.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof pb.common.GetFinancialReportsRsp.FinancialReport
                 * @static
                 * @param {pb.common.GetFinancialReportsRsp.IFinancialReport} message FinancialReport message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FinancialReport.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a FinancialReport message from the specified reader or buffer.
                 * @function decode
                 * @memberof pb.common.GetFinancialReportsRsp.FinancialReport
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {pb.common.GetFinancialReportsRsp.FinancialReport} FinancialReport
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FinancialReport.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GetFinancialReportsRsp.FinancialReport();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.MonthSalary = reader.int32();
                            break;
                        case 3:
                            message.MonthExpense = reader.int32();
                            break;
                        case 4:
                            message.MonthIncomeExSalary = reader.int32();
                            break;
                        case 5:
                            message.MonthCashFlow = reader.int32();
                            break;
                        case 6:
                            message.TotalCash = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a FinancialReport message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof pb.common.GetFinancialReportsRsp.FinancialReport
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {pb.common.GetFinancialReportsRsp.FinancialReport} FinancialReport
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FinancialReport.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a FinancialReport message.
                 * @function verify
                 * @memberof pb.common.GetFinancialReportsRsp.FinancialReport
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FinancialReport.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.MonthSalary != null && message.hasOwnProperty("MonthSalary"))
                        if (!$util.isInteger(message.MonthSalary))
                            return "MonthSalary: integer expected";
                    if (message.MonthExpense != null && message.hasOwnProperty("MonthExpense"))
                        if (!$util.isInteger(message.MonthExpense))
                            return "MonthExpense: integer expected";
                    if (message.MonthIncomeExSalary != null && message.hasOwnProperty("MonthIncomeExSalary"))
                        if (!$util.isInteger(message.MonthIncomeExSalary))
                            return "MonthIncomeExSalary: integer expected";
                    if (message.MonthCashFlow != null && message.hasOwnProperty("MonthCashFlow"))
                        if (!$util.isInteger(message.MonthCashFlow))
                            return "MonthCashFlow: integer expected";
                    if (message.TotalCash != null && message.hasOwnProperty("TotalCash"))
                        if (!$util.isInteger(message.TotalCash))
                            return "TotalCash: integer expected";
                    return null;
                };

                /**
                 * Creates a FinancialReport message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof pb.common.GetFinancialReportsRsp.FinancialReport
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {pb.common.GetFinancialReportsRsp.FinancialReport} FinancialReport
                 */
                FinancialReport.fromObject = function fromObject(object) {
                    if (object instanceof $root.pb.common.GetFinancialReportsRsp.FinancialReport)
                        return object;
                    var message = new $root.pb.common.GetFinancialReportsRsp.FinancialReport();
                    if (object.MonthSalary != null)
                        message.MonthSalary = object.MonthSalary | 0;
                    if (object.MonthExpense != null)
                        message.MonthExpense = object.MonthExpense | 0;
                    if (object.MonthIncomeExSalary != null)
                        message.MonthIncomeExSalary = object.MonthIncomeExSalary | 0;
                    if (object.MonthCashFlow != null)
                        message.MonthCashFlow = object.MonthCashFlow | 0;
                    if (object.TotalCash != null)
                        message.TotalCash = object.TotalCash | 0;
                    return message;
                };

                /**
                 * Creates a plain object from a FinancialReport message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof pb.common.GetFinancialReportsRsp.FinancialReport
                 * @static
                 * @param {pb.common.GetFinancialReportsRsp.FinancialReport} message FinancialReport
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FinancialReport.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.MonthSalary = 0;
                        object.MonthExpense = 0;
                        object.MonthIncomeExSalary = 0;
                        object.MonthCashFlow = 0;
                        object.TotalCash = 0;
                    }
                    if (message.MonthSalary != null && message.hasOwnProperty("MonthSalary"))
                        object.MonthSalary = message.MonthSalary;
                    if (message.MonthExpense != null && message.hasOwnProperty("MonthExpense"))
                        object.MonthExpense = message.MonthExpense;
                    if (message.MonthIncomeExSalary != null && message.hasOwnProperty("MonthIncomeExSalary"))
                        object.MonthIncomeExSalary = message.MonthIncomeExSalary;
                    if (message.MonthCashFlow != null && message.hasOwnProperty("MonthCashFlow"))
                        object.MonthCashFlow = message.MonthCashFlow;
                    if (message.TotalCash != null && message.hasOwnProperty("TotalCash"))
                        object.TotalCash = message.TotalCash;
                    return object;
                };

                /**
                 * Converts this FinancialReport to JSON.
                 * @function toJSON
                 * @memberof pb.common.GetFinancialReportsRsp.FinancialReport
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FinancialReport.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return FinancialReport;
            })();

            return GetFinancialReportsRsp;
        })();

        common.GetPlayerAssetReq = (function() {

            /**
             * Properties of a GetPlayerAssetReq.
             * @memberof pb.common
             * @interface IGetPlayerAssetReq
             * @property {pb.common.IAssetBaseReq|null} [req] GetPlayerAssetReq req
             */

            /**
             * Constructs a new GetPlayerAssetReq.
             * @memberof pb.common
             * @classdesc Represents a GetPlayerAssetReq.
             * @implements IGetPlayerAssetReq
             * @constructor
             * @param {pb.common.IGetPlayerAssetReq=} [properties] Properties to set
             */
            function GetPlayerAssetReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GetPlayerAssetReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.GetPlayerAssetReq
             * @instance
             */
            GetPlayerAssetReq.prototype.req = null;

            /**
             * Creates a new GetPlayerAssetReq instance using the specified properties.
             * @function create
             * @memberof pb.common.GetPlayerAssetReq
             * @static
             * @param {pb.common.IGetPlayerAssetReq=} [properties] Properties to set
             * @returns {pb.common.GetPlayerAssetReq} GetPlayerAssetReq instance
             */
            GetPlayerAssetReq.create = function create(properties) {
                return new GetPlayerAssetReq(properties);
            };

            /**
             * Encodes the specified GetPlayerAssetReq message. Does not implicitly {@link pb.common.GetPlayerAssetReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GetPlayerAssetReq
             * @static
             * @param {pb.common.IGetPlayerAssetReq} message GetPlayerAssetReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetPlayerAssetReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GetPlayerAssetReq message, length delimited. Does not implicitly {@link pb.common.GetPlayerAssetReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GetPlayerAssetReq
             * @static
             * @param {pb.common.IGetPlayerAssetReq} message GetPlayerAssetReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetPlayerAssetReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetPlayerAssetReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GetPlayerAssetReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GetPlayerAssetReq} GetPlayerAssetReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetPlayerAssetReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GetPlayerAssetReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetPlayerAssetReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GetPlayerAssetReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GetPlayerAssetReq} GetPlayerAssetReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetPlayerAssetReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetPlayerAssetReq message.
             * @function verify
             * @memberof pb.common.GetPlayerAssetReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetPlayerAssetReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                return null;
            };

            /**
             * Creates a GetPlayerAssetReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GetPlayerAssetReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GetPlayerAssetReq} GetPlayerAssetReq
             */
            GetPlayerAssetReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GetPlayerAssetReq)
                    return object;
                var message = new $root.pb.common.GetPlayerAssetReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.GetPlayerAssetReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                return message;
            };

            /**
             * Creates a plain object from a GetPlayerAssetReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GetPlayerAssetReq
             * @static
             * @param {pb.common.GetPlayerAssetReq} message GetPlayerAssetReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetPlayerAssetReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.req = null;
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                return object;
            };

            /**
             * Converts this GetPlayerAssetReq to JSON.
             * @function toJSON
             * @memberof pb.common.GetPlayerAssetReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetPlayerAssetReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GetPlayerAssetReq;
        })();

        common.GetPlayerAssetRsp = (function() {

            /**
             * Properties of a GetPlayerAssetRsp.
             * @memberof pb.common
             * @interface IGetPlayerAssetRsp
             * @property {pb.common.IBaseRsp|null} [rsp] GetPlayerAssetRsp rsp
             * @property {Array.<pb.common.IPlayerAsset>|null} [data] GetPlayerAssetRsp data
             */

            /**
             * Constructs a new GetPlayerAssetRsp.
             * @memberof pb.common
             * @classdesc Represents a GetPlayerAssetRsp.
             * @implements IGetPlayerAssetRsp
             * @constructor
             * @param {pb.common.IGetPlayerAssetRsp=} [properties] Properties to set
             */
            function GetPlayerAssetRsp(properties) {
                this.data = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GetPlayerAssetRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.GetPlayerAssetRsp
             * @instance
             */
            GetPlayerAssetRsp.prototype.rsp = null;

            /**
             * GetPlayerAssetRsp data.
             * @member {Array.<pb.common.IPlayerAsset>} data
             * @memberof pb.common.GetPlayerAssetRsp
             * @instance
             */
            GetPlayerAssetRsp.prototype.data = $util.emptyArray;

            /**
             * Creates a new GetPlayerAssetRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.GetPlayerAssetRsp
             * @static
             * @param {pb.common.IGetPlayerAssetRsp=} [properties] Properties to set
             * @returns {pb.common.GetPlayerAssetRsp} GetPlayerAssetRsp instance
             */
            GetPlayerAssetRsp.create = function create(properties) {
                return new GetPlayerAssetRsp(properties);
            };

            /**
             * Encodes the specified GetPlayerAssetRsp message. Does not implicitly {@link pb.common.GetPlayerAssetRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GetPlayerAssetRsp
             * @static
             * @param {pb.common.IGetPlayerAssetRsp} message GetPlayerAssetRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetPlayerAssetRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.data != null && message.data.length)
                    for (var i = 0; i < message.data.length; ++i)
                        $root.pb.common.PlayerAsset.encode(message.data[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GetPlayerAssetRsp message, length delimited. Does not implicitly {@link pb.common.GetPlayerAssetRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GetPlayerAssetRsp
             * @static
             * @param {pb.common.IGetPlayerAssetRsp} message GetPlayerAssetRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetPlayerAssetRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetPlayerAssetRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GetPlayerAssetRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GetPlayerAssetRsp} GetPlayerAssetRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetPlayerAssetRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GetPlayerAssetRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.data && message.data.length))
                            message.data = [];
                        message.data.push($root.pb.common.PlayerAsset.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetPlayerAssetRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GetPlayerAssetRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GetPlayerAssetRsp} GetPlayerAssetRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetPlayerAssetRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetPlayerAssetRsp message.
             * @function verify
             * @memberof pb.common.GetPlayerAssetRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetPlayerAssetRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    if (!Array.isArray(message.data))
                        return "data: array expected";
                    for (var i = 0; i < message.data.length; ++i) {
                        var error = $root.pb.common.PlayerAsset.verify(message.data[i]);
                        if (error)
                            return "data." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GetPlayerAssetRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GetPlayerAssetRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GetPlayerAssetRsp} GetPlayerAssetRsp
             */
            GetPlayerAssetRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GetPlayerAssetRsp)
                    return object;
                var message = new $root.pb.common.GetPlayerAssetRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.GetPlayerAssetRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                if (object.data) {
                    if (!Array.isArray(object.data))
                        throw TypeError(".pb.common.GetPlayerAssetRsp.data: array expected");
                    message.data = [];
                    for (var i = 0; i < object.data.length; ++i) {
                        if (typeof object.data[i] !== "object")
                            throw TypeError(".pb.common.GetPlayerAssetRsp.data: object expected");
                        message.data[i] = $root.pb.common.PlayerAsset.fromObject(object.data[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GetPlayerAssetRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GetPlayerAssetRsp
             * @static
             * @param {pb.common.GetPlayerAssetRsp} message GetPlayerAssetRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetPlayerAssetRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.data = [];
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                if (message.data && message.data.length) {
                    object.data = [];
                    for (var j = 0; j < message.data.length; ++j)
                        object.data[j] = $root.pb.common.PlayerAsset.toObject(message.data[j], options);
                }
                return object;
            };

            /**
             * Converts this GetPlayerAssetRsp to JSON.
             * @function toJSON
             * @memberof pb.common.GetPlayerAssetRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetPlayerAssetRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GetPlayerAssetRsp;
        })();

        common.GetPlayerLoanAssetReq = (function() {

            /**
             * Properties of a GetPlayerLoanAssetReq.
             * @memberof pb.common
             * @interface IGetPlayerLoanAssetReq
             * @property {pb.common.IAssetBaseReq|null} [req] GetPlayerLoanAssetReq req
             */

            /**
             * Constructs a new GetPlayerLoanAssetReq.
             * @memberof pb.common
             * @classdesc Represents a GetPlayerLoanAssetReq.
             * @implements IGetPlayerLoanAssetReq
             * @constructor
             * @param {pb.common.IGetPlayerLoanAssetReq=} [properties] Properties to set
             */
            function GetPlayerLoanAssetReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GetPlayerLoanAssetReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.GetPlayerLoanAssetReq
             * @instance
             */
            GetPlayerLoanAssetReq.prototype.req = null;

            /**
             * Creates a new GetPlayerLoanAssetReq instance using the specified properties.
             * @function create
             * @memberof pb.common.GetPlayerLoanAssetReq
             * @static
             * @param {pb.common.IGetPlayerLoanAssetReq=} [properties] Properties to set
             * @returns {pb.common.GetPlayerLoanAssetReq} GetPlayerLoanAssetReq instance
             */
            GetPlayerLoanAssetReq.create = function create(properties) {
                return new GetPlayerLoanAssetReq(properties);
            };

            /**
             * Encodes the specified GetPlayerLoanAssetReq message. Does not implicitly {@link pb.common.GetPlayerLoanAssetReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GetPlayerLoanAssetReq
             * @static
             * @param {pb.common.IGetPlayerLoanAssetReq} message GetPlayerLoanAssetReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetPlayerLoanAssetReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GetPlayerLoanAssetReq message, length delimited. Does not implicitly {@link pb.common.GetPlayerLoanAssetReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GetPlayerLoanAssetReq
             * @static
             * @param {pb.common.IGetPlayerLoanAssetReq} message GetPlayerLoanAssetReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetPlayerLoanAssetReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetPlayerLoanAssetReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GetPlayerLoanAssetReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GetPlayerLoanAssetReq} GetPlayerLoanAssetReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetPlayerLoanAssetReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GetPlayerLoanAssetReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetPlayerLoanAssetReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GetPlayerLoanAssetReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GetPlayerLoanAssetReq} GetPlayerLoanAssetReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetPlayerLoanAssetReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetPlayerLoanAssetReq message.
             * @function verify
             * @memberof pb.common.GetPlayerLoanAssetReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetPlayerLoanAssetReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                return null;
            };

            /**
             * Creates a GetPlayerLoanAssetReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GetPlayerLoanAssetReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GetPlayerLoanAssetReq} GetPlayerLoanAssetReq
             */
            GetPlayerLoanAssetReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GetPlayerLoanAssetReq)
                    return object;
                var message = new $root.pb.common.GetPlayerLoanAssetReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.GetPlayerLoanAssetReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                return message;
            };

            /**
             * Creates a plain object from a GetPlayerLoanAssetReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GetPlayerLoanAssetReq
             * @static
             * @param {pb.common.GetPlayerLoanAssetReq} message GetPlayerLoanAssetReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetPlayerLoanAssetReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.req = null;
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                return object;
            };

            /**
             * Converts this GetPlayerLoanAssetReq to JSON.
             * @function toJSON
             * @memberof pb.common.GetPlayerLoanAssetReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetPlayerLoanAssetReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GetPlayerLoanAssetReq;
        })();

        common.GetPlayerLoanAssetRsp = (function() {

            /**
             * Properties of a GetPlayerLoanAssetRsp.
             * @memberof pb.common
             * @interface IGetPlayerLoanAssetRsp
             * @property {pb.common.IBaseRsp|null} [rsp] GetPlayerLoanAssetRsp rsp
             * @property {Array.<pb.common.IPlayerAsset>|null} [data] GetPlayerLoanAssetRsp data
             */

            /**
             * Constructs a new GetPlayerLoanAssetRsp.
             * @memberof pb.common
             * @classdesc Represents a GetPlayerLoanAssetRsp.
             * @implements IGetPlayerLoanAssetRsp
             * @constructor
             * @param {pb.common.IGetPlayerLoanAssetRsp=} [properties] Properties to set
             */
            function GetPlayerLoanAssetRsp(properties) {
                this.data = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GetPlayerLoanAssetRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.GetPlayerLoanAssetRsp
             * @instance
             */
            GetPlayerLoanAssetRsp.prototype.rsp = null;

            /**
             * GetPlayerLoanAssetRsp data.
             * @member {Array.<pb.common.IPlayerAsset>} data
             * @memberof pb.common.GetPlayerLoanAssetRsp
             * @instance
             */
            GetPlayerLoanAssetRsp.prototype.data = $util.emptyArray;

            /**
             * Creates a new GetPlayerLoanAssetRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.GetPlayerLoanAssetRsp
             * @static
             * @param {pb.common.IGetPlayerLoanAssetRsp=} [properties] Properties to set
             * @returns {pb.common.GetPlayerLoanAssetRsp} GetPlayerLoanAssetRsp instance
             */
            GetPlayerLoanAssetRsp.create = function create(properties) {
                return new GetPlayerLoanAssetRsp(properties);
            };

            /**
             * Encodes the specified GetPlayerLoanAssetRsp message. Does not implicitly {@link pb.common.GetPlayerLoanAssetRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GetPlayerLoanAssetRsp
             * @static
             * @param {pb.common.IGetPlayerLoanAssetRsp} message GetPlayerLoanAssetRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetPlayerLoanAssetRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.data != null && message.data.length)
                    for (var i = 0; i < message.data.length; ++i)
                        $root.pb.common.PlayerAsset.encode(message.data[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GetPlayerLoanAssetRsp message, length delimited. Does not implicitly {@link pb.common.GetPlayerLoanAssetRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GetPlayerLoanAssetRsp
             * @static
             * @param {pb.common.IGetPlayerLoanAssetRsp} message GetPlayerLoanAssetRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetPlayerLoanAssetRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetPlayerLoanAssetRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GetPlayerLoanAssetRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GetPlayerLoanAssetRsp} GetPlayerLoanAssetRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetPlayerLoanAssetRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GetPlayerLoanAssetRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.data && message.data.length))
                            message.data = [];
                        message.data.push($root.pb.common.PlayerAsset.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetPlayerLoanAssetRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GetPlayerLoanAssetRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GetPlayerLoanAssetRsp} GetPlayerLoanAssetRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetPlayerLoanAssetRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetPlayerLoanAssetRsp message.
             * @function verify
             * @memberof pb.common.GetPlayerLoanAssetRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetPlayerLoanAssetRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    if (!Array.isArray(message.data))
                        return "data: array expected";
                    for (var i = 0; i < message.data.length; ++i) {
                        var error = $root.pb.common.PlayerAsset.verify(message.data[i]);
                        if (error)
                            return "data." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GetPlayerLoanAssetRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GetPlayerLoanAssetRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GetPlayerLoanAssetRsp} GetPlayerLoanAssetRsp
             */
            GetPlayerLoanAssetRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GetPlayerLoanAssetRsp)
                    return object;
                var message = new $root.pb.common.GetPlayerLoanAssetRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.GetPlayerLoanAssetRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                if (object.data) {
                    if (!Array.isArray(object.data))
                        throw TypeError(".pb.common.GetPlayerLoanAssetRsp.data: array expected");
                    message.data = [];
                    for (var i = 0; i < object.data.length; ++i) {
                        if (typeof object.data[i] !== "object")
                            throw TypeError(".pb.common.GetPlayerLoanAssetRsp.data: object expected");
                        message.data[i] = $root.pb.common.PlayerAsset.fromObject(object.data[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GetPlayerLoanAssetRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GetPlayerLoanAssetRsp
             * @static
             * @param {pb.common.GetPlayerLoanAssetRsp} message GetPlayerLoanAssetRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetPlayerLoanAssetRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.data = [];
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                if (message.data && message.data.length) {
                    object.data = [];
                    for (var j = 0; j < message.data.length; ++j)
                        object.data[j] = $root.pb.common.PlayerAsset.toObject(message.data[j], options);
                }
                return object;
            };

            /**
             * Converts this GetPlayerLoanAssetRsp to JSON.
             * @function toJSON
             * @memberof pb.common.GetPlayerLoanAssetRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetPlayerLoanAssetRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GetPlayerLoanAssetRsp;
        })();

        common.TestPushReq = (function() {

            /**
             * Properties of a TestPushReq.
             * @memberof pb.common
             * @interface ITestPushReq
             * @property {number|null} [type] TestPushReq type
             * @property {Long|null} [userId] TestPushReq userId
             * @property {Uint8Array|null} [content] TestPushReq content
             */

            /**
             * Constructs a new TestPushReq.
             * @memberof pb.common
             * @classdesc Represents a TestPushReq.
             * @implements ITestPushReq
             * @constructor
             * @param {pb.common.ITestPushReq=} [properties] Properties to set
             */
            function TestPushReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * TestPushReq type.
             * @member {number} type
             * @memberof pb.common.TestPushReq
             * @instance
             */
            TestPushReq.prototype.type = 0;

            /**
             * TestPushReq userId.
             * @member {Long} userId
             * @memberof pb.common.TestPushReq
             * @instance
             */
            TestPushReq.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * TestPushReq content.
             * @member {Uint8Array} content
             * @memberof pb.common.TestPushReq
             * @instance
             */
            TestPushReq.prototype.content = $util.newBuffer([]);

            /**
             * Creates a new TestPushReq instance using the specified properties.
             * @function create
             * @memberof pb.common.TestPushReq
             * @static
             * @param {pb.common.ITestPushReq=} [properties] Properties to set
             * @returns {pb.common.TestPushReq} TestPushReq instance
             */
            TestPushReq.create = function create(properties) {
                return new TestPushReq(properties);
            };

            /**
             * Encodes the specified TestPushReq message. Does not implicitly {@link pb.common.TestPushReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.TestPushReq
             * @static
             * @param {pb.common.ITestPushReq} message TestPushReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TestPushReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type != null && message.hasOwnProperty("type"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.userId);
                if (message.content != null && message.hasOwnProperty("content"))
                    writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.content);
                return writer;
            };

            /**
             * Encodes the specified TestPushReq message, length delimited. Does not implicitly {@link pb.common.TestPushReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.TestPushReq
             * @static
             * @param {pb.common.ITestPushReq} message TestPushReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TestPushReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TestPushReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.TestPushReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.TestPushReq} TestPushReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TestPushReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.TestPushReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type = reader.int32();
                        break;
                    case 3:
                        message.userId = reader.int64();
                        break;
                    case 4:
                        message.content = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a TestPushReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.TestPushReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.TestPushReq} TestPushReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TestPushReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TestPushReq message.
             * @function verify
             * @memberof pb.common.TestPushReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TestPushReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isInteger(message.type))
                        return "type: integer expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                if (message.content != null && message.hasOwnProperty("content"))
                    if (!(message.content && typeof message.content.length === "number" || $util.isString(message.content)))
                        return "content: buffer expected";
                return null;
            };

            /**
             * Creates a TestPushReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.TestPushReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.TestPushReq} TestPushReq
             */
            TestPushReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.TestPushReq)
                    return object;
                var message = new $root.pb.common.TestPushReq();
                if (object.type != null)
                    message.type = object.type | 0;
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                if (object.content != null)
                    if (typeof object.content === "string")
                        $util.base64.decode(object.content, message.content = $util.newBuffer($util.base64.length(object.content)), 0);
                    else if (object.content.length)
                        message.content = object.content;
                return message;
            };

            /**
             * Creates a plain object from a TestPushReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.TestPushReq
             * @static
             * @param {pb.common.TestPushReq} message TestPushReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TestPushReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.type = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                    if (options.bytes === String)
                        object.content = "";
                    else {
                        object.content = [];
                        if (options.bytes !== Array)
                            object.content = $util.newBuffer(object.content);
                    }
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                if (message.content != null && message.hasOwnProperty("content"))
                    object.content = options.bytes === String ? $util.base64.encode(message.content, 0, message.content.length) : options.bytes === Array ? Array.prototype.slice.call(message.content) : message.content;
                return object;
            };

            /**
             * Converts this TestPushReq to JSON.
             * @function toJSON
             * @memberof pb.common.TestPushReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TestPushReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return TestPushReq;
        })();

        common.GetLoanQualificationReq = (function() {

            /**
             * Properties of a GetLoanQualificationReq.
             * @memberof pb.common
             * @interface IGetLoanQualificationReq
             * @property {pb.common.IAssetBaseReq|null} [req] GetLoanQualificationReq req
             */

            /**
             * Constructs a new GetLoanQualificationReq.
             * @memberof pb.common
             * @classdesc Represents a GetLoanQualificationReq.
             * @implements IGetLoanQualificationReq
             * @constructor
             * @param {pb.common.IGetLoanQualificationReq=} [properties] Properties to set
             */
            function GetLoanQualificationReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GetLoanQualificationReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.GetLoanQualificationReq
             * @instance
             */
            GetLoanQualificationReq.prototype.req = null;

            /**
             * Creates a new GetLoanQualificationReq instance using the specified properties.
             * @function create
             * @memberof pb.common.GetLoanQualificationReq
             * @static
             * @param {pb.common.IGetLoanQualificationReq=} [properties] Properties to set
             * @returns {pb.common.GetLoanQualificationReq} GetLoanQualificationReq instance
             */
            GetLoanQualificationReq.create = function create(properties) {
                return new GetLoanQualificationReq(properties);
            };

            /**
             * Encodes the specified GetLoanQualificationReq message. Does not implicitly {@link pb.common.GetLoanQualificationReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GetLoanQualificationReq
             * @static
             * @param {pb.common.IGetLoanQualificationReq} message GetLoanQualificationReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetLoanQualificationReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GetLoanQualificationReq message, length delimited. Does not implicitly {@link pb.common.GetLoanQualificationReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GetLoanQualificationReq
             * @static
             * @param {pb.common.IGetLoanQualificationReq} message GetLoanQualificationReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetLoanQualificationReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetLoanQualificationReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GetLoanQualificationReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GetLoanQualificationReq} GetLoanQualificationReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetLoanQualificationReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GetLoanQualificationReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetLoanQualificationReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GetLoanQualificationReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GetLoanQualificationReq} GetLoanQualificationReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetLoanQualificationReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetLoanQualificationReq message.
             * @function verify
             * @memberof pb.common.GetLoanQualificationReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetLoanQualificationReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                return null;
            };

            /**
             * Creates a GetLoanQualificationReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GetLoanQualificationReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GetLoanQualificationReq} GetLoanQualificationReq
             */
            GetLoanQualificationReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GetLoanQualificationReq)
                    return object;
                var message = new $root.pb.common.GetLoanQualificationReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.GetLoanQualificationReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                return message;
            };

            /**
             * Creates a plain object from a GetLoanQualificationReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GetLoanQualificationReq
             * @static
             * @param {pb.common.GetLoanQualificationReq} message GetLoanQualificationReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetLoanQualificationReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.req = null;
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                return object;
            };

            /**
             * Converts this GetLoanQualificationReq to JSON.
             * @function toJSON
             * @memberof pb.common.GetLoanQualificationReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetLoanQualificationReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GetLoanQualificationReq;
        })();

        common.GetLoanQualificationRsp = (function() {

            /**
             * Properties of a GetLoanQualificationRsp.
             * @memberof pb.common
             * @interface IGetLoanQualificationRsp
             * @property {pb.common.IBaseRsp|null} [rsp] GetLoanQualificationRsp rsp
             * @property {number|null} [amount] GetLoanQualificationRsp amount
             * @property {number|null} [loanRatePCT] GetLoanQualificationRsp loanRatePCT
             * @property {number|null} [loanMultiplier] GetLoanQualificationRsp loanMultiplier
             * @property {Array.<pb.common.GetLoanQualificationRsp.IRecLoan>|null} [recList] GetLoanQualificationRsp recList
             * @property {string|null} [loanLimitPrompt] GetLoanQualificationRsp loanLimitPrompt
             * @property {Long|null} [loanLimit] GetLoanQualificationRsp loanLimit
             * @property {Long|null} [totalLoan] GetLoanQualificationRsp totalLoan
             */

            /**
             * Constructs a new GetLoanQualificationRsp.
             * @memberof pb.common
             * @classdesc Represents a GetLoanQualificationRsp.
             * @implements IGetLoanQualificationRsp
             * @constructor
             * @param {pb.common.IGetLoanQualificationRsp=} [properties] Properties to set
             */
            function GetLoanQualificationRsp(properties) {
                this.recList = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GetLoanQualificationRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.GetLoanQualificationRsp
             * @instance
             */
            GetLoanQualificationRsp.prototype.rsp = null;

            /**
             * GetLoanQualificationRsp amount.
             * @member {number} amount
             * @memberof pb.common.GetLoanQualificationRsp
             * @instance
             */
            GetLoanQualificationRsp.prototype.amount = 0;

            /**
             * GetLoanQualificationRsp loanRatePCT.
             * @member {number} loanRatePCT
             * @memberof pb.common.GetLoanQualificationRsp
             * @instance
             */
            GetLoanQualificationRsp.prototype.loanRatePCT = 0;

            /**
             * GetLoanQualificationRsp loanMultiplier.
             * @member {number} loanMultiplier
             * @memberof pb.common.GetLoanQualificationRsp
             * @instance
             */
            GetLoanQualificationRsp.prototype.loanMultiplier = 0;

            /**
             * GetLoanQualificationRsp recList.
             * @member {Array.<pb.common.GetLoanQualificationRsp.IRecLoan>} recList
             * @memberof pb.common.GetLoanQualificationRsp
             * @instance
             */
            GetLoanQualificationRsp.prototype.recList = $util.emptyArray;

            /**
             * GetLoanQualificationRsp loanLimitPrompt.
             * @member {string} loanLimitPrompt
             * @memberof pb.common.GetLoanQualificationRsp
             * @instance
             */
            GetLoanQualificationRsp.prototype.loanLimitPrompt = "";

            /**
             * GetLoanQualificationRsp loanLimit.
             * @member {Long} loanLimit
             * @memberof pb.common.GetLoanQualificationRsp
             * @instance
             */
            GetLoanQualificationRsp.prototype.loanLimit = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * GetLoanQualificationRsp totalLoan.
             * @member {Long} totalLoan
             * @memberof pb.common.GetLoanQualificationRsp
             * @instance
             */
            GetLoanQualificationRsp.prototype.totalLoan = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new GetLoanQualificationRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.GetLoanQualificationRsp
             * @static
             * @param {pb.common.IGetLoanQualificationRsp=} [properties] Properties to set
             * @returns {pb.common.GetLoanQualificationRsp} GetLoanQualificationRsp instance
             */
            GetLoanQualificationRsp.create = function create(properties) {
                return new GetLoanQualificationRsp(properties);
            };

            /**
             * Encodes the specified GetLoanQualificationRsp message. Does not implicitly {@link pb.common.GetLoanQualificationRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GetLoanQualificationRsp
             * @static
             * @param {pb.common.IGetLoanQualificationRsp} message GetLoanQualificationRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetLoanQualificationRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.amount != null && message.hasOwnProperty("amount"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.amount);
                if (message.loanRatePCT != null && message.hasOwnProperty("loanRatePCT"))
                    writer.uint32(/* id 3, wireType 5 =*/29).float(message.loanRatePCT);
                if (message.recList != null && message.recList.length)
                    for (var i = 0; i < message.recList.length; ++i)
                        $root.pb.common.GetLoanQualificationRsp.RecLoan.encode(message.recList[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.loanLimitPrompt != null && message.hasOwnProperty("loanLimitPrompt"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.loanLimitPrompt);
                if (message.loanLimit != null && message.hasOwnProperty("loanLimit"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int64(message.loanLimit);
                if (message.totalLoan != null && message.hasOwnProperty("totalLoan"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int64(message.totalLoan);
                if (message.loanMultiplier != null && message.hasOwnProperty("loanMultiplier"))
                    writer.uint32(/* id 8, wireType 0 =*/64).int32(message.loanMultiplier);
                return writer;
            };

            /**
             * Encodes the specified GetLoanQualificationRsp message, length delimited. Does not implicitly {@link pb.common.GetLoanQualificationRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GetLoanQualificationRsp
             * @static
             * @param {pb.common.IGetLoanQualificationRsp} message GetLoanQualificationRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetLoanQualificationRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetLoanQualificationRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GetLoanQualificationRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GetLoanQualificationRsp} GetLoanQualificationRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetLoanQualificationRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GetLoanQualificationRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.amount = reader.int32();
                        break;
                    case 3:
                        message.loanRatePCT = reader.float();
                        break;
                    case 8:
                        message.loanMultiplier = reader.int32();
                        break;
                    case 4:
                        if (!(message.recList && message.recList.length))
                            message.recList = [];
                        message.recList.push($root.pb.common.GetLoanQualificationRsp.RecLoan.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        message.loanLimitPrompt = reader.string();
                        break;
                    case 6:
                        message.loanLimit = reader.int64();
                        break;
                    case 7:
                        message.totalLoan = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetLoanQualificationRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GetLoanQualificationRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GetLoanQualificationRsp} GetLoanQualificationRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetLoanQualificationRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetLoanQualificationRsp message.
             * @function verify
             * @memberof pb.common.GetLoanQualificationRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetLoanQualificationRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isInteger(message.amount))
                        return "amount: integer expected";
                if (message.loanRatePCT != null && message.hasOwnProperty("loanRatePCT"))
                    if (typeof message.loanRatePCT !== "number")
                        return "loanRatePCT: number expected";
                if (message.loanMultiplier != null && message.hasOwnProperty("loanMultiplier"))
                    if (!$util.isInteger(message.loanMultiplier))
                        return "loanMultiplier: integer expected";
                if (message.recList != null && message.hasOwnProperty("recList")) {
                    if (!Array.isArray(message.recList))
                        return "recList: array expected";
                    for (var i = 0; i < message.recList.length; ++i) {
                        var error = $root.pb.common.GetLoanQualificationRsp.RecLoan.verify(message.recList[i]);
                        if (error)
                            return "recList." + error;
                    }
                }
                if (message.loanLimitPrompt != null && message.hasOwnProperty("loanLimitPrompt"))
                    if (!$util.isString(message.loanLimitPrompt))
                        return "loanLimitPrompt: string expected";
                if (message.loanLimit != null && message.hasOwnProperty("loanLimit"))
                    if (!$util.isInteger(message.loanLimit) && !(message.loanLimit && $util.isInteger(message.loanLimit.low) && $util.isInteger(message.loanLimit.high)))
                        return "loanLimit: integer|Long expected";
                if (message.totalLoan != null && message.hasOwnProperty("totalLoan"))
                    if (!$util.isInteger(message.totalLoan) && !(message.totalLoan && $util.isInteger(message.totalLoan.low) && $util.isInteger(message.totalLoan.high)))
                        return "totalLoan: integer|Long expected";
                return null;
            };

            /**
             * Creates a GetLoanQualificationRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GetLoanQualificationRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GetLoanQualificationRsp} GetLoanQualificationRsp
             */
            GetLoanQualificationRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GetLoanQualificationRsp)
                    return object;
                var message = new $root.pb.common.GetLoanQualificationRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.GetLoanQualificationRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                if (object.amount != null)
                    message.amount = object.amount | 0;
                if (object.loanRatePCT != null)
                    message.loanRatePCT = Number(object.loanRatePCT);
                if (object.loanMultiplier != null)
                    message.loanMultiplier = object.loanMultiplier | 0;
                if (object.recList) {
                    if (!Array.isArray(object.recList))
                        throw TypeError(".pb.common.GetLoanQualificationRsp.recList: array expected");
                    message.recList = [];
                    for (var i = 0; i < object.recList.length; ++i) {
                        if (typeof object.recList[i] !== "object")
                            throw TypeError(".pb.common.GetLoanQualificationRsp.recList: object expected");
                        message.recList[i] = $root.pb.common.GetLoanQualificationRsp.RecLoan.fromObject(object.recList[i]);
                    }
                }
                if (object.loanLimitPrompt != null)
                    message.loanLimitPrompt = String(object.loanLimitPrompt);
                if (object.loanLimit != null)
                    if ($util.Long)
                        (message.loanLimit = $util.Long.fromValue(object.loanLimit)).unsigned = false;
                    else if (typeof object.loanLimit === "string")
                        message.loanLimit = parseInt(object.loanLimit, 10);
                    else if (typeof object.loanLimit === "number")
                        message.loanLimit = object.loanLimit;
                    else if (typeof object.loanLimit === "object")
                        message.loanLimit = new $util.LongBits(object.loanLimit.low >>> 0, object.loanLimit.high >>> 0).toNumber();
                if (object.totalLoan != null)
                    if ($util.Long)
                        (message.totalLoan = $util.Long.fromValue(object.totalLoan)).unsigned = false;
                    else if (typeof object.totalLoan === "string")
                        message.totalLoan = parseInt(object.totalLoan, 10);
                    else if (typeof object.totalLoan === "number")
                        message.totalLoan = object.totalLoan;
                    else if (typeof object.totalLoan === "object")
                        message.totalLoan = new $util.LongBits(object.totalLoan.low >>> 0, object.totalLoan.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a GetLoanQualificationRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GetLoanQualificationRsp
             * @static
             * @param {pb.common.GetLoanQualificationRsp} message GetLoanQualificationRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetLoanQualificationRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.recList = [];
                if (options.defaults) {
                    object.rsp = null;
                    object.amount = 0;
                    object.loanRatePCT = 0;
                    object.loanLimitPrompt = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.loanLimit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.loanLimit = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.totalLoan = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.totalLoan = options.longs === String ? "0" : 0;
                    object.loanMultiplier = 0;
                }
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                if (message.amount != null && message.hasOwnProperty("amount"))
                    object.amount = message.amount;
                if (message.loanRatePCT != null && message.hasOwnProperty("loanRatePCT"))
                    object.loanRatePCT = options.json && !isFinite(message.loanRatePCT) ? String(message.loanRatePCT) : message.loanRatePCT;
                if (message.recList && message.recList.length) {
                    object.recList = [];
                    for (var j = 0; j < message.recList.length; ++j)
                        object.recList[j] = $root.pb.common.GetLoanQualificationRsp.RecLoan.toObject(message.recList[j], options);
                }
                if (message.loanLimitPrompt != null && message.hasOwnProperty("loanLimitPrompt"))
                    object.loanLimitPrompt = message.loanLimitPrompt;
                if (message.loanLimit != null && message.hasOwnProperty("loanLimit"))
                    if (typeof message.loanLimit === "number")
                        object.loanLimit = options.longs === String ? String(message.loanLimit) : message.loanLimit;
                    else
                        object.loanLimit = options.longs === String ? $util.Long.prototype.toString.call(message.loanLimit) : options.longs === Number ? new $util.LongBits(message.loanLimit.low >>> 0, message.loanLimit.high >>> 0).toNumber() : message.loanLimit;
                if (message.totalLoan != null && message.hasOwnProperty("totalLoan"))
                    if (typeof message.totalLoan === "number")
                        object.totalLoan = options.longs === String ? String(message.totalLoan) : message.totalLoan;
                    else
                        object.totalLoan = options.longs === String ? $util.Long.prototype.toString.call(message.totalLoan) : options.longs === Number ? new $util.LongBits(message.totalLoan.low >>> 0, message.totalLoan.high >>> 0).toNumber() : message.totalLoan;
                if (message.loanMultiplier != null && message.hasOwnProperty("loanMultiplier"))
                    object.loanMultiplier = message.loanMultiplier;
                return object;
            };

            /**
             * Converts this GetLoanQualificationRsp to JSON.
             * @function toJSON
             * @memberof pb.common.GetLoanQualificationRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetLoanQualificationRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            GetLoanQualificationRsp.RecLoan = (function() {

                /**
                 * Properties of a RecLoan.
                 * @memberof pb.common.GetLoanQualificationRsp
                 * @interface IRecLoan
                 * @property {number|null} [amount] RecLoan amount
                 * @property {number|null} [interest] RecLoan interest
                 */

                /**
                 * Constructs a new RecLoan.
                 * @memberof pb.common.GetLoanQualificationRsp
                 * @classdesc Represents a RecLoan.
                 * @implements IRecLoan
                 * @constructor
                 * @param {pb.common.GetLoanQualificationRsp.IRecLoan=} [properties] Properties to set
                 */
                function RecLoan(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RecLoan amount.
                 * @member {number} amount
                 * @memberof pb.common.GetLoanQualificationRsp.RecLoan
                 * @instance
                 */
                RecLoan.prototype.amount = 0;

                /**
                 * RecLoan interest.
                 * @member {number} interest
                 * @memberof pb.common.GetLoanQualificationRsp.RecLoan
                 * @instance
                 */
                RecLoan.prototype.interest = 0;

                /**
                 * Creates a new RecLoan instance using the specified properties.
                 * @function create
                 * @memberof pb.common.GetLoanQualificationRsp.RecLoan
                 * @static
                 * @param {pb.common.GetLoanQualificationRsp.IRecLoan=} [properties] Properties to set
                 * @returns {pb.common.GetLoanQualificationRsp.RecLoan} RecLoan instance
                 */
                RecLoan.create = function create(properties) {
                    return new RecLoan(properties);
                };

                /**
                 * Encodes the specified RecLoan message. Does not implicitly {@link pb.common.GetLoanQualificationRsp.RecLoan.verify|verify} messages.
                 * @function encode
                 * @memberof pb.common.GetLoanQualificationRsp.RecLoan
                 * @static
                 * @param {pb.common.GetLoanQualificationRsp.IRecLoan} message RecLoan message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RecLoan.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.amount != null && message.hasOwnProperty("amount"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.amount);
                    if (message.interest != null && message.hasOwnProperty("interest"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.interest);
                    return writer;
                };

                /**
                 * Encodes the specified RecLoan message, length delimited. Does not implicitly {@link pb.common.GetLoanQualificationRsp.RecLoan.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof pb.common.GetLoanQualificationRsp.RecLoan
                 * @static
                 * @param {pb.common.GetLoanQualificationRsp.IRecLoan} message RecLoan message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RecLoan.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RecLoan message from the specified reader or buffer.
                 * @function decode
                 * @memberof pb.common.GetLoanQualificationRsp.RecLoan
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {pb.common.GetLoanQualificationRsp.RecLoan} RecLoan
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RecLoan.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GetLoanQualificationRsp.RecLoan();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.amount = reader.int32();
                            break;
                        case 2:
                            message.interest = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a RecLoan message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof pb.common.GetLoanQualificationRsp.RecLoan
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {pb.common.GetLoanQualificationRsp.RecLoan} RecLoan
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RecLoan.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RecLoan message.
                 * @function verify
                 * @memberof pb.common.GetLoanQualificationRsp.RecLoan
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RecLoan.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.amount != null && message.hasOwnProperty("amount"))
                        if (!$util.isInteger(message.amount))
                            return "amount: integer expected";
                    if (message.interest != null && message.hasOwnProperty("interest"))
                        if (!$util.isInteger(message.interest))
                            return "interest: integer expected";
                    return null;
                };

                /**
                 * Creates a RecLoan message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof pb.common.GetLoanQualificationRsp.RecLoan
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {pb.common.GetLoanQualificationRsp.RecLoan} RecLoan
                 */
                RecLoan.fromObject = function fromObject(object) {
                    if (object instanceof $root.pb.common.GetLoanQualificationRsp.RecLoan)
                        return object;
                    var message = new $root.pb.common.GetLoanQualificationRsp.RecLoan();
                    if (object.amount != null)
                        message.amount = object.amount | 0;
                    if (object.interest != null)
                        message.interest = object.interest | 0;
                    return message;
                };

                /**
                 * Creates a plain object from a RecLoan message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof pb.common.GetLoanQualificationRsp.RecLoan
                 * @static
                 * @param {pb.common.GetLoanQualificationRsp.RecLoan} message RecLoan
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RecLoan.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.amount = 0;
                        object.interest = 0;
                    }
                    if (message.amount != null && message.hasOwnProperty("amount"))
                        object.amount = message.amount;
                    if (message.interest != null && message.hasOwnProperty("interest"))
                        object.interest = message.interest;
                    return object;
                };

                /**
                 * Converts this RecLoan to JSON.
                 * @function toJSON
                 * @memberof pb.common.GetLoanQualificationRsp.RecLoan
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RecLoan.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return RecLoan;
            })();

            return GetLoanQualificationRsp;
        })();

        common.UnemploymentAckReq = (function() {

            /**
             * Properties of an UnemploymentAckReq.
             * @memberof pb.common
             * @interface IUnemploymentAckReq
             * @property {pb.common.IAssetBaseReq|null} [req] UnemploymentAckReq req
             */

            /**
             * Constructs a new UnemploymentAckReq.
             * @memberof pb.common
             * @classdesc Represents an UnemploymentAckReq.
             * @implements IUnemploymentAckReq
             * @constructor
             * @param {pb.common.IUnemploymentAckReq=} [properties] Properties to set
             */
            function UnemploymentAckReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UnemploymentAckReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.UnemploymentAckReq
             * @instance
             */
            UnemploymentAckReq.prototype.req = null;

            /**
             * Creates a new UnemploymentAckReq instance using the specified properties.
             * @function create
             * @memberof pb.common.UnemploymentAckReq
             * @static
             * @param {pb.common.IUnemploymentAckReq=} [properties] Properties to set
             * @returns {pb.common.UnemploymentAckReq} UnemploymentAckReq instance
             */
            UnemploymentAckReq.create = function create(properties) {
                return new UnemploymentAckReq(properties);
            };

            /**
             * Encodes the specified UnemploymentAckReq message. Does not implicitly {@link pb.common.UnemploymentAckReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.UnemploymentAckReq
             * @static
             * @param {pb.common.IUnemploymentAckReq} message UnemploymentAckReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UnemploymentAckReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified UnemploymentAckReq message, length delimited. Does not implicitly {@link pb.common.UnemploymentAckReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.UnemploymentAckReq
             * @static
             * @param {pb.common.IUnemploymentAckReq} message UnemploymentAckReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UnemploymentAckReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UnemploymentAckReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.UnemploymentAckReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.UnemploymentAckReq} UnemploymentAckReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UnemploymentAckReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.UnemploymentAckReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an UnemploymentAckReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.UnemploymentAckReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.UnemploymentAckReq} UnemploymentAckReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UnemploymentAckReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UnemploymentAckReq message.
             * @function verify
             * @memberof pb.common.UnemploymentAckReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UnemploymentAckReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                return null;
            };

            /**
             * Creates an UnemploymentAckReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.UnemploymentAckReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.UnemploymentAckReq} UnemploymentAckReq
             */
            UnemploymentAckReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.UnemploymentAckReq)
                    return object;
                var message = new $root.pb.common.UnemploymentAckReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.UnemploymentAckReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                return message;
            };

            /**
             * Creates a plain object from an UnemploymentAckReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.UnemploymentAckReq
             * @static
             * @param {pb.common.UnemploymentAckReq} message UnemploymentAckReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UnemploymentAckReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.req = null;
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                return object;
            };

            /**
             * Converts this UnemploymentAckReq to JSON.
             * @function toJSON
             * @memberof pb.common.UnemploymentAckReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UnemploymentAckReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return UnemploymentAckReq;
        })();

        common.UnemploymentAckRsp = (function() {

            /**
             * Properties of an UnemploymentAckRsp.
             * @memberof pb.common
             * @interface IUnemploymentAckRsp
             * @property {pb.common.IBaseRsp|null} [rsp] UnemploymentAckRsp rsp
             */

            /**
             * Constructs a new UnemploymentAckRsp.
             * @memberof pb.common
             * @classdesc Represents an UnemploymentAckRsp.
             * @implements IUnemploymentAckRsp
             * @constructor
             * @param {pb.common.IUnemploymentAckRsp=} [properties] Properties to set
             */
            function UnemploymentAckRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UnemploymentAckRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.UnemploymentAckRsp
             * @instance
             */
            UnemploymentAckRsp.prototype.rsp = null;

            /**
             * Creates a new UnemploymentAckRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.UnemploymentAckRsp
             * @static
             * @param {pb.common.IUnemploymentAckRsp=} [properties] Properties to set
             * @returns {pb.common.UnemploymentAckRsp} UnemploymentAckRsp instance
             */
            UnemploymentAckRsp.create = function create(properties) {
                return new UnemploymentAckRsp(properties);
            };

            /**
             * Encodes the specified UnemploymentAckRsp message. Does not implicitly {@link pb.common.UnemploymentAckRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.UnemploymentAckRsp
             * @static
             * @param {pb.common.IUnemploymentAckRsp} message UnemploymentAckRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UnemploymentAckRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified UnemploymentAckRsp message, length delimited. Does not implicitly {@link pb.common.UnemploymentAckRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.UnemploymentAckRsp
             * @static
             * @param {pb.common.IUnemploymentAckRsp} message UnemploymentAckRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UnemploymentAckRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UnemploymentAckRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.UnemploymentAckRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.UnemploymentAckRsp} UnemploymentAckRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UnemploymentAckRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.UnemploymentAckRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an UnemploymentAckRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.UnemploymentAckRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.UnemploymentAckRsp} UnemploymentAckRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UnemploymentAckRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UnemploymentAckRsp message.
             * @function verify
             * @memberof pb.common.UnemploymentAckRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UnemploymentAckRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                return null;
            };

            /**
             * Creates an UnemploymentAckRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.UnemploymentAckRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.UnemploymentAckRsp} UnemploymentAckRsp
             */
            UnemploymentAckRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.UnemploymentAckRsp)
                    return object;
                var message = new $root.pb.common.UnemploymentAckRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.UnemploymentAckRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from an UnemploymentAckRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.UnemploymentAckRsp
             * @static
             * @param {pb.common.UnemploymentAckRsp} message UnemploymentAckRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UnemploymentAckRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                return object;
            };

            /**
             * Converts this UnemploymentAckRsp to JSON.
             * @function toJSON
             * @memberof pb.common.UnemploymentAckRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UnemploymentAckRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return UnemploymentAckRsp;
        })();

        common.GameReportItem = (function() {

            /**
             * Properties of a GameReportItem.
             * @memberof pb.common
             * @interface IGameReportItem
             * @property {Long|null} [userId] GameReportItem userId
             * @property {number|null} [stockCnt] GameReportItem stockCnt
             * @property {number|null} [houseCnt] GameReportItem houseCnt
             * @property {number|null} [companyCnt] GameReportItem companyCnt
             * @property {number|null} [degree] GameReportItem degree
             * @property {number|null} [equityCnt] GameReportItem equityCnt
             */

            /**
             * Constructs a new GameReportItem.
             * @memberof pb.common
             * @classdesc Represents a GameReportItem.
             * @implements IGameReportItem
             * @constructor
             * @param {pb.common.IGameReportItem=} [properties] Properties to set
             */
            function GameReportItem(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GameReportItem userId.
             * @member {Long} userId
             * @memberof pb.common.GameReportItem
             * @instance
             */
            GameReportItem.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * GameReportItem stockCnt.
             * @member {number} stockCnt
             * @memberof pb.common.GameReportItem
             * @instance
             */
            GameReportItem.prototype.stockCnt = 0;

            /**
             * GameReportItem houseCnt.
             * @member {number} houseCnt
             * @memberof pb.common.GameReportItem
             * @instance
             */
            GameReportItem.prototype.houseCnt = 0;

            /**
             * GameReportItem companyCnt.
             * @member {number} companyCnt
             * @memberof pb.common.GameReportItem
             * @instance
             */
            GameReportItem.prototype.companyCnt = 0;

            /**
             * GameReportItem degree.
             * @member {number} degree
             * @memberof pb.common.GameReportItem
             * @instance
             */
            GameReportItem.prototype.degree = 0;

            /**
             * GameReportItem equityCnt.
             * @member {number} equityCnt
             * @memberof pb.common.GameReportItem
             * @instance
             */
            GameReportItem.prototype.equityCnt = 0;

            /**
             * Creates a new GameReportItem instance using the specified properties.
             * @function create
             * @memberof pb.common.GameReportItem
             * @static
             * @param {pb.common.IGameReportItem=} [properties] Properties to set
             * @returns {pb.common.GameReportItem} GameReportItem instance
             */
            GameReportItem.create = function create(properties) {
                return new GameReportItem(properties);
            };

            /**
             * Encodes the specified GameReportItem message. Does not implicitly {@link pb.common.GameReportItem.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GameReportItem
             * @static
             * @param {pb.common.IGameReportItem} message GameReportItem message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameReportItem.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userId);
                if (message.stockCnt != null && message.hasOwnProperty("stockCnt"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.stockCnt);
                if (message.houseCnt != null && message.hasOwnProperty("houseCnt"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.houseCnt);
                if (message.companyCnt != null && message.hasOwnProperty("companyCnt"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.companyCnt);
                if (message.degree != null && message.hasOwnProperty("degree"))
                    writer.uint32(/* id 7, wireType 5 =*/61).float(message.degree);
                if (message.equityCnt != null && message.hasOwnProperty("equityCnt"))
                    writer.uint32(/* id 8, wireType 0 =*/64).int32(message.equityCnt);
                return writer;
            };

            /**
             * Encodes the specified GameReportItem message, length delimited. Does not implicitly {@link pb.common.GameReportItem.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GameReportItem
             * @static
             * @param {pb.common.IGameReportItem} message GameReportItem message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameReportItem.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GameReportItem message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GameReportItem
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GameReportItem} GameReportItem
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameReportItem.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GameReportItem();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.userId = reader.int64();
                        break;
                    case 4:
                        message.stockCnt = reader.int32();
                        break;
                    case 5:
                        message.houseCnt = reader.int32();
                        break;
                    case 6:
                        message.companyCnt = reader.int32();
                        break;
                    case 7:
                        message.degree = reader.float();
                        break;
                    case 8:
                        message.equityCnt = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GameReportItem message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GameReportItem
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GameReportItem} GameReportItem
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameReportItem.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GameReportItem message.
             * @function verify
             * @memberof pb.common.GameReportItem
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GameReportItem.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                if (message.stockCnt != null && message.hasOwnProperty("stockCnt"))
                    if (!$util.isInteger(message.stockCnt))
                        return "stockCnt: integer expected";
                if (message.houseCnt != null && message.hasOwnProperty("houseCnt"))
                    if (!$util.isInteger(message.houseCnt))
                        return "houseCnt: integer expected";
                if (message.companyCnt != null && message.hasOwnProperty("companyCnt"))
                    if (!$util.isInteger(message.companyCnt))
                        return "companyCnt: integer expected";
                if (message.degree != null && message.hasOwnProperty("degree"))
                    if (typeof message.degree !== "number")
                        return "degree: number expected";
                if (message.equityCnt != null && message.hasOwnProperty("equityCnt"))
                    if (!$util.isInteger(message.equityCnt))
                        return "equityCnt: integer expected";
                return null;
            };

            /**
             * Creates a GameReportItem message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GameReportItem
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GameReportItem} GameReportItem
             */
            GameReportItem.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GameReportItem)
                    return object;
                var message = new $root.pb.common.GameReportItem();
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                if (object.stockCnt != null)
                    message.stockCnt = object.stockCnt | 0;
                if (object.houseCnt != null)
                    message.houseCnt = object.houseCnt | 0;
                if (object.companyCnt != null)
                    message.companyCnt = object.companyCnt | 0;
                if (object.degree != null)
                    message.degree = Number(object.degree);
                if (object.equityCnt != null)
                    message.equityCnt = object.equityCnt | 0;
                return message;
            };

            /**
             * Creates a plain object from a GameReportItem message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GameReportItem
             * @static
             * @param {pb.common.GameReportItem} message GameReportItem
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GameReportItem.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                    object.stockCnt = 0;
                    object.houseCnt = 0;
                    object.companyCnt = 0;
                    object.degree = 0;
                    object.equityCnt = 0;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                if (message.stockCnt != null && message.hasOwnProperty("stockCnt"))
                    object.stockCnt = message.stockCnt;
                if (message.houseCnt != null && message.hasOwnProperty("houseCnt"))
                    object.houseCnt = message.houseCnt;
                if (message.companyCnt != null && message.hasOwnProperty("companyCnt"))
                    object.companyCnt = message.companyCnt;
                if (message.degree != null && message.hasOwnProperty("degree"))
                    object.degree = options.json && !isFinite(message.degree) ? String(message.degree) : message.degree;
                if (message.equityCnt != null && message.hasOwnProperty("equityCnt"))
                    object.equityCnt = message.equityCnt;
                return object;
            };

            /**
             * Converts this GameReportItem to JSON.
             * @function toJSON
             * @memberof pb.common.GameReportItem
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GameReportItem.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GameReportItem;
        })();

        common.GameOverMsg = (function() {

            /**
             * Properties of a GameOverMsg.
             * @memberof pb.common
             * @interface IGameOverMsg
             * @property {Array.<pb.common.IGameReportItem>|null} [data] GameOverMsg data
             * @property {Long|null} [winnerId] GameOverMsg winnerId
             * @property {pb.common.GameOverMsg.endType|null} [typ] GameOverMsg typ
             * @property {Long|null} [gameId] GameOverMsg gameId
             * @property {Object.<string,pb.common.IGameBonus>|null} [bonus] GameOverMsg bonus
             * @property {google.protobuf.ITimestamp|null} [startedAt] GameOverMsg startedAt
             * @property {google.protobuf.ITimestamp|null} [endedAt] GameOverMsg endedAt
             * @property {Array.<pb.common.IPlayerRole>|null} [roles] GameOverMsg roles
             */

            /**
             * Constructs a new GameOverMsg.
             * @memberof pb.common
             * @classdesc Represents a GameOverMsg.
             * @implements IGameOverMsg
             * @constructor
             * @param {pb.common.IGameOverMsg=} [properties] Properties to set
             */
            function GameOverMsg(properties) {
                this.data = [];
                this.bonus = {};
                this.roles = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GameOverMsg data.
             * @member {Array.<pb.common.IGameReportItem>} data
             * @memberof pb.common.GameOverMsg
             * @instance
             */
            GameOverMsg.prototype.data = $util.emptyArray;

            /**
             * GameOverMsg winnerId.
             * @member {Long} winnerId
             * @memberof pb.common.GameOverMsg
             * @instance
             */
            GameOverMsg.prototype.winnerId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * GameOverMsg typ.
             * @member {pb.common.GameOverMsg.endType} typ
             * @memberof pb.common.GameOverMsg
             * @instance
             */
            GameOverMsg.prototype.typ = 0;

            /**
             * GameOverMsg gameId.
             * @member {Long} gameId
             * @memberof pb.common.GameOverMsg
             * @instance
             */
            GameOverMsg.prototype.gameId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * GameOverMsg bonus.
             * @member {Object.<string,pb.common.IGameBonus>} bonus
             * @memberof pb.common.GameOverMsg
             * @instance
             */
            GameOverMsg.prototype.bonus = $util.emptyObject;

            /**
             * GameOverMsg startedAt.
             * @member {google.protobuf.ITimestamp|null|undefined} startedAt
             * @memberof pb.common.GameOverMsg
             * @instance
             */
            GameOverMsg.prototype.startedAt = null;

            /**
             * GameOverMsg endedAt.
             * @member {google.protobuf.ITimestamp|null|undefined} endedAt
             * @memberof pb.common.GameOverMsg
             * @instance
             */
            GameOverMsg.prototype.endedAt = null;

            /**
             * GameOverMsg roles.
             * @member {Array.<pb.common.IPlayerRole>} roles
             * @memberof pb.common.GameOverMsg
             * @instance
             */
            GameOverMsg.prototype.roles = $util.emptyArray;

            /**
             * Creates a new GameOverMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.GameOverMsg
             * @static
             * @param {pb.common.IGameOverMsg=} [properties] Properties to set
             * @returns {pb.common.GameOverMsg} GameOverMsg instance
             */
            GameOverMsg.create = function create(properties) {
                return new GameOverMsg(properties);
            };

            /**
             * Encodes the specified GameOverMsg message. Does not implicitly {@link pb.common.GameOverMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GameOverMsg
             * @static
             * @param {pb.common.IGameOverMsg} message GameOverMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameOverMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.data != null && message.data.length)
                    for (var i = 0; i < message.data.length; ++i)
                        $root.pb.common.GameReportItem.encode(message.data[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.winnerId != null && message.hasOwnProperty("winnerId"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.winnerId);
                if (message.typ != null && message.hasOwnProperty("typ"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.typ);
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.gameId);
                if (message.bonus != null && message.hasOwnProperty("bonus"))
                    for (var keys = Object.keys(message.bonus), i = 0; i < keys.length; ++i) {
                        writer.uint32(/* id 6, wireType 2 =*/50).fork().uint32(/* id 1, wireType 0 =*/8).int64(keys[i]);
                        $root.pb.common.GameBonus.encode(message.bonus[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                    }
                if (message.startedAt != null && message.hasOwnProperty("startedAt"))
                    $root.google.protobuf.Timestamp.encode(message.startedAt, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.endedAt != null && message.hasOwnProperty("endedAt"))
                    $root.google.protobuf.Timestamp.encode(message.endedAt, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.roles != null && message.roles.length)
                    for (var i = 0; i < message.roles.length; ++i)
                        $root.pb.common.PlayerRole.encode(message.roles[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GameOverMsg message, length delimited. Does not implicitly {@link pb.common.GameOverMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GameOverMsg
             * @static
             * @param {pb.common.IGameOverMsg} message GameOverMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameOverMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GameOverMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GameOverMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GameOverMsg} GameOverMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameOverMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GameOverMsg(), key;
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        if (!(message.data && message.data.length))
                            message.data = [];
                        message.data.push($root.pb.common.GameReportItem.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.winnerId = reader.int64();
                        break;
                    case 4:
                        message.typ = reader.int32();
                        break;
                    case 5:
                        message.gameId = reader.int64();
                        break;
                    case 6:
                        reader.skip().pos++;
                        if (message.bonus === $util.emptyObject)
                            message.bonus = {};
                        key = reader.int64();
                        reader.pos++;
                        message.bonus[typeof key === "object" ? $util.longToHash(key) : key] = $root.pb.common.GameBonus.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message.startedAt = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    case 8:
                        message.endedAt = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    case 9:
                        if (!(message.roles && message.roles.length))
                            message.roles = [];
                        message.roles.push($root.pb.common.PlayerRole.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GameOverMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GameOverMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GameOverMsg} GameOverMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameOverMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GameOverMsg message.
             * @function verify
             * @memberof pb.common.GameOverMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GameOverMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.data != null && message.hasOwnProperty("data")) {
                    if (!Array.isArray(message.data))
                        return "data: array expected";
                    for (var i = 0; i < message.data.length; ++i) {
                        var error = $root.pb.common.GameReportItem.verify(message.data[i]);
                        if (error)
                            return "data." + error;
                    }
                }
                if (message.winnerId != null && message.hasOwnProperty("winnerId"))
                    if (!$util.isInteger(message.winnerId) && !(message.winnerId && $util.isInteger(message.winnerId.low) && $util.isInteger(message.winnerId.high)))
                        return "winnerId: integer|Long expected";
                if (message.typ != null && message.hasOwnProperty("typ"))
                    switch (message.typ) {
                    default:
                        return "typ: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    if (!$util.isInteger(message.gameId) && !(message.gameId && $util.isInteger(message.gameId.low) && $util.isInteger(message.gameId.high)))
                        return "gameId: integer|Long expected";
                if (message.bonus != null && message.hasOwnProperty("bonus")) {
                    if (!$util.isObject(message.bonus))
                        return "bonus: object expected";
                    var key = Object.keys(message.bonus);
                    for (var i = 0; i < key.length; ++i) {
                        if (!$util.key64Re.test(key[i]))
                            return "bonus: integer|Long key{k:int64} expected";
                        {
                            var error = $root.pb.common.GameBonus.verify(message.bonus[key[i]]);
                            if (error)
                                return "bonus." + error;
                        }
                    }
                }
                if (message.startedAt != null && message.hasOwnProperty("startedAt")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.startedAt);
                    if (error)
                        return "startedAt." + error;
                }
                if (message.endedAt != null && message.hasOwnProperty("endedAt")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.endedAt);
                    if (error)
                        return "endedAt." + error;
                }
                if (message.roles != null && message.hasOwnProperty("roles")) {
                    if (!Array.isArray(message.roles))
                        return "roles: array expected";
                    for (var i = 0; i < message.roles.length; ++i) {
                        var error = $root.pb.common.PlayerRole.verify(message.roles[i]);
                        if (error)
                            return "roles." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GameOverMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GameOverMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GameOverMsg} GameOverMsg
             */
            GameOverMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GameOverMsg)
                    return object;
                var message = new $root.pb.common.GameOverMsg();
                if (object.data) {
                    if (!Array.isArray(object.data))
                        throw TypeError(".pb.common.GameOverMsg.data: array expected");
                    message.data = [];
                    for (var i = 0; i < object.data.length; ++i) {
                        if (typeof object.data[i] !== "object")
                            throw TypeError(".pb.common.GameOverMsg.data: object expected");
                        message.data[i] = $root.pb.common.GameReportItem.fromObject(object.data[i]);
                    }
                }
                if (object.winnerId != null)
                    if ($util.Long)
                        (message.winnerId = $util.Long.fromValue(object.winnerId)).unsigned = false;
                    else if (typeof object.winnerId === "string")
                        message.winnerId = parseInt(object.winnerId, 10);
                    else if (typeof object.winnerId === "number")
                        message.winnerId = object.winnerId;
                    else if (typeof object.winnerId === "object")
                        message.winnerId = new $util.LongBits(object.winnerId.low >>> 0, object.winnerId.high >>> 0).toNumber();
                switch (object.typ) {
                case "normal":
                case 0:
                    message.typ = 0;
                    break;
                case "timeout":
                case 1:
                    message.typ = 1;
                    break;
                case "force":
                case 2:
                    message.typ = 2;
                    break;
                case "allBust":
                case 3:
                    message.typ = 3;
                    break;
                }
                if (object.gameId != null)
                    if ($util.Long)
                        (message.gameId = $util.Long.fromValue(object.gameId)).unsigned = false;
                    else if (typeof object.gameId === "string")
                        message.gameId = parseInt(object.gameId, 10);
                    else if (typeof object.gameId === "number")
                        message.gameId = object.gameId;
                    else if (typeof object.gameId === "object")
                        message.gameId = new $util.LongBits(object.gameId.low >>> 0, object.gameId.high >>> 0).toNumber();
                if (object.bonus) {
                    if (typeof object.bonus !== "object")
                        throw TypeError(".pb.common.GameOverMsg.bonus: object expected");
                    message.bonus = {};
                    for (var keys = Object.keys(object.bonus), i = 0; i < keys.length; ++i) {
                        if (typeof object.bonus[keys[i]] !== "object")
                            throw TypeError(".pb.common.GameOverMsg.bonus: object expected");
                        message.bonus[keys[i]] = $root.pb.common.GameBonus.fromObject(object.bonus[keys[i]]);
                    }
                }
                if (object.startedAt != null) {
                    if (typeof object.startedAt !== "object")
                        throw TypeError(".pb.common.GameOverMsg.startedAt: object expected");
                    message.startedAt = $root.google.protobuf.Timestamp.fromObject(object.startedAt);
                }
                if (object.endedAt != null) {
                    if (typeof object.endedAt !== "object")
                        throw TypeError(".pb.common.GameOverMsg.endedAt: object expected");
                    message.endedAt = $root.google.protobuf.Timestamp.fromObject(object.endedAt);
                }
                if (object.roles) {
                    if (!Array.isArray(object.roles))
                        throw TypeError(".pb.common.GameOverMsg.roles: array expected");
                    message.roles = [];
                    for (var i = 0; i < object.roles.length; ++i) {
                        if (typeof object.roles[i] !== "object")
                            throw TypeError(".pb.common.GameOverMsg.roles: object expected");
                        message.roles[i] = $root.pb.common.PlayerRole.fromObject(object.roles[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GameOverMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GameOverMsg
             * @static
             * @param {pb.common.GameOverMsg} message GameOverMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GameOverMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.data = [];
                    object.roles = [];
                }
                if (options.objects || options.defaults)
                    object.bonus = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.winnerId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.winnerId = options.longs === String ? "0" : 0;
                    object.typ = options.enums === String ? "normal" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.gameId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.gameId = options.longs === String ? "0" : 0;
                    object.startedAt = null;
                    object.endedAt = null;
                }
                if (message.data && message.data.length) {
                    object.data = [];
                    for (var j = 0; j < message.data.length; ++j)
                        object.data[j] = $root.pb.common.GameReportItem.toObject(message.data[j], options);
                }
                if (message.winnerId != null && message.hasOwnProperty("winnerId"))
                    if (typeof message.winnerId === "number")
                        object.winnerId = options.longs === String ? String(message.winnerId) : message.winnerId;
                    else
                        object.winnerId = options.longs === String ? $util.Long.prototype.toString.call(message.winnerId) : options.longs === Number ? new $util.LongBits(message.winnerId.low >>> 0, message.winnerId.high >>> 0).toNumber() : message.winnerId;
                if (message.typ != null && message.hasOwnProperty("typ"))
                    object.typ = options.enums === String ? $root.pb.common.GameOverMsg.endType[message.typ] : message.typ;
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    if (typeof message.gameId === "number")
                        object.gameId = options.longs === String ? String(message.gameId) : message.gameId;
                    else
                        object.gameId = options.longs === String ? $util.Long.prototype.toString.call(message.gameId) : options.longs === Number ? new $util.LongBits(message.gameId.low >>> 0, message.gameId.high >>> 0).toNumber() : message.gameId;
                var keys2;
                if (message.bonus && (keys2 = Object.keys(message.bonus)).length) {
                    object.bonus = {};
                    for (var j = 0; j < keys2.length; ++j)
                        object.bonus[keys2[j]] = $root.pb.common.GameBonus.toObject(message.bonus[keys2[j]], options);
                }
                if (message.startedAt != null && message.hasOwnProperty("startedAt"))
                    object.startedAt = $root.google.protobuf.Timestamp.toObject(message.startedAt, options);
                if (message.endedAt != null && message.hasOwnProperty("endedAt"))
                    object.endedAt = $root.google.protobuf.Timestamp.toObject(message.endedAt, options);
                if (message.roles && message.roles.length) {
                    object.roles = [];
                    for (var j = 0; j < message.roles.length; ++j)
                        object.roles[j] = $root.pb.common.PlayerRole.toObject(message.roles[j], options);
                }
                return object;
            };

            /**
             * Converts this GameOverMsg to JSON.
             * @function toJSON
             * @memberof pb.common.GameOverMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GameOverMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * endType enum.
             * @name pb.common.GameOverMsg.endType
             * @enum {string}
             * @property {number} normal=0 normal value
             * @property {number} timeout=1 timeout value
             * @property {number} force=2 force value
             * @property {number} allBust=3 allBust value
             */
            GameOverMsg.endType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "normal"] = 0;
                values[valuesById[1] = "timeout"] = 1;
                values[valuesById[2] = "force"] = 2;
                values[valuesById[3] = "allBust"] = 3;
                return values;
            })();

            return GameOverMsg;
        })();

        common.TryPayReq = (function() {

            /**
             * Properties of a TryPayReq.
             * @memberof pb.common
             * @interface ITryPayReq
             * @property {pb.common.IAssetBaseReq|null} [req] TryPayReq req
             * @property {number|null} [quantity] TryPayReq quantity
             */

            /**
             * Constructs a new TryPayReq.
             * @memberof pb.common
             * @classdesc Represents a TryPayReq.
             * @implements ITryPayReq
             * @constructor
             * @param {pb.common.ITryPayReq=} [properties] Properties to set
             */
            function TryPayReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * TryPayReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.TryPayReq
             * @instance
             */
            TryPayReq.prototype.req = null;

            /**
             * TryPayReq quantity.
             * @member {number} quantity
             * @memberof pb.common.TryPayReq
             * @instance
             */
            TryPayReq.prototype.quantity = 0;

            /**
             * Creates a new TryPayReq instance using the specified properties.
             * @function create
             * @memberof pb.common.TryPayReq
             * @static
             * @param {pb.common.ITryPayReq=} [properties] Properties to set
             * @returns {pb.common.TryPayReq} TryPayReq instance
             */
            TryPayReq.create = function create(properties) {
                return new TryPayReq(properties);
            };

            /**
             * Encodes the specified TryPayReq message. Does not implicitly {@link pb.common.TryPayReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.TryPayReq
             * @static
             * @param {pb.common.ITryPayReq} message TryPayReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TryPayReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.quantity != null && message.hasOwnProperty("quantity"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.quantity);
                return writer;
            };

            /**
             * Encodes the specified TryPayReq message, length delimited. Does not implicitly {@link pb.common.TryPayReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.TryPayReq
             * @static
             * @param {pb.common.ITryPayReq} message TryPayReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TryPayReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TryPayReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.TryPayReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.TryPayReq} TryPayReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TryPayReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.TryPayReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.quantity = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a TryPayReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.TryPayReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.TryPayReq} TryPayReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TryPayReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TryPayReq message.
             * @function verify
             * @memberof pb.common.TryPayReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TryPayReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                if (message.quantity != null && message.hasOwnProperty("quantity"))
                    if (!$util.isInteger(message.quantity))
                        return "quantity: integer expected";
                return null;
            };

            /**
             * Creates a TryPayReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.TryPayReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.TryPayReq} TryPayReq
             */
            TryPayReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.TryPayReq)
                    return object;
                var message = new $root.pb.common.TryPayReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.TryPayReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                if (object.quantity != null)
                    message.quantity = object.quantity | 0;
                return message;
            };

            /**
             * Creates a plain object from a TryPayReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.TryPayReq
             * @static
             * @param {pb.common.TryPayReq} message TryPayReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TryPayReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.req = null;
                    object.quantity = 0;
                }
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                if (message.quantity != null && message.hasOwnProperty("quantity"))
                    object.quantity = message.quantity;
                return object;
            };

            /**
             * Converts this TryPayReq to JSON.
             * @function toJSON
             * @memberof pb.common.TryPayReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TryPayReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return TryPayReq;
        })();

        common.TryPayRsp = (function() {

            /**
             * Properties of a TryPayRsp.
             * @memberof pb.common
             * @interface ITryPayRsp
             * @property {pb.common.IBaseRsp|null} [rsp] TryPayRsp rsp
             * @property {number|null} [payment] TryPayRsp payment
             * @property {number|null} [balance] TryPayRsp balance
             * @property {number|null} [cash] TryPayRsp cash
             */

            /**
             * Constructs a new TryPayRsp.
             * @memberof pb.common
             * @classdesc Represents a TryPayRsp.
             * @implements ITryPayRsp
             * @constructor
             * @param {pb.common.ITryPayRsp=} [properties] Properties to set
             */
            function TryPayRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * TryPayRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.TryPayRsp
             * @instance
             */
            TryPayRsp.prototype.rsp = null;

            /**
             * TryPayRsp payment.
             * @member {number} payment
             * @memberof pb.common.TryPayRsp
             * @instance
             */
            TryPayRsp.prototype.payment = 0;

            /**
             * TryPayRsp balance.
             * @member {number} balance
             * @memberof pb.common.TryPayRsp
             * @instance
             */
            TryPayRsp.prototype.balance = 0;

            /**
             * TryPayRsp cash.
             * @member {number} cash
             * @memberof pb.common.TryPayRsp
             * @instance
             */
            TryPayRsp.prototype.cash = 0;

            /**
             * Creates a new TryPayRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.TryPayRsp
             * @static
             * @param {pb.common.ITryPayRsp=} [properties] Properties to set
             * @returns {pb.common.TryPayRsp} TryPayRsp instance
             */
            TryPayRsp.create = function create(properties) {
                return new TryPayRsp(properties);
            };

            /**
             * Encodes the specified TryPayRsp message. Does not implicitly {@link pb.common.TryPayRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.TryPayRsp
             * @static
             * @param {pb.common.ITryPayRsp} message TryPayRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TryPayRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.payment != null && message.hasOwnProperty("payment"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.payment);
                if (message.balance != null && message.hasOwnProperty("balance"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.balance);
                if (message.cash != null && message.hasOwnProperty("cash"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.cash);
                return writer;
            };

            /**
             * Encodes the specified TryPayRsp message, length delimited. Does not implicitly {@link pb.common.TryPayRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.TryPayRsp
             * @static
             * @param {pb.common.ITryPayRsp} message TryPayRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TryPayRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TryPayRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.TryPayRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.TryPayRsp} TryPayRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TryPayRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.TryPayRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.payment = reader.int32();
                        break;
                    case 3:
                        message.balance = reader.int32();
                        break;
                    case 4:
                        message.cash = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a TryPayRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.TryPayRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.TryPayRsp} TryPayRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TryPayRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TryPayRsp message.
             * @function verify
             * @memberof pb.common.TryPayRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TryPayRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                if (message.payment != null && message.hasOwnProperty("payment"))
                    if (!$util.isInteger(message.payment))
                        return "payment: integer expected";
                if (message.balance != null && message.hasOwnProperty("balance"))
                    if (!$util.isInteger(message.balance))
                        return "balance: integer expected";
                if (message.cash != null && message.hasOwnProperty("cash"))
                    if (!$util.isInteger(message.cash))
                        return "cash: integer expected";
                return null;
            };

            /**
             * Creates a TryPayRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.TryPayRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.TryPayRsp} TryPayRsp
             */
            TryPayRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.TryPayRsp)
                    return object;
                var message = new $root.pb.common.TryPayRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.TryPayRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                if (object.payment != null)
                    message.payment = object.payment | 0;
                if (object.balance != null)
                    message.balance = object.balance | 0;
                if (object.cash != null)
                    message.cash = object.cash | 0;
                return message;
            };

            /**
             * Creates a plain object from a TryPayRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.TryPayRsp
             * @static
             * @param {pb.common.TryPayRsp} message TryPayRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TryPayRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.rsp = null;
                    object.payment = 0;
                    object.balance = 0;
                    object.cash = 0;
                }
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                if (message.payment != null && message.hasOwnProperty("payment"))
                    object.payment = message.payment;
                if (message.balance != null && message.hasOwnProperty("balance"))
                    object.balance = message.balance;
                if (message.cash != null && message.hasOwnProperty("cash"))
                    object.cash = message.cash;
                return object;
            };

            /**
             * Converts this TryPayRsp to JSON.
             * @function toJSON
             * @memberof pb.common.TryPayRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TryPayRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return TryPayRsp;
        })();

        common.AuctionTryRaiseReq = (function() {

            /**
             * Properties of an AuctionTryRaiseReq.
             * @memberof pb.common
             * @interface IAuctionTryRaiseReq
             * @property {pb.common.IAssetBaseReq|null} [req] AuctionTryRaiseReq req
             * @property {Long|null} [price] AuctionTryRaiseReq price
             */

            /**
             * Constructs a new AuctionTryRaiseReq.
             * @memberof pb.common
             * @classdesc Represents an AuctionTryRaiseReq.
             * @implements IAuctionTryRaiseReq
             * @constructor
             * @param {pb.common.IAuctionTryRaiseReq=} [properties] Properties to set
             */
            function AuctionTryRaiseReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AuctionTryRaiseReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.AuctionTryRaiseReq
             * @instance
             */
            AuctionTryRaiseReq.prototype.req = null;

            /**
             * AuctionTryRaiseReq price.
             * @member {Long} price
             * @memberof pb.common.AuctionTryRaiseReq
             * @instance
             */
            AuctionTryRaiseReq.prototype.price = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new AuctionTryRaiseReq instance using the specified properties.
             * @function create
             * @memberof pb.common.AuctionTryRaiseReq
             * @static
             * @param {pb.common.IAuctionTryRaiseReq=} [properties] Properties to set
             * @returns {pb.common.AuctionTryRaiseReq} AuctionTryRaiseReq instance
             */
            AuctionTryRaiseReq.create = function create(properties) {
                return new AuctionTryRaiseReq(properties);
            };

            /**
             * Encodes the specified AuctionTryRaiseReq message. Does not implicitly {@link pb.common.AuctionTryRaiseReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.AuctionTryRaiseReq
             * @static
             * @param {pb.common.IAuctionTryRaiseReq} message AuctionTryRaiseReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AuctionTryRaiseReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.price != null && message.hasOwnProperty("price"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.price);
                return writer;
            };

            /**
             * Encodes the specified AuctionTryRaiseReq message, length delimited. Does not implicitly {@link pb.common.AuctionTryRaiseReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.AuctionTryRaiseReq
             * @static
             * @param {pb.common.IAuctionTryRaiseReq} message AuctionTryRaiseReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AuctionTryRaiseReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AuctionTryRaiseReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.AuctionTryRaiseReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.AuctionTryRaiseReq} AuctionTryRaiseReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AuctionTryRaiseReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.AuctionTryRaiseReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.price = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AuctionTryRaiseReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.AuctionTryRaiseReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.AuctionTryRaiseReq} AuctionTryRaiseReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AuctionTryRaiseReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AuctionTryRaiseReq message.
             * @function verify
             * @memberof pb.common.AuctionTryRaiseReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AuctionTryRaiseReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                if (message.price != null && message.hasOwnProperty("price"))
                    if (!$util.isInteger(message.price) && !(message.price && $util.isInteger(message.price.low) && $util.isInteger(message.price.high)))
                        return "price: integer|Long expected";
                return null;
            };

            /**
             * Creates an AuctionTryRaiseReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.AuctionTryRaiseReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.AuctionTryRaiseReq} AuctionTryRaiseReq
             */
            AuctionTryRaiseReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.AuctionTryRaiseReq)
                    return object;
                var message = new $root.pb.common.AuctionTryRaiseReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.AuctionTryRaiseReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                if (object.price != null)
                    if ($util.Long)
                        (message.price = $util.Long.fromValue(object.price)).unsigned = false;
                    else if (typeof object.price === "string")
                        message.price = parseInt(object.price, 10);
                    else if (typeof object.price === "number")
                        message.price = object.price;
                    else if (typeof object.price === "object")
                        message.price = new $util.LongBits(object.price.low >>> 0, object.price.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from an AuctionTryRaiseReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.AuctionTryRaiseReq
             * @static
             * @param {pb.common.AuctionTryRaiseReq} message AuctionTryRaiseReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AuctionTryRaiseReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.req = null;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.price = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.price = options.longs === String ? "0" : 0;
                }
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                if (message.price != null && message.hasOwnProperty("price"))
                    if (typeof message.price === "number")
                        object.price = options.longs === String ? String(message.price) : message.price;
                    else
                        object.price = options.longs === String ? $util.Long.prototype.toString.call(message.price) : options.longs === Number ? new $util.LongBits(message.price.low >>> 0, message.price.high >>> 0).toNumber() : message.price;
                return object;
            };

            /**
             * Converts this AuctionTryRaiseReq to JSON.
             * @function toJSON
             * @memberof pb.common.AuctionTryRaiseReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AuctionTryRaiseReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return AuctionTryRaiseReq;
        })();

        common.AuctionTryRaiseRsp = (function() {

            /**
             * Properties of an AuctionTryRaiseRsp.
             * @memberof pb.common
             * @interface IAuctionTryRaiseRsp
             * @property {pb.common.IBaseRsp|null} [rsp] AuctionTryRaiseRsp rsp
             * @property {pb.common.PaymentType|null} [payment] AuctionTryRaiseRsp payment
             * @property {Long|null} [balance] AuctionTryRaiseRsp balance
             * @property {Long|null} [cash] AuctionTryRaiseRsp cash
             */

            /**
             * Constructs a new AuctionTryRaiseRsp.
             * @memberof pb.common
             * @classdesc Represents an AuctionTryRaiseRsp.
             * @implements IAuctionTryRaiseRsp
             * @constructor
             * @param {pb.common.IAuctionTryRaiseRsp=} [properties] Properties to set
             */
            function AuctionTryRaiseRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AuctionTryRaiseRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.AuctionTryRaiseRsp
             * @instance
             */
            AuctionTryRaiseRsp.prototype.rsp = null;

            /**
             * AuctionTryRaiseRsp payment.
             * @member {pb.common.PaymentType} payment
             * @memberof pb.common.AuctionTryRaiseRsp
             * @instance
             */
            AuctionTryRaiseRsp.prototype.payment = 0;

            /**
             * AuctionTryRaiseRsp balance.
             * @member {Long} balance
             * @memberof pb.common.AuctionTryRaiseRsp
             * @instance
             */
            AuctionTryRaiseRsp.prototype.balance = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * AuctionTryRaiseRsp cash.
             * @member {Long} cash
             * @memberof pb.common.AuctionTryRaiseRsp
             * @instance
             */
            AuctionTryRaiseRsp.prototype.cash = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new AuctionTryRaiseRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.AuctionTryRaiseRsp
             * @static
             * @param {pb.common.IAuctionTryRaiseRsp=} [properties] Properties to set
             * @returns {pb.common.AuctionTryRaiseRsp} AuctionTryRaiseRsp instance
             */
            AuctionTryRaiseRsp.create = function create(properties) {
                return new AuctionTryRaiseRsp(properties);
            };

            /**
             * Encodes the specified AuctionTryRaiseRsp message. Does not implicitly {@link pb.common.AuctionTryRaiseRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.AuctionTryRaiseRsp
             * @static
             * @param {pb.common.IAuctionTryRaiseRsp} message AuctionTryRaiseRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AuctionTryRaiseRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.payment != null && message.hasOwnProperty("payment"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.payment);
                if (message.balance != null && message.hasOwnProperty("balance"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.balance);
                if (message.cash != null && message.hasOwnProperty("cash"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.cash);
                return writer;
            };

            /**
             * Encodes the specified AuctionTryRaiseRsp message, length delimited. Does not implicitly {@link pb.common.AuctionTryRaiseRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.AuctionTryRaiseRsp
             * @static
             * @param {pb.common.IAuctionTryRaiseRsp} message AuctionTryRaiseRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AuctionTryRaiseRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AuctionTryRaiseRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.AuctionTryRaiseRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.AuctionTryRaiseRsp} AuctionTryRaiseRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AuctionTryRaiseRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.AuctionTryRaiseRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.payment = reader.int32();
                        break;
                    case 3:
                        message.balance = reader.int64();
                        break;
                    case 4:
                        message.cash = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AuctionTryRaiseRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.AuctionTryRaiseRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.AuctionTryRaiseRsp} AuctionTryRaiseRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AuctionTryRaiseRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AuctionTryRaiseRsp message.
             * @function verify
             * @memberof pb.common.AuctionTryRaiseRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AuctionTryRaiseRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                if (message.payment != null && message.hasOwnProperty("payment"))
                    switch (message.payment) {
                    default:
                        return "payment: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.balance != null && message.hasOwnProperty("balance"))
                    if (!$util.isInteger(message.balance) && !(message.balance && $util.isInteger(message.balance.low) && $util.isInteger(message.balance.high)))
                        return "balance: integer|Long expected";
                if (message.cash != null && message.hasOwnProperty("cash"))
                    if (!$util.isInteger(message.cash) && !(message.cash && $util.isInteger(message.cash.low) && $util.isInteger(message.cash.high)))
                        return "cash: integer|Long expected";
                return null;
            };

            /**
             * Creates an AuctionTryRaiseRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.AuctionTryRaiseRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.AuctionTryRaiseRsp} AuctionTryRaiseRsp
             */
            AuctionTryRaiseRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.AuctionTryRaiseRsp)
                    return object;
                var message = new $root.pb.common.AuctionTryRaiseRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.AuctionTryRaiseRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                switch (object.payment) {
                case "PAYMENT_TYPE_PLACEHOLDER":
                case 0:
                    message.payment = 0;
                    break;
                case "PAYMENT_TYPE_CASH":
                case 1:
                    message.payment = 1;
                    break;
                case "PAYMENT_TYPE_LOAN":
                case 2:
                    message.payment = 2;
                    break;
                case "PAYMENT_TYPE_CANNOT_PAY":
                case 3:
                    message.payment = 3;
                    break;
                }
                if (object.balance != null)
                    if ($util.Long)
                        (message.balance = $util.Long.fromValue(object.balance)).unsigned = false;
                    else if (typeof object.balance === "string")
                        message.balance = parseInt(object.balance, 10);
                    else if (typeof object.balance === "number")
                        message.balance = object.balance;
                    else if (typeof object.balance === "object")
                        message.balance = new $util.LongBits(object.balance.low >>> 0, object.balance.high >>> 0).toNumber();
                if (object.cash != null)
                    if ($util.Long)
                        (message.cash = $util.Long.fromValue(object.cash)).unsigned = false;
                    else if (typeof object.cash === "string")
                        message.cash = parseInt(object.cash, 10);
                    else if (typeof object.cash === "number")
                        message.cash = object.cash;
                    else if (typeof object.cash === "object")
                        message.cash = new $util.LongBits(object.cash.low >>> 0, object.cash.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from an AuctionTryRaiseRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.AuctionTryRaiseRsp
             * @static
             * @param {pb.common.AuctionTryRaiseRsp} message AuctionTryRaiseRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AuctionTryRaiseRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.rsp = null;
                    object.payment = options.enums === String ? "PAYMENT_TYPE_PLACEHOLDER" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.balance = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.balance = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.cash = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.cash = options.longs === String ? "0" : 0;
                }
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                if (message.payment != null && message.hasOwnProperty("payment"))
                    object.payment = options.enums === String ? $root.pb.common.PaymentType[message.payment] : message.payment;
                if (message.balance != null && message.hasOwnProperty("balance"))
                    if (typeof message.balance === "number")
                        object.balance = options.longs === String ? String(message.balance) : message.balance;
                    else
                        object.balance = options.longs === String ? $util.Long.prototype.toString.call(message.balance) : options.longs === Number ? new $util.LongBits(message.balance.low >>> 0, message.balance.high >>> 0).toNumber() : message.balance;
                if (message.cash != null && message.hasOwnProperty("cash"))
                    if (typeof message.cash === "number")
                        object.cash = options.longs === String ? String(message.cash) : message.cash;
                    else
                        object.cash = options.longs === String ? $util.Long.prototype.toString.call(message.cash) : options.longs === Number ? new $util.LongBits(message.cash.low >>> 0, message.cash.high >>> 0).toNumber() : message.cash;
                return object;
            };

            /**
             * Converts this AuctionTryRaiseRsp to JSON.
             * @function toJSON
             * @memberof pb.common.AuctionTryRaiseRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AuctionTryRaiseRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return AuctionTryRaiseRsp;
        })();

        common.GetStatementReq = (function() {

            /**
             * Properties of a GetStatementReq.
             * @memberof pb.common
             * @interface IGetStatementReq
             * @property {pb.common.IAssetBaseReq|null} [req] GetStatementReq req
             * @property {Long|null} [userId] GetStatementReq userId
             */

            /**
             * Constructs a new GetStatementReq.
             * @memberof pb.common
             * @classdesc Represents a GetStatementReq.
             * @implements IGetStatementReq
             * @constructor
             * @param {pb.common.IGetStatementReq=} [properties] Properties to set
             */
            function GetStatementReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GetStatementReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.GetStatementReq
             * @instance
             */
            GetStatementReq.prototype.req = null;

            /**
             * GetStatementReq userId.
             * @member {Long} userId
             * @memberof pb.common.GetStatementReq
             * @instance
             */
            GetStatementReq.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new GetStatementReq instance using the specified properties.
             * @function create
             * @memberof pb.common.GetStatementReq
             * @static
             * @param {pb.common.IGetStatementReq=} [properties] Properties to set
             * @returns {pb.common.GetStatementReq} GetStatementReq instance
             */
            GetStatementReq.create = function create(properties) {
                return new GetStatementReq(properties);
            };

            /**
             * Encodes the specified GetStatementReq message. Does not implicitly {@link pb.common.GetStatementReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GetStatementReq
             * @static
             * @param {pb.common.IGetStatementReq} message GetStatementReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetStatementReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.userId);
                return writer;
            };

            /**
             * Encodes the specified GetStatementReq message, length delimited. Does not implicitly {@link pb.common.GetStatementReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GetStatementReq
             * @static
             * @param {pb.common.IGetStatementReq} message GetStatementReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetStatementReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetStatementReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GetStatementReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GetStatementReq} GetStatementReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetStatementReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GetStatementReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.userId = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetStatementReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GetStatementReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GetStatementReq} GetStatementReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetStatementReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetStatementReq message.
             * @function verify
             * @memberof pb.common.GetStatementReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetStatementReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                return null;
            };

            /**
             * Creates a GetStatementReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GetStatementReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GetStatementReq} GetStatementReq
             */
            GetStatementReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GetStatementReq)
                    return object;
                var message = new $root.pb.common.GetStatementReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.GetStatementReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a GetStatementReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GetStatementReq
             * @static
             * @param {pb.common.GetStatementReq} message GetStatementReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetStatementReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.req = null;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                }
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                return object;
            };

            /**
             * Converts this GetStatementReq to JSON.
             * @function toJSON
             * @memberof pb.common.GetStatementReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetStatementReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GetStatementReq;
        })();

        common.GetStatementRsp = (function() {

            /**
             * Properties of a GetStatementRsp.
             * @memberof pb.common
             * @interface IGetStatementRsp
             * @property {pb.common.IBaseRsp|null} [rsp] GetStatementRsp rsp
             * @property {string|null} [JsonBody] GetStatementRsp JsonBody
             * @property {pb.common.IAssetStatement|null} [assetStatement] GetStatementRsp assetStatement
             */

            /**
             * Constructs a new GetStatementRsp.
             * @memberof pb.common
             * @classdesc Represents a GetStatementRsp.
             * @implements IGetStatementRsp
             * @constructor
             * @param {pb.common.IGetStatementRsp=} [properties] Properties to set
             */
            function GetStatementRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GetStatementRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.GetStatementRsp
             * @instance
             */
            GetStatementRsp.prototype.rsp = null;

            /**
             * GetStatementRsp JsonBody.
             * @member {string} JsonBody
             * @memberof pb.common.GetStatementRsp
             * @instance
             */
            GetStatementRsp.prototype.JsonBody = "";

            /**
             * GetStatementRsp assetStatement.
             * @member {pb.common.IAssetStatement|null|undefined} assetStatement
             * @memberof pb.common.GetStatementRsp
             * @instance
             */
            GetStatementRsp.prototype.assetStatement = null;

            /**
             * Creates a new GetStatementRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.GetStatementRsp
             * @static
             * @param {pb.common.IGetStatementRsp=} [properties] Properties to set
             * @returns {pb.common.GetStatementRsp} GetStatementRsp instance
             */
            GetStatementRsp.create = function create(properties) {
                return new GetStatementRsp(properties);
            };

            /**
             * Encodes the specified GetStatementRsp message. Does not implicitly {@link pb.common.GetStatementRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GetStatementRsp
             * @static
             * @param {pb.common.IGetStatementRsp} message GetStatementRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetStatementRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.JsonBody != null && message.hasOwnProperty("JsonBody"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.JsonBody);
                if (message.assetStatement != null && message.hasOwnProperty("assetStatement"))
                    $root.pb.common.AssetStatement.encode(message.assetStatement, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GetStatementRsp message, length delimited. Does not implicitly {@link pb.common.GetStatementRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GetStatementRsp
             * @static
             * @param {pb.common.IGetStatementRsp} message GetStatementRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetStatementRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetStatementRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GetStatementRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GetStatementRsp} GetStatementRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetStatementRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GetStatementRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.JsonBody = reader.string();
                        break;
                    case 3:
                        message.assetStatement = $root.pb.common.AssetStatement.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetStatementRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GetStatementRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GetStatementRsp} GetStatementRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetStatementRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetStatementRsp message.
             * @function verify
             * @memberof pb.common.GetStatementRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetStatementRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                if (message.JsonBody != null && message.hasOwnProperty("JsonBody"))
                    if (!$util.isString(message.JsonBody))
                        return "JsonBody: string expected";
                if (message.assetStatement != null && message.hasOwnProperty("assetStatement")) {
                    var error = $root.pb.common.AssetStatement.verify(message.assetStatement);
                    if (error)
                        return "assetStatement." + error;
                }
                return null;
            };

            /**
             * Creates a GetStatementRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GetStatementRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GetStatementRsp} GetStatementRsp
             */
            GetStatementRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GetStatementRsp)
                    return object;
                var message = new $root.pb.common.GetStatementRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.GetStatementRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                if (object.JsonBody != null)
                    message.JsonBody = String(object.JsonBody);
                if (object.assetStatement != null) {
                    if (typeof object.assetStatement !== "object")
                        throw TypeError(".pb.common.GetStatementRsp.assetStatement: object expected");
                    message.assetStatement = $root.pb.common.AssetStatement.fromObject(object.assetStatement);
                }
                return message;
            };

            /**
             * Creates a plain object from a GetStatementRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GetStatementRsp
             * @static
             * @param {pb.common.GetStatementRsp} message GetStatementRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetStatementRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.rsp = null;
                    object.JsonBody = "";
                    object.assetStatement = null;
                }
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                if (message.JsonBody != null && message.hasOwnProperty("JsonBody"))
                    object.JsonBody = message.JsonBody;
                if (message.assetStatement != null && message.hasOwnProperty("assetStatement"))
                    object.assetStatement = $root.pb.common.AssetStatement.toObject(message.assetStatement, options);
                return object;
            };

            /**
             * Converts this GetStatementRsp to JSON.
             * @function toJSON
             * @memberof pb.common.GetStatementRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetStatementRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GetStatementRsp;
        })();

        common.PassReq = (function() {

            /**
             * Properties of a PassReq.
             * @memberof pb.common
             * @interface IPassReq
             * @property {pb.common.IAssetBaseReq|null} [req] PassReq req
             */

            /**
             * Constructs a new PassReq.
             * @memberof pb.common
             * @classdesc Represents a PassReq.
             * @implements IPassReq
             * @constructor
             * @param {pb.common.IPassReq=} [properties] Properties to set
             */
            function PassReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PassReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.PassReq
             * @instance
             */
            PassReq.prototype.req = null;

            /**
             * Creates a new PassReq instance using the specified properties.
             * @function create
             * @memberof pb.common.PassReq
             * @static
             * @param {pb.common.IPassReq=} [properties] Properties to set
             * @returns {pb.common.PassReq} PassReq instance
             */
            PassReq.create = function create(properties) {
                return new PassReq(properties);
            };

            /**
             * Encodes the specified PassReq message. Does not implicitly {@link pb.common.PassReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.PassReq
             * @static
             * @param {pb.common.IPassReq} message PassReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PassReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified PassReq message, length delimited. Does not implicitly {@link pb.common.PassReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.PassReq
             * @static
             * @param {pb.common.IPassReq} message PassReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PassReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PassReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.PassReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.PassReq} PassReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PassReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.PassReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PassReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.PassReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.PassReq} PassReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PassReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PassReq message.
             * @function verify
             * @memberof pb.common.PassReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PassReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                return null;
            };

            /**
             * Creates a PassReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.PassReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.PassReq} PassReq
             */
            PassReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.PassReq)
                    return object;
                var message = new $root.pb.common.PassReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.PassReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                return message;
            };

            /**
             * Creates a plain object from a PassReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.PassReq
             * @static
             * @param {pb.common.PassReq} message PassReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PassReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.req = null;
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                return object;
            };

            /**
             * Converts this PassReq to JSON.
             * @function toJSON
             * @memberof pb.common.PassReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PassReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PassReq;
        })();

        common.PassRsp = (function() {

            /**
             * Properties of a PassRsp.
             * @memberof pb.common
             * @interface IPassRsp
             * @property {pb.common.IBaseRsp|null} [Rsp] PassRsp Rsp
             */

            /**
             * Constructs a new PassRsp.
             * @memberof pb.common
             * @classdesc Represents a PassRsp.
             * @implements IPassRsp
             * @constructor
             * @param {pb.common.IPassRsp=} [properties] Properties to set
             */
            function PassRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PassRsp Rsp.
             * @member {pb.common.IBaseRsp|null|undefined} Rsp
             * @memberof pb.common.PassRsp
             * @instance
             */
            PassRsp.prototype.Rsp = null;

            /**
             * Creates a new PassRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.PassRsp
             * @static
             * @param {pb.common.IPassRsp=} [properties] Properties to set
             * @returns {pb.common.PassRsp} PassRsp instance
             */
            PassRsp.create = function create(properties) {
                return new PassRsp(properties);
            };

            /**
             * Encodes the specified PassRsp message. Does not implicitly {@link pb.common.PassRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.PassRsp
             * @static
             * @param {pb.common.IPassRsp} message PassRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PassRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.Rsp != null && message.hasOwnProperty("Rsp"))
                    $root.pb.common.BaseRsp.encode(message.Rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified PassRsp message, length delimited. Does not implicitly {@link pb.common.PassRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.PassRsp
             * @static
             * @param {pb.common.IPassRsp} message PassRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PassRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PassRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.PassRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.PassRsp} PassRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PassRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.PassRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.Rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PassRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.PassRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.PassRsp} PassRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PassRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PassRsp message.
             * @function verify
             * @memberof pb.common.PassRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PassRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.Rsp != null && message.hasOwnProperty("Rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.Rsp);
                    if (error)
                        return "Rsp." + error;
                }
                return null;
            };

            /**
             * Creates a PassRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.PassRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.PassRsp} PassRsp
             */
            PassRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.PassRsp)
                    return object;
                var message = new $root.pb.common.PassRsp();
                if (object.Rsp != null) {
                    if (typeof object.Rsp !== "object")
                        throw TypeError(".pb.common.PassRsp.Rsp: object expected");
                    message.Rsp = $root.pb.common.BaseRsp.fromObject(object.Rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from a PassRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.PassRsp
             * @static
             * @param {pb.common.PassRsp} message PassRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PassRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.Rsp = null;
                if (message.Rsp != null && message.hasOwnProperty("Rsp"))
                    object.Rsp = $root.pb.common.BaseRsp.toObject(message.Rsp, options);
                return object;
            };

            /**
             * Converts this PassRsp to JSON.
             * @function toJSON
             * @memberof pb.common.PassRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PassRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PassRsp;
        })();

        common.PlayerAllSelectedRoleMsg = (function() {

            /**
             * Properties of a PlayerAllSelectedRoleMsg.
             * @memberof pb.common
             * @interface IPlayerAllSelectedRoleMsg
             * @property {pb.common.IGameBaseMsg|null} [base] PlayerAllSelectedRoleMsg base
             * @property {Array.<pb.common.IPlayerRole>|null} [roles] PlayerAllSelectedRoleMsg roles
             */

            /**
             * Constructs a new PlayerAllSelectedRoleMsg.
             * @memberof pb.common
             * @classdesc Represents a PlayerAllSelectedRoleMsg.
             * @implements IPlayerAllSelectedRoleMsg
             * @constructor
             * @param {pb.common.IPlayerAllSelectedRoleMsg=} [properties] Properties to set
             */
            function PlayerAllSelectedRoleMsg(properties) {
                this.roles = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PlayerAllSelectedRoleMsg base.
             * @member {pb.common.IGameBaseMsg|null|undefined} base
             * @memberof pb.common.PlayerAllSelectedRoleMsg
             * @instance
             */
            PlayerAllSelectedRoleMsg.prototype.base = null;

            /**
             * PlayerAllSelectedRoleMsg roles.
             * @member {Array.<pb.common.IPlayerRole>} roles
             * @memberof pb.common.PlayerAllSelectedRoleMsg
             * @instance
             */
            PlayerAllSelectedRoleMsg.prototype.roles = $util.emptyArray;

            /**
             * Creates a new PlayerAllSelectedRoleMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.PlayerAllSelectedRoleMsg
             * @static
             * @param {pb.common.IPlayerAllSelectedRoleMsg=} [properties] Properties to set
             * @returns {pb.common.PlayerAllSelectedRoleMsg} PlayerAllSelectedRoleMsg instance
             */
            PlayerAllSelectedRoleMsg.create = function create(properties) {
                return new PlayerAllSelectedRoleMsg(properties);
            };

            /**
             * Encodes the specified PlayerAllSelectedRoleMsg message. Does not implicitly {@link pb.common.PlayerAllSelectedRoleMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.PlayerAllSelectedRoleMsg
             * @static
             * @param {pb.common.IPlayerAllSelectedRoleMsg} message PlayerAllSelectedRoleMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerAllSelectedRoleMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.base != null && message.hasOwnProperty("base"))
                    $root.pb.common.GameBaseMsg.encode(message.base, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.roles != null && message.roles.length)
                    for (var i = 0; i < message.roles.length; ++i)
                        $root.pb.common.PlayerRole.encode(message.roles[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified PlayerAllSelectedRoleMsg message, length delimited. Does not implicitly {@link pb.common.PlayerAllSelectedRoleMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.PlayerAllSelectedRoleMsg
             * @static
             * @param {pb.common.IPlayerAllSelectedRoleMsg} message PlayerAllSelectedRoleMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerAllSelectedRoleMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PlayerAllSelectedRoleMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.PlayerAllSelectedRoleMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.PlayerAllSelectedRoleMsg} PlayerAllSelectedRoleMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerAllSelectedRoleMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.PlayerAllSelectedRoleMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.base = $root.pb.common.GameBaseMsg.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.roles && message.roles.length))
                            message.roles = [];
                        message.roles.push($root.pb.common.PlayerRole.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PlayerAllSelectedRoleMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.PlayerAllSelectedRoleMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.PlayerAllSelectedRoleMsg} PlayerAllSelectedRoleMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerAllSelectedRoleMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PlayerAllSelectedRoleMsg message.
             * @function verify
             * @memberof pb.common.PlayerAllSelectedRoleMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PlayerAllSelectedRoleMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.base != null && message.hasOwnProperty("base")) {
                    var error = $root.pb.common.GameBaseMsg.verify(message.base);
                    if (error)
                        return "base." + error;
                }
                if (message.roles != null && message.hasOwnProperty("roles")) {
                    if (!Array.isArray(message.roles))
                        return "roles: array expected";
                    for (var i = 0; i < message.roles.length; ++i) {
                        var error = $root.pb.common.PlayerRole.verify(message.roles[i]);
                        if (error)
                            return "roles." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a PlayerAllSelectedRoleMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.PlayerAllSelectedRoleMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.PlayerAllSelectedRoleMsg} PlayerAllSelectedRoleMsg
             */
            PlayerAllSelectedRoleMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.PlayerAllSelectedRoleMsg)
                    return object;
                var message = new $root.pb.common.PlayerAllSelectedRoleMsg();
                if (object.base != null) {
                    if (typeof object.base !== "object")
                        throw TypeError(".pb.common.PlayerAllSelectedRoleMsg.base: object expected");
                    message.base = $root.pb.common.GameBaseMsg.fromObject(object.base);
                }
                if (object.roles) {
                    if (!Array.isArray(object.roles))
                        throw TypeError(".pb.common.PlayerAllSelectedRoleMsg.roles: array expected");
                    message.roles = [];
                    for (var i = 0; i < object.roles.length; ++i) {
                        if (typeof object.roles[i] !== "object")
                            throw TypeError(".pb.common.PlayerAllSelectedRoleMsg.roles: object expected");
                        message.roles[i] = $root.pb.common.PlayerRole.fromObject(object.roles[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a PlayerAllSelectedRoleMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.PlayerAllSelectedRoleMsg
             * @static
             * @param {pb.common.PlayerAllSelectedRoleMsg} message PlayerAllSelectedRoleMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PlayerAllSelectedRoleMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.roles = [];
                if (options.defaults)
                    object.base = null;
                if (message.base != null && message.hasOwnProperty("base"))
                    object.base = $root.pb.common.GameBaseMsg.toObject(message.base, options);
                if (message.roles && message.roles.length) {
                    object.roles = [];
                    for (var j = 0; j < message.roles.length; ++j)
                        object.roles[j] = $root.pb.common.PlayerRole.toObject(message.roles[j], options);
                }
                return object;
            };

            /**
             * Converts this PlayerAllSelectedRoleMsg to JSON.
             * @function toJSON
             * @memberof pb.common.PlayerAllSelectedRoleMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PlayerAllSelectedRoleMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PlayerAllSelectedRoleMsg;
        })();

        common.StartMatchingReq = (function() {

            /**
             * Properties of a StartMatchingReq.
             * @memberof pb.common
             * @interface IStartMatchingReq
             * @property {pb.common.IAssetBaseReq|null} [req] StartMatchingReq req
             * @property {string|null} [roomId] StartMatchingReq roomId
             */

            /**
             * Constructs a new StartMatchingReq.
             * @memberof pb.common
             * @classdesc Represents a StartMatchingReq.
             * @implements IStartMatchingReq
             * @constructor
             * @param {pb.common.IStartMatchingReq=} [properties] Properties to set
             */
            function StartMatchingReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * StartMatchingReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.StartMatchingReq
             * @instance
             */
            StartMatchingReq.prototype.req = null;

            /**
             * StartMatchingReq roomId.
             * @member {string} roomId
             * @memberof pb.common.StartMatchingReq
             * @instance
             */
            StartMatchingReq.prototype.roomId = "";

            /**
             * Creates a new StartMatchingReq instance using the specified properties.
             * @function create
             * @memberof pb.common.StartMatchingReq
             * @static
             * @param {pb.common.IStartMatchingReq=} [properties] Properties to set
             * @returns {pb.common.StartMatchingReq} StartMatchingReq instance
             */
            StartMatchingReq.create = function create(properties) {
                return new StartMatchingReq(properties);
            };

            /**
             * Encodes the specified StartMatchingReq message. Does not implicitly {@link pb.common.StartMatchingReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.StartMatchingReq
             * @static
             * @param {pb.common.IStartMatchingReq} message StartMatchingReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StartMatchingReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.roomId);
                return writer;
            };

            /**
             * Encodes the specified StartMatchingReq message, length delimited. Does not implicitly {@link pb.common.StartMatchingReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.StartMatchingReq
             * @static
             * @param {pb.common.IStartMatchingReq} message StartMatchingReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StartMatchingReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a StartMatchingReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.StartMatchingReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.StartMatchingReq} StartMatchingReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StartMatchingReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.StartMatchingReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.roomId = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a StartMatchingReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.StartMatchingReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.StartMatchingReq} StartMatchingReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StartMatchingReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a StartMatchingReq message.
             * @function verify
             * @memberof pb.common.StartMatchingReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            StartMatchingReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    if (!$util.isString(message.roomId))
                        return "roomId: string expected";
                return null;
            };

            /**
             * Creates a StartMatchingReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.StartMatchingReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.StartMatchingReq} StartMatchingReq
             */
            StartMatchingReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.StartMatchingReq)
                    return object;
                var message = new $root.pb.common.StartMatchingReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.StartMatchingReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                if (object.roomId != null)
                    message.roomId = String(object.roomId);
                return message;
            };

            /**
             * Creates a plain object from a StartMatchingReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.StartMatchingReq
             * @static
             * @param {pb.common.StartMatchingReq} message StartMatchingReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            StartMatchingReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.req = null;
                    object.roomId = "";
                }
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    object.roomId = message.roomId;
                return object;
            };

            /**
             * Converts this StartMatchingReq to JSON.
             * @function toJSON
             * @memberof pb.common.StartMatchingReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            StartMatchingReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return StartMatchingReq;
        })();

        common.StartMatchingRsp = (function() {

            /**
             * Properties of a StartMatchingRsp.
             * @memberof pb.common
             * @interface IStartMatchingRsp
             * @property {pb.common.IBaseRsp|null} [Rsp] StartMatchingRsp Rsp
             */

            /**
             * Constructs a new StartMatchingRsp.
             * @memberof pb.common
             * @classdesc Represents a StartMatchingRsp.
             * @implements IStartMatchingRsp
             * @constructor
             * @param {pb.common.IStartMatchingRsp=} [properties] Properties to set
             */
            function StartMatchingRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * StartMatchingRsp Rsp.
             * @member {pb.common.IBaseRsp|null|undefined} Rsp
             * @memberof pb.common.StartMatchingRsp
             * @instance
             */
            StartMatchingRsp.prototype.Rsp = null;

            /**
             * Creates a new StartMatchingRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.StartMatchingRsp
             * @static
             * @param {pb.common.IStartMatchingRsp=} [properties] Properties to set
             * @returns {pb.common.StartMatchingRsp} StartMatchingRsp instance
             */
            StartMatchingRsp.create = function create(properties) {
                return new StartMatchingRsp(properties);
            };

            /**
             * Encodes the specified StartMatchingRsp message. Does not implicitly {@link pb.common.StartMatchingRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.StartMatchingRsp
             * @static
             * @param {pb.common.IStartMatchingRsp} message StartMatchingRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StartMatchingRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.Rsp != null && message.hasOwnProperty("Rsp"))
                    $root.pb.common.BaseRsp.encode(message.Rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified StartMatchingRsp message, length delimited. Does not implicitly {@link pb.common.StartMatchingRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.StartMatchingRsp
             * @static
             * @param {pb.common.IStartMatchingRsp} message StartMatchingRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StartMatchingRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a StartMatchingRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.StartMatchingRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.StartMatchingRsp} StartMatchingRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StartMatchingRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.StartMatchingRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.Rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a StartMatchingRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.StartMatchingRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.StartMatchingRsp} StartMatchingRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StartMatchingRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a StartMatchingRsp message.
             * @function verify
             * @memberof pb.common.StartMatchingRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            StartMatchingRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.Rsp != null && message.hasOwnProperty("Rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.Rsp);
                    if (error)
                        return "Rsp." + error;
                }
                return null;
            };

            /**
             * Creates a StartMatchingRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.StartMatchingRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.StartMatchingRsp} StartMatchingRsp
             */
            StartMatchingRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.StartMatchingRsp)
                    return object;
                var message = new $root.pb.common.StartMatchingRsp();
                if (object.Rsp != null) {
                    if (typeof object.Rsp !== "object")
                        throw TypeError(".pb.common.StartMatchingRsp.Rsp: object expected");
                    message.Rsp = $root.pb.common.BaseRsp.fromObject(object.Rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from a StartMatchingRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.StartMatchingRsp
             * @static
             * @param {pb.common.StartMatchingRsp} message StartMatchingRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            StartMatchingRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.Rsp = null;
                if (message.Rsp != null && message.hasOwnProperty("Rsp"))
                    object.Rsp = $root.pb.common.BaseRsp.toObject(message.Rsp, options);
                return object;
            };

            /**
             * Converts this StartMatchingRsp to JSON.
             * @function toJSON
             * @memberof pb.common.StartMatchingRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            StartMatchingRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return StartMatchingRsp;
        })();

        common.StartMatchingMsg = (function() {

            /**
             * Properties of a StartMatchingMsg.
             * @memberof pb.common
             * @interface IStartMatchingMsg
             * @property {pb.common.IGameBaseMsg|null} [base] StartMatchingMsg base
             */

            /**
             * Constructs a new StartMatchingMsg.
             * @memberof pb.common
             * @classdesc Represents a StartMatchingMsg.
             * @implements IStartMatchingMsg
             * @constructor
             * @param {pb.common.IStartMatchingMsg=} [properties] Properties to set
             */
            function StartMatchingMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * StartMatchingMsg base.
             * @member {pb.common.IGameBaseMsg|null|undefined} base
             * @memberof pb.common.StartMatchingMsg
             * @instance
             */
            StartMatchingMsg.prototype.base = null;

            /**
             * Creates a new StartMatchingMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.StartMatchingMsg
             * @static
             * @param {pb.common.IStartMatchingMsg=} [properties] Properties to set
             * @returns {pb.common.StartMatchingMsg} StartMatchingMsg instance
             */
            StartMatchingMsg.create = function create(properties) {
                return new StartMatchingMsg(properties);
            };

            /**
             * Encodes the specified StartMatchingMsg message. Does not implicitly {@link pb.common.StartMatchingMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.StartMatchingMsg
             * @static
             * @param {pb.common.IStartMatchingMsg} message StartMatchingMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StartMatchingMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.base != null && message.hasOwnProperty("base"))
                    $root.pb.common.GameBaseMsg.encode(message.base, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified StartMatchingMsg message, length delimited. Does not implicitly {@link pb.common.StartMatchingMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.StartMatchingMsg
             * @static
             * @param {pb.common.IStartMatchingMsg} message StartMatchingMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StartMatchingMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a StartMatchingMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.StartMatchingMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.StartMatchingMsg} StartMatchingMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StartMatchingMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.StartMatchingMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.base = $root.pb.common.GameBaseMsg.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a StartMatchingMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.StartMatchingMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.StartMatchingMsg} StartMatchingMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StartMatchingMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a StartMatchingMsg message.
             * @function verify
             * @memberof pb.common.StartMatchingMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            StartMatchingMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.base != null && message.hasOwnProperty("base")) {
                    var error = $root.pb.common.GameBaseMsg.verify(message.base);
                    if (error)
                        return "base." + error;
                }
                return null;
            };

            /**
             * Creates a StartMatchingMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.StartMatchingMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.StartMatchingMsg} StartMatchingMsg
             */
            StartMatchingMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.StartMatchingMsg)
                    return object;
                var message = new $root.pb.common.StartMatchingMsg();
                if (object.base != null) {
                    if (typeof object.base !== "object")
                        throw TypeError(".pb.common.StartMatchingMsg.base: object expected");
                    message.base = $root.pb.common.GameBaseMsg.fromObject(object.base);
                }
                return message;
            };

            /**
             * Creates a plain object from a StartMatchingMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.StartMatchingMsg
             * @static
             * @param {pb.common.StartMatchingMsg} message StartMatchingMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            StartMatchingMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.base = null;
                if (message.base != null && message.hasOwnProperty("base"))
                    object.base = $root.pb.common.GameBaseMsg.toObject(message.base, options);
                return object;
            };

            /**
             * Converts this StartMatchingMsg to JSON.
             * @function toJSON
             * @memberof pb.common.StartMatchingMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            StartMatchingMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return StartMatchingMsg;
        })();

        common.ExitRoomReq = (function() {

            /**
             * Properties of an ExitRoomReq.
             * @memberof pb.common
             * @interface IExitRoomReq
             * @property {pb.common.IAssetBaseReq|null} [req] ExitRoomReq req
             */

            /**
             * Constructs a new ExitRoomReq.
             * @memberof pb.common
             * @classdesc Represents an ExitRoomReq.
             * @implements IExitRoomReq
             * @constructor
             * @param {pb.common.IExitRoomReq=} [properties] Properties to set
             */
            function ExitRoomReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ExitRoomReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.ExitRoomReq
             * @instance
             */
            ExitRoomReq.prototype.req = null;

            /**
             * Creates a new ExitRoomReq instance using the specified properties.
             * @function create
             * @memberof pb.common.ExitRoomReq
             * @static
             * @param {pb.common.IExitRoomReq=} [properties] Properties to set
             * @returns {pb.common.ExitRoomReq} ExitRoomReq instance
             */
            ExitRoomReq.create = function create(properties) {
                return new ExitRoomReq(properties);
            };

            /**
             * Encodes the specified ExitRoomReq message. Does not implicitly {@link pb.common.ExitRoomReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.ExitRoomReq
             * @static
             * @param {pb.common.IExitRoomReq} message ExitRoomReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExitRoomReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ExitRoomReq message, length delimited. Does not implicitly {@link pb.common.ExitRoomReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.ExitRoomReq
             * @static
             * @param {pb.common.IExitRoomReq} message ExitRoomReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExitRoomReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an ExitRoomReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.ExitRoomReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.ExitRoomReq} ExitRoomReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExitRoomReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.ExitRoomReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an ExitRoomReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.ExitRoomReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.ExitRoomReq} ExitRoomReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExitRoomReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an ExitRoomReq message.
             * @function verify
             * @memberof pb.common.ExitRoomReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ExitRoomReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                return null;
            };

            /**
             * Creates an ExitRoomReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.ExitRoomReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.ExitRoomReq} ExitRoomReq
             */
            ExitRoomReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.ExitRoomReq)
                    return object;
                var message = new $root.pb.common.ExitRoomReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.ExitRoomReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                return message;
            };

            /**
             * Creates a plain object from an ExitRoomReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.ExitRoomReq
             * @static
             * @param {pb.common.ExitRoomReq} message ExitRoomReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ExitRoomReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.req = null;
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                return object;
            };

            /**
             * Converts this ExitRoomReq to JSON.
             * @function toJSON
             * @memberof pb.common.ExitRoomReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ExitRoomReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ExitRoomReq;
        })();

        common.ExitRoomRsp = (function() {

            /**
             * Properties of an ExitRoomRsp.
             * @memberof pb.common
             * @interface IExitRoomRsp
             * @property {pb.common.IBaseRsp|null} [rsp] ExitRoomRsp rsp
             */

            /**
             * Constructs a new ExitRoomRsp.
             * @memberof pb.common
             * @classdesc Represents an ExitRoomRsp.
             * @implements IExitRoomRsp
             * @constructor
             * @param {pb.common.IExitRoomRsp=} [properties] Properties to set
             */
            function ExitRoomRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ExitRoomRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.ExitRoomRsp
             * @instance
             */
            ExitRoomRsp.prototype.rsp = null;

            /**
             * Creates a new ExitRoomRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.ExitRoomRsp
             * @static
             * @param {pb.common.IExitRoomRsp=} [properties] Properties to set
             * @returns {pb.common.ExitRoomRsp} ExitRoomRsp instance
             */
            ExitRoomRsp.create = function create(properties) {
                return new ExitRoomRsp(properties);
            };

            /**
             * Encodes the specified ExitRoomRsp message. Does not implicitly {@link pb.common.ExitRoomRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.ExitRoomRsp
             * @static
             * @param {pb.common.IExitRoomRsp} message ExitRoomRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExitRoomRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ExitRoomRsp message, length delimited. Does not implicitly {@link pb.common.ExitRoomRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.ExitRoomRsp
             * @static
             * @param {pb.common.IExitRoomRsp} message ExitRoomRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExitRoomRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an ExitRoomRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.ExitRoomRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.ExitRoomRsp} ExitRoomRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExitRoomRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.ExitRoomRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an ExitRoomRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.ExitRoomRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.ExitRoomRsp} ExitRoomRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExitRoomRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an ExitRoomRsp message.
             * @function verify
             * @memberof pb.common.ExitRoomRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ExitRoomRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                return null;
            };

            /**
             * Creates an ExitRoomRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.ExitRoomRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.ExitRoomRsp} ExitRoomRsp
             */
            ExitRoomRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.ExitRoomRsp)
                    return object;
                var message = new $root.pb.common.ExitRoomRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.ExitRoomRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from an ExitRoomRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.ExitRoomRsp
             * @static
             * @param {pb.common.ExitRoomRsp} message ExitRoomRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ExitRoomRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                return object;
            };

            /**
             * Converts this ExitRoomRsp to JSON.
             * @function toJSON
             * @memberof pb.common.ExitRoomRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ExitRoomRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ExitRoomRsp;
        })();

        common.RoomInfoReq = (function() {

            /**
             * Properties of a RoomInfoReq.
             * @memberof pb.common
             * @interface IRoomInfoReq
             * @property {pb.common.IAssetBaseReq|null} [req] RoomInfoReq req
             * @property {string|null} [roomId] RoomInfoReq roomId
             */

            /**
             * Constructs a new RoomInfoReq.
             * @memberof pb.common
             * @classdesc Represents a RoomInfoReq.
             * @implements IRoomInfoReq
             * @constructor
             * @param {pb.common.IRoomInfoReq=} [properties] Properties to set
             */
            function RoomInfoReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RoomInfoReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.RoomInfoReq
             * @instance
             */
            RoomInfoReq.prototype.req = null;

            /**
             * RoomInfoReq roomId.
             * @member {string} roomId
             * @memberof pb.common.RoomInfoReq
             * @instance
             */
            RoomInfoReq.prototype.roomId = "";

            /**
             * Creates a new RoomInfoReq instance using the specified properties.
             * @function create
             * @memberof pb.common.RoomInfoReq
             * @static
             * @param {pb.common.IRoomInfoReq=} [properties] Properties to set
             * @returns {pb.common.RoomInfoReq} RoomInfoReq instance
             */
            RoomInfoReq.create = function create(properties) {
                return new RoomInfoReq(properties);
            };

            /**
             * Encodes the specified RoomInfoReq message. Does not implicitly {@link pb.common.RoomInfoReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.RoomInfoReq
             * @static
             * @param {pb.common.IRoomInfoReq} message RoomInfoReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoomInfoReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.roomId);
                return writer;
            };

            /**
             * Encodes the specified RoomInfoReq message, length delimited. Does not implicitly {@link pb.common.RoomInfoReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.RoomInfoReq
             * @static
             * @param {pb.common.IRoomInfoReq} message RoomInfoReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoomInfoReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RoomInfoReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.RoomInfoReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.RoomInfoReq} RoomInfoReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoomInfoReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.RoomInfoReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.roomId = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RoomInfoReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.RoomInfoReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.RoomInfoReq} RoomInfoReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoomInfoReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RoomInfoReq message.
             * @function verify
             * @memberof pb.common.RoomInfoReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RoomInfoReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    if (!$util.isString(message.roomId))
                        return "roomId: string expected";
                return null;
            };

            /**
             * Creates a RoomInfoReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.RoomInfoReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.RoomInfoReq} RoomInfoReq
             */
            RoomInfoReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.RoomInfoReq)
                    return object;
                var message = new $root.pb.common.RoomInfoReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.RoomInfoReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                if (object.roomId != null)
                    message.roomId = String(object.roomId);
                return message;
            };

            /**
             * Creates a plain object from a RoomInfoReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.RoomInfoReq
             * @static
             * @param {pb.common.RoomInfoReq} message RoomInfoReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RoomInfoReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.req = null;
                    object.roomId = "";
                }
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    object.roomId = message.roomId;
                return object;
            };

            /**
             * Converts this RoomInfoReq to JSON.
             * @function toJSON
             * @memberof pb.common.RoomInfoReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RoomInfoReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RoomInfoReq;
        })();

        common.RoomInfoRsp = (function() {

            /**
             * Properties of a RoomInfoRsp.
             * @memberof pb.common
             * @interface IRoomInfoRsp
             * @property {pb.common.IBaseRsp|null} [rsp] RoomInfoRsp rsp
             * @property {pb.common.IRoomInfo|null} [room] RoomInfoRsp room
             */

            /**
             * Constructs a new RoomInfoRsp.
             * @memberof pb.common
             * @classdesc Represents a RoomInfoRsp.
             * @implements IRoomInfoRsp
             * @constructor
             * @param {pb.common.IRoomInfoRsp=} [properties] Properties to set
             */
            function RoomInfoRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RoomInfoRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.RoomInfoRsp
             * @instance
             */
            RoomInfoRsp.prototype.rsp = null;

            /**
             * RoomInfoRsp room.
             * @member {pb.common.IRoomInfo|null|undefined} room
             * @memberof pb.common.RoomInfoRsp
             * @instance
             */
            RoomInfoRsp.prototype.room = null;

            /**
             * Creates a new RoomInfoRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.RoomInfoRsp
             * @static
             * @param {pb.common.IRoomInfoRsp=} [properties] Properties to set
             * @returns {pb.common.RoomInfoRsp} RoomInfoRsp instance
             */
            RoomInfoRsp.create = function create(properties) {
                return new RoomInfoRsp(properties);
            };

            /**
             * Encodes the specified RoomInfoRsp message. Does not implicitly {@link pb.common.RoomInfoRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.RoomInfoRsp
             * @static
             * @param {pb.common.IRoomInfoRsp} message RoomInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoomInfoRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.room != null && message.hasOwnProperty("room"))
                    $root.pb.common.RoomInfo.encode(message.room, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified RoomInfoRsp message, length delimited. Does not implicitly {@link pb.common.RoomInfoRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.RoomInfoRsp
             * @static
             * @param {pb.common.IRoomInfoRsp} message RoomInfoRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoomInfoRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RoomInfoRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.RoomInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.RoomInfoRsp} RoomInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoomInfoRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.RoomInfoRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.room = $root.pb.common.RoomInfo.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RoomInfoRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.RoomInfoRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.RoomInfoRsp} RoomInfoRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoomInfoRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RoomInfoRsp message.
             * @function verify
             * @memberof pb.common.RoomInfoRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RoomInfoRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                if (message.room != null && message.hasOwnProperty("room")) {
                    var error = $root.pb.common.RoomInfo.verify(message.room);
                    if (error)
                        return "room." + error;
                }
                return null;
            };

            /**
             * Creates a RoomInfoRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.RoomInfoRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.RoomInfoRsp} RoomInfoRsp
             */
            RoomInfoRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.RoomInfoRsp)
                    return object;
                var message = new $root.pb.common.RoomInfoRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.RoomInfoRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                if (object.room != null) {
                    if (typeof object.room !== "object")
                        throw TypeError(".pb.common.RoomInfoRsp.room: object expected");
                    message.room = $root.pb.common.RoomInfo.fromObject(object.room);
                }
                return message;
            };

            /**
             * Creates a plain object from a RoomInfoRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.RoomInfoRsp
             * @static
             * @param {pb.common.RoomInfoRsp} message RoomInfoRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RoomInfoRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.rsp = null;
                    object.room = null;
                }
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                if (message.room != null && message.hasOwnProperty("room"))
                    object.room = $root.pb.common.RoomInfo.toObject(message.room, options);
                return object;
            };

            /**
             * Converts this RoomInfoRsp to JSON.
             * @function toJSON
             * @memberof pb.common.RoomInfoRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RoomInfoRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RoomInfoRsp;
        })();

        common.RoomInfoMsg = (function() {

            /**
             * Properties of a RoomInfoMsg.
             * @memberof pb.common
             * @interface IRoomInfoMsg
             * @property {pb.common.IGameBaseMsg|null} [base] RoomInfoMsg base
             * @property {pb.common.IRoomInfo|null} [room] RoomInfoMsg room
             */

            /**
             * Constructs a new RoomInfoMsg.
             * @memberof pb.common
             * @classdesc Represents a RoomInfoMsg.
             * @implements IRoomInfoMsg
             * @constructor
             * @param {pb.common.IRoomInfoMsg=} [properties] Properties to set
             */
            function RoomInfoMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RoomInfoMsg base.
             * @member {pb.common.IGameBaseMsg|null|undefined} base
             * @memberof pb.common.RoomInfoMsg
             * @instance
             */
            RoomInfoMsg.prototype.base = null;

            /**
             * RoomInfoMsg room.
             * @member {pb.common.IRoomInfo|null|undefined} room
             * @memberof pb.common.RoomInfoMsg
             * @instance
             */
            RoomInfoMsg.prototype.room = null;

            /**
             * Creates a new RoomInfoMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.RoomInfoMsg
             * @static
             * @param {pb.common.IRoomInfoMsg=} [properties] Properties to set
             * @returns {pb.common.RoomInfoMsg} RoomInfoMsg instance
             */
            RoomInfoMsg.create = function create(properties) {
                return new RoomInfoMsg(properties);
            };

            /**
             * Encodes the specified RoomInfoMsg message. Does not implicitly {@link pb.common.RoomInfoMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.RoomInfoMsg
             * @static
             * @param {pb.common.IRoomInfoMsg} message RoomInfoMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoomInfoMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.base != null && message.hasOwnProperty("base"))
                    $root.pb.common.GameBaseMsg.encode(message.base, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.room != null && message.hasOwnProperty("room"))
                    $root.pb.common.RoomInfo.encode(message.room, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified RoomInfoMsg message, length delimited. Does not implicitly {@link pb.common.RoomInfoMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.RoomInfoMsg
             * @static
             * @param {pb.common.IRoomInfoMsg} message RoomInfoMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoomInfoMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RoomInfoMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.RoomInfoMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.RoomInfoMsg} RoomInfoMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoomInfoMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.RoomInfoMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.base = $root.pb.common.GameBaseMsg.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.room = $root.pb.common.RoomInfo.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RoomInfoMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.RoomInfoMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.RoomInfoMsg} RoomInfoMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoomInfoMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RoomInfoMsg message.
             * @function verify
             * @memberof pb.common.RoomInfoMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RoomInfoMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.base != null && message.hasOwnProperty("base")) {
                    var error = $root.pb.common.GameBaseMsg.verify(message.base);
                    if (error)
                        return "base." + error;
                }
                if (message.room != null && message.hasOwnProperty("room")) {
                    var error = $root.pb.common.RoomInfo.verify(message.room);
                    if (error)
                        return "room." + error;
                }
                return null;
            };

            /**
             * Creates a RoomInfoMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.RoomInfoMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.RoomInfoMsg} RoomInfoMsg
             */
            RoomInfoMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.RoomInfoMsg)
                    return object;
                var message = new $root.pb.common.RoomInfoMsg();
                if (object.base != null) {
                    if (typeof object.base !== "object")
                        throw TypeError(".pb.common.RoomInfoMsg.base: object expected");
                    message.base = $root.pb.common.GameBaseMsg.fromObject(object.base);
                }
                if (object.room != null) {
                    if (typeof object.room !== "object")
                        throw TypeError(".pb.common.RoomInfoMsg.room: object expected");
                    message.room = $root.pb.common.RoomInfo.fromObject(object.room);
                }
                return message;
            };

            /**
             * Creates a plain object from a RoomInfoMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.RoomInfoMsg
             * @static
             * @param {pb.common.RoomInfoMsg} message RoomInfoMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RoomInfoMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.base = null;
                    object.room = null;
                }
                if (message.base != null && message.hasOwnProperty("base"))
                    object.base = $root.pb.common.GameBaseMsg.toObject(message.base, options);
                if (message.room != null && message.hasOwnProperty("room"))
                    object.room = $root.pb.common.RoomInfo.toObject(message.room, options);
                return object;
            };

            /**
             * Converts this RoomInfoMsg to JSON.
             * @function toJSON
             * @memberof pb.common.RoomInfoMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RoomInfoMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RoomInfoMsg;
        })();

        common.CreateRoomReq = (function() {

            /**
             * Properties of a CreateRoomReq.
             * @memberof pb.common
             * @interface ICreateRoomReq
             * @property {pb.common.IAssetBaseReq|null} [req] CreateRoomReq req
             * @property {number|null} [size] CreateRoomReq size
             * @property {pb.common.MatchType|null} [matchType] CreateRoomReq matchType
             * @property {boolean|null} [isABTester] CreateRoomReq isABTester
             */

            /**
             * Constructs a new CreateRoomReq.
             * @memberof pb.common
             * @classdesc Represents a CreateRoomReq.
             * @implements ICreateRoomReq
             * @constructor
             * @param {pb.common.ICreateRoomReq=} [properties] Properties to set
             */
            function CreateRoomReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CreateRoomReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.CreateRoomReq
             * @instance
             */
            CreateRoomReq.prototype.req = null;

            /**
             * CreateRoomReq size.
             * @member {number} size
             * @memberof pb.common.CreateRoomReq
             * @instance
             */
            CreateRoomReq.prototype.size = 0;

            /**
             * CreateRoomReq matchType.
             * @member {pb.common.MatchType} matchType
             * @memberof pb.common.CreateRoomReq
             * @instance
             */
            CreateRoomReq.prototype.matchType = 0;

            /**
             * CreateRoomReq isABTester.
             * @member {boolean} isABTester
             * @memberof pb.common.CreateRoomReq
             * @instance
             */
            CreateRoomReq.prototype.isABTester = false;

            /**
             * Creates a new CreateRoomReq instance using the specified properties.
             * @function create
             * @memberof pb.common.CreateRoomReq
             * @static
             * @param {pb.common.ICreateRoomReq=} [properties] Properties to set
             * @returns {pb.common.CreateRoomReq} CreateRoomReq instance
             */
            CreateRoomReq.create = function create(properties) {
                return new CreateRoomReq(properties);
            };

            /**
             * Encodes the specified CreateRoomReq message. Does not implicitly {@link pb.common.CreateRoomReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.CreateRoomReq
             * @static
             * @param {pb.common.ICreateRoomReq} message CreateRoomReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CreateRoomReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.size != null && message.hasOwnProperty("size"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.size);
                if (message.matchType != null && message.hasOwnProperty("matchType"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.matchType);
                if (message.isABTester != null && message.hasOwnProperty("isABTester"))
                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.isABTester);
                return writer;
            };

            /**
             * Encodes the specified CreateRoomReq message, length delimited. Does not implicitly {@link pb.common.CreateRoomReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.CreateRoomReq
             * @static
             * @param {pb.common.ICreateRoomReq} message CreateRoomReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CreateRoomReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CreateRoomReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.CreateRoomReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.CreateRoomReq} CreateRoomReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CreateRoomReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.CreateRoomReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.size = reader.uint32();
                        break;
                    case 3:
                        message.matchType = reader.int32();
                        break;
                    case 4:
                        message.isABTester = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CreateRoomReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.CreateRoomReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.CreateRoomReq} CreateRoomReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CreateRoomReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CreateRoomReq message.
             * @function verify
             * @memberof pb.common.CreateRoomReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CreateRoomReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                if (message.size != null && message.hasOwnProperty("size"))
                    if (!$util.isInteger(message.size))
                        return "size: integer expected";
                if (message.matchType != null && message.hasOwnProperty("matchType"))
                    switch (message.matchType) {
                    default:
                        return "matchType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.isABTester != null && message.hasOwnProperty("isABTester"))
                    if (typeof message.isABTester !== "boolean")
                        return "isABTester: boolean expected";
                return null;
            };

            /**
             * Creates a CreateRoomReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.CreateRoomReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.CreateRoomReq} CreateRoomReq
             */
            CreateRoomReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.CreateRoomReq)
                    return object;
                var message = new $root.pb.common.CreateRoomReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.CreateRoomReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                if (object.size != null)
                    message.size = object.size >>> 0;
                switch (object.matchType) {
                case "UNKNOWN":
                case 0:
                    message.matchType = 0;
                    break;
                case "STANDARD":
                case 1:
                    message.matchType = 1;
                    break;
                case "RANK":
                case 2:
                    message.matchType = 2;
                    break;
                case "TRAINING":
                case 3:
                    message.matchType = 3;
                    break;
                }
                if (object.isABTester != null)
                    message.isABTester = Boolean(object.isABTester);
                return message;
            };

            /**
             * Creates a plain object from a CreateRoomReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.CreateRoomReq
             * @static
             * @param {pb.common.CreateRoomReq} message CreateRoomReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CreateRoomReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.req = null;
                    object.size = 0;
                    object.matchType = options.enums === String ? "UNKNOWN" : 0;
                    object.isABTester = false;
                }
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                if (message.size != null && message.hasOwnProperty("size"))
                    object.size = message.size;
                if (message.matchType != null && message.hasOwnProperty("matchType"))
                    object.matchType = options.enums === String ? $root.pb.common.MatchType[message.matchType] : message.matchType;
                if (message.isABTester != null && message.hasOwnProperty("isABTester"))
                    object.isABTester = message.isABTester;
                return object;
            };

            /**
             * Converts this CreateRoomReq to JSON.
             * @function toJSON
             * @memberof pb.common.CreateRoomReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CreateRoomReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CreateRoomReq;
        })();

        common.CreateRoomRsp = (function() {

            /**
             * Properties of a CreateRoomRsp.
             * @memberof pb.common
             * @interface ICreateRoomRsp
             * @property {pb.common.IBaseRsp|null} [rsp] CreateRoomRsp rsp
             * @property {pb.common.IRoomInfo|null} [room] CreateRoomRsp room
             */

            /**
             * Constructs a new CreateRoomRsp.
             * @memberof pb.common
             * @classdesc Represents a CreateRoomRsp.
             * @implements ICreateRoomRsp
             * @constructor
             * @param {pb.common.ICreateRoomRsp=} [properties] Properties to set
             */
            function CreateRoomRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CreateRoomRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.CreateRoomRsp
             * @instance
             */
            CreateRoomRsp.prototype.rsp = null;

            /**
             * CreateRoomRsp room.
             * @member {pb.common.IRoomInfo|null|undefined} room
             * @memberof pb.common.CreateRoomRsp
             * @instance
             */
            CreateRoomRsp.prototype.room = null;

            /**
             * Creates a new CreateRoomRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.CreateRoomRsp
             * @static
             * @param {pb.common.ICreateRoomRsp=} [properties] Properties to set
             * @returns {pb.common.CreateRoomRsp} CreateRoomRsp instance
             */
            CreateRoomRsp.create = function create(properties) {
                return new CreateRoomRsp(properties);
            };

            /**
             * Encodes the specified CreateRoomRsp message. Does not implicitly {@link pb.common.CreateRoomRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.CreateRoomRsp
             * @static
             * @param {pb.common.ICreateRoomRsp} message CreateRoomRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CreateRoomRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.room != null && message.hasOwnProperty("room"))
                    $root.pb.common.RoomInfo.encode(message.room, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified CreateRoomRsp message, length delimited. Does not implicitly {@link pb.common.CreateRoomRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.CreateRoomRsp
             * @static
             * @param {pb.common.ICreateRoomRsp} message CreateRoomRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CreateRoomRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CreateRoomRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.CreateRoomRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.CreateRoomRsp} CreateRoomRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CreateRoomRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.CreateRoomRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.room = $root.pb.common.RoomInfo.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CreateRoomRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.CreateRoomRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.CreateRoomRsp} CreateRoomRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CreateRoomRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CreateRoomRsp message.
             * @function verify
             * @memberof pb.common.CreateRoomRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CreateRoomRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                if (message.room != null && message.hasOwnProperty("room")) {
                    var error = $root.pb.common.RoomInfo.verify(message.room);
                    if (error)
                        return "room." + error;
                }
                return null;
            };

            /**
             * Creates a CreateRoomRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.CreateRoomRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.CreateRoomRsp} CreateRoomRsp
             */
            CreateRoomRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.CreateRoomRsp)
                    return object;
                var message = new $root.pb.common.CreateRoomRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.CreateRoomRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                if (object.room != null) {
                    if (typeof object.room !== "object")
                        throw TypeError(".pb.common.CreateRoomRsp.room: object expected");
                    message.room = $root.pb.common.RoomInfo.fromObject(object.room);
                }
                return message;
            };

            /**
             * Creates a plain object from a CreateRoomRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.CreateRoomRsp
             * @static
             * @param {pb.common.CreateRoomRsp} message CreateRoomRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CreateRoomRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.rsp = null;
                    object.room = null;
                }
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                if (message.room != null && message.hasOwnProperty("room"))
                    object.room = $root.pb.common.RoomInfo.toObject(message.room, options);
                return object;
            };

            /**
             * Converts this CreateRoomRsp to JSON.
             * @function toJSON
             * @memberof pb.common.CreateRoomRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CreateRoomRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CreateRoomRsp;
        })();

        common.GetAvailableRoomSizeReq = (function() {

            /**
             * Properties of a GetAvailableRoomSizeReq.
             * @memberof pb.common
             * @interface IGetAvailableRoomSizeReq
             * @property {pb.common.IAssetBaseReq|null} [req] GetAvailableRoomSizeReq req
             * @property {pb.common.MatchType|null} [matchType] GetAvailableRoomSizeReq matchType
             */

            /**
             * Constructs a new GetAvailableRoomSizeReq.
             * @memberof pb.common
             * @classdesc Represents a GetAvailableRoomSizeReq.
             * @implements IGetAvailableRoomSizeReq
             * @constructor
             * @param {pb.common.IGetAvailableRoomSizeReq=} [properties] Properties to set
             */
            function GetAvailableRoomSizeReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GetAvailableRoomSizeReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.GetAvailableRoomSizeReq
             * @instance
             */
            GetAvailableRoomSizeReq.prototype.req = null;

            /**
             * GetAvailableRoomSizeReq matchType.
             * @member {pb.common.MatchType} matchType
             * @memberof pb.common.GetAvailableRoomSizeReq
             * @instance
             */
            GetAvailableRoomSizeReq.prototype.matchType = 0;

            /**
             * Creates a new GetAvailableRoomSizeReq instance using the specified properties.
             * @function create
             * @memberof pb.common.GetAvailableRoomSizeReq
             * @static
             * @param {pb.common.IGetAvailableRoomSizeReq=} [properties] Properties to set
             * @returns {pb.common.GetAvailableRoomSizeReq} GetAvailableRoomSizeReq instance
             */
            GetAvailableRoomSizeReq.create = function create(properties) {
                return new GetAvailableRoomSizeReq(properties);
            };

            /**
             * Encodes the specified GetAvailableRoomSizeReq message. Does not implicitly {@link pb.common.GetAvailableRoomSizeReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GetAvailableRoomSizeReq
             * @static
             * @param {pb.common.IGetAvailableRoomSizeReq} message GetAvailableRoomSizeReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetAvailableRoomSizeReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.matchType != null && message.hasOwnProperty("matchType"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.matchType);
                return writer;
            };

            /**
             * Encodes the specified GetAvailableRoomSizeReq message, length delimited. Does not implicitly {@link pb.common.GetAvailableRoomSizeReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GetAvailableRoomSizeReq
             * @static
             * @param {pb.common.IGetAvailableRoomSizeReq} message GetAvailableRoomSizeReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetAvailableRoomSizeReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetAvailableRoomSizeReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GetAvailableRoomSizeReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GetAvailableRoomSizeReq} GetAvailableRoomSizeReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetAvailableRoomSizeReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GetAvailableRoomSizeReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.matchType = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetAvailableRoomSizeReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GetAvailableRoomSizeReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GetAvailableRoomSizeReq} GetAvailableRoomSizeReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetAvailableRoomSizeReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetAvailableRoomSizeReq message.
             * @function verify
             * @memberof pb.common.GetAvailableRoomSizeReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetAvailableRoomSizeReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                if (message.matchType != null && message.hasOwnProperty("matchType"))
                    switch (message.matchType) {
                    default:
                        return "matchType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                return null;
            };

            /**
             * Creates a GetAvailableRoomSizeReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GetAvailableRoomSizeReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GetAvailableRoomSizeReq} GetAvailableRoomSizeReq
             */
            GetAvailableRoomSizeReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GetAvailableRoomSizeReq)
                    return object;
                var message = new $root.pb.common.GetAvailableRoomSizeReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.GetAvailableRoomSizeReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                switch (object.matchType) {
                case "UNKNOWN":
                case 0:
                    message.matchType = 0;
                    break;
                case "STANDARD":
                case 1:
                    message.matchType = 1;
                    break;
                case "RANK":
                case 2:
                    message.matchType = 2;
                    break;
                case "TRAINING":
                case 3:
                    message.matchType = 3;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a GetAvailableRoomSizeReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GetAvailableRoomSizeReq
             * @static
             * @param {pb.common.GetAvailableRoomSizeReq} message GetAvailableRoomSizeReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetAvailableRoomSizeReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.req = null;
                    object.matchType = options.enums === String ? "UNKNOWN" : 0;
                }
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                if (message.matchType != null && message.hasOwnProperty("matchType"))
                    object.matchType = options.enums === String ? $root.pb.common.MatchType[message.matchType] : message.matchType;
                return object;
            };

            /**
             * Converts this GetAvailableRoomSizeReq to JSON.
             * @function toJSON
             * @memberof pb.common.GetAvailableRoomSizeReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetAvailableRoomSizeReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GetAvailableRoomSizeReq;
        })();

        common.GetAvailableRoomSizeRsp = (function() {

            /**
             * Properties of a GetAvailableRoomSizeRsp.
             * @memberof pb.common
             * @interface IGetAvailableRoomSizeRsp
             * @property {pb.common.IBaseRsp|null} [rsp] GetAvailableRoomSizeRsp rsp
             * @property {Array.<number>|null} [sizes] GetAvailableRoomSizeRsp sizes
             */

            /**
             * Constructs a new GetAvailableRoomSizeRsp.
             * @memberof pb.common
             * @classdesc Represents a GetAvailableRoomSizeRsp.
             * @implements IGetAvailableRoomSizeRsp
             * @constructor
             * @param {pb.common.IGetAvailableRoomSizeRsp=} [properties] Properties to set
             */
            function GetAvailableRoomSizeRsp(properties) {
                this.sizes = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GetAvailableRoomSizeRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.GetAvailableRoomSizeRsp
             * @instance
             */
            GetAvailableRoomSizeRsp.prototype.rsp = null;

            /**
             * GetAvailableRoomSizeRsp sizes.
             * @member {Array.<number>} sizes
             * @memberof pb.common.GetAvailableRoomSizeRsp
             * @instance
             */
            GetAvailableRoomSizeRsp.prototype.sizes = $util.emptyArray;

            /**
             * Creates a new GetAvailableRoomSizeRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.GetAvailableRoomSizeRsp
             * @static
             * @param {pb.common.IGetAvailableRoomSizeRsp=} [properties] Properties to set
             * @returns {pb.common.GetAvailableRoomSizeRsp} GetAvailableRoomSizeRsp instance
             */
            GetAvailableRoomSizeRsp.create = function create(properties) {
                return new GetAvailableRoomSizeRsp(properties);
            };

            /**
             * Encodes the specified GetAvailableRoomSizeRsp message. Does not implicitly {@link pb.common.GetAvailableRoomSizeRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GetAvailableRoomSizeRsp
             * @static
             * @param {pb.common.IGetAvailableRoomSizeRsp} message GetAvailableRoomSizeRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetAvailableRoomSizeRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.sizes != null && message.sizes.length) {
                    writer.uint32(/* id 2, wireType 2 =*/18).fork();
                    for (var i = 0; i < message.sizes.length; ++i)
                        writer.uint32(message.sizes[i]);
                    writer.ldelim();
                }
                return writer;
            };

            /**
             * Encodes the specified GetAvailableRoomSizeRsp message, length delimited. Does not implicitly {@link pb.common.GetAvailableRoomSizeRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GetAvailableRoomSizeRsp
             * @static
             * @param {pb.common.IGetAvailableRoomSizeRsp} message GetAvailableRoomSizeRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetAvailableRoomSizeRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetAvailableRoomSizeRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GetAvailableRoomSizeRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GetAvailableRoomSizeRsp} GetAvailableRoomSizeRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetAvailableRoomSizeRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GetAvailableRoomSizeRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.sizes && message.sizes.length))
                            message.sizes = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.sizes.push(reader.uint32());
                        } else
                            message.sizes.push(reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetAvailableRoomSizeRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GetAvailableRoomSizeRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GetAvailableRoomSizeRsp} GetAvailableRoomSizeRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetAvailableRoomSizeRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetAvailableRoomSizeRsp message.
             * @function verify
             * @memberof pb.common.GetAvailableRoomSizeRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetAvailableRoomSizeRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                if (message.sizes != null && message.hasOwnProperty("sizes")) {
                    if (!Array.isArray(message.sizes))
                        return "sizes: array expected";
                    for (var i = 0; i < message.sizes.length; ++i)
                        if (!$util.isInteger(message.sizes[i]))
                            return "sizes: integer[] expected";
                }
                return null;
            };

            /**
             * Creates a GetAvailableRoomSizeRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GetAvailableRoomSizeRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GetAvailableRoomSizeRsp} GetAvailableRoomSizeRsp
             */
            GetAvailableRoomSizeRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GetAvailableRoomSizeRsp)
                    return object;
                var message = new $root.pb.common.GetAvailableRoomSizeRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.GetAvailableRoomSizeRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                if (object.sizes) {
                    if (!Array.isArray(object.sizes))
                        throw TypeError(".pb.common.GetAvailableRoomSizeRsp.sizes: array expected");
                    message.sizes = [];
                    for (var i = 0; i < object.sizes.length; ++i)
                        message.sizes[i] = object.sizes[i] >>> 0;
                }
                return message;
            };

            /**
             * Creates a plain object from a GetAvailableRoomSizeRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GetAvailableRoomSizeRsp
             * @static
             * @param {pb.common.GetAvailableRoomSizeRsp} message GetAvailableRoomSizeRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetAvailableRoomSizeRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.sizes = [];
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                if (message.sizes && message.sizes.length) {
                    object.sizes = [];
                    for (var j = 0; j < message.sizes.length; ++j)
                        object.sizes[j] = message.sizes[j];
                }
                return object;
            };

            /**
             * Converts this GetAvailableRoomSizeRsp to JSON.
             * @function toJSON
             * @memberof pb.common.GetAvailableRoomSizeRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetAvailableRoomSizeRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GetAvailableRoomSizeRsp;
        })();

        common.InviteReq = (function() {

            /**
             * Properties of an InviteReq.
             * @memberof pb.common
             * @interface IInviteReq
             * @property {pb.common.IAssetBaseReq|null} [req] InviteReq req
             * @property {string|null} [roomId] InviteReq roomId
             * @property {Long|null} [userId] InviteReq userId
             * @property {string|null} [groupId] InviteReq groupId
             */

            /**
             * Constructs a new InviteReq.
             * @memberof pb.common
             * @classdesc Represents an InviteReq.
             * @implements IInviteReq
             * @constructor
             * @param {pb.common.IInviteReq=} [properties] Properties to set
             */
            function InviteReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * InviteReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.InviteReq
             * @instance
             */
            InviteReq.prototype.req = null;

            /**
             * InviteReq roomId.
             * @member {string} roomId
             * @memberof pb.common.InviteReq
             * @instance
             */
            InviteReq.prototype.roomId = "";

            /**
             * InviteReq userId.
             * @member {Long} userId
             * @memberof pb.common.InviteReq
             * @instance
             */
            InviteReq.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * InviteReq groupId.
             * @member {string} groupId
             * @memberof pb.common.InviteReq
             * @instance
             */
            InviteReq.prototype.groupId = "";

            /**
             * Creates a new InviteReq instance using the specified properties.
             * @function create
             * @memberof pb.common.InviteReq
             * @static
             * @param {pb.common.IInviteReq=} [properties] Properties to set
             * @returns {pb.common.InviteReq} InviteReq instance
             */
            InviteReq.create = function create(properties) {
                return new InviteReq(properties);
            };

            /**
             * Encodes the specified InviteReq message. Does not implicitly {@link pb.common.InviteReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.InviteReq
             * @static
             * @param {pb.common.IInviteReq} message InviteReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            InviteReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.roomId);
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.userId);
                if (message.groupId != null && message.hasOwnProperty("groupId"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.groupId);
                return writer;
            };

            /**
             * Encodes the specified InviteReq message, length delimited. Does not implicitly {@link pb.common.InviteReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.InviteReq
             * @static
             * @param {pb.common.IInviteReq} message InviteReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            InviteReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an InviteReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.InviteReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.InviteReq} InviteReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            InviteReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.InviteReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.roomId = reader.string();
                        break;
                    case 3:
                        message.userId = reader.int64();
                        break;
                    case 4:
                        message.groupId = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an InviteReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.InviteReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.InviteReq} InviteReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            InviteReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an InviteReq message.
             * @function verify
             * @memberof pb.common.InviteReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            InviteReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    if (!$util.isString(message.roomId))
                        return "roomId: string expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                if (message.groupId != null && message.hasOwnProperty("groupId"))
                    if (!$util.isString(message.groupId))
                        return "groupId: string expected";
                return null;
            };

            /**
             * Creates an InviteReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.InviteReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.InviteReq} InviteReq
             */
            InviteReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.InviteReq)
                    return object;
                var message = new $root.pb.common.InviteReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.InviteReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                if (object.roomId != null)
                    message.roomId = String(object.roomId);
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                if (object.groupId != null)
                    message.groupId = String(object.groupId);
                return message;
            };

            /**
             * Creates a plain object from an InviteReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.InviteReq
             * @static
             * @param {pb.common.InviteReq} message InviteReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            InviteReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.req = null;
                    object.roomId = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                    object.groupId = "";
                }
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    object.roomId = message.roomId;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                if (message.groupId != null && message.hasOwnProperty("groupId"))
                    object.groupId = message.groupId;
                return object;
            };

            /**
             * Converts this InviteReq to JSON.
             * @function toJSON
             * @memberof pb.common.InviteReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            InviteReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return InviteReq;
        })();

        common.InviteRsp = (function() {

            /**
             * Properties of an InviteRsp.
             * @memberof pb.common
             * @interface IInviteRsp
             * @property {pb.common.IBaseRsp|null} [rsp] InviteRsp rsp
             */

            /**
             * Constructs a new InviteRsp.
             * @memberof pb.common
             * @classdesc Represents an InviteRsp.
             * @implements IInviteRsp
             * @constructor
             * @param {pb.common.IInviteRsp=} [properties] Properties to set
             */
            function InviteRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * InviteRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.InviteRsp
             * @instance
             */
            InviteRsp.prototype.rsp = null;

            /**
             * Creates a new InviteRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.InviteRsp
             * @static
             * @param {pb.common.IInviteRsp=} [properties] Properties to set
             * @returns {pb.common.InviteRsp} InviteRsp instance
             */
            InviteRsp.create = function create(properties) {
                return new InviteRsp(properties);
            };

            /**
             * Encodes the specified InviteRsp message. Does not implicitly {@link pb.common.InviteRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.InviteRsp
             * @static
             * @param {pb.common.IInviteRsp} message InviteRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            InviteRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified InviteRsp message, length delimited. Does not implicitly {@link pb.common.InviteRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.InviteRsp
             * @static
             * @param {pb.common.IInviteRsp} message InviteRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            InviteRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an InviteRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.InviteRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.InviteRsp} InviteRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            InviteRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.InviteRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an InviteRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.InviteRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.InviteRsp} InviteRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            InviteRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an InviteRsp message.
             * @function verify
             * @memberof pb.common.InviteRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            InviteRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                return null;
            };

            /**
             * Creates an InviteRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.InviteRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.InviteRsp} InviteRsp
             */
            InviteRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.InviteRsp)
                    return object;
                var message = new $root.pb.common.InviteRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.InviteRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from an InviteRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.InviteRsp
             * @static
             * @param {pb.common.InviteRsp} message InviteRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            InviteRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                return object;
            };

            /**
             * Converts this InviteRsp to JSON.
             * @function toJSON
             * @memberof pb.common.InviteRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            InviteRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return InviteRsp;
        })();

        common.InviteMsg = (function() {

            /**
             * Properties of an InviteMsg.
             * @memberof pb.common
             * @interface IInviteMsg
             * @property {pb.common.IGameBaseMsg|null} [base] InviteMsg base
             * @property {string|null} [roomId] InviteMsg roomId
             * @property {pb.common.IPlayerInfo|null} [invitor] InviteMsg invitor
             */

            /**
             * Constructs a new InviteMsg.
             * @memberof pb.common
             * @classdesc Represents an InviteMsg.
             * @implements IInviteMsg
             * @constructor
             * @param {pb.common.IInviteMsg=} [properties] Properties to set
             */
            function InviteMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * InviteMsg base.
             * @member {pb.common.IGameBaseMsg|null|undefined} base
             * @memberof pb.common.InviteMsg
             * @instance
             */
            InviteMsg.prototype.base = null;

            /**
             * InviteMsg roomId.
             * @member {string} roomId
             * @memberof pb.common.InviteMsg
             * @instance
             */
            InviteMsg.prototype.roomId = "";

            /**
             * InviteMsg invitor.
             * @member {pb.common.IPlayerInfo|null|undefined} invitor
             * @memberof pb.common.InviteMsg
             * @instance
             */
            InviteMsg.prototype.invitor = null;

            /**
             * Creates a new InviteMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.InviteMsg
             * @static
             * @param {pb.common.IInviteMsg=} [properties] Properties to set
             * @returns {pb.common.InviteMsg} InviteMsg instance
             */
            InviteMsg.create = function create(properties) {
                return new InviteMsg(properties);
            };

            /**
             * Encodes the specified InviteMsg message. Does not implicitly {@link pb.common.InviteMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.InviteMsg
             * @static
             * @param {pb.common.IInviteMsg} message InviteMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            InviteMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.base != null && message.hasOwnProperty("base"))
                    $root.pb.common.GameBaseMsg.encode(message.base, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.roomId);
                if (message.invitor != null && message.hasOwnProperty("invitor"))
                    $root.pb.common.PlayerInfo.encode(message.invitor, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified InviteMsg message, length delimited. Does not implicitly {@link pb.common.InviteMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.InviteMsg
             * @static
             * @param {pb.common.IInviteMsg} message InviteMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            InviteMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an InviteMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.InviteMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.InviteMsg} InviteMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            InviteMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.InviteMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.base = $root.pb.common.GameBaseMsg.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.roomId = reader.string();
                        break;
                    case 3:
                        message.invitor = $root.pb.common.PlayerInfo.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an InviteMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.InviteMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.InviteMsg} InviteMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            InviteMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an InviteMsg message.
             * @function verify
             * @memberof pb.common.InviteMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            InviteMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.base != null && message.hasOwnProperty("base")) {
                    var error = $root.pb.common.GameBaseMsg.verify(message.base);
                    if (error)
                        return "base." + error;
                }
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    if (!$util.isString(message.roomId))
                        return "roomId: string expected";
                if (message.invitor != null && message.hasOwnProperty("invitor")) {
                    var error = $root.pb.common.PlayerInfo.verify(message.invitor);
                    if (error)
                        return "invitor." + error;
                }
                return null;
            };

            /**
             * Creates an InviteMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.InviteMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.InviteMsg} InviteMsg
             */
            InviteMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.InviteMsg)
                    return object;
                var message = new $root.pb.common.InviteMsg();
                if (object.base != null) {
                    if (typeof object.base !== "object")
                        throw TypeError(".pb.common.InviteMsg.base: object expected");
                    message.base = $root.pb.common.GameBaseMsg.fromObject(object.base);
                }
                if (object.roomId != null)
                    message.roomId = String(object.roomId);
                if (object.invitor != null) {
                    if (typeof object.invitor !== "object")
                        throw TypeError(".pb.common.InviteMsg.invitor: object expected");
                    message.invitor = $root.pb.common.PlayerInfo.fromObject(object.invitor);
                }
                return message;
            };

            /**
             * Creates a plain object from an InviteMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.InviteMsg
             * @static
             * @param {pb.common.InviteMsg} message InviteMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            InviteMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.base = null;
                    object.roomId = "";
                    object.invitor = null;
                }
                if (message.base != null && message.hasOwnProperty("base"))
                    object.base = $root.pb.common.GameBaseMsg.toObject(message.base, options);
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    object.roomId = message.roomId;
                if (message.invitor != null && message.hasOwnProperty("invitor"))
                    object.invitor = $root.pb.common.PlayerInfo.toObject(message.invitor, options);
                return object;
            };

            /**
             * Converts this InviteMsg to JSON.
             * @function toJSON
             * @memberof pb.common.InviteMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            InviteMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return InviteMsg;
        })();

        common.EnterRoomReq = (function() {

            /**
             * Properties of an EnterRoomReq.
             * @memberof pb.common
             * @interface IEnterRoomReq
             * @property {pb.common.IAssetBaseReq|null} [req] EnterRoomReq req
             * @property {string|null} [roomId] EnterRoomReq roomId
             * @property {number|null} [roomNum] EnterRoomReq roomNum
             */

            /**
             * Constructs a new EnterRoomReq.
             * @memberof pb.common
             * @classdesc Represents an EnterRoomReq.
             * @implements IEnterRoomReq
             * @constructor
             * @param {pb.common.IEnterRoomReq=} [properties] Properties to set
             */
            function EnterRoomReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnterRoomReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.EnterRoomReq
             * @instance
             */
            EnterRoomReq.prototype.req = null;

            /**
             * EnterRoomReq roomId.
             * @member {string} roomId
             * @memberof pb.common.EnterRoomReq
             * @instance
             */
            EnterRoomReq.prototype.roomId = "";

            /**
             * EnterRoomReq roomNum.
             * @member {number} roomNum
             * @memberof pb.common.EnterRoomReq
             * @instance
             */
            EnterRoomReq.prototype.roomNum = 0;

            /**
             * Creates a new EnterRoomReq instance using the specified properties.
             * @function create
             * @memberof pb.common.EnterRoomReq
             * @static
             * @param {pb.common.IEnterRoomReq=} [properties] Properties to set
             * @returns {pb.common.EnterRoomReq} EnterRoomReq instance
             */
            EnterRoomReq.create = function create(properties) {
                return new EnterRoomReq(properties);
            };

            /**
             * Encodes the specified EnterRoomReq message. Does not implicitly {@link pb.common.EnterRoomReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.EnterRoomReq
             * @static
             * @param {pb.common.IEnterRoomReq} message EnterRoomReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnterRoomReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.roomId);
                if (message.roomNum != null && message.hasOwnProperty("roomNum"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.roomNum);
                return writer;
            };

            /**
             * Encodes the specified EnterRoomReq message, length delimited. Does not implicitly {@link pb.common.EnterRoomReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.EnterRoomReq
             * @static
             * @param {pb.common.IEnterRoomReq} message EnterRoomReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnterRoomReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnterRoomReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.EnterRoomReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.EnterRoomReq} EnterRoomReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnterRoomReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.EnterRoomReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.roomId = reader.string();
                        break;
                    case 3:
                        message.roomNum = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnterRoomReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.EnterRoomReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.EnterRoomReq} EnterRoomReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnterRoomReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnterRoomReq message.
             * @function verify
             * @memberof pb.common.EnterRoomReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnterRoomReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    if (!$util.isString(message.roomId))
                        return "roomId: string expected";
                if (message.roomNum != null && message.hasOwnProperty("roomNum"))
                    if (!$util.isInteger(message.roomNum))
                        return "roomNum: integer expected";
                return null;
            };

            /**
             * Creates an EnterRoomReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.EnterRoomReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.EnterRoomReq} EnterRoomReq
             */
            EnterRoomReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.EnterRoomReq)
                    return object;
                var message = new $root.pb.common.EnterRoomReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.EnterRoomReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                if (object.roomId != null)
                    message.roomId = String(object.roomId);
                if (object.roomNum != null)
                    message.roomNum = object.roomNum | 0;
                return message;
            };

            /**
             * Creates a plain object from an EnterRoomReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.EnterRoomReq
             * @static
             * @param {pb.common.EnterRoomReq} message EnterRoomReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnterRoomReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.req = null;
                    object.roomId = "";
                    object.roomNum = 0;
                }
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    object.roomId = message.roomId;
                if (message.roomNum != null && message.hasOwnProperty("roomNum"))
                    object.roomNum = message.roomNum;
                return object;
            };

            /**
             * Converts this EnterRoomReq to JSON.
             * @function toJSON
             * @memberof pb.common.EnterRoomReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnterRoomReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnterRoomReq;
        })();

        common.EnterRoomRsp = (function() {

            /**
             * Properties of an EnterRoomRsp.
             * @memberof pb.common
             * @interface IEnterRoomRsp
             * @property {pb.common.IBaseRsp|null} [rsp] EnterRoomRsp rsp
             * @property {pb.common.IRoomInfo|null} [room] EnterRoomRsp room
             */

            /**
             * Constructs a new EnterRoomRsp.
             * @memberof pb.common
             * @classdesc Represents an EnterRoomRsp.
             * @implements IEnterRoomRsp
             * @constructor
             * @param {pb.common.IEnterRoomRsp=} [properties] Properties to set
             */
            function EnterRoomRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnterRoomRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.EnterRoomRsp
             * @instance
             */
            EnterRoomRsp.prototype.rsp = null;

            /**
             * EnterRoomRsp room.
             * @member {pb.common.IRoomInfo|null|undefined} room
             * @memberof pb.common.EnterRoomRsp
             * @instance
             */
            EnterRoomRsp.prototype.room = null;

            /**
             * Creates a new EnterRoomRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.EnterRoomRsp
             * @static
             * @param {pb.common.IEnterRoomRsp=} [properties] Properties to set
             * @returns {pb.common.EnterRoomRsp} EnterRoomRsp instance
             */
            EnterRoomRsp.create = function create(properties) {
                return new EnterRoomRsp(properties);
            };

            /**
             * Encodes the specified EnterRoomRsp message. Does not implicitly {@link pb.common.EnterRoomRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.EnterRoomRsp
             * @static
             * @param {pb.common.IEnterRoomRsp} message EnterRoomRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnterRoomRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.room != null && message.hasOwnProperty("room"))
                    $root.pb.common.RoomInfo.encode(message.room, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EnterRoomRsp message, length delimited. Does not implicitly {@link pb.common.EnterRoomRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.EnterRoomRsp
             * @static
             * @param {pb.common.IEnterRoomRsp} message EnterRoomRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnterRoomRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnterRoomRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.EnterRoomRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.EnterRoomRsp} EnterRoomRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnterRoomRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.EnterRoomRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.room = $root.pb.common.RoomInfo.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnterRoomRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.EnterRoomRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.EnterRoomRsp} EnterRoomRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnterRoomRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnterRoomRsp message.
             * @function verify
             * @memberof pb.common.EnterRoomRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnterRoomRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                if (message.room != null && message.hasOwnProperty("room")) {
                    var error = $root.pb.common.RoomInfo.verify(message.room);
                    if (error)
                        return "room." + error;
                }
                return null;
            };

            /**
             * Creates an EnterRoomRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.EnterRoomRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.EnterRoomRsp} EnterRoomRsp
             */
            EnterRoomRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.EnterRoomRsp)
                    return object;
                var message = new $root.pb.common.EnterRoomRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.EnterRoomRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                if (object.room != null) {
                    if (typeof object.room !== "object")
                        throw TypeError(".pb.common.EnterRoomRsp.room: object expected");
                    message.room = $root.pb.common.RoomInfo.fromObject(object.room);
                }
                return message;
            };

            /**
             * Creates a plain object from an EnterRoomRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.EnterRoomRsp
             * @static
             * @param {pb.common.EnterRoomRsp} message EnterRoomRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnterRoomRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.rsp = null;
                    object.room = null;
                }
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                if (message.room != null && message.hasOwnProperty("room"))
                    object.room = $root.pb.common.RoomInfo.toObject(message.room, options);
                return object;
            };

            /**
             * Converts this EnterRoomRsp to JSON.
             * @function toJSON
             * @memberof pb.common.EnterRoomRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnterRoomRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnterRoomRsp;
        })();

        common.GetPlayerStateReq = (function() {

            /**
             * Properties of a GetPlayerStateReq.
             * @memberof pb.common
             * @interface IGetPlayerStateReq
             * @property {pb.common.IAssetBaseReq|null} [req] GetPlayerStateReq req
             * @property {Array.<Long>|null} [userIds] GetPlayerStateReq userIds
             */

            /**
             * Constructs a new GetPlayerStateReq.
             * @memberof pb.common
             * @classdesc Represents a GetPlayerStateReq.
             * @implements IGetPlayerStateReq
             * @constructor
             * @param {pb.common.IGetPlayerStateReq=} [properties] Properties to set
             */
            function GetPlayerStateReq(properties) {
                this.userIds = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GetPlayerStateReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.GetPlayerStateReq
             * @instance
             */
            GetPlayerStateReq.prototype.req = null;

            /**
             * GetPlayerStateReq userIds.
             * @member {Array.<Long>} userIds
             * @memberof pb.common.GetPlayerStateReq
             * @instance
             */
            GetPlayerStateReq.prototype.userIds = $util.emptyArray;

            /**
             * Creates a new GetPlayerStateReq instance using the specified properties.
             * @function create
             * @memberof pb.common.GetPlayerStateReq
             * @static
             * @param {pb.common.IGetPlayerStateReq=} [properties] Properties to set
             * @returns {pb.common.GetPlayerStateReq} GetPlayerStateReq instance
             */
            GetPlayerStateReq.create = function create(properties) {
                return new GetPlayerStateReq(properties);
            };

            /**
             * Encodes the specified GetPlayerStateReq message. Does not implicitly {@link pb.common.GetPlayerStateReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GetPlayerStateReq
             * @static
             * @param {pb.common.IGetPlayerStateReq} message GetPlayerStateReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetPlayerStateReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.userIds != null && message.userIds.length) {
                    writer.uint32(/* id 2, wireType 2 =*/18).fork();
                    for (var i = 0; i < message.userIds.length; ++i)
                        writer.int64(message.userIds[i]);
                    writer.ldelim();
                }
                return writer;
            };

            /**
             * Encodes the specified GetPlayerStateReq message, length delimited. Does not implicitly {@link pb.common.GetPlayerStateReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GetPlayerStateReq
             * @static
             * @param {pb.common.IGetPlayerStateReq} message GetPlayerStateReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetPlayerStateReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetPlayerStateReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GetPlayerStateReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GetPlayerStateReq} GetPlayerStateReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetPlayerStateReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GetPlayerStateReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.userIds && message.userIds.length))
                            message.userIds = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.userIds.push(reader.int64());
                        } else
                            message.userIds.push(reader.int64());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetPlayerStateReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GetPlayerStateReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GetPlayerStateReq} GetPlayerStateReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetPlayerStateReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetPlayerStateReq message.
             * @function verify
             * @memberof pb.common.GetPlayerStateReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetPlayerStateReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                if (message.userIds != null && message.hasOwnProperty("userIds")) {
                    if (!Array.isArray(message.userIds))
                        return "userIds: array expected";
                    for (var i = 0; i < message.userIds.length; ++i)
                        if (!$util.isInteger(message.userIds[i]) && !(message.userIds[i] && $util.isInteger(message.userIds[i].low) && $util.isInteger(message.userIds[i].high)))
                            return "userIds: integer|Long[] expected";
                }
                return null;
            };

            /**
             * Creates a GetPlayerStateReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GetPlayerStateReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GetPlayerStateReq} GetPlayerStateReq
             */
            GetPlayerStateReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GetPlayerStateReq)
                    return object;
                var message = new $root.pb.common.GetPlayerStateReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.GetPlayerStateReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                if (object.userIds) {
                    if (!Array.isArray(object.userIds))
                        throw TypeError(".pb.common.GetPlayerStateReq.userIds: array expected");
                    message.userIds = [];
                    for (var i = 0; i < object.userIds.length; ++i)
                        if ($util.Long)
                            (message.userIds[i] = $util.Long.fromValue(object.userIds[i])).unsigned = false;
                        else if (typeof object.userIds[i] === "string")
                            message.userIds[i] = parseInt(object.userIds[i], 10);
                        else if (typeof object.userIds[i] === "number")
                            message.userIds[i] = object.userIds[i];
                        else if (typeof object.userIds[i] === "object")
                            message.userIds[i] = new $util.LongBits(object.userIds[i].low >>> 0, object.userIds[i].high >>> 0).toNumber();
                }
                return message;
            };

            /**
             * Creates a plain object from a GetPlayerStateReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GetPlayerStateReq
             * @static
             * @param {pb.common.GetPlayerStateReq} message GetPlayerStateReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetPlayerStateReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.userIds = [];
                if (options.defaults)
                    object.req = null;
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                if (message.userIds && message.userIds.length) {
                    object.userIds = [];
                    for (var j = 0; j < message.userIds.length; ++j)
                        if (typeof message.userIds[j] === "number")
                            object.userIds[j] = options.longs === String ? String(message.userIds[j]) : message.userIds[j];
                        else
                            object.userIds[j] = options.longs === String ? $util.Long.prototype.toString.call(message.userIds[j]) : options.longs === Number ? new $util.LongBits(message.userIds[j].low >>> 0, message.userIds[j].high >>> 0).toNumber() : message.userIds[j];
                }
                return object;
            };

            /**
             * Converts this GetPlayerStateReq to JSON.
             * @function toJSON
             * @memberof pb.common.GetPlayerStateReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetPlayerStateReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GetPlayerStateReq;
        })();

        common.GetPlayerStateRsp = (function() {

            /**
             * Properties of a GetPlayerStateRsp.
             * @memberof pb.common
             * @interface IGetPlayerStateRsp
             * @property {pb.common.IBaseRsp|null} [rsp] GetPlayerStateRsp rsp
             * @property {Object.<string,pb.common.PlayerState>|null} [states] GetPlayerStateRsp states
             */

            /**
             * Constructs a new GetPlayerStateRsp.
             * @memberof pb.common
             * @classdesc Represents a GetPlayerStateRsp.
             * @implements IGetPlayerStateRsp
             * @constructor
             * @param {pb.common.IGetPlayerStateRsp=} [properties] Properties to set
             */
            function GetPlayerStateRsp(properties) {
                this.states = {};
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GetPlayerStateRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.GetPlayerStateRsp
             * @instance
             */
            GetPlayerStateRsp.prototype.rsp = null;

            /**
             * GetPlayerStateRsp states.
             * @member {Object.<string,pb.common.PlayerState>} states
             * @memberof pb.common.GetPlayerStateRsp
             * @instance
             */
            GetPlayerStateRsp.prototype.states = $util.emptyObject;

            /**
             * Creates a new GetPlayerStateRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.GetPlayerStateRsp
             * @static
             * @param {pb.common.IGetPlayerStateRsp=} [properties] Properties to set
             * @returns {pb.common.GetPlayerStateRsp} GetPlayerStateRsp instance
             */
            GetPlayerStateRsp.create = function create(properties) {
                return new GetPlayerStateRsp(properties);
            };

            /**
             * Encodes the specified GetPlayerStateRsp message. Does not implicitly {@link pb.common.GetPlayerStateRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GetPlayerStateRsp
             * @static
             * @param {pb.common.IGetPlayerStateRsp} message GetPlayerStateRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetPlayerStateRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.states != null && message.hasOwnProperty("states"))
                    for (var keys = Object.keys(message.states), i = 0; i < keys.length; ++i)
                        writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 0 =*/8).int64(keys[i]).uint32(/* id 2, wireType 0 =*/16).int32(message.states[keys[i]]).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GetPlayerStateRsp message, length delimited. Does not implicitly {@link pb.common.GetPlayerStateRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GetPlayerStateRsp
             * @static
             * @param {pb.common.IGetPlayerStateRsp} message GetPlayerStateRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetPlayerStateRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetPlayerStateRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GetPlayerStateRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GetPlayerStateRsp} GetPlayerStateRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetPlayerStateRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GetPlayerStateRsp(), key;
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    case 2:
                        reader.skip().pos++;
                        if (message.states === $util.emptyObject)
                            message.states = {};
                        key = reader.int64();
                        reader.pos++;
                        message.states[typeof key === "object" ? $util.longToHash(key) : key] = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetPlayerStateRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GetPlayerStateRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GetPlayerStateRsp} GetPlayerStateRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetPlayerStateRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetPlayerStateRsp message.
             * @function verify
             * @memberof pb.common.GetPlayerStateRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetPlayerStateRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                if (message.states != null && message.hasOwnProperty("states")) {
                    if (!$util.isObject(message.states))
                        return "states: object expected";
                    var key = Object.keys(message.states);
                    for (var i = 0; i < key.length; ++i) {
                        if (!$util.key64Re.test(key[i]))
                            return "states: integer|Long key{k:int64} expected";
                        switch (message.states[key[i]]) {
                        default:
                            return "states: enum value{k:int64} expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                            break;
                        }
                    }
                }
                return null;
            };

            /**
             * Creates a GetPlayerStateRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GetPlayerStateRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GetPlayerStateRsp} GetPlayerStateRsp
             */
            GetPlayerStateRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GetPlayerStateRsp)
                    return object;
                var message = new $root.pb.common.GetPlayerStateRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.GetPlayerStateRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                if (object.states) {
                    if (typeof object.states !== "object")
                        throw TypeError(".pb.common.GetPlayerStateRsp.states: object expected");
                    message.states = {};
                    for (var keys = Object.keys(object.states), i = 0; i < keys.length; ++i)
                        switch (object.states[keys[i]]) {
                        case "PLAYER_STATE_BEGIN":
                        case 0:
                            message.states[keys[i]] = 0;
                            break;
                        case "PLAYER_STATE_IN_ROOM":
                        case 1:
                            message.states[keys[i]] = 1;
                            break;
                        case "PLAYER_STATE_MATCHING":
                        case 2:
                            message.states[keys[i]] = 2;
                            break;
                        case "PLAYER_STATE_MATCHED":
                        case 3:
                            message.states[keys[i]] = 3;
                            break;
                        case "PLAYER_STATE_READY":
                        case 4:
                            message.states[keys[i]] = 4;
                            break;
                        case "PLAYER_STATE_PLAYING":
                        case 5:
                            message.states[keys[i]] = 5;
                            break;
                        }
                }
                return message;
            };

            /**
             * Creates a plain object from a GetPlayerStateRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GetPlayerStateRsp
             * @static
             * @param {pb.common.GetPlayerStateRsp} message GetPlayerStateRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetPlayerStateRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.objects || options.defaults)
                    object.states = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                var keys2;
                if (message.states && (keys2 = Object.keys(message.states)).length) {
                    object.states = {};
                    for (var j = 0; j < keys2.length; ++j)
                        object.states[keys2[j]] = options.enums === String ? $root.pb.common.PlayerState[message.states[keys2[j]]] : message.states[keys2[j]];
                }
                return object;
            };

            /**
             * Converts this GetPlayerStateRsp to JSON.
             * @function toJSON
             * @memberof pb.common.GetPlayerStateRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetPlayerStateRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GetPlayerStateRsp;
        })();

        common.RemovePlayerFromRoomReq = (function() {

            /**
             * Properties of a RemovePlayerFromRoomReq.
             * @memberof pb.common
             * @interface IRemovePlayerFromRoomReq
             * @property {pb.common.IAssetBaseReq|null} [req] RemovePlayerFromRoomReq req
             * @property {Long|null} [userId] RemovePlayerFromRoomReq userId
             */

            /**
             * Constructs a new RemovePlayerFromRoomReq.
             * @memberof pb.common
             * @classdesc Represents a RemovePlayerFromRoomReq.
             * @implements IRemovePlayerFromRoomReq
             * @constructor
             * @param {pb.common.IRemovePlayerFromRoomReq=} [properties] Properties to set
             */
            function RemovePlayerFromRoomReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RemovePlayerFromRoomReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.RemovePlayerFromRoomReq
             * @instance
             */
            RemovePlayerFromRoomReq.prototype.req = null;

            /**
             * RemovePlayerFromRoomReq userId.
             * @member {Long} userId
             * @memberof pb.common.RemovePlayerFromRoomReq
             * @instance
             */
            RemovePlayerFromRoomReq.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new RemovePlayerFromRoomReq instance using the specified properties.
             * @function create
             * @memberof pb.common.RemovePlayerFromRoomReq
             * @static
             * @param {pb.common.IRemovePlayerFromRoomReq=} [properties] Properties to set
             * @returns {pb.common.RemovePlayerFromRoomReq} RemovePlayerFromRoomReq instance
             */
            RemovePlayerFromRoomReq.create = function create(properties) {
                return new RemovePlayerFromRoomReq(properties);
            };

            /**
             * Encodes the specified RemovePlayerFromRoomReq message. Does not implicitly {@link pb.common.RemovePlayerFromRoomReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.RemovePlayerFromRoomReq
             * @static
             * @param {pb.common.IRemovePlayerFromRoomReq} message RemovePlayerFromRoomReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RemovePlayerFromRoomReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.userId);
                return writer;
            };

            /**
             * Encodes the specified RemovePlayerFromRoomReq message, length delimited. Does not implicitly {@link pb.common.RemovePlayerFromRoomReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.RemovePlayerFromRoomReq
             * @static
             * @param {pb.common.IRemovePlayerFromRoomReq} message RemovePlayerFromRoomReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RemovePlayerFromRoomReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RemovePlayerFromRoomReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.RemovePlayerFromRoomReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.RemovePlayerFromRoomReq} RemovePlayerFromRoomReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RemovePlayerFromRoomReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.RemovePlayerFromRoomReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.userId = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RemovePlayerFromRoomReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.RemovePlayerFromRoomReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.RemovePlayerFromRoomReq} RemovePlayerFromRoomReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RemovePlayerFromRoomReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RemovePlayerFromRoomReq message.
             * @function verify
             * @memberof pb.common.RemovePlayerFromRoomReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RemovePlayerFromRoomReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                return null;
            };

            /**
             * Creates a RemovePlayerFromRoomReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.RemovePlayerFromRoomReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.RemovePlayerFromRoomReq} RemovePlayerFromRoomReq
             */
            RemovePlayerFromRoomReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.RemovePlayerFromRoomReq)
                    return object;
                var message = new $root.pb.common.RemovePlayerFromRoomReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.RemovePlayerFromRoomReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a RemovePlayerFromRoomReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.RemovePlayerFromRoomReq
             * @static
             * @param {pb.common.RemovePlayerFromRoomReq} message RemovePlayerFromRoomReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RemovePlayerFromRoomReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.req = null;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                }
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                return object;
            };

            /**
             * Converts this RemovePlayerFromRoomReq to JSON.
             * @function toJSON
             * @memberof pb.common.RemovePlayerFromRoomReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RemovePlayerFromRoomReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RemovePlayerFromRoomReq;
        })();

        common.RemovePlayerFromRoomRsp = (function() {

            /**
             * Properties of a RemovePlayerFromRoomRsp.
             * @memberof pb.common
             * @interface IRemovePlayerFromRoomRsp
             * @property {pb.common.IBaseRsp|null} [rsp] RemovePlayerFromRoomRsp rsp
             */

            /**
             * Constructs a new RemovePlayerFromRoomRsp.
             * @memberof pb.common
             * @classdesc Represents a RemovePlayerFromRoomRsp.
             * @implements IRemovePlayerFromRoomRsp
             * @constructor
             * @param {pb.common.IRemovePlayerFromRoomRsp=} [properties] Properties to set
             */
            function RemovePlayerFromRoomRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RemovePlayerFromRoomRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.RemovePlayerFromRoomRsp
             * @instance
             */
            RemovePlayerFromRoomRsp.prototype.rsp = null;

            /**
             * Creates a new RemovePlayerFromRoomRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.RemovePlayerFromRoomRsp
             * @static
             * @param {pb.common.IRemovePlayerFromRoomRsp=} [properties] Properties to set
             * @returns {pb.common.RemovePlayerFromRoomRsp} RemovePlayerFromRoomRsp instance
             */
            RemovePlayerFromRoomRsp.create = function create(properties) {
                return new RemovePlayerFromRoomRsp(properties);
            };

            /**
             * Encodes the specified RemovePlayerFromRoomRsp message. Does not implicitly {@link pb.common.RemovePlayerFromRoomRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.RemovePlayerFromRoomRsp
             * @static
             * @param {pb.common.IRemovePlayerFromRoomRsp} message RemovePlayerFromRoomRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RemovePlayerFromRoomRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified RemovePlayerFromRoomRsp message, length delimited. Does not implicitly {@link pb.common.RemovePlayerFromRoomRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.RemovePlayerFromRoomRsp
             * @static
             * @param {pb.common.IRemovePlayerFromRoomRsp} message RemovePlayerFromRoomRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RemovePlayerFromRoomRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RemovePlayerFromRoomRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.RemovePlayerFromRoomRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.RemovePlayerFromRoomRsp} RemovePlayerFromRoomRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RemovePlayerFromRoomRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.RemovePlayerFromRoomRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RemovePlayerFromRoomRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.RemovePlayerFromRoomRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.RemovePlayerFromRoomRsp} RemovePlayerFromRoomRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RemovePlayerFromRoomRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RemovePlayerFromRoomRsp message.
             * @function verify
             * @memberof pb.common.RemovePlayerFromRoomRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RemovePlayerFromRoomRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                return null;
            };

            /**
             * Creates a RemovePlayerFromRoomRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.RemovePlayerFromRoomRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.RemovePlayerFromRoomRsp} RemovePlayerFromRoomRsp
             */
            RemovePlayerFromRoomRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.RemovePlayerFromRoomRsp)
                    return object;
                var message = new $root.pb.common.RemovePlayerFromRoomRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.RemovePlayerFromRoomRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from a RemovePlayerFromRoomRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.RemovePlayerFromRoomRsp
             * @static
             * @param {pb.common.RemovePlayerFromRoomRsp} message RemovePlayerFromRoomRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RemovePlayerFromRoomRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                return object;
            };

            /**
             * Converts this RemovePlayerFromRoomRsp to JSON.
             * @function toJSON
             * @memberof pb.common.RemovePlayerFromRoomRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RemovePlayerFromRoomRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RemovePlayerFromRoomRsp;
        })();

        common.RemovePlayerFromRoomMsg = (function() {

            /**
             * Properties of a RemovePlayerFromRoomMsg.
             * @memberof pb.common
             * @interface IRemovePlayerFromRoomMsg
             * @property {pb.common.IGameBaseMsg|null} [base] RemovePlayerFromRoomMsg base
             * @property {Long|null} [userId] RemovePlayerFromRoomMsg userId
             * @property {pb.common.IPlayerInfo|null} [removedBy] RemovePlayerFromRoomMsg removedBy
             */

            /**
             * Constructs a new RemovePlayerFromRoomMsg.
             * @memberof pb.common
             * @classdesc Represents a RemovePlayerFromRoomMsg.
             * @implements IRemovePlayerFromRoomMsg
             * @constructor
             * @param {pb.common.IRemovePlayerFromRoomMsg=} [properties] Properties to set
             */
            function RemovePlayerFromRoomMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RemovePlayerFromRoomMsg base.
             * @member {pb.common.IGameBaseMsg|null|undefined} base
             * @memberof pb.common.RemovePlayerFromRoomMsg
             * @instance
             */
            RemovePlayerFromRoomMsg.prototype.base = null;

            /**
             * RemovePlayerFromRoomMsg userId.
             * @member {Long} userId
             * @memberof pb.common.RemovePlayerFromRoomMsg
             * @instance
             */
            RemovePlayerFromRoomMsg.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * RemovePlayerFromRoomMsg removedBy.
             * @member {pb.common.IPlayerInfo|null|undefined} removedBy
             * @memberof pb.common.RemovePlayerFromRoomMsg
             * @instance
             */
            RemovePlayerFromRoomMsg.prototype.removedBy = null;

            /**
             * Creates a new RemovePlayerFromRoomMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.RemovePlayerFromRoomMsg
             * @static
             * @param {pb.common.IRemovePlayerFromRoomMsg=} [properties] Properties to set
             * @returns {pb.common.RemovePlayerFromRoomMsg} RemovePlayerFromRoomMsg instance
             */
            RemovePlayerFromRoomMsg.create = function create(properties) {
                return new RemovePlayerFromRoomMsg(properties);
            };

            /**
             * Encodes the specified RemovePlayerFromRoomMsg message. Does not implicitly {@link pb.common.RemovePlayerFromRoomMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.RemovePlayerFromRoomMsg
             * @static
             * @param {pb.common.IRemovePlayerFromRoomMsg} message RemovePlayerFromRoomMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RemovePlayerFromRoomMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.base != null && message.hasOwnProperty("base"))
                    $root.pb.common.GameBaseMsg.encode(message.base, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.userId);
                if (message.removedBy != null && message.hasOwnProperty("removedBy"))
                    $root.pb.common.PlayerInfo.encode(message.removedBy, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified RemovePlayerFromRoomMsg message, length delimited. Does not implicitly {@link pb.common.RemovePlayerFromRoomMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.RemovePlayerFromRoomMsg
             * @static
             * @param {pb.common.IRemovePlayerFromRoomMsg} message RemovePlayerFromRoomMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RemovePlayerFromRoomMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RemovePlayerFromRoomMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.RemovePlayerFromRoomMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.RemovePlayerFromRoomMsg} RemovePlayerFromRoomMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RemovePlayerFromRoomMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.RemovePlayerFromRoomMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.base = $root.pb.common.GameBaseMsg.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.userId = reader.int64();
                        break;
                    case 3:
                        message.removedBy = $root.pb.common.PlayerInfo.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RemovePlayerFromRoomMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.RemovePlayerFromRoomMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.RemovePlayerFromRoomMsg} RemovePlayerFromRoomMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RemovePlayerFromRoomMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RemovePlayerFromRoomMsg message.
             * @function verify
             * @memberof pb.common.RemovePlayerFromRoomMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RemovePlayerFromRoomMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.base != null && message.hasOwnProperty("base")) {
                    var error = $root.pb.common.GameBaseMsg.verify(message.base);
                    if (error)
                        return "base." + error;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                if (message.removedBy != null && message.hasOwnProperty("removedBy")) {
                    var error = $root.pb.common.PlayerInfo.verify(message.removedBy);
                    if (error)
                        return "removedBy." + error;
                }
                return null;
            };

            /**
             * Creates a RemovePlayerFromRoomMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.RemovePlayerFromRoomMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.RemovePlayerFromRoomMsg} RemovePlayerFromRoomMsg
             */
            RemovePlayerFromRoomMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.RemovePlayerFromRoomMsg)
                    return object;
                var message = new $root.pb.common.RemovePlayerFromRoomMsg();
                if (object.base != null) {
                    if (typeof object.base !== "object")
                        throw TypeError(".pb.common.RemovePlayerFromRoomMsg.base: object expected");
                    message.base = $root.pb.common.GameBaseMsg.fromObject(object.base);
                }
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                if (object.removedBy != null) {
                    if (typeof object.removedBy !== "object")
                        throw TypeError(".pb.common.RemovePlayerFromRoomMsg.removedBy: object expected");
                    message.removedBy = $root.pb.common.PlayerInfo.fromObject(object.removedBy);
                }
                return message;
            };

            /**
             * Creates a plain object from a RemovePlayerFromRoomMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.RemovePlayerFromRoomMsg
             * @static
             * @param {pb.common.RemovePlayerFromRoomMsg} message RemovePlayerFromRoomMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RemovePlayerFromRoomMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.base = null;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                    object.removedBy = null;
                }
                if (message.base != null && message.hasOwnProperty("base"))
                    object.base = $root.pb.common.GameBaseMsg.toObject(message.base, options);
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                if (message.removedBy != null && message.hasOwnProperty("removedBy"))
                    object.removedBy = $root.pb.common.PlayerInfo.toObject(message.removedBy, options);
                return object;
            };

            /**
             * Converts this RemovePlayerFromRoomMsg to JSON.
             * @function toJSON
             * @memberof pb.common.RemovePlayerFromRoomMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RemovePlayerFromRoomMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RemovePlayerFromRoomMsg;
        })();

        common.PlayerAFKReq = (function() {

            /**
             * Properties of a PlayerAFKReq.
             * @memberof pb.common
             * @interface IPlayerAFKReq
             * @property {pb.common.IAssetBaseReq|null} [req] PlayerAFKReq req
             */

            /**
             * Constructs a new PlayerAFKReq.
             * @memberof pb.common
             * @classdesc Represents a PlayerAFKReq.
             * @implements IPlayerAFKReq
             * @constructor
             * @param {pb.common.IPlayerAFKReq=} [properties] Properties to set
             */
            function PlayerAFKReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PlayerAFKReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.PlayerAFKReq
             * @instance
             */
            PlayerAFKReq.prototype.req = null;

            /**
             * Creates a new PlayerAFKReq instance using the specified properties.
             * @function create
             * @memberof pb.common.PlayerAFKReq
             * @static
             * @param {pb.common.IPlayerAFKReq=} [properties] Properties to set
             * @returns {pb.common.PlayerAFKReq} PlayerAFKReq instance
             */
            PlayerAFKReq.create = function create(properties) {
                return new PlayerAFKReq(properties);
            };

            /**
             * Encodes the specified PlayerAFKReq message. Does not implicitly {@link pb.common.PlayerAFKReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.PlayerAFKReq
             * @static
             * @param {pb.common.IPlayerAFKReq} message PlayerAFKReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerAFKReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified PlayerAFKReq message, length delimited. Does not implicitly {@link pb.common.PlayerAFKReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.PlayerAFKReq
             * @static
             * @param {pb.common.IPlayerAFKReq} message PlayerAFKReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerAFKReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PlayerAFKReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.PlayerAFKReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.PlayerAFKReq} PlayerAFKReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerAFKReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.PlayerAFKReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PlayerAFKReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.PlayerAFKReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.PlayerAFKReq} PlayerAFKReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerAFKReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PlayerAFKReq message.
             * @function verify
             * @memberof pb.common.PlayerAFKReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PlayerAFKReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                return null;
            };

            /**
             * Creates a PlayerAFKReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.PlayerAFKReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.PlayerAFKReq} PlayerAFKReq
             */
            PlayerAFKReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.PlayerAFKReq)
                    return object;
                var message = new $root.pb.common.PlayerAFKReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.PlayerAFKReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                return message;
            };

            /**
             * Creates a plain object from a PlayerAFKReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.PlayerAFKReq
             * @static
             * @param {pb.common.PlayerAFKReq} message PlayerAFKReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PlayerAFKReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.req = null;
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                return object;
            };

            /**
             * Converts this PlayerAFKReq to JSON.
             * @function toJSON
             * @memberof pb.common.PlayerAFKReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PlayerAFKReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PlayerAFKReq;
        })();

        common.PlayerAFKRsp = (function() {

            /**
             * Properties of a PlayerAFKRsp.
             * @memberof pb.common
             * @interface IPlayerAFKRsp
             * @property {pb.common.IBaseRsp|null} [rsp] PlayerAFKRsp rsp
             */

            /**
             * Constructs a new PlayerAFKRsp.
             * @memberof pb.common
             * @classdesc Represents a PlayerAFKRsp.
             * @implements IPlayerAFKRsp
             * @constructor
             * @param {pb.common.IPlayerAFKRsp=} [properties] Properties to set
             */
            function PlayerAFKRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PlayerAFKRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.PlayerAFKRsp
             * @instance
             */
            PlayerAFKRsp.prototype.rsp = null;

            /**
             * Creates a new PlayerAFKRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.PlayerAFKRsp
             * @static
             * @param {pb.common.IPlayerAFKRsp=} [properties] Properties to set
             * @returns {pb.common.PlayerAFKRsp} PlayerAFKRsp instance
             */
            PlayerAFKRsp.create = function create(properties) {
                return new PlayerAFKRsp(properties);
            };

            /**
             * Encodes the specified PlayerAFKRsp message. Does not implicitly {@link pb.common.PlayerAFKRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.PlayerAFKRsp
             * @static
             * @param {pb.common.IPlayerAFKRsp} message PlayerAFKRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerAFKRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified PlayerAFKRsp message, length delimited. Does not implicitly {@link pb.common.PlayerAFKRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.PlayerAFKRsp
             * @static
             * @param {pb.common.IPlayerAFKRsp} message PlayerAFKRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerAFKRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PlayerAFKRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.PlayerAFKRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.PlayerAFKRsp} PlayerAFKRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerAFKRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.PlayerAFKRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PlayerAFKRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.PlayerAFKRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.PlayerAFKRsp} PlayerAFKRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerAFKRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PlayerAFKRsp message.
             * @function verify
             * @memberof pb.common.PlayerAFKRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PlayerAFKRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                return null;
            };

            /**
             * Creates a PlayerAFKRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.PlayerAFKRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.PlayerAFKRsp} PlayerAFKRsp
             */
            PlayerAFKRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.PlayerAFKRsp)
                    return object;
                var message = new $root.pb.common.PlayerAFKRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.PlayerAFKRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from a PlayerAFKRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.PlayerAFKRsp
             * @static
             * @param {pb.common.PlayerAFKRsp} message PlayerAFKRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PlayerAFKRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                return object;
            };

            /**
             * Converts this PlayerAFKRsp to JSON.
             * @function toJSON
             * @memberof pb.common.PlayerAFKRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PlayerAFKRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PlayerAFKRsp;
        })();

        common.PlayerAFKMsg = (function() {

            /**
             * Properties of a PlayerAFKMsg.
             * @memberof pb.common
             * @interface IPlayerAFKMsg
             * @property {Long|null} [UserID] PlayerAFKMsg UserID
             */

            /**
             * Constructs a new PlayerAFKMsg.
             * @memberof pb.common
             * @classdesc Represents a PlayerAFKMsg.
             * @implements IPlayerAFKMsg
             * @constructor
             * @param {pb.common.IPlayerAFKMsg=} [properties] Properties to set
             */
            function PlayerAFKMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PlayerAFKMsg UserID.
             * @member {Long} UserID
             * @memberof pb.common.PlayerAFKMsg
             * @instance
             */
            PlayerAFKMsg.prototype.UserID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new PlayerAFKMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.PlayerAFKMsg
             * @static
             * @param {pb.common.IPlayerAFKMsg=} [properties] Properties to set
             * @returns {pb.common.PlayerAFKMsg} PlayerAFKMsg instance
             */
            PlayerAFKMsg.create = function create(properties) {
                return new PlayerAFKMsg(properties);
            };

            /**
             * Encodes the specified PlayerAFKMsg message. Does not implicitly {@link pb.common.PlayerAFKMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.PlayerAFKMsg
             * @static
             * @param {pb.common.IPlayerAFKMsg} message PlayerAFKMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerAFKMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.UserID != null && message.hasOwnProperty("UserID"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.UserID);
                return writer;
            };

            /**
             * Encodes the specified PlayerAFKMsg message, length delimited. Does not implicitly {@link pb.common.PlayerAFKMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.PlayerAFKMsg
             * @static
             * @param {pb.common.IPlayerAFKMsg} message PlayerAFKMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerAFKMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PlayerAFKMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.PlayerAFKMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.PlayerAFKMsg} PlayerAFKMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerAFKMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.PlayerAFKMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.UserID = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PlayerAFKMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.PlayerAFKMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.PlayerAFKMsg} PlayerAFKMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerAFKMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PlayerAFKMsg message.
             * @function verify
             * @memberof pb.common.PlayerAFKMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PlayerAFKMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.UserID != null && message.hasOwnProperty("UserID"))
                    if (!$util.isInteger(message.UserID) && !(message.UserID && $util.isInteger(message.UserID.low) && $util.isInteger(message.UserID.high)))
                        return "UserID: integer|Long expected";
                return null;
            };

            /**
             * Creates a PlayerAFKMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.PlayerAFKMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.PlayerAFKMsg} PlayerAFKMsg
             */
            PlayerAFKMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.PlayerAFKMsg)
                    return object;
                var message = new $root.pb.common.PlayerAFKMsg();
                if (object.UserID != null)
                    if ($util.Long)
                        (message.UserID = $util.Long.fromValue(object.UserID)).unsigned = false;
                    else if (typeof object.UserID === "string")
                        message.UserID = parseInt(object.UserID, 10);
                    else if (typeof object.UserID === "number")
                        message.UserID = object.UserID;
                    else if (typeof object.UserID === "object")
                        message.UserID = new $util.LongBits(object.UserID.low >>> 0, object.UserID.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a PlayerAFKMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.PlayerAFKMsg
             * @static
             * @param {pb.common.PlayerAFKMsg} message PlayerAFKMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PlayerAFKMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.UserID = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.UserID = options.longs === String ? "0" : 0;
                if (message.UserID != null && message.hasOwnProperty("UserID"))
                    if (typeof message.UserID === "number")
                        object.UserID = options.longs === String ? String(message.UserID) : message.UserID;
                    else
                        object.UserID = options.longs === String ? $util.Long.prototype.toString.call(message.UserID) : options.longs === Number ? new $util.LongBits(message.UserID.low >>> 0, message.UserID.high >>> 0).toNumber() : message.UserID;
                return object;
            };

            /**
             * Converts this PlayerAFKMsg to JSON.
             * @function toJSON
             * @memberof pb.common.PlayerAFKMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PlayerAFKMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PlayerAFKMsg;
        })();

        common.PlayerReConnectReq = (function() {

            /**
             * Properties of a PlayerReConnectReq.
             * @memberof pb.common
             * @interface IPlayerReConnectReq
             * @property {pb.common.IAssetBaseReq|null} [req] PlayerReConnectReq req
             */

            /**
             * Constructs a new PlayerReConnectReq.
             * @memberof pb.common
             * @classdesc Represents a PlayerReConnectReq.
             * @implements IPlayerReConnectReq
             * @constructor
             * @param {pb.common.IPlayerReConnectReq=} [properties] Properties to set
             */
            function PlayerReConnectReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PlayerReConnectReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.PlayerReConnectReq
             * @instance
             */
            PlayerReConnectReq.prototype.req = null;

            /**
             * Creates a new PlayerReConnectReq instance using the specified properties.
             * @function create
             * @memberof pb.common.PlayerReConnectReq
             * @static
             * @param {pb.common.IPlayerReConnectReq=} [properties] Properties to set
             * @returns {pb.common.PlayerReConnectReq} PlayerReConnectReq instance
             */
            PlayerReConnectReq.create = function create(properties) {
                return new PlayerReConnectReq(properties);
            };

            /**
             * Encodes the specified PlayerReConnectReq message. Does not implicitly {@link pb.common.PlayerReConnectReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.PlayerReConnectReq
             * @static
             * @param {pb.common.IPlayerReConnectReq} message PlayerReConnectReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerReConnectReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified PlayerReConnectReq message, length delimited. Does not implicitly {@link pb.common.PlayerReConnectReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.PlayerReConnectReq
             * @static
             * @param {pb.common.IPlayerReConnectReq} message PlayerReConnectReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerReConnectReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PlayerReConnectReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.PlayerReConnectReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.PlayerReConnectReq} PlayerReConnectReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerReConnectReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.PlayerReConnectReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PlayerReConnectReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.PlayerReConnectReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.PlayerReConnectReq} PlayerReConnectReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerReConnectReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PlayerReConnectReq message.
             * @function verify
             * @memberof pb.common.PlayerReConnectReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PlayerReConnectReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                return null;
            };

            /**
             * Creates a PlayerReConnectReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.PlayerReConnectReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.PlayerReConnectReq} PlayerReConnectReq
             */
            PlayerReConnectReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.PlayerReConnectReq)
                    return object;
                var message = new $root.pb.common.PlayerReConnectReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.PlayerReConnectReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                return message;
            };

            /**
             * Creates a plain object from a PlayerReConnectReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.PlayerReConnectReq
             * @static
             * @param {pb.common.PlayerReConnectReq} message PlayerReConnectReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PlayerReConnectReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.req = null;
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                return object;
            };

            /**
             * Converts this PlayerReConnectReq to JSON.
             * @function toJSON
             * @memberof pb.common.PlayerReConnectReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PlayerReConnectReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PlayerReConnectReq;
        })();

        common.PlayerReconnectRsp = (function() {

            /**
             * Properties of a PlayerReconnectRsp.
             * @memberof pb.common
             * @interface IPlayerReconnectRsp
             * @property {pb.common.IBaseRsp|null} [rsp] PlayerReconnectRsp rsp
             */

            /**
             * Constructs a new PlayerReconnectRsp.
             * @memberof pb.common
             * @classdesc Represents a PlayerReconnectRsp.
             * @implements IPlayerReconnectRsp
             * @constructor
             * @param {pb.common.IPlayerReconnectRsp=} [properties] Properties to set
             */
            function PlayerReconnectRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PlayerReconnectRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.PlayerReconnectRsp
             * @instance
             */
            PlayerReconnectRsp.prototype.rsp = null;

            /**
             * Creates a new PlayerReconnectRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.PlayerReconnectRsp
             * @static
             * @param {pb.common.IPlayerReconnectRsp=} [properties] Properties to set
             * @returns {pb.common.PlayerReconnectRsp} PlayerReconnectRsp instance
             */
            PlayerReconnectRsp.create = function create(properties) {
                return new PlayerReconnectRsp(properties);
            };

            /**
             * Encodes the specified PlayerReconnectRsp message. Does not implicitly {@link pb.common.PlayerReconnectRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.PlayerReconnectRsp
             * @static
             * @param {pb.common.IPlayerReconnectRsp} message PlayerReconnectRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerReconnectRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified PlayerReconnectRsp message, length delimited. Does not implicitly {@link pb.common.PlayerReconnectRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.PlayerReconnectRsp
             * @static
             * @param {pb.common.IPlayerReconnectRsp} message PlayerReconnectRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerReconnectRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PlayerReconnectRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.PlayerReconnectRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.PlayerReconnectRsp} PlayerReconnectRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerReconnectRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.PlayerReconnectRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PlayerReconnectRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.PlayerReconnectRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.PlayerReconnectRsp} PlayerReconnectRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerReconnectRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PlayerReconnectRsp message.
             * @function verify
             * @memberof pb.common.PlayerReconnectRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PlayerReconnectRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                return null;
            };

            /**
             * Creates a PlayerReconnectRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.PlayerReconnectRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.PlayerReconnectRsp} PlayerReconnectRsp
             */
            PlayerReconnectRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.PlayerReconnectRsp)
                    return object;
                var message = new $root.pb.common.PlayerReconnectRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.PlayerReconnectRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from a PlayerReconnectRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.PlayerReconnectRsp
             * @static
             * @param {pb.common.PlayerReconnectRsp} message PlayerReconnectRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PlayerReconnectRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                return object;
            };

            /**
             * Converts this PlayerReconnectRsp to JSON.
             * @function toJSON
             * @memberof pb.common.PlayerReconnectRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PlayerReconnectRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PlayerReconnectRsp;
        })();

        common.PlayerReconnectMsg = (function() {

            /**
             * Properties of a PlayerReconnectMsg.
             * @memberof pb.common
             * @interface IPlayerReconnectMsg
             * @property {Long|null} [userID] PlayerReconnectMsg userID
             */

            /**
             * Constructs a new PlayerReconnectMsg.
             * @memberof pb.common
             * @classdesc Represents a PlayerReconnectMsg.
             * @implements IPlayerReconnectMsg
             * @constructor
             * @param {pb.common.IPlayerReconnectMsg=} [properties] Properties to set
             */
            function PlayerReconnectMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PlayerReconnectMsg userID.
             * @member {Long} userID
             * @memberof pb.common.PlayerReconnectMsg
             * @instance
             */
            PlayerReconnectMsg.prototype.userID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new PlayerReconnectMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.PlayerReconnectMsg
             * @static
             * @param {pb.common.IPlayerReconnectMsg=} [properties] Properties to set
             * @returns {pb.common.PlayerReconnectMsg} PlayerReconnectMsg instance
             */
            PlayerReconnectMsg.create = function create(properties) {
                return new PlayerReconnectMsg(properties);
            };

            /**
             * Encodes the specified PlayerReconnectMsg message. Does not implicitly {@link pb.common.PlayerReconnectMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.PlayerReconnectMsg
             * @static
             * @param {pb.common.IPlayerReconnectMsg} message PlayerReconnectMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerReconnectMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userID != null && message.hasOwnProperty("userID"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userID);
                return writer;
            };

            /**
             * Encodes the specified PlayerReconnectMsg message, length delimited. Does not implicitly {@link pb.common.PlayerReconnectMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.PlayerReconnectMsg
             * @static
             * @param {pb.common.IPlayerReconnectMsg} message PlayerReconnectMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerReconnectMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PlayerReconnectMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.PlayerReconnectMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.PlayerReconnectMsg} PlayerReconnectMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerReconnectMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.PlayerReconnectMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.userID = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PlayerReconnectMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.PlayerReconnectMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.PlayerReconnectMsg} PlayerReconnectMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerReconnectMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PlayerReconnectMsg message.
             * @function verify
             * @memberof pb.common.PlayerReconnectMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PlayerReconnectMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userID != null && message.hasOwnProperty("userID"))
                    if (!$util.isInteger(message.userID) && !(message.userID && $util.isInteger(message.userID.low) && $util.isInteger(message.userID.high)))
                        return "userID: integer|Long expected";
                return null;
            };

            /**
             * Creates a PlayerReconnectMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.PlayerReconnectMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.PlayerReconnectMsg} PlayerReconnectMsg
             */
            PlayerReconnectMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.PlayerReconnectMsg)
                    return object;
                var message = new $root.pb.common.PlayerReconnectMsg();
                if (object.userID != null)
                    if ($util.Long)
                        (message.userID = $util.Long.fromValue(object.userID)).unsigned = false;
                    else if (typeof object.userID === "string")
                        message.userID = parseInt(object.userID, 10);
                    else if (typeof object.userID === "number")
                        message.userID = object.userID;
                    else if (typeof object.userID === "object")
                        message.userID = new $util.LongBits(object.userID.low >>> 0, object.userID.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a PlayerReconnectMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.PlayerReconnectMsg
             * @static
             * @param {pb.common.PlayerReconnectMsg} message PlayerReconnectMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PlayerReconnectMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userID = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userID = options.longs === String ? "0" : 0;
                if (message.userID != null && message.hasOwnProperty("userID"))
                    if (typeof message.userID === "number")
                        object.userID = options.longs === String ? String(message.userID) : message.userID;
                    else
                        object.userID = options.longs === String ? $util.Long.prototype.toString.call(message.userID) : options.longs === Number ? new $util.LongBits(message.userID.low >>> 0, message.userID.high >>> 0).toNumber() : message.userID;
                return object;
            };

            /**
             * Converts this PlayerReconnectMsg to JSON.
             * @function toJSON
             * @memberof pb.common.PlayerReconnectMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PlayerReconnectMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PlayerReconnectMsg;
        })();

        common.SellAssetsReq = (function() {

            /**
             * Properties of a SellAssetsReq.
             * @memberof pb.common
             * @interface ISellAssetsReq
             * @property {pb.common.IAssetBaseReq|null} [req] SellAssetsReq req
             * @property {Array.<pb.common.SellAssetsReq.Iitem>|null} [items] SellAssetsReq items
             */

            /**
             * Constructs a new SellAssetsReq.
             * @memberof pb.common
             * @classdesc Represents a SellAssetsReq.
             * @implements ISellAssetsReq
             * @constructor
             * @param {pb.common.ISellAssetsReq=} [properties] Properties to set
             */
            function SellAssetsReq(properties) {
                this.items = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SellAssetsReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.SellAssetsReq
             * @instance
             */
            SellAssetsReq.prototype.req = null;

            /**
             * SellAssetsReq items.
             * @member {Array.<pb.common.SellAssetsReq.Iitem>} items
             * @memberof pb.common.SellAssetsReq
             * @instance
             */
            SellAssetsReq.prototype.items = $util.emptyArray;

            /**
             * Creates a new SellAssetsReq instance using the specified properties.
             * @function create
             * @memberof pb.common.SellAssetsReq
             * @static
             * @param {pb.common.ISellAssetsReq=} [properties] Properties to set
             * @returns {pb.common.SellAssetsReq} SellAssetsReq instance
             */
            SellAssetsReq.create = function create(properties) {
                return new SellAssetsReq(properties);
            };

            /**
             * Encodes the specified SellAssetsReq message. Does not implicitly {@link pb.common.SellAssetsReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.SellAssetsReq
             * @static
             * @param {pb.common.ISellAssetsReq} message SellAssetsReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SellAssetsReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.items != null && message.items.length)
                    for (var i = 0; i < message.items.length; ++i)
                        $root.pb.common.SellAssetsReq.item.encode(message.items[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SellAssetsReq message, length delimited. Does not implicitly {@link pb.common.SellAssetsReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.SellAssetsReq
             * @static
             * @param {pb.common.ISellAssetsReq} message SellAssetsReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SellAssetsReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SellAssetsReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.SellAssetsReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.SellAssetsReq} SellAssetsReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SellAssetsReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.SellAssetsReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.items && message.items.length))
                            message.items = [];
                        message.items.push($root.pb.common.SellAssetsReq.item.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SellAssetsReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.SellAssetsReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.SellAssetsReq} SellAssetsReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SellAssetsReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SellAssetsReq message.
             * @function verify
             * @memberof pb.common.SellAssetsReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SellAssetsReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                if (message.items != null && message.hasOwnProperty("items")) {
                    if (!Array.isArray(message.items))
                        return "items: array expected";
                    for (var i = 0; i < message.items.length; ++i) {
                        var error = $root.pb.common.SellAssetsReq.item.verify(message.items[i]);
                        if (error)
                            return "items." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a SellAssetsReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.SellAssetsReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.SellAssetsReq} SellAssetsReq
             */
            SellAssetsReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.SellAssetsReq)
                    return object;
                var message = new $root.pb.common.SellAssetsReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.SellAssetsReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                if (object.items) {
                    if (!Array.isArray(object.items))
                        throw TypeError(".pb.common.SellAssetsReq.items: array expected");
                    message.items = [];
                    for (var i = 0; i < object.items.length; ++i) {
                        if (typeof object.items[i] !== "object")
                            throw TypeError(".pb.common.SellAssetsReq.items: object expected");
                        message.items[i] = $root.pb.common.SellAssetsReq.item.fromObject(object.items[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a SellAssetsReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.SellAssetsReq
             * @static
             * @param {pb.common.SellAssetsReq} message SellAssetsReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SellAssetsReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.items = [];
                if (options.defaults)
                    object.req = null;
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                if (message.items && message.items.length) {
                    object.items = [];
                    for (var j = 0; j < message.items.length; ++j)
                        object.items[j] = $root.pb.common.SellAssetsReq.item.toObject(message.items[j], options);
                }
                return object;
            };

            /**
             * Converts this SellAssetsReq to JSON.
             * @function toJSON
             * @memberof pb.common.SellAssetsReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SellAssetsReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            SellAssetsReq.item = (function() {

                /**
                 * Properties of an item.
                 * @memberof pb.common.SellAssetsReq
                 * @interface Iitem
                 * @property {Long|null} [assetID] item assetID
                 * @property {number|null} [quantity] item quantity
                 */

                /**
                 * Constructs a new item.
                 * @memberof pb.common.SellAssetsReq
                 * @classdesc Represents an item.
                 * @implements Iitem
                 * @constructor
                 * @param {pb.common.SellAssetsReq.Iitem=} [properties] Properties to set
                 */
                function item(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * item assetID.
                 * @member {Long} assetID
                 * @memberof pb.common.SellAssetsReq.item
                 * @instance
                 */
                item.prototype.assetID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * item quantity.
                 * @member {number} quantity
                 * @memberof pb.common.SellAssetsReq.item
                 * @instance
                 */
                item.prototype.quantity = 0;

                /**
                 * Creates a new item instance using the specified properties.
                 * @function create
                 * @memberof pb.common.SellAssetsReq.item
                 * @static
                 * @param {pb.common.SellAssetsReq.Iitem=} [properties] Properties to set
                 * @returns {pb.common.SellAssetsReq.item} item instance
                 */
                item.create = function create(properties) {
                    return new item(properties);
                };

                /**
                 * Encodes the specified item message. Does not implicitly {@link pb.common.SellAssetsReq.item.verify|verify} messages.
                 * @function encode
                 * @memberof pb.common.SellAssetsReq.item
                 * @static
                 * @param {pb.common.SellAssetsReq.Iitem} message item message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                item.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.assetID != null && message.hasOwnProperty("assetID"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.assetID);
                    if (message.quantity != null && message.hasOwnProperty("quantity"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.quantity);
                    return writer;
                };

                /**
                 * Encodes the specified item message, length delimited. Does not implicitly {@link pb.common.SellAssetsReq.item.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof pb.common.SellAssetsReq.item
                 * @static
                 * @param {pb.common.SellAssetsReq.Iitem} message item message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                item.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an item message from the specified reader or buffer.
                 * @function decode
                 * @memberof pb.common.SellAssetsReq.item
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {pb.common.SellAssetsReq.item} item
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                item.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.SellAssetsReq.item();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.assetID = reader.int64();
                            break;
                        case 2:
                            message.quantity = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an item message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof pb.common.SellAssetsReq.item
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {pb.common.SellAssetsReq.item} item
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                item.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an item message.
                 * @function verify
                 * @memberof pb.common.SellAssetsReq.item
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                item.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.assetID != null && message.hasOwnProperty("assetID"))
                        if (!$util.isInteger(message.assetID) && !(message.assetID && $util.isInteger(message.assetID.low) && $util.isInteger(message.assetID.high)))
                            return "assetID: integer|Long expected";
                    if (message.quantity != null && message.hasOwnProperty("quantity"))
                        if (!$util.isInteger(message.quantity))
                            return "quantity: integer expected";
                    return null;
                };

                /**
                 * Creates an item message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof pb.common.SellAssetsReq.item
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {pb.common.SellAssetsReq.item} item
                 */
                item.fromObject = function fromObject(object) {
                    if (object instanceof $root.pb.common.SellAssetsReq.item)
                        return object;
                    var message = new $root.pb.common.SellAssetsReq.item();
                    if (object.assetID != null)
                        if ($util.Long)
                            (message.assetID = $util.Long.fromValue(object.assetID)).unsigned = false;
                        else if (typeof object.assetID === "string")
                            message.assetID = parseInt(object.assetID, 10);
                        else if (typeof object.assetID === "number")
                            message.assetID = object.assetID;
                        else if (typeof object.assetID === "object")
                            message.assetID = new $util.LongBits(object.assetID.low >>> 0, object.assetID.high >>> 0).toNumber();
                    if (object.quantity != null)
                        message.quantity = object.quantity | 0;
                    return message;
                };

                /**
                 * Creates a plain object from an item message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof pb.common.SellAssetsReq.item
                 * @static
                 * @param {pb.common.SellAssetsReq.item} message item
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                item.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.assetID = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.assetID = options.longs === String ? "0" : 0;
                        object.quantity = 0;
                    }
                    if (message.assetID != null && message.hasOwnProperty("assetID"))
                        if (typeof message.assetID === "number")
                            object.assetID = options.longs === String ? String(message.assetID) : message.assetID;
                        else
                            object.assetID = options.longs === String ? $util.Long.prototype.toString.call(message.assetID) : options.longs === Number ? new $util.LongBits(message.assetID.low >>> 0, message.assetID.high >>> 0).toNumber() : message.assetID;
                    if (message.quantity != null && message.hasOwnProperty("quantity"))
                        object.quantity = message.quantity;
                    return object;
                };

                /**
                 * Converts this item to JSON.
                 * @function toJSON
                 * @memberof pb.common.SellAssetsReq.item
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                item.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return item;
            })();

            return SellAssetsReq;
        })();

        common.SellAssetsRsp = (function() {

            /**
             * Properties of a SellAssetsRsp.
             * @memberof pb.common
             * @interface ISellAssetsRsp
             * @property {pb.common.IBaseRsp|null} [rsp] SellAssetsRsp rsp
             */

            /**
             * Constructs a new SellAssetsRsp.
             * @memberof pb.common
             * @classdesc Represents a SellAssetsRsp.
             * @implements ISellAssetsRsp
             * @constructor
             * @param {pb.common.ISellAssetsRsp=} [properties] Properties to set
             */
            function SellAssetsRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SellAssetsRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.SellAssetsRsp
             * @instance
             */
            SellAssetsRsp.prototype.rsp = null;

            /**
             * Creates a new SellAssetsRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.SellAssetsRsp
             * @static
             * @param {pb.common.ISellAssetsRsp=} [properties] Properties to set
             * @returns {pb.common.SellAssetsRsp} SellAssetsRsp instance
             */
            SellAssetsRsp.create = function create(properties) {
                return new SellAssetsRsp(properties);
            };

            /**
             * Encodes the specified SellAssetsRsp message. Does not implicitly {@link pb.common.SellAssetsRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.SellAssetsRsp
             * @static
             * @param {pb.common.ISellAssetsRsp} message SellAssetsRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SellAssetsRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SellAssetsRsp message, length delimited. Does not implicitly {@link pb.common.SellAssetsRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.SellAssetsRsp
             * @static
             * @param {pb.common.ISellAssetsRsp} message SellAssetsRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SellAssetsRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SellAssetsRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.SellAssetsRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.SellAssetsRsp} SellAssetsRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SellAssetsRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.SellAssetsRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SellAssetsRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.SellAssetsRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.SellAssetsRsp} SellAssetsRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SellAssetsRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SellAssetsRsp message.
             * @function verify
             * @memberof pb.common.SellAssetsRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SellAssetsRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                return null;
            };

            /**
             * Creates a SellAssetsRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.SellAssetsRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.SellAssetsRsp} SellAssetsRsp
             */
            SellAssetsRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.SellAssetsRsp)
                    return object;
                var message = new $root.pb.common.SellAssetsRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.SellAssetsRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from a SellAssetsRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.SellAssetsRsp
             * @static
             * @param {pb.common.SellAssetsRsp} message SellAssetsRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SellAssetsRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                return object;
            };

            /**
             * Converts this SellAssetsRsp to JSON.
             * @function toJSON
             * @memberof pb.common.SellAssetsRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SellAssetsRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SellAssetsRsp;
        })();

        common.SellAssetsMsg = (function() {

            /**
             * Properties of a SellAssetsMsg.
             * @memberof pb.common
             * @interface ISellAssetsMsg
             * @property {pb.common.IGameBaseMsg|null} [base] SellAssetsMsg base
             * @property {Array.<pb.common.IPlayerAsset>|null} [assets] SellAssetsMsg assets
             */

            /**
             * Constructs a new SellAssetsMsg.
             * @memberof pb.common
             * @classdesc Represents a SellAssetsMsg.
             * @implements ISellAssetsMsg
             * @constructor
             * @param {pb.common.ISellAssetsMsg=} [properties] Properties to set
             */
            function SellAssetsMsg(properties) {
                this.assets = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SellAssetsMsg base.
             * @member {pb.common.IGameBaseMsg|null|undefined} base
             * @memberof pb.common.SellAssetsMsg
             * @instance
             */
            SellAssetsMsg.prototype.base = null;

            /**
             * SellAssetsMsg assets.
             * @member {Array.<pb.common.IPlayerAsset>} assets
             * @memberof pb.common.SellAssetsMsg
             * @instance
             */
            SellAssetsMsg.prototype.assets = $util.emptyArray;

            /**
             * Creates a new SellAssetsMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.SellAssetsMsg
             * @static
             * @param {pb.common.ISellAssetsMsg=} [properties] Properties to set
             * @returns {pb.common.SellAssetsMsg} SellAssetsMsg instance
             */
            SellAssetsMsg.create = function create(properties) {
                return new SellAssetsMsg(properties);
            };

            /**
             * Encodes the specified SellAssetsMsg message. Does not implicitly {@link pb.common.SellAssetsMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.SellAssetsMsg
             * @static
             * @param {pb.common.ISellAssetsMsg} message SellAssetsMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SellAssetsMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.base != null && message.hasOwnProperty("base"))
                    $root.pb.common.GameBaseMsg.encode(message.base, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.assets != null && message.assets.length)
                    for (var i = 0; i < message.assets.length; ++i)
                        $root.pb.common.PlayerAsset.encode(message.assets[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SellAssetsMsg message, length delimited. Does not implicitly {@link pb.common.SellAssetsMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.SellAssetsMsg
             * @static
             * @param {pb.common.ISellAssetsMsg} message SellAssetsMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SellAssetsMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SellAssetsMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.SellAssetsMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.SellAssetsMsg} SellAssetsMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SellAssetsMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.SellAssetsMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.base = $root.pb.common.GameBaseMsg.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.assets && message.assets.length))
                            message.assets = [];
                        message.assets.push($root.pb.common.PlayerAsset.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SellAssetsMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.SellAssetsMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.SellAssetsMsg} SellAssetsMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SellAssetsMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SellAssetsMsg message.
             * @function verify
             * @memberof pb.common.SellAssetsMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SellAssetsMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.base != null && message.hasOwnProperty("base")) {
                    var error = $root.pb.common.GameBaseMsg.verify(message.base);
                    if (error)
                        return "base." + error;
                }
                if (message.assets != null && message.hasOwnProperty("assets")) {
                    if (!Array.isArray(message.assets))
                        return "assets: array expected";
                    for (var i = 0; i < message.assets.length; ++i) {
                        var error = $root.pb.common.PlayerAsset.verify(message.assets[i]);
                        if (error)
                            return "assets." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a SellAssetsMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.SellAssetsMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.SellAssetsMsg} SellAssetsMsg
             */
            SellAssetsMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.SellAssetsMsg)
                    return object;
                var message = new $root.pb.common.SellAssetsMsg();
                if (object.base != null) {
                    if (typeof object.base !== "object")
                        throw TypeError(".pb.common.SellAssetsMsg.base: object expected");
                    message.base = $root.pb.common.GameBaseMsg.fromObject(object.base);
                }
                if (object.assets) {
                    if (!Array.isArray(object.assets))
                        throw TypeError(".pb.common.SellAssetsMsg.assets: array expected");
                    message.assets = [];
                    for (var i = 0; i < object.assets.length; ++i) {
                        if (typeof object.assets[i] !== "object")
                            throw TypeError(".pb.common.SellAssetsMsg.assets: object expected");
                        message.assets[i] = $root.pb.common.PlayerAsset.fromObject(object.assets[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a SellAssetsMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.SellAssetsMsg
             * @static
             * @param {pb.common.SellAssetsMsg} message SellAssetsMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SellAssetsMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.assets = [];
                if (options.defaults)
                    object.base = null;
                if (message.base != null && message.hasOwnProperty("base"))
                    object.base = $root.pb.common.GameBaseMsg.toObject(message.base, options);
                if (message.assets && message.assets.length) {
                    object.assets = [];
                    for (var j = 0; j < message.assets.length; ++j)
                        object.assets[j] = $root.pb.common.PlayerAsset.toObject(message.assets[j], options);
                }
                return object;
            };

            /**
             * Converts this SellAssetsMsg to JSON.
             * @function toJSON
             * @memberof pb.common.SellAssetsMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SellAssetsMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SellAssetsMsg;
        })();

        common.ConfirmBankruptReq = (function() {

            /**
             * Properties of a ConfirmBankruptReq.
             * @memberof pb.common
             * @interface IConfirmBankruptReq
             * @property {pb.common.IAssetBaseReq|null} [req] ConfirmBankruptReq req
             */

            /**
             * Constructs a new ConfirmBankruptReq.
             * @memberof pb.common
             * @classdesc Represents a ConfirmBankruptReq.
             * @implements IConfirmBankruptReq
             * @constructor
             * @param {pb.common.IConfirmBankruptReq=} [properties] Properties to set
             */
            function ConfirmBankruptReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ConfirmBankruptReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.ConfirmBankruptReq
             * @instance
             */
            ConfirmBankruptReq.prototype.req = null;

            /**
             * Creates a new ConfirmBankruptReq instance using the specified properties.
             * @function create
             * @memberof pb.common.ConfirmBankruptReq
             * @static
             * @param {pb.common.IConfirmBankruptReq=} [properties] Properties to set
             * @returns {pb.common.ConfirmBankruptReq} ConfirmBankruptReq instance
             */
            ConfirmBankruptReq.create = function create(properties) {
                return new ConfirmBankruptReq(properties);
            };

            /**
             * Encodes the specified ConfirmBankruptReq message. Does not implicitly {@link pb.common.ConfirmBankruptReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.ConfirmBankruptReq
             * @static
             * @param {pb.common.IConfirmBankruptReq} message ConfirmBankruptReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConfirmBankruptReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ConfirmBankruptReq message, length delimited. Does not implicitly {@link pb.common.ConfirmBankruptReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.ConfirmBankruptReq
             * @static
             * @param {pb.common.IConfirmBankruptReq} message ConfirmBankruptReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConfirmBankruptReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ConfirmBankruptReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.ConfirmBankruptReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.ConfirmBankruptReq} ConfirmBankruptReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConfirmBankruptReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.ConfirmBankruptReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ConfirmBankruptReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.ConfirmBankruptReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.ConfirmBankruptReq} ConfirmBankruptReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConfirmBankruptReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ConfirmBankruptReq message.
             * @function verify
             * @memberof pb.common.ConfirmBankruptReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ConfirmBankruptReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                return null;
            };

            /**
             * Creates a ConfirmBankruptReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.ConfirmBankruptReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.ConfirmBankruptReq} ConfirmBankruptReq
             */
            ConfirmBankruptReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.ConfirmBankruptReq)
                    return object;
                var message = new $root.pb.common.ConfirmBankruptReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.ConfirmBankruptReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                return message;
            };

            /**
             * Creates a plain object from a ConfirmBankruptReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.ConfirmBankruptReq
             * @static
             * @param {pb.common.ConfirmBankruptReq} message ConfirmBankruptReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ConfirmBankruptReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.req = null;
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                return object;
            };

            /**
             * Converts this ConfirmBankruptReq to JSON.
             * @function toJSON
             * @memberof pb.common.ConfirmBankruptReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ConfirmBankruptReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ConfirmBankruptReq;
        })();

        common.ConfirmBankruptRsp = (function() {

            /**
             * Properties of a ConfirmBankruptRsp.
             * @memberof pb.common
             * @interface IConfirmBankruptRsp
             * @property {pb.common.IBaseRsp|null} [rsp] ConfirmBankruptRsp rsp
             */

            /**
             * Constructs a new ConfirmBankruptRsp.
             * @memberof pb.common
             * @classdesc Represents a ConfirmBankruptRsp.
             * @implements IConfirmBankruptRsp
             * @constructor
             * @param {pb.common.IConfirmBankruptRsp=} [properties] Properties to set
             */
            function ConfirmBankruptRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ConfirmBankruptRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.ConfirmBankruptRsp
             * @instance
             */
            ConfirmBankruptRsp.prototype.rsp = null;

            /**
             * Creates a new ConfirmBankruptRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.ConfirmBankruptRsp
             * @static
             * @param {pb.common.IConfirmBankruptRsp=} [properties] Properties to set
             * @returns {pb.common.ConfirmBankruptRsp} ConfirmBankruptRsp instance
             */
            ConfirmBankruptRsp.create = function create(properties) {
                return new ConfirmBankruptRsp(properties);
            };

            /**
             * Encodes the specified ConfirmBankruptRsp message. Does not implicitly {@link pb.common.ConfirmBankruptRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.ConfirmBankruptRsp
             * @static
             * @param {pb.common.IConfirmBankruptRsp} message ConfirmBankruptRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConfirmBankruptRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ConfirmBankruptRsp message, length delimited. Does not implicitly {@link pb.common.ConfirmBankruptRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.ConfirmBankruptRsp
             * @static
             * @param {pb.common.IConfirmBankruptRsp} message ConfirmBankruptRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConfirmBankruptRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ConfirmBankruptRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.ConfirmBankruptRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.ConfirmBankruptRsp} ConfirmBankruptRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConfirmBankruptRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.ConfirmBankruptRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ConfirmBankruptRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.ConfirmBankruptRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.ConfirmBankruptRsp} ConfirmBankruptRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConfirmBankruptRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ConfirmBankruptRsp message.
             * @function verify
             * @memberof pb.common.ConfirmBankruptRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ConfirmBankruptRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                return null;
            };

            /**
             * Creates a ConfirmBankruptRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.ConfirmBankruptRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.ConfirmBankruptRsp} ConfirmBankruptRsp
             */
            ConfirmBankruptRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.ConfirmBankruptRsp)
                    return object;
                var message = new $root.pb.common.ConfirmBankruptRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.ConfirmBankruptRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from a ConfirmBankruptRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.ConfirmBankruptRsp
             * @static
             * @param {pb.common.ConfirmBankruptRsp} message ConfirmBankruptRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ConfirmBankruptRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                return object;
            };

            /**
             * Converts this ConfirmBankruptRsp to JSON.
             * @function toJSON
             * @memberof pb.common.ConfirmBankruptRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ConfirmBankruptRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ConfirmBankruptRsp;
        })();

        common.ConfirmMarketChangeReq = (function() {

            /**
             * Properties of a ConfirmMarketChangeReq.
             * @memberof pb.common
             * @interface IConfirmMarketChangeReq
             * @property {pb.common.IAssetBaseReq|null} [req] ConfirmMarketChangeReq req
             */

            /**
             * Constructs a new ConfirmMarketChangeReq.
             * @memberof pb.common
             * @classdesc Represents a ConfirmMarketChangeReq.
             * @implements IConfirmMarketChangeReq
             * @constructor
             * @param {pb.common.IConfirmMarketChangeReq=} [properties] Properties to set
             */
            function ConfirmMarketChangeReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ConfirmMarketChangeReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.ConfirmMarketChangeReq
             * @instance
             */
            ConfirmMarketChangeReq.prototype.req = null;

            /**
             * Creates a new ConfirmMarketChangeReq instance using the specified properties.
             * @function create
             * @memberof pb.common.ConfirmMarketChangeReq
             * @static
             * @param {pb.common.IConfirmMarketChangeReq=} [properties] Properties to set
             * @returns {pb.common.ConfirmMarketChangeReq} ConfirmMarketChangeReq instance
             */
            ConfirmMarketChangeReq.create = function create(properties) {
                return new ConfirmMarketChangeReq(properties);
            };

            /**
             * Encodes the specified ConfirmMarketChangeReq message. Does not implicitly {@link pb.common.ConfirmMarketChangeReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.ConfirmMarketChangeReq
             * @static
             * @param {pb.common.IConfirmMarketChangeReq} message ConfirmMarketChangeReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConfirmMarketChangeReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ConfirmMarketChangeReq message, length delimited. Does not implicitly {@link pb.common.ConfirmMarketChangeReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.ConfirmMarketChangeReq
             * @static
             * @param {pb.common.IConfirmMarketChangeReq} message ConfirmMarketChangeReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConfirmMarketChangeReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ConfirmMarketChangeReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.ConfirmMarketChangeReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.ConfirmMarketChangeReq} ConfirmMarketChangeReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConfirmMarketChangeReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.ConfirmMarketChangeReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ConfirmMarketChangeReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.ConfirmMarketChangeReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.ConfirmMarketChangeReq} ConfirmMarketChangeReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConfirmMarketChangeReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ConfirmMarketChangeReq message.
             * @function verify
             * @memberof pb.common.ConfirmMarketChangeReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ConfirmMarketChangeReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                return null;
            };

            /**
             * Creates a ConfirmMarketChangeReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.ConfirmMarketChangeReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.ConfirmMarketChangeReq} ConfirmMarketChangeReq
             */
            ConfirmMarketChangeReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.ConfirmMarketChangeReq)
                    return object;
                var message = new $root.pb.common.ConfirmMarketChangeReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.ConfirmMarketChangeReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                return message;
            };

            /**
             * Creates a plain object from a ConfirmMarketChangeReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.ConfirmMarketChangeReq
             * @static
             * @param {pb.common.ConfirmMarketChangeReq} message ConfirmMarketChangeReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ConfirmMarketChangeReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.req = null;
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                return object;
            };

            /**
             * Converts this ConfirmMarketChangeReq to JSON.
             * @function toJSON
             * @memberof pb.common.ConfirmMarketChangeReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ConfirmMarketChangeReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ConfirmMarketChangeReq;
        })();

        common.ConfirmMarketChangeRsp = (function() {

            /**
             * Properties of a ConfirmMarketChangeRsp.
             * @memberof pb.common
             * @interface IConfirmMarketChangeRsp
             * @property {pb.common.IBaseRsp|null} [rsp] ConfirmMarketChangeRsp rsp
             */

            /**
             * Constructs a new ConfirmMarketChangeRsp.
             * @memberof pb.common
             * @classdesc Represents a ConfirmMarketChangeRsp.
             * @implements IConfirmMarketChangeRsp
             * @constructor
             * @param {pb.common.IConfirmMarketChangeRsp=} [properties] Properties to set
             */
            function ConfirmMarketChangeRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ConfirmMarketChangeRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.ConfirmMarketChangeRsp
             * @instance
             */
            ConfirmMarketChangeRsp.prototype.rsp = null;

            /**
             * Creates a new ConfirmMarketChangeRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.ConfirmMarketChangeRsp
             * @static
             * @param {pb.common.IConfirmMarketChangeRsp=} [properties] Properties to set
             * @returns {pb.common.ConfirmMarketChangeRsp} ConfirmMarketChangeRsp instance
             */
            ConfirmMarketChangeRsp.create = function create(properties) {
                return new ConfirmMarketChangeRsp(properties);
            };

            /**
             * Encodes the specified ConfirmMarketChangeRsp message. Does not implicitly {@link pb.common.ConfirmMarketChangeRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.ConfirmMarketChangeRsp
             * @static
             * @param {pb.common.IConfirmMarketChangeRsp} message ConfirmMarketChangeRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConfirmMarketChangeRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ConfirmMarketChangeRsp message, length delimited. Does not implicitly {@link pb.common.ConfirmMarketChangeRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.ConfirmMarketChangeRsp
             * @static
             * @param {pb.common.IConfirmMarketChangeRsp} message ConfirmMarketChangeRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConfirmMarketChangeRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ConfirmMarketChangeRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.ConfirmMarketChangeRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.ConfirmMarketChangeRsp} ConfirmMarketChangeRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConfirmMarketChangeRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.ConfirmMarketChangeRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ConfirmMarketChangeRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.ConfirmMarketChangeRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.ConfirmMarketChangeRsp} ConfirmMarketChangeRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConfirmMarketChangeRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ConfirmMarketChangeRsp message.
             * @function verify
             * @memberof pb.common.ConfirmMarketChangeRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ConfirmMarketChangeRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                return null;
            };

            /**
             * Creates a ConfirmMarketChangeRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.ConfirmMarketChangeRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.ConfirmMarketChangeRsp} ConfirmMarketChangeRsp
             */
            ConfirmMarketChangeRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.ConfirmMarketChangeRsp)
                    return object;
                var message = new $root.pb.common.ConfirmMarketChangeRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.ConfirmMarketChangeRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from a ConfirmMarketChangeRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.ConfirmMarketChangeRsp
             * @static
             * @param {pb.common.ConfirmMarketChangeRsp} message ConfirmMarketChangeRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ConfirmMarketChangeRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                return object;
            };

            /**
             * Converts this ConfirmMarketChangeRsp to JSON.
             * @function toJSON
             * @memberof pb.common.ConfirmMarketChangeRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ConfirmMarketChangeRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ConfirmMarketChangeRsp;
        })();

        common.DishonorablePunishReason = (function() {

            /**
             * Properties of a DishonorablePunishReason.
             * @memberof pb.common
             * @interface IDishonorablePunishReason
             */

            /**
             * Constructs a new DishonorablePunishReason.
             * @memberof pb.common
             * @classdesc Represents a DishonorablePunishReason.
             * @implements IDishonorablePunishReason
             * @constructor
             * @param {pb.common.IDishonorablePunishReason=} [properties] Properties to set
             */
            function DishonorablePunishReason(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new DishonorablePunishReason instance using the specified properties.
             * @function create
             * @memberof pb.common.DishonorablePunishReason
             * @static
             * @param {pb.common.IDishonorablePunishReason=} [properties] Properties to set
             * @returns {pb.common.DishonorablePunishReason} DishonorablePunishReason instance
             */
            DishonorablePunishReason.create = function create(properties) {
                return new DishonorablePunishReason(properties);
            };

            /**
             * Encodes the specified DishonorablePunishReason message. Does not implicitly {@link pb.common.DishonorablePunishReason.verify|verify} messages.
             * @function encode
             * @memberof pb.common.DishonorablePunishReason
             * @static
             * @param {pb.common.IDishonorablePunishReason} message DishonorablePunishReason message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DishonorablePunishReason.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified DishonorablePunishReason message, length delimited. Does not implicitly {@link pb.common.DishonorablePunishReason.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.DishonorablePunishReason
             * @static
             * @param {pb.common.IDishonorablePunishReason} message DishonorablePunishReason message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DishonorablePunishReason.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DishonorablePunishReason message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.DishonorablePunishReason
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.DishonorablePunishReason} DishonorablePunishReason
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DishonorablePunishReason.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.DishonorablePunishReason();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DishonorablePunishReason message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.DishonorablePunishReason
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.DishonorablePunishReason} DishonorablePunishReason
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DishonorablePunishReason.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DishonorablePunishReason message.
             * @function verify
             * @memberof pb.common.DishonorablePunishReason
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DishonorablePunishReason.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a DishonorablePunishReason message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.DishonorablePunishReason
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.DishonorablePunishReason} DishonorablePunishReason
             */
            DishonorablePunishReason.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.DishonorablePunishReason)
                    return object;
                return new $root.pb.common.DishonorablePunishReason();
            };

            /**
             * Creates a plain object from a DishonorablePunishReason message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.DishonorablePunishReason
             * @static
             * @param {pb.common.DishonorablePunishReason} message DishonorablePunishReason
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DishonorablePunishReason.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this DishonorablePunishReason to JSON.
             * @function toJSON
             * @memberof pb.common.DishonorablePunishReason
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DishonorablePunishReason.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Enum enum.
             * @name pb.common.DishonorablePunishReason.Enum
             * @enum {string}
             * @property {number} Unknown=0 Unknown value
             * @property {number} LazyOpt=1 LazyOpt value
             * @property {number} TerribleNetwork=2 TerribleNetwork value
             */
            DishonorablePunishReason.Enum = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "Unknown"] = 0;
                values[valuesById[1] = "LazyOpt"] = 1;
                values[valuesById[2] = "TerribleNetwork"] = 2;
                return values;
            })();

            return DishonorablePunishReason;
        })();

        common.DishonorLazyOpt = (function() {

            /**
             * Properties of a DishonorLazyOpt.
             * @memberof pb.common
             * @interface IDishonorLazyOpt
             * @property {number|null} [cnt] DishonorLazyOpt cnt
             * @property {number|null} [tolerance] DishonorLazyOpt tolerance
             */

            /**
             * Constructs a new DishonorLazyOpt.
             * @memberof pb.common
             * @classdesc Represents a DishonorLazyOpt.
             * @implements IDishonorLazyOpt
             * @constructor
             * @param {pb.common.IDishonorLazyOpt=} [properties] Properties to set
             */
            function DishonorLazyOpt(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DishonorLazyOpt cnt.
             * @member {number} cnt
             * @memberof pb.common.DishonorLazyOpt
             * @instance
             */
            DishonorLazyOpt.prototype.cnt = 0;

            /**
             * DishonorLazyOpt tolerance.
             * @member {number} tolerance
             * @memberof pb.common.DishonorLazyOpt
             * @instance
             */
            DishonorLazyOpt.prototype.tolerance = 0;

            /**
             * Creates a new DishonorLazyOpt instance using the specified properties.
             * @function create
             * @memberof pb.common.DishonorLazyOpt
             * @static
             * @param {pb.common.IDishonorLazyOpt=} [properties] Properties to set
             * @returns {pb.common.DishonorLazyOpt} DishonorLazyOpt instance
             */
            DishonorLazyOpt.create = function create(properties) {
                return new DishonorLazyOpt(properties);
            };

            /**
             * Encodes the specified DishonorLazyOpt message. Does not implicitly {@link pb.common.DishonorLazyOpt.verify|verify} messages.
             * @function encode
             * @memberof pb.common.DishonorLazyOpt
             * @static
             * @param {pb.common.IDishonorLazyOpt} message DishonorLazyOpt message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DishonorLazyOpt.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.cnt != null && message.hasOwnProperty("cnt"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.cnt);
                if (message.tolerance != null && message.hasOwnProperty("tolerance"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.tolerance);
                return writer;
            };

            /**
             * Encodes the specified DishonorLazyOpt message, length delimited. Does not implicitly {@link pb.common.DishonorLazyOpt.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.DishonorLazyOpt
             * @static
             * @param {pb.common.IDishonorLazyOpt} message DishonorLazyOpt message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DishonorLazyOpt.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DishonorLazyOpt message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.DishonorLazyOpt
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.DishonorLazyOpt} DishonorLazyOpt
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DishonorLazyOpt.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.DishonorLazyOpt();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.cnt = reader.int32();
                        break;
                    case 2:
                        message.tolerance = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DishonorLazyOpt message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.DishonorLazyOpt
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.DishonorLazyOpt} DishonorLazyOpt
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DishonorLazyOpt.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DishonorLazyOpt message.
             * @function verify
             * @memberof pb.common.DishonorLazyOpt
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DishonorLazyOpt.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.cnt != null && message.hasOwnProperty("cnt"))
                    if (!$util.isInteger(message.cnt))
                        return "cnt: integer expected";
                if (message.tolerance != null && message.hasOwnProperty("tolerance"))
                    if (!$util.isInteger(message.tolerance))
                        return "tolerance: integer expected";
                return null;
            };

            /**
             * Creates a DishonorLazyOpt message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.DishonorLazyOpt
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.DishonorLazyOpt} DishonorLazyOpt
             */
            DishonorLazyOpt.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.DishonorLazyOpt)
                    return object;
                var message = new $root.pb.common.DishonorLazyOpt();
                if (object.cnt != null)
                    message.cnt = object.cnt | 0;
                if (object.tolerance != null)
                    message.tolerance = object.tolerance | 0;
                return message;
            };

            /**
             * Creates a plain object from a DishonorLazyOpt message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.DishonorLazyOpt
             * @static
             * @param {pb.common.DishonorLazyOpt} message DishonorLazyOpt
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DishonorLazyOpt.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.cnt = 0;
                    object.tolerance = 0;
                }
                if (message.cnt != null && message.hasOwnProperty("cnt"))
                    object.cnt = message.cnt;
                if (message.tolerance != null && message.hasOwnProperty("tolerance"))
                    object.tolerance = message.tolerance;
                return object;
            };

            /**
             * Converts this DishonorLazyOpt to JSON.
             * @function toJSON
             * @memberof pb.common.DishonorLazyOpt
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DishonorLazyOpt.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return DishonorLazyOpt;
        })();

        common.DishonorablePunishMsg = (function() {

            /**
             * Properties of a DishonorablePunishMsg.
             * @memberof pb.common
             * @interface IDishonorablePunishMsg
             * @property {Long|null} [userID] DishonorablePunishMsg userID
             * @property {pb.common.DishonorablePunishReason.Enum|null} [reason] DishonorablePunishMsg reason
             * @property {google.protobuf.IAny|null} [detail] DishonorablePunishMsg detail
             */

            /**
             * Constructs a new DishonorablePunishMsg.
             * @memberof pb.common
             * @classdesc Represents a DishonorablePunishMsg.
             * @implements IDishonorablePunishMsg
             * @constructor
             * @param {pb.common.IDishonorablePunishMsg=} [properties] Properties to set
             */
            function DishonorablePunishMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DishonorablePunishMsg userID.
             * @member {Long} userID
             * @memberof pb.common.DishonorablePunishMsg
             * @instance
             */
            DishonorablePunishMsg.prototype.userID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * DishonorablePunishMsg reason.
             * @member {pb.common.DishonorablePunishReason.Enum} reason
             * @memberof pb.common.DishonorablePunishMsg
             * @instance
             */
            DishonorablePunishMsg.prototype.reason = 0;

            /**
             * DishonorablePunishMsg detail.
             * @member {google.protobuf.IAny|null|undefined} detail
             * @memberof pb.common.DishonorablePunishMsg
             * @instance
             */
            DishonorablePunishMsg.prototype.detail = null;

            /**
             * Creates a new DishonorablePunishMsg instance using the specified properties.
             * @function create
             * @memberof pb.common.DishonorablePunishMsg
             * @static
             * @param {pb.common.IDishonorablePunishMsg=} [properties] Properties to set
             * @returns {pb.common.DishonorablePunishMsg} DishonorablePunishMsg instance
             */
            DishonorablePunishMsg.create = function create(properties) {
                return new DishonorablePunishMsg(properties);
            };

            /**
             * Encodes the specified DishonorablePunishMsg message. Does not implicitly {@link pb.common.DishonorablePunishMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.common.DishonorablePunishMsg
             * @static
             * @param {pb.common.IDishonorablePunishMsg} message DishonorablePunishMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DishonorablePunishMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userID != null && message.hasOwnProperty("userID"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userID);
                if (message.reason != null && message.hasOwnProperty("reason"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.reason);
                if (message.detail != null && message.hasOwnProperty("detail"))
                    $root.google.protobuf.Any.encode(message.detail, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified DishonorablePunishMsg message, length delimited. Does not implicitly {@link pb.common.DishonorablePunishMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.DishonorablePunishMsg
             * @static
             * @param {pb.common.IDishonorablePunishMsg} message DishonorablePunishMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DishonorablePunishMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DishonorablePunishMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.DishonorablePunishMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.DishonorablePunishMsg} DishonorablePunishMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DishonorablePunishMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.DishonorablePunishMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.userID = reader.int64();
                        break;
                    case 2:
                        message.reason = reader.int32();
                        break;
                    case 3:
                        message.detail = $root.google.protobuf.Any.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DishonorablePunishMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.DishonorablePunishMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.DishonorablePunishMsg} DishonorablePunishMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DishonorablePunishMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DishonorablePunishMsg message.
             * @function verify
             * @memberof pb.common.DishonorablePunishMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DishonorablePunishMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userID != null && message.hasOwnProperty("userID"))
                    if (!$util.isInteger(message.userID) && !(message.userID && $util.isInteger(message.userID.low) && $util.isInteger(message.userID.high)))
                        return "userID: integer|Long expected";
                if (message.reason != null && message.hasOwnProperty("reason"))
                    switch (message.reason) {
                    default:
                        return "reason: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.detail != null && message.hasOwnProperty("detail")) {
                    var error = $root.google.protobuf.Any.verify(message.detail);
                    if (error)
                        return "detail." + error;
                }
                return null;
            };

            /**
             * Creates a DishonorablePunishMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.DishonorablePunishMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.DishonorablePunishMsg} DishonorablePunishMsg
             */
            DishonorablePunishMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.DishonorablePunishMsg)
                    return object;
                var message = new $root.pb.common.DishonorablePunishMsg();
                if (object.userID != null)
                    if ($util.Long)
                        (message.userID = $util.Long.fromValue(object.userID)).unsigned = false;
                    else if (typeof object.userID === "string")
                        message.userID = parseInt(object.userID, 10);
                    else if (typeof object.userID === "number")
                        message.userID = object.userID;
                    else if (typeof object.userID === "object")
                        message.userID = new $util.LongBits(object.userID.low >>> 0, object.userID.high >>> 0).toNumber();
                switch (object.reason) {
                case "Unknown":
                case 0:
                    message.reason = 0;
                    break;
                case "LazyOpt":
                case 1:
                    message.reason = 1;
                    break;
                case "TerribleNetwork":
                case 2:
                    message.reason = 2;
                    break;
                }
                if (object.detail != null) {
                    if (typeof object.detail !== "object")
                        throw TypeError(".pb.common.DishonorablePunishMsg.detail: object expected");
                    message.detail = $root.google.protobuf.Any.fromObject(object.detail);
                }
                return message;
            };

            /**
             * Creates a plain object from a DishonorablePunishMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.DishonorablePunishMsg
             * @static
             * @param {pb.common.DishonorablePunishMsg} message DishonorablePunishMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DishonorablePunishMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userID = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userID = options.longs === String ? "0" : 0;
                    object.reason = options.enums === String ? "Unknown" : 0;
                    object.detail = null;
                }
                if (message.userID != null && message.hasOwnProperty("userID"))
                    if (typeof message.userID === "number")
                        object.userID = options.longs === String ? String(message.userID) : message.userID;
                    else
                        object.userID = options.longs === String ? $util.Long.prototype.toString.call(message.userID) : options.longs === Number ? new $util.LongBits(message.userID.low >>> 0, message.userID.high >>> 0).toNumber() : message.userID;
                if (message.reason != null && message.hasOwnProperty("reason"))
                    object.reason = options.enums === String ? $root.pb.common.DishonorablePunishReason.Enum[message.reason] : message.reason;
                if (message.detail != null && message.hasOwnProperty("detail"))
                    object.detail = $root.google.protobuf.Any.toObject(message.detail, options);
                return object;
            };

            /**
             * Converts this DishonorablePunishMsg to JSON.
             * @function toJSON
             * @memberof pb.common.DishonorablePunishMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DishonorablePunishMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return DishonorablePunishMsg;
        })();

        common.UpdateRoomChoicesReq = (function() {

            /**
             * Properties of an UpdateRoomChoicesReq.
             * @memberof pb.common
             * @interface IUpdateRoomChoicesReq
             * @property {pb.common.IAssetBaseReq|null} [req] UpdateRoomChoicesReq req
             * @property {string|null} [roomID] UpdateRoomChoicesReq roomID
             * @property {pb.common.IRoomOption|null} [opt] UpdateRoomChoicesReq opt
             */

            /**
             * Constructs a new UpdateRoomChoicesReq.
             * @memberof pb.common
             * @classdesc Represents an UpdateRoomChoicesReq.
             * @implements IUpdateRoomChoicesReq
             * @constructor
             * @param {pb.common.IUpdateRoomChoicesReq=} [properties] Properties to set
             */
            function UpdateRoomChoicesReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UpdateRoomChoicesReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.UpdateRoomChoicesReq
             * @instance
             */
            UpdateRoomChoicesReq.prototype.req = null;

            /**
             * UpdateRoomChoicesReq roomID.
             * @member {string} roomID
             * @memberof pb.common.UpdateRoomChoicesReq
             * @instance
             */
            UpdateRoomChoicesReq.prototype.roomID = "";

            /**
             * UpdateRoomChoicesReq opt.
             * @member {pb.common.IRoomOption|null|undefined} opt
             * @memberof pb.common.UpdateRoomChoicesReq
             * @instance
             */
            UpdateRoomChoicesReq.prototype.opt = null;

            /**
             * Creates a new UpdateRoomChoicesReq instance using the specified properties.
             * @function create
             * @memberof pb.common.UpdateRoomChoicesReq
             * @static
             * @param {pb.common.IUpdateRoomChoicesReq=} [properties] Properties to set
             * @returns {pb.common.UpdateRoomChoicesReq} UpdateRoomChoicesReq instance
             */
            UpdateRoomChoicesReq.create = function create(properties) {
                return new UpdateRoomChoicesReq(properties);
            };

            /**
             * Encodes the specified UpdateRoomChoicesReq message. Does not implicitly {@link pb.common.UpdateRoomChoicesReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.UpdateRoomChoicesReq
             * @static
             * @param {pb.common.IUpdateRoomChoicesReq} message UpdateRoomChoicesReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateRoomChoicesReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.roomID != null && message.hasOwnProperty("roomID"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.roomID);
                if (message.opt != null && message.hasOwnProperty("opt"))
                    $root.pb.common.RoomOption.encode(message.opt, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified UpdateRoomChoicesReq message, length delimited. Does not implicitly {@link pb.common.UpdateRoomChoicesReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.UpdateRoomChoicesReq
             * @static
             * @param {pb.common.IUpdateRoomChoicesReq} message UpdateRoomChoicesReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateRoomChoicesReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UpdateRoomChoicesReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.UpdateRoomChoicesReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.UpdateRoomChoicesReq} UpdateRoomChoicesReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateRoomChoicesReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.UpdateRoomChoicesReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.roomID = reader.string();
                        break;
                    case 3:
                        message.opt = $root.pb.common.RoomOption.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an UpdateRoomChoicesReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.UpdateRoomChoicesReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.UpdateRoomChoicesReq} UpdateRoomChoicesReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateRoomChoicesReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UpdateRoomChoicesReq message.
             * @function verify
             * @memberof pb.common.UpdateRoomChoicesReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UpdateRoomChoicesReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                if (message.roomID != null && message.hasOwnProperty("roomID"))
                    if (!$util.isString(message.roomID))
                        return "roomID: string expected";
                if (message.opt != null && message.hasOwnProperty("opt")) {
                    var error = $root.pb.common.RoomOption.verify(message.opt);
                    if (error)
                        return "opt." + error;
                }
                return null;
            };

            /**
             * Creates an UpdateRoomChoicesReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.UpdateRoomChoicesReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.UpdateRoomChoicesReq} UpdateRoomChoicesReq
             */
            UpdateRoomChoicesReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.UpdateRoomChoicesReq)
                    return object;
                var message = new $root.pb.common.UpdateRoomChoicesReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.UpdateRoomChoicesReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                if (object.roomID != null)
                    message.roomID = String(object.roomID);
                if (object.opt != null) {
                    if (typeof object.opt !== "object")
                        throw TypeError(".pb.common.UpdateRoomChoicesReq.opt: object expected");
                    message.opt = $root.pb.common.RoomOption.fromObject(object.opt);
                }
                return message;
            };

            /**
             * Creates a plain object from an UpdateRoomChoicesReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.UpdateRoomChoicesReq
             * @static
             * @param {pb.common.UpdateRoomChoicesReq} message UpdateRoomChoicesReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UpdateRoomChoicesReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.req = null;
                    object.roomID = "";
                    object.opt = null;
                }
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                if (message.roomID != null && message.hasOwnProperty("roomID"))
                    object.roomID = message.roomID;
                if (message.opt != null && message.hasOwnProperty("opt"))
                    object.opt = $root.pb.common.RoomOption.toObject(message.opt, options);
                return object;
            };

            /**
             * Converts this UpdateRoomChoicesReq to JSON.
             * @function toJSON
             * @memberof pb.common.UpdateRoomChoicesReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UpdateRoomChoicesReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return UpdateRoomChoicesReq;
        })();

        common.UpdateRoomChoicesRsp = (function() {

            /**
             * Properties of an UpdateRoomChoicesRsp.
             * @memberof pb.common
             * @interface IUpdateRoomChoicesRsp
             * @property {pb.common.IBaseRsp|null} [rsp] UpdateRoomChoicesRsp rsp
             * @property {string|null} [roomID] UpdateRoomChoicesRsp roomID
             * @property {pb.common.IRoomOption|null} [opt] UpdateRoomChoicesRsp opt
             */

            /**
             * Constructs a new UpdateRoomChoicesRsp.
             * @memberof pb.common
             * @classdesc Represents an UpdateRoomChoicesRsp.
             * @implements IUpdateRoomChoicesRsp
             * @constructor
             * @param {pb.common.IUpdateRoomChoicesRsp=} [properties] Properties to set
             */
            function UpdateRoomChoicesRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UpdateRoomChoicesRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.UpdateRoomChoicesRsp
             * @instance
             */
            UpdateRoomChoicesRsp.prototype.rsp = null;

            /**
             * UpdateRoomChoicesRsp roomID.
             * @member {string} roomID
             * @memberof pb.common.UpdateRoomChoicesRsp
             * @instance
             */
            UpdateRoomChoicesRsp.prototype.roomID = "";

            /**
             * UpdateRoomChoicesRsp opt.
             * @member {pb.common.IRoomOption|null|undefined} opt
             * @memberof pb.common.UpdateRoomChoicesRsp
             * @instance
             */
            UpdateRoomChoicesRsp.prototype.opt = null;

            /**
             * Creates a new UpdateRoomChoicesRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.UpdateRoomChoicesRsp
             * @static
             * @param {pb.common.IUpdateRoomChoicesRsp=} [properties] Properties to set
             * @returns {pb.common.UpdateRoomChoicesRsp} UpdateRoomChoicesRsp instance
             */
            UpdateRoomChoicesRsp.create = function create(properties) {
                return new UpdateRoomChoicesRsp(properties);
            };

            /**
             * Encodes the specified UpdateRoomChoicesRsp message. Does not implicitly {@link pb.common.UpdateRoomChoicesRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.UpdateRoomChoicesRsp
             * @static
             * @param {pb.common.IUpdateRoomChoicesRsp} message UpdateRoomChoicesRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateRoomChoicesRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.roomID != null && message.hasOwnProperty("roomID"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.roomID);
                if (message.opt != null && message.hasOwnProperty("opt"))
                    $root.pb.common.RoomOption.encode(message.opt, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified UpdateRoomChoicesRsp message, length delimited. Does not implicitly {@link pb.common.UpdateRoomChoicesRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.UpdateRoomChoicesRsp
             * @static
             * @param {pb.common.IUpdateRoomChoicesRsp} message UpdateRoomChoicesRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateRoomChoicesRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UpdateRoomChoicesRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.UpdateRoomChoicesRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.UpdateRoomChoicesRsp} UpdateRoomChoicesRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateRoomChoicesRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.UpdateRoomChoicesRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.roomID = reader.string();
                        break;
                    case 3:
                        message.opt = $root.pb.common.RoomOption.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an UpdateRoomChoicesRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.UpdateRoomChoicesRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.UpdateRoomChoicesRsp} UpdateRoomChoicesRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateRoomChoicesRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UpdateRoomChoicesRsp message.
             * @function verify
             * @memberof pb.common.UpdateRoomChoicesRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UpdateRoomChoicesRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                if (message.roomID != null && message.hasOwnProperty("roomID"))
                    if (!$util.isString(message.roomID))
                        return "roomID: string expected";
                if (message.opt != null && message.hasOwnProperty("opt")) {
                    var error = $root.pb.common.RoomOption.verify(message.opt);
                    if (error)
                        return "opt." + error;
                }
                return null;
            };

            /**
             * Creates an UpdateRoomChoicesRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.UpdateRoomChoicesRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.UpdateRoomChoicesRsp} UpdateRoomChoicesRsp
             */
            UpdateRoomChoicesRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.UpdateRoomChoicesRsp)
                    return object;
                var message = new $root.pb.common.UpdateRoomChoicesRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.UpdateRoomChoicesRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                if (object.roomID != null)
                    message.roomID = String(object.roomID);
                if (object.opt != null) {
                    if (typeof object.opt !== "object")
                        throw TypeError(".pb.common.UpdateRoomChoicesRsp.opt: object expected");
                    message.opt = $root.pb.common.RoomOption.fromObject(object.opt);
                }
                return message;
            };

            /**
             * Creates a plain object from an UpdateRoomChoicesRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.UpdateRoomChoicesRsp
             * @static
             * @param {pb.common.UpdateRoomChoicesRsp} message UpdateRoomChoicesRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UpdateRoomChoicesRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.rsp = null;
                    object.roomID = "";
                    object.opt = null;
                }
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                if (message.roomID != null && message.hasOwnProperty("roomID"))
                    object.roomID = message.roomID;
                if (message.opt != null && message.hasOwnProperty("opt"))
                    object.opt = $root.pb.common.RoomOption.toObject(message.opt, options);
                return object;
            };

            /**
             * Converts this UpdateRoomChoicesRsp to JSON.
             * @function toJSON
             * @memberof pb.common.UpdateRoomChoicesRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UpdateRoomChoicesRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return UpdateRoomChoicesRsp;
        })();

        common.GetUniqueScenarioImgNameReq = (function() {

            /**
             * Properties of a GetUniqueScenarioImgNameReq.
             * @memberof pb.common
             * @interface IGetUniqueScenarioImgNameReq
             * @property {pb.common.IAssetBaseReq|null} [req] GetUniqueScenarioImgNameReq req
             */

            /**
             * Constructs a new GetUniqueScenarioImgNameReq.
             * @memberof pb.common
             * @classdesc Represents a GetUniqueScenarioImgNameReq.
             * @implements IGetUniqueScenarioImgNameReq
             * @constructor
             * @param {pb.common.IGetUniqueScenarioImgNameReq=} [properties] Properties to set
             */
            function GetUniqueScenarioImgNameReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GetUniqueScenarioImgNameReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.GetUniqueScenarioImgNameReq
             * @instance
             */
            GetUniqueScenarioImgNameReq.prototype.req = null;

            /**
             * Creates a new GetUniqueScenarioImgNameReq instance using the specified properties.
             * @function create
             * @memberof pb.common.GetUniqueScenarioImgNameReq
             * @static
             * @param {pb.common.IGetUniqueScenarioImgNameReq=} [properties] Properties to set
             * @returns {pb.common.GetUniqueScenarioImgNameReq} GetUniqueScenarioImgNameReq instance
             */
            GetUniqueScenarioImgNameReq.create = function create(properties) {
                return new GetUniqueScenarioImgNameReq(properties);
            };

            /**
             * Encodes the specified GetUniqueScenarioImgNameReq message. Does not implicitly {@link pb.common.GetUniqueScenarioImgNameReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GetUniqueScenarioImgNameReq
             * @static
             * @param {pb.common.IGetUniqueScenarioImgNameReq} message GetUniqueScenarioImgNameReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetUniqueScenarioImgNameReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GetUniqueScenarioImgNameReq message, length delimited. Does not implicitly {@link pb.common.GetUniqueScenarioImgNameReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GetUniqueScenarioImgNameReq
             * @static
             * @param {pb.common.IGetUniqueScenarioImgNameReq} message GetUniqueScenarioImgNameReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetUniqueScenarioImgNameReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetUniqueScenarioImgNameReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GetUniqueScenarioImgNameReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GetUniqueScenarioImgNameReq} GetUniqueScenarioImgNameReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetUniqueScenarioImgNameReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GetUniqueScenarioImgNameReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetUniqueScenarioImgNameReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GetUniqueScenarioImgNameReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GetUniqueScenarioImgNameReq} GetUniqueScenarioImgNameReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetUniqueScenarioImgNameReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetUniqueScenarioImgNameReq message.
             * @function verify
             * @memberof pb.common.GetUniqueScenarioImgNameReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetUniqueScenarioImgNameReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                return null;
            };

            /**
             * Creates a GetUniqueScenarioImgNameReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GetUniqueScenarioImgNameReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GetUniqueScenarioImgNameReq} GetUniqueScenarioImgNameReq
             */
            GetUniqueScenarioImgNameReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GetUniqueScenarioImgNameReq)
                    return object;
                var message = new $root.pb.common.GetUniqueScenarioImgNameReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.GetUniqueScenarioImgNameReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                return message;
            };

            /**
             * Creates a plain object from a GetUniqueScenarioImgNameReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GetUniqueScenarioImgNameReq
             * @static
             * @param {pb.common.GetUniqueScenarioImgNameReq} message GetUniqueScenarioImgNameReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetUniqueScenarioImgNameReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.req = null;
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                return object;
            };

            /**
             * Converts this GetUniqueScenarioImgNameReq to JSON.
             * @function toJSON
             * @memberof pb.common.GetUniqueScenarioImgNameReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetUniqueScenarioImgNameReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GetUniqueScenarioImgNameReq;
        })();

        common.GetUniqueScenarioImgNameRsp = (function() {

            /**
             * Properties of a GetUniqueScenarioImgNameRsp.
             * @memberof pb.common
             * @interface IGetUniqueScenarioImgNameRsp
             * @property {pb.common.IBaseRsp|null} [rsp] GetUniqueScenarioImgNameRsp rsp
             * @property {Array.<string>|null} [imgFiles] GetUniqueScenarioImgNameRsp imgFiles
             */

            /**
             * Constructs a new GetUniqueScenarioImgNameRsp.
             * @memberof pb.common
             * @classdesc Represents a GetUniqueScenarioImgNameRsp.
             * @implements IGetUniqueScenarioImgNameRsp
             * @constructor
             * @param {pb.common.IGetUniqueScenarioImgNameRsp=} [properties] Properties to set
             */
            function GetUniqueScenarioImgNameRsp(properties) {
                this.imgFiles = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GetUniqueScenarioImgNameRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.GetUniqueScenarioImgNameRsp
             * @instance
             */
            GetUniqueScenarioImgNameRsp.prototype.rsp = null;

            /**
             * GetUniqueScenarioImgNameRsp imgFiles.
             * @member {Array.<string>} imgFiles
             * @memberof pb.common.GetUniqueScenarioImgNameRsp
             * @instance
             */
            GetUniqueScenarioImgNameRsp.prototype.imgFiles = $util.emptyArray;

            /**
             * Creates a new GetUniqueScenarioImgNameRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.GetUniqueScenarioImgNameRsp
             * @static
             * @param {pb.common.IGetUniqueScenarioImgNameRsp=} [properties] Properties to set
             * @returns {pb.common.GetUniqueScenarioImgNameRsp} GetUniqueScenarioImgNameRsp instance
             */
            GetUniqueScenarioImgNameRsp.create = function create(properties) {
                return new GetUniqueScenarioImgNameRsp(properties);
            };

            /**
             * Encodes the specified GetUniqueScenarioImgNameRsp message. Does not implicitly {@link pb.common.GetUniqueScenarioImgNameRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GetUniqueScenarioImgNameRsp
             * @static
             * @param {pb.common.IGetUniqueScenarioImgNameRsp} message GetUniqueScenarioImgNameRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetUniqueScenarioImgNameRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.imgFiles != null && message.imgFiles.length)
                    for (var i = 0; i < message.imgFiles.length; ++i)
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.imgFiles[i]);
                return writer;
            };

            /**
             * Encodes the specified GetUniqueScenarioImgNameRsp message, length delimited. Does not implicitly {@link pb.common.GetUniqueScenarioImgNameRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GetUniqueScenarioImgNameRsp
             * @static
             * @param {pb.common.IGetUniqueScenarioImgNameRsp} message GetUniqueScenarioImgNameRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetUniqueScenarioImgNameRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetUniqueScenarioImgNameRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GetUniqueScenarioImgNameRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GetUniqueScenarioImgNameRsp} GetUniqueScenarioImgNameRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetUniqueScenarioImgNameRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GetUniqueScenarioImgNameRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.imgFiles && message.imgFiles.length))
                            message.imgFiles = [];
                        message.imgFiles.push(reader.string());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetUniqueScenarioImgNameRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GetUniqueScenarioImgNameRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GetUniqueScenarioImgNameRsp} GetUniqueScenarioImgNameRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetUniqueScenarioImgNameRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetUniqueScenarioImgNameRsp message.
             * @function verify
             * @memberof pb.common.GetUniqueScenarioImgNameRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetUniqueScenarioImgNameRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                if (message.imgFiles != null && message.hasOwnProperty("imgFiles")) {
                    if (!Array.isArray(message.imgFiles))
                        return "imgFiles: array expected";
                    for (var i = 0; i < message.imgFiles.length; ++i)
                        if (!$util.isString(message.imgFiles[i]))
                            return "imgFiles: string[] expected";
                }
                return null;
            };

            /**
             * Creates a GetUniqueScenarioImgNameRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GetUniqueScenarioImgNameRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GetUniqueScenarioImgNameRsp} GetUniqueScenarioImgNameRsp
             */
            GetUniqueScenarioImgNameRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GetUniqueScenarioImgNameRsp)
                    return object;
                var message = new $root.pb.common.GetUniqueScenarioImgNameRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.GetUniqueScenarioImgNameRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                if (object.imgFiles) {
                    if (!Array.isArray(object.imgFiles))
                        throw TypeError(".pb.common.GetUniqueScenarioImgNameRsp.imgFiles: array expected");
                    message.imgFiles = [];
                    for (var i = 0; i < object.imgFiles.length; ++i)
                        message.imgFiles[i] = String(object.imgFiles[i]);
                }
                return message;
            };

            /**
             * Creates a plain object from a GetUniqueScenarioImgNameRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GetUniqueScenarioImgNameRsp
             * @static
             * @param {pb.common.GetUniqueScenarioImgNameRsp} message GetUniqueScenarioImgNameRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetUniqueScenarioImgNameRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.imgFiles = [];
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                if (message.imgFiles && message.imgFiles.length) {
                    object.imgFiles = [];
                    for (var j = 0; j < message.imgFiles.length; ++j)
                        object.imgFiles[j] = message.imgFiles[j];
                }
                return object;
            };

            /**
             * Converts this GetUniqueScenarioImgNameRsp to JSON.
             * @function toJSON
             * @memberof pb.common.GetUniqueScenarioImgNameRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetUniqueScenarioImgNameRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GetUniqueScenarioImgNameRsp;
        })();

        common.GetAvailableMapsReq = (function() {

            /**
             * Properties of a GetAvailableMapsReq.
             * @memberof pb.common
             * @interface IGetAvailableMapsReq
             * @property {pb.common.IAssetBaseReq|null} [req] GetAvailableMapsReq req
             */

            /**
             * Constructs a new GetAvailableMapsReq.
             * @memberof pb.common
             * @classdesc Represents a GetAvailableMapsReq.
             * @implements IGetAvailableMapsReq
             * @constructor
             * @param {pb.common.IGetAvailableMapsReq=} [properties] Properties to set
             */
            function GetAvailableMapsReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GetAvailableMapsReq req.
             * @member {pb.common.IAssetBaseReq|null|undefined} req
             * @memberof pb.common.GetAvailableMapsReq
             * @instance
             */
            GetAvailableMapsReq.prototype.req = null;

            /**
             * Creates a new GetAvailableMapsReq instance using the specified properties.
             * @function create
             * @memberof pb.common.GetAvailableMapsReq
             * @static
             * @param {pb.common.IGetAvailableMapsReq=} [properties] Properties to set
             * @returns {pb.common.GetAvailableMapsReq} GetAvailableMapsReq instance
             */
            GetAvailableMapsReq.create = function create(properties) {
                return new GetAvailableMapsReq(properties);
            };

            /**
             * Encodes the specified GetAvailableMapsReq message. Does not implicitly {@link pb.common.GetAvailableMapsReq.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GetAvailableMapsReq
             * @static
             * @param {pb.common.IGetAvailableMapsReq} message GetAvailableMapsReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetAvailableMapsReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.req != null && message.hasOwnProperty("req"))
                    $root.pb.common.AssetBaseReq.encode(message.req, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GetAvailableMapsReq message, length delimited. Does not implicitly {@link pb.common.GetAvailableMapsReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GetAvailableMapsReq
             * @static
             * @param {pb.common.IGetAvailableMapsReq} message GetAvailableMapsReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetAvailableMapsReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetAvailableMapsReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GetAvailableMapsReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GetAvailableMapsReq} GetAvailableMapsReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetAvailableMapsReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GetAvailableMapsReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.req = $root.pb.common.AssetBaseReq.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetAvailableMapsReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GetAvailableMapsReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GetAvailableMapsReq} GetAvailableMapsReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetAvailableMapsReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetAvailableMapsReq message.
             * @function verify
             * @memberof pb.common.GetAvailableMapsReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetAvailableMapsReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.req != null && message.hasOwnProperty("req")) {
                    var error = $root.pb.common.AssetBaseReq.verify(message.req);
                    if (error)
                        return "req." + error;
                }
                return null;
            };

            /**
             * Creates a GetAvailableMapsReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GetAvailableMapsReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GetAvailableMapsReq} GetAvailableMapsReq
             */
            GetAvailableMapsReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GetAvailableMapsReq)
                    return object;
                var message = new $root.pb.common.GetAvailableMapsReq();
                if (object.req != null) {
                    if (typeof object.req !== "object")
                        throw TypeError(".pb.common.GetAvailableMapsReq.req: object expected");
                    message.req = $root.pb.common.AssetBaseReq.fromObject(object.req);
                }
                return message;
            };

            /**
             * Creates a plain object from a GetAvailableMapsReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GetAvailableMapsReq
             * @static
             * @param {pb.common.GetAvailableMapsReq} message GetAvailableMapsReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetAvailableMapsReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.req = null;
                if (message.req != null && message.hasOwnProperty("req"))
                    object.req = $root.pb.common.AssetBaseReq.toObject(message.req, options);
                return object;
            };

            /**
             * Converts this GetAvailableMapsReq to JSON.
             * @function toJSON
             * @memberof pb.common.GetAvailableMapsReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetAvailableMapsReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GetAvailableMapsReq;
        })();

        common.GetAvailableMapsRsp = (function() {

            /**
             * Properties of a GetAvailableMapsRsp.
             * @memberof pb.common
             * @interface IGetAvailableMapsRsp
             * @property {pb.common.IBaseRsp|null} [rsp] GetAvailableMapsRsp rsp
             * @property {Array.<pb.common.IMapItem>|null} [maps] GetAvailableMapsRsp maps
             */

            /**
             * Constructs a new GetAvailableMapsRsp.
             * @memberof pb.common
             * @classdesc Represents a GetAvailableMapsRsp.
             * @implements IGetAvailableMapsRsp
             * @constructor
             * @param {pb.common.IGetAvailableMapsRsp=} [properties] Properties to set
             */
            function GetAvailableMapsRsp(properties) {
                this.maps = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GetAvailableMapsRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.common.GetAvailableMapsRsp
             * @instance
             */
            GetAvailableMapsRsp.prototype.rsp = null;

            /**
             * GetAvailableMapsRsp maps.
             * @member {Array.<pb.common.IMapItem>} maps
             * @memberof pb.common.GetAvailableMapsRsp
             * @instance
             */
            GetAvailableMapsRsp.prototype.maps = $util.emptyArray;

            /**
             * Creates a new GetAvailableMapsRsp instance using the specified properties.
             * @function create
             * @memberof pb.common.GetAvailableMapsRsp
             * @static
             * @param {pb.common.IGetAvailableMapsRsp=} [properties] Properties to set
             * @returns {pb.common.GetAvailableMapsRsp} GetAvailableMapsRsp instance
             */
            GetAvailableMapsRsp.create = function create(properties) {
                return new GetAvailableMapsRsp(properties);
            };

            /**
             * Encodes the specified GetAvailableMapsRsp message. Does not implicitly {@link pb.common.GetAvailableMapsRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GetAvailableMapsRsp
             * @static
             * @param {pb.common.IGetAvailableMapsRsp} message GetAvailableMapsRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetAvailableMapsRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.maps != null && message.maps.length)
                    for (var i = 0; i < message.maps.length; ++i)
                        $root.pb.common.MapItem.encode(message.maps[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GetAvailableMapsRsp message, length delimited. Does not implicitly {@link pb.common.GetAvailableMapsRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GetAvailableMapsRsp
             * @static
             * @param {pb.common.IGetAvailableMapsRsp} message GetAvailableMapsRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetAvailableMapsRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetAvailableMapsRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GetAvailableMapsRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GetAvailableMapsRsp} GetAvailableMapsRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetAvailableMapsRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GetAvailableMapsRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.maps && message.maps.length))
                            message.maps = [];
                        message.maps.push($root.pb.common.MapItem.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetAvailableMapsRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GetAvailableMapsRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GetAvailableMapsRsp} GetAvailableMapsRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetAvailableMapsRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetAvailableMapsRsp message.
             * @function verify
             * @memberof pb.common.GetAvailableMapsRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetAvailableMapsRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                if (message.maps != null && message.hasOwnProperty("maps")) {
                    if (!Array.isArray(message.maps))
                        return "maps: array expected";
                    for (var i = 0; i < message.maps.length; ++i) {
                        var error = $root.pb.common.MapItem.verify(message.maps[i]);
                        if (error)
                            return "maps." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GetAvailableMapsRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GetAvailableMapsRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GetAvailableMapsRsp} GetAvailableMapsRsp
             */
            GetAvailableMapsRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GetAvailableMapsRsp)
                    return object;
                var message = new $root.pb.common.GetAvailableMapsRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.common.GetAvailableMapsRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                if (object.maps) {
                    if (!Array.isArray(object.maps))
                        throw TypeError(".pb.common.GetAvailableMapsRsp.maps: array expected");
                    message.maps = [];
                    for (var i = 0; i < object.maps.length; ++i) {
                        if (typeof object.maps[i] !== "object")
                            throw TypeError(".pb.common.GetAvailableMapsRsp.maps: object expected");
                        message.maps[i] = $root.pb.common.MapItem.fromObject(object.maps[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GetAvailableMapsRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GetAvailableMapsRsp
             * @static
             * @param {pb.common.GetAvailableMapsRsp} message GetAvailableMapsRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetAvailableMapsRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.maps = [];
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                if (message.maps && message.maps.length) {
                    object.maps = [];
                    for (var j = 0; j < message.maps.length; ++j)
                        object.maps[j] = $root.pb.common.MapItem.toObject(message.maps[j], options);
                }
                return object;
            };

            /**
             * Converts this GetAvailableMapsRsp to JSON.
             * @function toJSON
             * @memberof pb.common.GetAvailableMapsRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetAvailableMapsRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GetAvailableMapsRsp;
        })();

        common.CashFlow = (function() {

            /**
             * Properties of a CashFlow.
             * @memberof pb.common
             * @interface ICashFlow
             * @property {Long|null} [monthlySalary] CashFlow monthlySalary
             * @property {Long|null} [monthlyIncomeExSalary] CashFlow monthlyIncomeExSalary
             * @property {Long|null} [monthlyExpenses] CashFlow monthlyExpenses
             * @property {Long|null} [monthlyCashFlow] CashFlow monthlyCashFlow
             * @property {Long|null} [totalCash] CashFlow totalCash
             */

            /**
             * Constructs a new CashFlow.
             * @memberof pb.common
             * @classdesc Represents a CashFlow.
             * @implements ICashFlow
             * @constructor
             * @param {pb.common.ICashFlow=} [properties] Properties to set
             */
            function CashFlow(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CashFlow monthlySalary.
             * @member {Long} monthlySalary
             * @memberof pb.common.CashFlow
             * @instance
             */
            CashFlow.prototype.monthlySalary = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * CashFlow monthlyIncomeExSalary.
             * @member {Long} monthlyIncomeExSalary
             * @memberof pb.common.CashFlow
             * @instance
             */
            CashFlow.prototype.monthlyIncomeExSalary = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * CashFlow monthlyExpenses.
             * @member {Long} monthlyExpenses
             * @memberof pb.common.CashFlow
             * @instance
             */
            CashFlow.prototype.monthlyExpenses = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * CashFlow monthlyCashFlow.
             * @member {Long} monthlyCashFlow
             * @memberof pb.common.CashFlow
             * @instance
             */
            CashFlow.prototype.monthlyCashFlow = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * CashFlow totalCash.
             * @member {Long} totalCash
             * @memberof pb.common.CashFlow
             * @instance
             */
            CashFlow.prototype.totalCash = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new CashFlow instance using the specified properties.
             * @function create
             * @memberof pb.common.CashFlow
             * @static
             * @param {pb.common.ICashFlow=} [properties] Properties to set
             * @returns {pb.common.CashFlow} CashFlow instance
             */
            CashFlow.create = function create(properties) {
                return new CashFlow(properties);
            };

            /**
             * Encodes the specified CashFlow message. Does not implicitly {@link pb.common.CashFlow.verify|verify} messages.
             * @function encode
             * @memberof pb.common.CashFlow
             * @static
             * @param {pb.common.ICashFlow} message CashFlow message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CashFlow.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.monthlySalary != null && message.hasOwnProperty("monthlySalary"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.monthlySalary);
                if (message.monthlyIncomeExSalary != null && message.hasOwnProperty("monthlyIncomeExSalary"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.monthlyIncomeExSalary);
                if (message.monthlyExpenses != null && message.hasOwnProperty("monthlyExpenses"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.monthlyExpenses);
                if (message.monthlyCashFlow != null && message.hasOwnProperty("monthlyCashFlow"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.monthlyCashFlow);
                if (message.totalCash != null && message.hasOwnProperty("totalCash"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.totalCash);
                return writer;
            };

            /**
             * Encodes the specified CashFlow message, length delimited. Does not implicitly {@link pb.common.CashFlow.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.CashFlow
             * @static
             * @param {pb.common.ICashFlow} message CashFlow message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CashFlow.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CashFlow message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.CashFlow
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.CashFlow} CashFlow
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CashFlow.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.CashFlow();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.monthlySalary = reader.int64();
                        break;
                    case 2:
                        message.monthlyIncomeExSalary = reader.int64();
                        break;
                    case 3:
                        message.monthlyExpenses = reader.int64();
                        break;
                    case 4:
                        message.monthlyCashFlow = reader.int64();
                        break;
                    case 5:
                        message.totalCash = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CashFlow message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.CashFlow
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.CashFlow} CashFlow
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CashFlow.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CashFlow message.
             * @function verify
             * @memberof pb.common.CashFlow
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CashFlow.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.monthlySalary != null && message.hasOwnProperty("monthlySalary"))
                    if (!$util.isInteger(message.monthlySalary) && !(message.monthlySalary && $util.isInteger(message.monthlySalary.low) && $util.isInteger(message.monthlySalary.high)))
                        return "monthlySalary: integer|Long expected";
                if (message.monthlyIncomeExSalary != null && message.hasOwnProperty("monthlyIncomeExSalary"))
                    if (!$util.isInteger(message.monthlyIncomeExSalary) && !(message.monthlyIncomeExSalary && $util.isInteger(message.monthlyIncomeExSalary.low) && $util.isInteger(message.monthlyIncomeExSalary.high)))
                        return "monthlyIncomeExSalary: integer|Long expected";
                if (message.monthlyExpenses != null && message.hasOwnProperty("monthlyExpenses"))
                    if (!$util.isInteger(message.monthlyExpenses) && !(message.monthlyExpenses && $util.isInteger(message.monthlyExpenses.low) && $util.isInteger(message.monthlyExpenses.high)))
                        return "monthlyExpenses: integer|Long expected";
                if (message.monthlyCashFlow != null && message.hasOwnProperty("monthlyCashFlow"))
                    if (!$util.isInteger(message.monthlyCashFlow) && !(message.monthlyCashFlow && $util.isInteger(message.monthlyCashFlow.low) && $util.isInteger(message.monthlyCashFlow.high)))
                        return "monthlyCashFlow: integer|Long expected";
                if (message.totalCash != null && message.hasOwnProperty("totalCash"))
                    if (!$util.isInteger(message.totalCash) && !(message.totalCash && $util.isInteger(message.totalCash.low) && $util.isInteger(message.totalCash.high)))
                        return "totalCash: integer|Long expected";
                return null;
            };

            /**
             * Creates a CashFlow message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.CashFlow
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.CashFlow} CashFlow
             */
            CashFlow.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.CashFlow)
                    return object;
                var message = new $root.pb.common.CashFlow();
                if (object.monthlySalary != null)
                    if ($util.Long)
                        (message.monthlySalary = $util.Long.fromValue(object.monthlySalary)).unsigned = false;
                    else if (typeof object.monthlySalary === "string")
                        message.monthlySalary = parseInt(object.monthlySalary, 10);
                    else if (typeof object.monthlySalary === "number")
                        message.monthlySalary = object.monthlySalary;
                    else if (typeof object.monthlySalary === "object")
                        message.monthlySalary = new $util.LongBits(object.monthlySalary.low >>> 0, object.monthlySalary.high >>> 0).toNumber();
                if (object.monthlyIncomeExSalary != null)
                    if ($util.Long)
                        (message.monthlyIncomeExSalary = $util.Long.fromValue(object.monthlyIncomeExSalary)).unsigned = false;
                    else if (typeof object.monthlyIncomeExSalary === "string")
                        message.monthlyIncomeExSalary = parseInt(object.monthlyIncomeExSalary, 10);
                    else if (typeof object.monthlyIncomeExSalary === "number")
                        message.monthlyIncomeExSalary = object.monthlyIncomeExSalary;
                    else if (typeof object.monthlyIncomeExSalary === "object")
                        message.monthlyIncomeExSalary = new $util.LongBits(object.monthlyIncomeExSalary.low >>> 0, object.monthlyIncomeExSalary.high >>> 0).toNumber();
                if (object.monthlyExpenses != null)
                    if ($util.Long)
                        (message.monthlyExpenses = $util.Long.fromValue(object.monthlyExpenses)).unsigned = false;
                    else if (typeof object.monthlyExpenses === "string")
                        message.monthlyExpenses = parseInt(object.monthlyExpenses, 10);
                    else if (typeof object.monthlyExpenses === "number")
                        message.monthlyExpenses = object.monthlyExpenses;
                    else if (typeof object.monthlyExpenses === "object")
                        message.monthlyExpenses = new $util.LongBits(object.monthlyExpenses.low >>> 0, object.monthlyExpenses.high >>> 0).toNumber();
                if (object.monthlyCashFlow != null)
                    if ($util.Long)
                        (message.monthlyCashFlow = $util.Long.fromValue(object.monthlyCashFlow)).unsigned = false;
                    else if (typeof object.monthlyCashFlow === "string")
                        message.monthlyCashFlow = parseInt(object.monthlyCashFlow, 10);
                    else if (typeof object.monthlyCashFlow === "number")
                        message.monthlyCashFlow = object.monthlyCashFlow;
                    else if (typeof object.monthlyCashFlow === "object")
                        message.monthlyCashFlow = new $util.LongBits(object.monthlyCashFlow.low >>> 0, object.monthlyCashFlow.high >>> 0).toNumber();
                if (object.totalCash != null)
                    if ($util.Long)
                        (message.totalCash = $util.Long.fromValue(object.totalCash)).unsigned = false;
                    else if (typeof object.totalCash === "string")
                        message.totalCash = parseInt(object.totalCash, 10);
                    else if (typeof object.totalCash === "number")
                        message.totalCash = object.totalCash;
                    else if (typeof object.totalCash === "object")
                        message.totalCash = new $util.LongBits(object.totalCash.low >>> 0, object.totalCash.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a CashFlow message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.CashFlow
             * @static
             * @param {pb.common.CashFlow} message CashFlow
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CashFlow.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.monthlySalary = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.monthlySalary = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.monthlyIncomeExSalary = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.monthlyIncomeExSalary = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.monthlyExpenses = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.monthlyExpenses = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.monthlyCashFlow = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.monthlyCashFlow = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.totalCash = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.totalCash = options.longs === String ? "0" : 0;
                }
                if (message.monthlySalary != null && message.hasOwnProperty("monthlySalary"))
                    if (typeof message.monthlySalary === "number")
                        object.monthlySalary = options.longs === String ? String(message.monthlySalary) : message.monthlySalary;
                    else
                        object.monthlySalary = options.longs === String ? $util.Long.prototype.toString.call(message.monthlySalary) : options.longs === Number ? new $util.LongBits(message.monthlySalary.low >>> 0, message.monthlySalary.high >>> 0).toNumber() : message.monthlySalary;
                if (message.monthlyIncomeExSalary != null && message.hasOwnProperty("monthlyIncomeExSalary"))
                    if (typeof message.monthlyIncomeExSalary === "number")
                        object.monthlyIncomeExSalary = options.longs === String ? String(message.monthlyIncomeExSalary) : message.monthlyIncomeExSalary;
                    else
                        object.monthlyIncomeExSalary = options.longs === String ? $util.Long.prototype.toString.call(message.monthlyIncomeExSalary) : options.longs === Number ? new $util.LongBits(message.monthlyIncomeExSalary.low >>> 0, message.monthlyIncomeExSalary.high >>> 0).toNumber() : message.monthlyIncomeExSalary;
                if (message.monthlyExpenses != null && message.hasOwnProperty("monthlyExpenses"))
                    if (typeof message.monthlyExpenses === "number")
                        object.monthlyExpenses = options.longs === String ? String(message.monthlyExpenses) : message.monthlyExpenses;
                    else
                        object.monthlyExpenses = options.longs === String ? $util.Long.prototype.toString.call(message.monthlyExpenses) : options.longs === Number ? new $util.LongBits(message.monthlyExpenses.low >>> 0, message.monthlyExpenses.high >>> 0).toNumber() : message.monthlyExpenses;
                if (message.monthlyCashFlow != null && message.hasOwnProperty("monthlyCashFlow"))
                    if (typeof message.monthlyCashFlow === "number")
                        object.monthlyCashFlow = options.longs === String ? String(message.monthlyCashFlow) : message.monthlyCashFlow;
                    else
                        object.monthlyCashFlow = options.longs === String ? $util.Long.prototype.toString.call(message.monthlyCashFlow) : options.longs === Number ? new $util.LongBits(message.monthlyCashFlow.low >>> 0, message.monthlyCashFlow.high >>> 0).toNumber() : message.monthlyCashFlow;
                if (message.totalCash != null && message.hasOwnProperty("totalCash"))
                    if (typeof message.totalCash === "number")
                        object.totalCash = options.longs === String ? String(message.totalCash) : message.totalCash;
                    else
                        object.totalCash = options.longs === String ? $util.Long.prototype.toString.call(message.totalCash) : options.longs === Number ? new $util.LongBits(message.totalCash.low >>> 0, message.totalCash.high >>> 0).toNumber() : message.totalCash;
                return object;
            };

            /**
             * Converts this CashFlow to JSON.
             * @function toJSON
             * @memberof pb.common.CashFlow
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CashFlow.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CashFlow;
        })();

        common.Asset = (function() {

            /**
             * Properties of an Asset.
             * @memberof pb.common
             * @interface IAsset
             * @property {Long|null} [assetId] Asset assetId
             * @property {string|null} [name] Asset name
             * @property {number|null} [type] Asset type
             * @property {Long|null} [totalPrice] Asset totalPrice
             * @property {Long|null} [Liabilities] Asset Liabilities
             * @property {Long|null} [monthlyCashFlow] Asset monthlyCashFlow
             * @property {number|null} [quantity] Asset quantity
             * @property {number|null} [shard] Asset shard
             */

            /**
             * Constructs a new Asset.
             * @memberof pb.common
             * @classdesc Represents an Asset.
             * @implements IAsset
             * @constructor
             * @param {pb.common.IAsset=} [properties] Properties to set
             */
            function Asset(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Asset assetId.
             * @member {Long} assetId
             * @memberof pb.common.Asset
             * @instance
             */
            Asset.prototype.assetId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Asset name.
             * @member {string} name
             * @memberof pb.common.Asset
             * @instance
             */
            Asset.prototype.name = "";

            /**
             * Asset type.
             * @member {number} type
             * @memberof pb.common.Asset
             * @instance
             */
            Asset.prototype.type = 0;

            /**
             * Asset totalPrice.
             * @member {Long} totalPrice
             * @memberof pb.common.Asset
             * @instance
             */
            Asset.prototype.totalPrice = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Asset Liabilities.
             * @member {Long} Liabilities
             * @memberof pb.common.Asset
             * @instance
             */
            Asset.prototype.Liabilities = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Asset monthlyCashFlow.
             * @member {Long} monthlyCashFlow
             * @memberof pb.common.Asset
             * @instance
             */
            Asset.prototype.monthlyCashFlow = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Asset quantity.
             * @member {number} quantity
             * @memberof pb.common.Asset
             * @instance
             */
            Asset.prototype.quantity = 0;

            /**
             * Asset shard.
             * @member {number} shard
             * @memberof pb.common.Asset
             * @instance
             */
            Asset.prototype.shard = 0;

            /**
             * Creates a new Asset instance using the specified properties.
             * @function create
             * @memberof pb.common.Asset
             * @static
             * @param {pb.common.IAsset=} [properties] Properties to set
             * @returns {pb.common.Asset} Asset instance
             */
            Asset.create = function create(properties) {
                return new Asset(properties);
            };

            /**
             * Encodes the specified Asset message. Does not implicitly {@link pb.common.Asset.verify|verify} messages.
             * @function encode
             * @memberof pb.common.Asset
             * @static
             * @param {pb.common.IAsset} message Asset message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Asset.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.assetId != null && message.hasOwnProperty("assetId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.assetId);
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                if (message.type != null && message.hasOwnProperty("type"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.type);
                if (message.totalPrice != null && message.hasOwnProperty("totalPrice"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.totalPrice);
                if (message.Liabilities != null && message.hasOwnProperty("Liabilities"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.Liabilities);
                if (message.monthlyCashFlow != null && message.hasOwnProperty("monthlyCashFlow"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int64(message.monthlyCashFlow);
                if (message.quantity != null && message.hasOwnProperty("quantity"))
                    writer.uint32(/* id 8, wireType 0 =*/64).int32(message.quantity);
                if (message.shard != null && message.hasOwnProperty("shard"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.shard);
                return writer;
            };

            /**
             * Encodes the specified Asset message, length delimited. Does not implicitly {@link pb.common.Asset.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.Asset
             * @static
             * @param {pb.common.IAsset} message Asset message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Asset.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Asset message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.Asset
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.Asset} Asset
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Asset.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.Asset();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.assetId = reader.int64();
                        break;
                    case 2:
                        message.name = reader.string();
                        break;
                    case 3:
                        message.type = reader.int32();
                        break;
                    case 4:
                        message.totalPrice = reader.int64();
                        break;
                    case 5:
                        message.Liabilities = reader.int64();
                        break;
                    case 6:
                        message.monthlyCashFlow = reader.int64();
                        break;
                    case 8:
                        message.quantity = reader.int32();
                        break;
                    case 9:
                        message.shard = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Asset message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.Asset
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.Asset} Asset
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Asset.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Asset message.
             * @function verify
             * @memberof pb.common.Asset
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Asset.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.assetId != null && message.hasOwnProperty("assetId"))
                    if (!$util.isInteger(message.assetId) && !(message.assetId && $util.isInteger(message.assetId.low) && $util.isInteger(message.assetId.high)))
                        return "assetId: integer|Long expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isInteger(message.type))
                        return "type: integer expected";
                if (message.totalPrice != null && message.hasOwnProperty("totalPrice"))
                    if (!$util.isInteger(message.totalPrice) && !(message.totalPrice && $util.isInteger(message.totalPrice.low) && $util.isInteger(message.totalPrice.high)))
                        return "totalPrice: integer|Long expected";
                if (message.Liabilities != null && message.hasOwnProperty("Liabilities"))
                    if (!$util.isInteger(message.Liabilities) && !(message.Liabilities && $util.isInteger(message.Liabilities.low) && $util.isInteger(message.Liabilities.high)))
                        return "Liabilities: integer|Long expected";
                if (message.monthlyCashFlow != null && message.hasOwnProperty("monthlyCashFlow"))
                    if (!$util.isInteger(message.monthlyCashFlow) && !(message.monthlyCashFlow && $util.isInteger(message.monthlyCashFlow.low) && $util.isInteger(message.monthlyCashFlow.high)))
                        return "monthlyCashFlow: integer|Long expected";
                if (message.quantity != null && message.hasOwnProperty("quantity"))
                    if (!$util.isInteger(message.quantity))
                        return "quantity: integer expected";
                if (message.shard != null && message.hasOwnProperty("shard"))
                    if (!$util.isInteger(message.shard))
                        return "shard: integer expected";
                return null;
            };

            /**
             * Creates an Asset message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.Asset
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.Asset} Asset
             */
            Asset.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.Asset)
                    return object;
                var message = new $root.pb.common.Asset();
                if (object.assetId != null)
                    if ($util.Long)
                        (message.assetId = $util.Long.fromValue(object.assetId)).unsigned = false;
                    else if (typeof object.assetId === "string")
                        message.assetId = parseInt(object.assetId, 10);
                    else if (typeof object.assetId === "number")
                        message.assetId = object.assetId;
                    else if (typeof object.assetId === "object")
                        message.assetId = new $util.LongBits(object.assetId.low >>> 0, object.assetId.high >>> 0).toNumber();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.type != null)
                    message.type = object.type | 0;
                if (object.totalPrice != null)
                    if ($util.Long)
                        (message.totalPrice = $util.Long.fromValue(object.totalPrice)).unsigned = false;
                    else if (typeof object.totalPrice === "string")
                        message.totalPrice = parseInt(object.totalPrice, 10);
                    else if (typeof object.totalPrice === "number")
                        message.totalPrice = object.totalPrice;
                    else if (typeof object.totalPrice === "object")
                        message.totalPrice = new $util.LongBits(object.totalPrice.low >>> 0, object.totalPrice.high >>> 0).toNumber();
                if (object.Liabilities != null)
                    if ($util.Long)
                        (message.Liabilities = $util.Long.fromValue(object.Liabilities)).unsigned = false;
                    else if (typeof object.Liabilities === "string")
                        message.Liabilities = parseInt(object.Liabilities, 10);
                    else if (typeof object.Liabilities === "number")
                        message.Liabilities = object.Liabilities;
                    else if (typeof object.Liabilities === "object")
                        message.Liabilities = new $util.LongBits(object.Liabilities.low >>> 0, object.Liabilities.high >>> 0).toNumber();
                if (object.monthlyCashFlow != null)
                    if ($util.Long)
                        (message.monthlyCashFlow = $util.Long.fromValue(object.monthlyCashFlow)).unsigned = false;
                    else if (typeof object.monthlyCashFlow === "string")
                        message.monthlyCashFlow = parseInt(object.monthlyCashFlow, 10);
                    else if (typeof object.monthlyCashFlow === "number")
                        message.monthlyCashFlow = object.monthlyCashFlow;
                    else if (typeof object.monthlyCashFlow === "object")
                        message.monthlyCashFlow = new $util.LongBits(object.monthlyCashFlow.low >>> 0, object.monthlyCashFlow.high >>> 0).toNumber();
                if (object.quantity != null)
                    message.quantity = object.quantity | 0;
                if (object.shard != null)
                    message.shard = object.shard | 0;
                return message;
            };

            /**
             * Creates a plain object from an Asset message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.Asset
             * @static
             * @param {pb.common.Asset} message Asset
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Asset.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.assetId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.assetId = options.longs === String ? "0" : 0;
                    object.name = "";
                    object.type = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.totalPrice = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.totalPrice = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.Liabilities = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.Liabilities = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.monthlyCashFlow = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.monthlyCashFlow = options.longs === String ? "0" : 0;
                    object.quantity = 0;
                    object.shard = 0;
                }
                if (message.assetId != null && message.hasOwnProperty("assetId"))
                    if (typeof message.assetId === "number")
                        object.assetId = options.longs === String ? String(message.assetId) : message.assetId;
                    else
                        object.assetId = options.longs === String ? $util.Long.prototype.toString.call(message.assetId) : options.longs === Number ? new $util.LongBits(message.assetId.low >>> 0, message.assetId.high >>> 0).toNumber() : message.assetId;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.totalPrice != null && message.hasOwnProperty("totalPrice"))
                    if (typeof message.totalPrice === "number")
                        object.totalPrice = options.longs === String ? String(message.totalPrice) : message.totalPrice;
                    else
                        object.totalPrice = options.longs === String ? $util.Long.prototype.toString.call(message.totalPrice) : options.longs === Number ? new $util.LongBits(message.totalPrice.low >>> 0, message.totalPrice.high >>> 0).toNumber() : message.totalPrice;
                if (message.Liabilities != null && message.hasOwnProperty("Liabilities"))
                    if (typeof message.Liabilities === "number")
                        object.Liabilities = options.longs === String ? String(message.Liabilities) : message.Liabilities;
                    else
                        object.Liabilities = options.longs === String ? $util.Long.prototype.toString.call(message.Liabilities) : options.longs === Number ? new $util.LongBits(message.Liabilities.low >>> 0, message.Liabilities.high >>> 0).toNumber() : message.Liabilities;
                if (message.monthlyCashFlow != null && message.hasOwnProperty("monthlyCashFlow"))
                    if (typeof message.monthlyCashFlow === "number")
                        object.monthlyCashFlow = options.longs === String ? String(message.monthlyCashFlow) : message.monthlyCashFlow;
                    else
                        object.monthlyCashFlow = options.longs === String ? $util.Long.prototype.toString.call(message.monthlyCashFlow) : options.longs === Number ? new $util.LongBits(message.monthlyCashFlow.low >>> 0, message.monthlyCashFlow.high >>> 0).toNumber() : message.monthlyCashFlow;
                if (message.quantity != null && message.hasOwnProperty("quantity"))
                    object.quantity = message.quantity;
                if (message.shard != null && message.hasOwnProperty("shard"))
                    object.shard = message.shard;
                return object;
            };

            /**
             * Converts this Asset to JSON.
             * @function toJSON
             * @memberof pb.common.Asset
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Asset.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Asset;
        })();

        common.PlayerRecord = (function() {

            /**
             * Properties of a PlayerRecord.
             * @memberof pb.common
             * @interface IPlayerRecord
             * @property {Long|null} [userId] PlayerRecord userId
             * @property {pb.common.ICashFlow|null} [cashFlow] PlayerRecord cashFlow
             * @property {number|null} [BehaviorType] PlayerRecord BehaviorType
             * @property {number|null} [degree] PlayerRecord degree
             * @property {boolean|null} [isOut] PlayerRecord isOut
             * @property {Long|null} [videotapeId] PlayerRecord videotapeId
             * @property {number|null} [currentLocation] PlayerRecord currentLocation
             * @property {number|null} [cycle] PlayerRecord cycle
             * @property {number|null} [age] PlayerRecord age
             * @property {number|null} [initAge] PlayerRecord initAge
             */

            /**
             * Constructs a new PlayerRecord.
             * @memberof pb.common
             * @classdesc Represents a PlayerRecord.
             * @implements IPlayerRecord
             * @constructor
             * @param {pb.common.IPlayerRecord=} [properties] Properties to set
             */
            function PlayerRecord(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PlayerRecord userId.
             * @member {Long} userId
             * @memberof pb.common.PlayerRecord
             * @instance
             */
            PlayerRecord.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * PlayerRecord cashFlow.
             * @member {pb.common.ICashFlow|null|undefined} cashFlow
             * @memberof pb.common.PlayerRecord
             * @instance
             */
            PlayerRecord.prototype.cashFlow = null;

            /**
             * PlayerRecord BehaviorType.
             * @member {number} BehaviorType
             * @memberof pb.common.PlayerRecord
             * @instance
             */
            PlayerRecord.prototype.BehaviorType = 0;

            /**
             * PlayerRecord degree.
             * @member {number} degree
             * @memberof pb.common.PlayerRecord
             * @instance
             */
            PlayerRecord.prototype.degree = 0;

            /**
             * PlayerRecord isOut.
             * @member {boolean} isOut
             * @memberof pb.common.PlayerRecord
             * @instance
             */
            PlayerRecord.prototype.isOut = false;

            /**
             * PlayerRecord videotapeId.
             * @member {Long} videotapeId
             * @memberof pb.common.PlayerRecord
             * @instance
             */
            PlayerRecord.prototype.videotapeId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * PlayerRecord currentLocation.
             * @member {number} currentLocation
             * @memberof pb.common.PlayerRecord
             * @instance
             */
            PlayerRecord.prototype.currentLocation = 0;

            /**
             * PlayerRecord cycle.
             * @member {number} cycle
             * @memberof pb.common.PlayerRecord
             * @instance
             */
            PlayerRecord.prototype.cycle = 0;

            /**
             * PlayerRecord age.
             * @member {number} age
             * @memberof pb.common.PlayerRecord
             * @instance
             */
            PlayerRecord.prototype.age = 0;

            /**
             * PlayerRecord initAge.
             * @member {number} initAge
             * @memberof pb.common.PlayerRecord
             * @instance
             */
            PlayerRecord.prototype.initAge = 0;

            /**
             * Creates a new PlayerRecord instance using the specified properties.
             * @function create
             * @memberof pb.common.PlayerRecord
             * @static
             * @param {pb.common.IPlayerRecord=} [properties] Properties to set
             * @returns {pb.common.PlayerRecord} PlayerRecord instance
             */
            PlayerRecord.create = function create(properties) {
                return new PlayerRecord(properties);
            };

            /**
             * Encodes the specified PlayerRecord message. Does not implicitly {@link pb.common.PlayerRecord.verify|verify} messages.
             * @function encode
             * @memberof pb.common.PlayerRecord
             * @static
             * @param {pb.common.IPlayerRecord} message PlayerRecord message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerRecord.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userId);
                if (message.cashFlow != null && message.hasOwnProperty("cashFlow"))
                    $root.pb.common.CashFlow.encode(message.cashFlow, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.BehaviorType != null && message.hasOwnProperty("BehaviorType"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.BehaviorType);
                if (message.degree != null && message.hasOwnProperty("degree"))
                    writer.uint32(/* id 5, wireType 5 =*/45).float(message.degree);
                if (message.isOut != null && message.hasOwnProperty("isOut"))
                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message.isOut);
                if (message.videotapeId != null && message.hasOwnProperty("videotapeId"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int64(message.videotapeId);
                if (message.currentLocation != null && message.hasOwnProperty("currentLocation"))
                    writer.uint32(/* id 8, wireType 0 =*/64).int32(message.currentLocation);
                if (message.cycle != null && message.hasOwnProperty("cycle"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.cycle);
                if (message.age != null && message.hasOwnProperty("age"))
                    writer.uint32(/* id 10, wireType 0 =*/80).int32(message.age);
                if (message.initAge != null && message.hasOwnProperty("initAge"))
                    writer.uint32(/* id 11, wireType 0 =*/88).int32(message.initAge);
                return writer;
            };

            /**
             * Encodes the specified PlayerRecord message, length delimited. Does not implicitly {@link pb.common.PlayerRecord.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.PlayerRecord
             * @static
             * @param {pb.common.IPlayerRecord} message PlayerRecord message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerRecord.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PlayerRecord message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.PlayerRecord
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.PlayerRecord} PlayerRecord
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerRecord.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.PlayerRecord();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.userId = reader.int64();
                        break;
                    case 2:
                        message.cashFlow = $root.pb.common.CashFlow.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.BehaviorType = reader.int32();
                        break;
                    case 5:
                        message.degree = reader.float();
                        break;
                    case 6:
                        message.isOut = reader.bool();
                        break;
                    case 7:
                        message.videotapeId = reader.int64();
                        break;
                    case 8:
                        message.currentLocation = reader.int32();
                        break;
                    case 9:
                        message.cycle = reader.int32();
                        break;
                    case 10:
                        message.age = reader.int32();
                        break;
                    case 11:
                        message.initAge = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PlayerRecord message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.PlayerRecord
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.PlayerRecord} PlayerRecord
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerRecord.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PlayerRecord message.
             * @function verify
             * @memberof pb.common.PlayerRecord
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PlayerRecord.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                if (message.cashFlow != null && message.hasOwnProperty("cashFlow")) {
                    var error = $root.pb.common.CashFlow.verify(message.cashFlow);
                    if (error)
                        return "cashFlow." + error;
                }
                if (message.BehaviorType != null && message.hasOwnProperty("BehaviorType"))
                    if (!$util.isInteger(message.BehaviorType))
                        return "BehaviorType: integer expected";
                if (message.degree != null && message.hasOwnProperty("degree"))
                    if (typeof message.degree !== "number")
                        return "degree: number expected";
                if (message.isOut != null && message.hasOwnProperty("isOut"))
                    if (typeof message.isOut !== "boolean")
                        return "isOut: boolean expected";
                if (message.videotapeId != null && message.hasOwnProperty("videotapeId"))
                    if (!$util.isInteger(message.videotapeId) && !(message.videotapeId && $util.isInteger(message.videotapeId.low) && $util.isInteger(message.videotapeId.high)))
                        return "videotapeId: integer|Long expected";
                if (message.currentLocation != null && message.hasOwnProperty("currentLocation"))
                    if (!$util.isInteger(message.currentLocation))
                        return "currentLocation: integer expected";
                if (message.cycle != null && message.hasOwnProperty("cycle"))
                    if (!$util.isInteger(message.cycle))
                        return "cycle: integer expected";
                if (message.age != null && message.hasOwnProperty("age"))
                    if (!$util.isInteger(message.age))
                        return "age: integer expected";
                if (message.initAge != null && message.hasOwnProperty("initAge"))
                    if (!$util.isInteger(message.initAge))
                        return "initAge: integer expected";
                return null;
            };

            /**
             * Creates a PlayerRecord message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.PlayerRecord
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.PlayerRecord} PlayerRecord
             */
            PlayerRecord.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.PlayerRecord)
                    return object;
                var message = new $root.pb.common.PlayerRecord();
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                if (object.cashFlow != null) {
                    if (typeof object.cashFlow !== "object")
                        throw TypeError(".pb.common.PlayerRecord.cashFlow: object expected");
                    message.cashFlow = $root.pb.common.CashFlow.fromObject(object.cashFlow);
                }
                if (object.BehaviorType != null)
                    message.BehaviorType = object.BehaviorType | 0;
                if (object.degree != null)
                    message.degree = Number(object.degree);
                if (object.isOut != null)
                    message.isOut = Boolean(object.isOut);
                if (object.videotapeId != null)
                    if ($util.Long)
                        (message.videotapeId = $util.Long.fromValue(object.videotapeId)).unsigned = false;
                    else if (typeof object.videotapeId === "string")
                        message.videotapeId = parseInt(object.videotapeId, 10);
                    else if (typeof object.videotapeId === "number")
                        message.videotapeId = object.videotapeId;
                    else if (typeof object.videotapeId === "object")
                        message.videotapeId = new $util.LongBits(object.videotapeId.low >>> 0, object.videotapeId.high >>> 0).toNumber();
                if (object.currentLocation != null)
                    message.currentLocation = object.currentLocation | 0;
                if (object.cycle != null)
                    message.cycle = object.cycle | 0;
                if (object.age != null)
                    message.age = object.age | 0;
                if (object.initAge != null)
                    message.initAge = object.initAge | 0;
                return message;
            };

            /**
             * Creates a plain object from a PlayerRecord message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.PlayerRecord
             * @static
             * @param {pb.common.PlayerRecord} message PlayerRecord
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PlayerRecord.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                    object.cashFlow = null;
                    object.BehaviorType = 0;
                    object.degree = 0;
                    object.isOut = false;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.videotapeId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.videotapeId = options.longs === String ? "0" : 0;
                    object.currentLocation = 0;
                    object.cycle = 0;
                    object.age = 0;
                    object.initAge = 0;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                if (message.cashFlow != null && message.hasOwnProperty("cashFlow"))
                    object.cashFlow = $root.pb.common.CashFlow.toObject(message.cashFlow, options);
                if (message.BehaviorType != null && message.hasOwnProperty("BehaviorType"))
                    object.BehaviorType = message.BehaviorType;
                if (message.degree != null && message.hasOwnProperty("degree"))
                    object.degree = options.json && !isFinite(message.degree) ? String(message.degree) : message.degree;
                if (message.isOut != null && message.hasOwnProperty("isOut"))
                    object.isOut = message.isOut;
                if (message.videotapeId != null && message.hasOwnProperty("videotapeId"))
                    if (typeof message.videotapeId === "number")
                        object.videotapeId = options.longs === String ? String(message.videotapeId) : message.videotapeId;
                    else
                        object.videotapeId = options.longs === String ? $util.Long.prototype.toString.call(message.videotapeId) : options.longs === Number ? new $util.LongBits(message.videotapeId.low >>> 0, message.videotapeId.high >>> 0).toNumber() : message.videotapeId;
                if (message.currentLocation != null && message.hasOwnProperty("currentLocation"))
                    object.currentLocation = message.currentLocation;
                if (message.cycle != null && message.hasOwnProperty("cycle"))
                    object.cycle = message.cycle;
                if (message.age != null && message.hasOwnProperty("age"))
                    object.age = message.age;
                if (message.initAge != null && message.hasOwnProperty("initAge"))
                    object.initAge = message.initAge;
                return object;
            };

            /**
             * Converts this PlayerRecord to JSON.
             * @function toJSON
             * @memberof pb.common.PlayerRecord
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PlayerRecord.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PlayerRecord;
        })();

        common.GameState = (function() {

            /**
             * Properties of a GameState.
             * @memberof pb.common
             * @interface IGameState
             * @property {Long|null} [userId] GameState userId
             * @property {number|null} [roundSeq] GameState roundSeq
             * @property {number|null} [currentLocation] GameState currentLocation
             * @property {number|null} [diceNum] GameState diceNum
             * @property {pb.common.IRoundData|null} [roundData] GameState roundData
             * @property {pb.common.IScenario|null} [scenario] GameState scenario
             * @property {Array.<pb.common.IPlayerRecord>|null} [playerRecords] GameState playerRecords
             * @property {pb.common.Itimer|null} [timer] GameState timer
             * @property {pb.common.Itimer|null} [globalTimer] GameState globalTimer
             */

            /**
             * Constructs a new GameState.
             * @memberof pb.common
             * @classdesc Represents a GameState.
             * @implements IGameState
             * @constructor
             * @param {pb.common.IGameState=} [properties] Properties to set
             */
            function GameState(properties) {
                this.playerRecords = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GameState userId.
             * @member {Long} userId
             * @memberof pb.common.GameState
             * @instance
             */
            GameState.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * GameState roundSeq.
             * @member {number} roundSeq
             * @memberof pb.common.GameState
             * @instance
             */
            GameState.prototype.roundSeq = 0;

            /**
             * GameState currentLocation.
             * @member {number} currentLocation
             * @memberof pb.common.GameState
             * @instance
             */
            GameState.prototype.currentLocation = 0;

            /**
             * GameState diceNum.
             * @member {number} diceNum
             * @memberof pb.common.GameState
             * @instance
             */
            GameState.prototype.diceNum = 0;

            /**
             * GameState roundData.
             * @member {pb.common.IRoundData|null|undefined} roundData
             * @memberof pb.common.GameState
             * @instance
             */
            GameState.prototype.roundData = null;

            /**
             * GameState scenario.
             * @member {pb.common.IScenario|null|undefined} scenario
             * @memberof pb.common.GameState
             * @instance
             */
            GameState.prototype.scenario = null;

            /**
             * GameState playerRecords.
             * @member {Array.<pb.common.IPlayerRecord>} playerRecords
             * @memberof pb.common.GameState
             * @instance
             */
            GameState.prototype.playerRecords = $util.emptyArray;

            /**
             * GameState timer.
             * @member {pb.common.Itimer|null|undefined} timer
             * @memberof pb.common.GameState
             * @instance
             */
            GameState.prototype.timer = null;

            /**
             * GameState globalTimer.
             * @member {pb.common.Itimer|null|undefined} globalTimer
             * @memberof pb.common.GameState
             * @instance
             */
            GameState.prototype.globalTimer = null;

            /**
             * Creates a new GameState instance using the specified properties.
             * @function create
             * @memberof pb.common.GameState
             * @static
             * @param {pb.common.IGameState=} [properties] Properties to set
             * @returns {pb.common.GameState} GameState instance
             */
            GameState.create = function create(properties) {
                return new GameState(properties);
            };

            /**
             * Encodes the specified GameState message. Does not implicitly {@link pb.common.GameState.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GameState
             * @static
             * @param {pb.common.IGameState} message GameState message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameState.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.userId);
                if (message.roundSeq != null && message.hasOwnProperty("roundSeq"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.roundSeq);
                if (message.currentLocation != null && message.hasOwnProperty("currentLocation"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.currentLocation);
                if (message.diceNum != null && message.hasOwnProperty("diceNum"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.diceNum);
                if (message.roundData != null && message.hasOwnProperty("roundData"))
                    $root.pb.common.RoundData.encode(message.roundData, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.scenario != null && message.hasOwnProperty("scenario"))
                    $root.pb.common.Scenario.encode(message.scenario, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.playerRecords != null && message.playerRecords.length)
                    for (var i = 0; i < message.playerRecords.length; ++i)
                        $root.pb.common.PlayerRecord.encode(message.playerRecords[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.timer != null && message.hasOwnProperty("timer"))
                    $root.pb.common.timer.encode(message.timer, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.globalTimer != null && message.hasOwnProperty("globalTimer"))
                    $root.pb.common.timer.encode(message.globalTimer, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GameState message, length delimited. Does not implicitly {@link pb.common.GameState.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GameState
             * @static
             * @param {pb.common.IGameState} message GameState message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameState.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GameState message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GameState
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GameState} GameState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameState.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GameState();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        message.userId = reader.int64();
                        break;
                    case 3:
                        message.roundSeq = reader.int32();
                        break;
                    case 4:
                        message.currentLocation = reader.int32();
                        break;
                    case 5:
                        message.diceNum = reader.int32();
                        break;
                    case 6:
                        message.roundData = $root.pb.common.RoundData.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message.scenario = $root.pb.common.Scenario.decode(reader, reader.uint32());
                        break;
                    case 8:
                        if (!(message.playerRecords && message.playerRecords.length))
                            message.playerRecords = [];
                        message.playerRecords.push($root.pb.common.PlayerRecord.decode(reader, reader.uint32()));
                        break;
                    case 9:
                        message.timer = $root.pb.common.timer.decode(reader, reader.uint32());
                        break;
                    case 10:
                        message.globalTimer = $root.pb.common.timer.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GameState message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GameState
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GameState} GameState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameState.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GameState message.
             * @function verify
             * @memberof pb.common.GameState
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GameState.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                if (message.roundSeq != null && message.hasOwnProperty("roundSeq"))
                    if (!$util.isInteger(message.roundSeq))
                        return "roundSeq: integer expected";
                if (message.currentLocation != null && message.hasOwnProperty("currentLocation"))
                    if (!$util.isInteger(message.currentLocation))
                        return "currentLocation: integer expected";
                if (message.diceNum != null && message.hasOwnProperty("diceNum"))
                    if (!$util.isInteger(message.diceNum))
                        return "diceNum: integer expected";
                if (message.roundData != null && message.hasOwnProperty("roundData")) {
                    var error = $root.pb.common.RoundData.verify(message.roundData);
                    if (error)
                        return "roundData." + error;
                }
                if (message.scenario != null && message.hasOwnProperty("scenario")) {
                    var error = $root.pb.common.Scenario.verify(message.scenario);
                    if (error)
                        return "scenario." + error;
                }
                if (message.playerRecords != null && message.hasOwnProperty("playerRecords")) {
                    if (!Array.isArray(message.playerRecords))
                        return "playerRecords: array expected";
                    for (var i = 0; i < message.playerRecords.length; ++i) {
                        var error = $root.pb.common.PlayerRecord.verify(message.playerRecords[i]);
                        if (error)
                            return "playerRecords." + error;
                    }
                }
                if (message.timer != null && message.hasOwnProperty("timer")) {
                    var error = $root.pb.common.timer.verify(message.timer);
                    if (error)
                        return "timer." + error;
                }
                if (message.globalTimer != null && message.hasOwnProperty("globalTimer")) {
                    var error = $root.pb.common.timer.verify(message.globalTimer);
                    if (error)
                        return "globalTimer." + error;
                }
                return null;
            };

            /**
             * Creates a GameState message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GameState
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GameState} GameState
             */
            GameState.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GameState)
                    return object;
                var message = new $root.pb.common.GameState();
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                if (object.roundSeq != null)
                    message.roundSeq = object.roundSeq | 0;
                if (object.currentLocation != null)
                    message.currentLocation = object.currentLocation | 0;
                if (object.diceNum != null)
                    message.diceNum = object.diceNum | 0;
                if (object.roundData != null) {
                    if (typeof object.roundData !== "object")
                        throw TypeError(".pb.common.GameState.roundData: object expected");
                    message.roundData = $root.pb.common.RoundData.fromObject(object.roundData);
                }
                if (object.scenario != null) {
                    if (typeof object.scenario !== "object")
                        throw TypeError(".pb.common.GameState.scenario: object expected");
                    message.scenario = $root.pb.common.Scenario.fromObject(object.scenario);
                }
                if (object.playerRecords) {
                    if (!Array.isArray(object.playerRecords))
                        throw TypeError(".pb.common.GameState.playerRecords: array expected");
                    message.playerRecords = [];
                    for (var i = 0; i < object.playerRecords.length; ++i) {
                        if (typeof object.playerRecords[i] !== "object")
                            throw TypeError(".pb.common.GameState.playerRecords: object expected");
                        message.playerRecords[i] = $root.pb.common.PlayerRecord.fromObject(object.playerRecords[i]);
                    }
                }
                if (object.timer != null) {
                    if (typeof object.timer !== "object")
                        throw TypeError(".pb.common.GameState.timer: object expected");
                    message.timer = $root.pb.common.timer.fromObject(object.timer);
                }
                if (object.globalTimer != null) {
                    if (typeof object.globalTimer !== "object")
                        throw TypeError(".pb.common.GameState.globalTimer: object expected");
                    message.globalTimer = $root.pb.common.timer.fromObject(object.globalTimer);
                }
                return message;
            };

            /**
             * Creates a plain object from a GameState message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GameState
             * @static
             * @param {pb.common.GameState} message GameState
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GameState.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.playerRecords = [];
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                    object.roundSeq = 0;
                    object.currentLocation = 0;
                    object.diceNum = 0;
                    object.roundData = null;
                    object.scenario = null;
                    object.timer = null;
                    object.globalTimer = null;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                if (message.roundSeq != null && message.hasOwnProperty("roundSeq"))
                    object.roundSeq = message.roundSeq;
                if (message.currentLocation != null && message.hasOwnProperty("currentLocation"))
                    object.currentLocation = message.currentLocation;
                if (message.diceNum != null && message.hasOwnProperty("diceNum"))
                    object.diceNum = message.diceNum;
                if (message.roundData != null && message.hasOwnProperty("roundData"))
                    object.roundData = $root.pb.common.RoundData.toObject(message.roundData, options);
                if (message.scenario != null && message.hasOwnProperty("scenario"))
                    object.scenario = $root.pb.common.Scenario.toObject(message.scenario, options);
                if (message.playerRecords && message.playerRecords.length) {
                    object.playerRecords = [];
                    for (var j = 0; j < message.playerRecords.length; ++j)
                        object.playerRecords[j] = $root.pb.common.PlayerRecord.toObject(message.playerRecords[j], options);
                }
                if (message.timer != null && message.hasOwnProperty("timer"))
                    object.timer = $root.pb.common.timer.toObject(message.timer, options);
                if (message.globalTimer != null && message.hasOwnProperty("globalTimer"))
                    object.globalTimer = $root.pb.common.timer.toObject(message.globalTimer, options);
                return object;
            };

            /**
             * Converts this GameState to JSON.
             * @function toJSON
             * @memberof pb.common.GameState
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GameState.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GameState;
        })();

        common.PlayerRole = (function() {

            /**
             * Properties of a PlayerRole.
             * @memberof pb.common
             * @interface IPlayerRole
             * @property {Long|null} [ID] PlayerRole ID
             * @property {string|null} [Name] PlayerRole Name
             * @property {Long|null} [userId] PlayerRole userId
             * @property {string|null} [avatar] PlayerRole avatar
             * @property {string|null} [flag] PlayerRole flag
             */

            /**
             * Constructs a new PlayerRole.
             * @memberof pb.common
             * @classdesc Represents a PlayerRole.
             * @implements IPlayerRole
             * @constructor
             * @param {pb.common.IPlayerRole=} [properties] Properties to set
             */
            function PlayerRole(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PlayerRole ID.
             * @member {Long} ID
             * @memberof pb.common.PlayerRole
             * @instance
             */
            PlayerRole.prototype.ID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * PlayerRole Name.
             * @member {string} Name
             * @memberof pb.common.PlayerRole
             * @instance
             */
            PlayerRole.prototype.Name = "";

            /**
             * PlayerRole userId.
             * @member {Long} userId
             * @memberof pb.common.PlayerRole
             * @instance
             */
            PlayerRole.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * PlayerRole avatar.
             * @member {string} avatar
             * @memberof pb.common.PlayerRole
             * @instance
             */
            PlayerRole.prototype.avatar = "";

            /**
             * PlayerRole flag.
             * @member {string} flag
             * @memberof pb.common.PlayerRole
             * @instance
             */
            PlayerRole.prototype.flag = "";

            /**
             * Creates a new PlayerRole instance using the specified properties.
             * @function create
             * @memberof pb.common.PlayerRole
             * @static
             * @param {pb.common.IPlayerRole=} [properties] Properties to set
             * @returns {pb.common.PlayerRole} PlayerRole instance
             */
            PlayerRole.create = function create(properties) {
                return new PlayerRole(properties);
            };

            /**
             * Encodes the specified PlayerRole message. Does not implicitly {@link pb.common.PlayerRole.verify|verify} messages.
             * @function encode
             * @memberof pb.common.PlayerRole
             * @static
             * @param {pb.common.IPlayerRole} message PlayerRole message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerRole.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ID != null && message.hasOwnProperty("ID"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.ID);
                if (message.Name != null && message.hasOwnProperty("Name"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.Name);
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.userId);
                if (message.avatar != null && message.hasOwnProperty("avatar"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.avatar);
                if (message.flag != null && message.hasOwnProperty("flag"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.flag);
                return writer;
            };

            /**
             * Encodes the specified PlayerRole message, length delimited. Does not implicitly {@link pb.common.PlayerRole.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.PlayerRole
             * @static
             * @param {pb.common.IPlayerRole} message PlayerRole message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerRole.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PlayerRole message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.PlayerRole
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.PlayerRole} PlayerRole
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerRole.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.PlayerRole();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ID = reader.int64();
                        break;
                    case 2:
                        message.Name = reader.string();
                        break;
                    case 3:
                        message.userId = reader.int64();
                        break;
                    case 4:
                        message.avatar = reader.string();
                        break;
                    case 5:
                        message.flag = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PlayerRole message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.PlayerRole
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.PlayerRole} PlayerRole
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerRole.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PlayerRole message.
             * @function verify
             * @memberof pb.common.PlayerRole
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PlayerRole.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ID != null && message.hasOwnProperty("ID"))
                    if (!$util.isInteger(message.ID) && !(message.ID && $util.isInteger(message.ID.low) && $util.isInteger(message.ID.high)))
                        return "ID: integer|Long expected";
                if (message.Name != null && message.hasOwnProperty("Name"))
                    if (!$util.isString(message.Name))
                        return "Name: string expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                if (message.avatar != null && message.hasOwnProperty("avatar"))
                    if (!$util.isString(message.avatar))
                        return "avatar: string expected";
                if (message.flag != null && message.hasOwnProperty("flag"))
                    if (!$util.isString(message.flag))
                        return "flag: string expected";
                return null;
            };

            /**
             * Creates a PlayerRole message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.PlayerRole
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.PlayerRole} PlayerRole
             */
            PlayerRole.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.PlayerRole)
                    return object;
                var message = new $root.pb.common.PlayerRole();
                if (object.ID != null)
                    if ($util.Long)
                        (message.ID = $util.Long.fromValue(object.ID)).unsigned = false;
                    else if (typeof object.ID === "string")
                        message.ID = parseInt(object.ID, 10);
                    else if (typeof object.ID === "number")
                        message.ID = object.ID;
                    else if (typeof object.ID === "object")
                        message.ID = new $util.LongBits(object.ID.low >>> 0, object.ID.high >>> 0).toNumber();
                if (object.Name != null)
                    message.Name = String(object.Name);
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                if (object.avatar != null)
                    message.avatar = String(object.avatar);
                if (object.flag != null)
                    message.flag = String(object.flag);
                return message;
            };

            /**
             * Creates a plain object from a PlayerRole message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.PlayerRole
             * @static
             * @param {pb.common.PlayerRole} message PlayerRole
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PlayerRole.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.ID = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.ID = options.longs === String ? "0" : 0;
                    object.Name = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                    object.avatar = "";
                    object.flag = "";
                }
                if (message.ID != null && message.hasOwnProperty("ID"))
                    if (typeof message.ID === "number")
                        object.ID = options.longs === String ? String(message.ID) : message.ID;
                    else
                        object.ID = options.longs === String ? $util.Long.prototype.toString.call(message.ID) : options.longs === Number ? new $util.LongBits(message.ID.low >>> 0, message.ID.high >>> 0).toNumber() : message.ID;
                if (message.Name != null && message.hasOwnProperty("Name"))
                    object.Name = message.Name;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                if (message.avatar != null && message.hasOwnProperty("avatar"))
                    object.avatar = message.avatar;
                if (message.flag != null && message.hasOwnProperty("flag"))
                    object.flag = message.flag;
                return object;
            };

            /**
             * Converts this PlayerRole to JSON.
             * @function toJSON
             * @memberof pb.common.PlayerRole
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PlayerRole.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PlayerRole;
        })();

        common.Scenario = (function() {

            /**
             * Properties of a Scenario.
             * @memberof pb.common
             * @interface IScenario
             * @property {Long|null} [Id] Scenario Id
             * @property {string|null} [Name] Scenario Name
             * @property {number|null} [Type] Scenario Type
             * @property {string|null} [category] Scenario category
             * @property {number|null} [C_Price] Scenario C_Price
             * @property {number|null} [C_DownPayment] Scenario C_DownPayment
             * @property {number|null} [C_Loan] Scenario C_Loan
             * @property {number|null} [C_Interest] Scenario C_Interest
             * @property {number|null} [C_Income] Scenario C_Income
             * @property {number|null} [C_MonthCashFlow] Scenario C_MonthCashFlow
             * @property {number|null} [C_YieldRatePCT] Scenario C_YieldRatePCT
             * @property {number|null} [C_HighPrice] Scenario C_HighPrice
             * @property {number|null} [C_LowPrice] Scenario C_LowPrice
             * @property {number|null} [C_Shard] Scenario C_Shard
             * @property {number|null} [C_Mark] Scenario C_Mark
             * @property {number|null} [A_Cash] Scenario A_Cash
             * @property {number|null} [MI_TotalPrice] Scenario MI_TotalPrice
             * @property {number|null} [MI_UnitPrice] Scenario MI_UnitPrice
             * @property {number|null} [MI_Multiple] Scenario MI_Multiple
             * @property {number|null} [MI_PerfPCT] Scenario MI_PerfPCT
             * @property {number|null} [MI_Shard] Scenario MI_Shard
             * @property {number|null} [MI_Mark] Scenario MI_Mark
             * @property {string|null} [Code] Scenario Code
             * @property {string|null} [Desc] Scenario Desc
             * @property {string|null} [priceInfo] Scenario priceInfo
             * @property {string|null} [imgFile] Scenario imgFile
             * @property {number|null} [babyExpense] Scenario babyExpense
             * @property {pb.common.MarketChangeType.Enum|null} [MC_Type] Scenario MC_Type
             * @property {boolean|null} [MC_AffectAll] Scenario MC_AffectAll
             * @property {number|null} [MC_Ratio] Scenario MC_Ratio
             */

            /**
             * Constructs a new Scenario.
             * @memberof pb.common
             * @classdesc Represents a Scenario.
             * @implements IScenario
             * @constructor
             * @param {pb.common.IScenario=} [properties] Properties to set
             */
            function Scenario(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Scenario Id.
             * @member {Long} Id
             * @memberof pb.common.Scenario
             * @instance
             */
            Scenario.prototype.Id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Scenario Name.
             * @member {string} Name
             * @memberof pb.common.Scenario
             * @instance
             */
            Scenario.prototype.Name = "";

            /**
             * Scenario Type.
             * @member {number} Type
             * @memberof pb.common.Scenario
             * @instance
             */
            Scenario.prototype.Type = 0;

            /**
             * Scenario category.
             * @member {string} category
             * @memberof pb.common.Scenario
             * @instance
             */
            Scenario.prototype.category = "";

            /**
             * Scenario C_Price.
             * @member {number} C_Price
             * @memberof pb.common.Scenario
             * @instance
             */
            Scenario.prototype.C_Price = 0;

            /**
             * Scenario C_DownPayment.
             * @member {number} C_DownPayment
             * @memberof pb.common.Scenario
             * @instance
             */
            Scenario.prototype.C_DownPayment = 0;

            /**
             * Scenario C_Loan.
             * @member {number} C_Loan
             * @memberof pb.common.Scenario
             * @instance
             */
            Scenario.prototype.C_Loan = 0;

            /**
             * Scenario C_Interest.
             * @member {number} C_Interest
             * @memberof pb.common.Scenario
             * @instance
             */
            Scenario.prototype.C_Interest = 0;

            /**
             * Scenario C_Income.
             * @member {number} C_Income
             * @memberof pb.common.Scenario
             * @instance
             */
            Scenario.prototype.C_Income = 0;

            /**
             * Scenario C_MonthCashFlow.
             * @member {number} C_MonthCashFlow
             * @memberof pb.common.Scenario
             * @instance
             */
            Scenario.prototype.C_MonthCashFlow = 0;

            /**
             * Scenario C_YieldRatePCT.
             * @member {number} C_YieldRatePCT
             * @memberof pb.common.Scenario
             * @instance
             */
            Scenario.prototype.C_YieldRatePCT = 0;

            /**
             * Scenario C_HighPrice.
             * @member {number} C_HighPrice
             * @memberof pb.common.Scenario
             * @instance
             */
            Scenario.prototype.C_HighPrice = 0;

            /**
             * Scenario C_LowPrice.
             * @member {number} C_LowPrice
             * @memberof pb.common.Scenario
             * @instance
             */
            Scenario.prototype.C_LowPrice = 0;

            /**
             * Scenario C_Shard.
             * @member {number} C_Shard
             * @memberof pb.common.Scenario
             * @instance
             */
            Scenario.prototype.C_Shard = 0;

            /**
             * Scenario C_Mark.
             * @member {number} C_Mark
             * @memberof pb.common.Scenario
             * @instance
             */
            Scenario.prototype.C_Mark = 0;

            /**
             * Scenario A_Cash.
             * @member {number} A_Cash
             * @memberof pb.common.Scenario
             * @instance
             */
            Scenario.prototype.A_Cash = 0;

            /**
             * Scenario MI_TotalPrice.
             * @member {number} MI_TotalPrice
             * @memberof pb.common.Scenario
             * @instance
             */
            Scenario.prototype.MI_TotalPrice = 0;

            /**
             * Scenario MI_UnitPrice.
             * @member {number} MI_UnitPrice
             * @memberof pb.common.Scenario
             * @instance
             */
            Scenario.prototype.MI_UnitPrice = 0;

            /**
             * Scenario MI_Multiple.
             * @member {number} MI_Multiple
             * @memberof pb.common.Scenario
             * @instance
             */
            Scenario.prototype.MI_Multiple = 0;

            /**
             * Scenario MI_PerfPCT.
             * @member {number} MI_PerfPCT
             * @memberof pb.common.Scenario
             * @instance
             */
            Scenario.prototype.MI_PerfPCT = 0;

            /**
             * Scenario MI_Shard.
             * @member {number} MI_Shard
             * @memberof pb.common.Scenario
             * @instance
             */
            Scenario.prototype.MI_Shard = 0;

            /**
             * Scenario MI_Mark.
             * @member {number} MI_Mark
             * @memberof pb.common.Scenario
             * @instance
             */
            Scenario.prototype.MI_Mark = 0;

            /**
             * Scenario Code.
             * @member {string} Code
             * @memberof pb.common.Scenario
             * @instance
             */
            Scenario.prototype.Code = "";

            /**
             * Scenario Desc.
             * @member {string} Desc
             * @memberof pb.common.Scenario
             * @instance
             */
            Scenario.prototype.Desc = "";

            /**
             * Scenario priceInfo.
             * @member {string} priceInfo
             * @memberof pb.common.Scenario
             * @instance
             */
            Scenario.prototype.priceInfo = "";

            /**
             * Scenario imgFile.
             * @member {string} imgFile
             * @memberof pb.common.Scenario
             * @instance
             */
            Scenario.prototype.imgFile = "";

            /**
             * Scenario babyExpense.
             * @member {number} babyExpense
             * @memberof pb.common.Scenario
             * @instance
             */
            Scenario.prototype.babyExpense = 0;

            /**
             * Scenario MC_Type.
             * @member {pb.common.MarketChangeType.Enum} MC_Type
             * @memberof pb.common.Scenario
             * @instance
             */
            Scenario.prototype.MC_Type = 0;

            /**
             * Scenario MC_AffectAll.
             * @member {boolean} MC_AffectAll
             * @memberof pb.common.Scenario
             * @instance
             */
            Scenario.prototype.MC_AffectAll = false;

            /**
             * Scenario MC_Ratio.
             * @member {number} MC_Ratio
             * @memberof pb.common.Scenario
             * @instance
             */
            Scenario.prototype.MC_Ratio = 0;

            /**
             * Creates a new Scenario instance using the specified properties.
             * @function create
             * @memberof pb.common.Scenario
             * @static
             * @param {pb.common.IScenario=} [properties] Properties to set
             * @returns {pb.common.Scenario} Scenario instance
             */
            Scenario.create = function create(properties) {
                return new Scenario(properties);
            };

            /**
             * Encodes the specified Scenario message. Does not implicitly {@link pb.common.Scenario.verify|verify} messages.
             * @function encode
             * @memberof pb.common.Scenario
             * @static
             * @param {pb.common.IScenario} message Scenario message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Scenario.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.Id != null && message.hasOwnProperty("Id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.Id);
                if (message.Name != null && message.hasOwnProperty("Name"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.Name);
                if (message.Type != null && message.hasOwnProperty("Type"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.Type);
                if (message.category != null && message.hasOwnProperty("category"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.category);
                if (message.C_Price != null && message.hasOwnProperty("C_Price"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.C_Price);
                if (message.C_DownPayment != null && message.hasOwnProperty("C_DownPayment"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.C_DownPayment);
                if (message.C_Loan != null && message.hasOwnProperty("C_Loan"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int32(message.C_Loan);
                if (message.C_Interest != null && message.hasOwnProperty("C_Interest"))
                    writer.uint32(/* id 8, wireType 0 =*/64).int32(message.C_Interest);
                if (message.C_Income != null && message.hasOwnProperty("C_Income"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.C_Income);
                if (message.C_MonthCashFlow != null && message.hasOwnProperty("C_MonthCashFlow"))
                    writer.uint32(/* id 10, wireType 0 =*/80).int32(message.C_MonthCashFlow);
                if (message.C_YieldRatePCT != null && message.hasOwnProperty("C_YieldRatePCT"))
                    writer.uint32(/* id 11, wireType 5 =*/93).float(message.C_YieldRatePCT);
                if (message.C_HighPrice != null && message.hasOwnProperty("C_HighPrice"))
                    writer.uint32(/* id 12, wireType 0 =*/96).int32(message.C_HighPrice);
                if (message.C_LowPrice != null && message.hasOwnProperty("C_LowPrice"))
                    writer.uint32(/* id 13, wireType 0 =*/104).int32(message.C_LowPrice);
                if (message.C_Shard != null && message.hasOwnProperty("C_Shard"))
                    writer.uint32(/* id 14, wireType 0 =*/112).int32(message.C_Shard);
                if (message.C_Mark != null && message.hasOwnProperty("C_Mark"))
                    writer.uint32(/* id 15, wireType 0 =*/120).int32(message.C_Mark);
                if (message.A_Cash != null && message.hasOwnProperty("A_Cash"))
                    writer.uint32(/* id 16, wireType 0 =*/128).int32(message.A_Cash);
                if (message.MI_TotalPrice != null && message.hasOwnProperty("MI_TotalPrice"))
                    writer.uint32(/* id 17, wireType 0 =*/136).int32(message.MI_TotalPrice);
                if (message.MI_UnitPrice != null && message.hasOwnProperty("MI_UnitPrice"))
                    writer.uint32(/* id 18, wireType 0 =*/144).int32(message.MI_UnitPrice);
                if (message.MI_Multiple != null && message.hasOwnProperty("MI_Multiple"))
                    writer.uint32(/* id 19, wireType 0 =*/152).int32(message.MI_Multiple);
                if (message.MI_PerfPCT != null && message.hasOwnProperty("MI_PerfPCT"))
                    writer.uint32(/* id 20, wireType 5 =*/165).float(message.MI_PerfPCT);
                if (message.MI_Shard != null && message.hasOwnProperty("MI_Shard"))
                    writer.uint32(/* id 21, wireType 0 =*/168).int32(message.MI_Shard);
                if (message.MI_Mark != null && message.hasOwnProperty("MI_Mark"))
                    writer.uint32(/* id 22, wireType 0 =*/176).int32(message.MI_Mark);
                if (message.Code != null && message.hasOwnProperty("Code"))
                    writer.uint32(/* id 23, wireType 2 =*/186).string(message.Code);
                if (message.Desc != null && message.hasOwnProperty("Desc"))
                    writer.uint32(/* id 24, wireType 2 =*/194).string(message.Desc);
                if (message.priceInfo != null && message.hasOwnProperty("priceInfo"))
                    writer.uint32(/* id 25, wireType 2 =*/202).string(message.priceInfo);
                if (message.imgFile != null && message.hasOwnProperty("imgFile"))
                    writer.uint32(/* id 26, wireType 2 =*/210).string(message.imgFile);
                if (message.babyExpense != null && message.hasOwnProperty("babyExpense"))
                    writer.uint32(/* id 27, wireType 0 =*/216).int32(message.babyExpense);
                if (message.MC_Type != null && message.hasOwnProperty("MC_Type"))
                    writer.uint32(/* id 28, wireType 0 =*/224).int32(message.MC_Type);
                if (message.MC_AffectAll != null && message.hasOwnProperty("MC_AffectAll"))
                    writer.uint32(/* id 29, wireType 0 =*/232).bool(message.MC_AffectAll);
                if (message.MC_Ratio != null && message.hasOwnProperty("MC_Ratio"))
                    writer.uint32(/* id 30, wireType 5 =*/245).float(message.MC_Ratio);
                return writer;
            };

            /**
             * Encodes the specified Scenario message, length delimited. Does not implicitly {@link pb.common.Scenario.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.Scenario
             * @static
             * @param {pb.common.IScenario} message Scenario message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Scenario.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Scenario message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.Scenario
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.Scenario} Scenario
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Scenario.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.Scenario();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.Id = reader.int64();
                        break;
                    case 2:
                        message.Name = reader.string();
                        break;
                    case 3:
                        message.Type = reader.int32();
                        break;
                    case 4:
                        message.category = reader.string();
                        break;
                    case 5:
                        message.C_Price = reader.int32();
                        break;
                    case 6:
                        message.C_DownPayment = reader.int32();
                        break;
                    case 7:
                        message.C_Loan = reader.int32();
                        break;
                    case 8:
                        message.C_Interest = reader.int32();
                        break;
                    case 9:
                        message.C_Income = reader.int32();
                        break;
                    case 10:
                        message.C_MonthCashFlow = reader.int32();
                        break;
                    case 11:
                        message.C_YieldRatePCT = reader.float();
                        break;
                    case 12:
                        message.C_HighPrice = reader.int32();
                        break;
                    case 13:
                        message.C_LowPrice = reader.int32();
                        break;
                    case 14:
                        message.C_Shard = reader.int32();
                        break;
                    case 15:
                        message.C_Mark = reader.int32();
                        break;
                    case 16:
                        message.A_Cash = reader.int32();
                        break;
                    case 17:
                        message.MI_TotalPrice = reader.int32();
                        break;
                    case 18:
                        message.MI_UnitPrice = reader.int32();
                        break;
                    case 19:
                        message.MI_Multiple = reader.int32();
                        break;
                    case 20:
                        message.MI_PerfPCT = reader.float();
                        break;
                    case 21:
                        message.MI_Shard = reader.int32();
                        break;
                    case 22:
                        message.MI_Mark = reader.int32();
                        break;
                    case 23:
                        message.Code = reader.string();
                        break;
                    case 24:
                        message.Desc = reader.string();
                        break;
                    case 25:
                        message.priceInfo = reader.string();
                        break;
                    case 26:
                        message.imgFile = reader.string();
                        break;
                    case 27:
                        message.babyExpense = reader.int32();
                        break;
                    case 28:
                        message.MC_Type = reader.int32();
                        break;
                    case 29:
                        message.MC_AffectAll = reader.bool();
                        break;
                    case 30:
                        message.MC_Ratio = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Scenario message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.Scenario
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.Scenario} Scenario
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Scenario.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Scenario message.
             * @function verify
             * @memberof pb.common.Scenario
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Scenario.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.Id != null && message.hasOwnProperty("Id"))
                    if (!$util.isInteger(message.Id) && !(message.Id && $util.isInteger(message.Id.low) && $util.isInteger(message.Id.high)))
                        return "Id: integer|Long expected";
                if (message.Name != null && message.hasOwnProperty("Name"))
                    if (!$util.isString(message.Name))
                        return "Name: string expected";
                if (message.Type != null && message.hasOwnProperty("Type"))
                    if (!$util.isInteger(message.Type))
                        return "Type: integer expected";
                if (message.category != null && message.hasOwnProperty("category"))
                    if (!$util.isString(message.category))
                        return "category: string expected";
                if (message.C_Price != null && message.hasOwnProperty("C_Price"))
                    if (!$util.isInteger(message.C_Price))
                        return "C_Price: integer expected";
                if (message.C_DownPayment != null && message.hasOwnProperty("C_DownPayment"))
                    if (!$util.isInteger(message.C_DownPayment))
                        return "C_DownPayment: integer expected";
                if (message.C_Loan != null && message.hasOwnProperty("C_Loan"))
                    if (!$util.isInteger(message.C_Loan))
                        return "C_Loan: integer expected";
                if (message.C_Interest != null && message.hasOwnProperty("C_Interest"))
                    if (!$util.isInteger(message.C_Interest))
                        return "C_Interest: integer expected";
                if (message.C_Income != null && message.hasOwnProperty("C_Income"))
                    if (!$util.isInteger(message.C_Income))
                        return "C_Income: integer expected";
                if (message.C_MonthCashFlow != null && message.hasOwnProperty("C_MonthCashFlow"))
                    if (!$util.isInteger(message.C_MonthCashFlow))
                        return "C_MonthCashFlow: integer expected";
                if (message.C_YieldRatePCT != null && message.hasOwnProperty("C_YieldRatePCT"))
                    if (typeof message.C_YieldRatePCT !== "number")
                        return "C_YieldRatePCT: number expected";
                if (message.C_HighPrice != null && message.hasOwnProperty("C_HighPrice"))
                    if (!$util.isInteger(message.C_HighPrice))
                        return "C_HighPrice: integer expected";
                if (message.C_LowPrice != null && message.hasOwnProperty("C_LowPrice"))
                    if (!$util.isInteger(message.C_LowPrice))
                        return "C_LowPrice: integer expected";
                if (message.C_Shard != null && message.hasOwnProperty("C_Shard"))
                    if (!$util.isInteger(message.C_Shard))
                        return "C_Shard: integer expected";
                if (message.C_Mark != null && message.hasOwnProperty("C_Mark"))
                    if (!$util.isInteger(message.C_Mark))
                        return "C_Mark: integer expected";
                if (message.A_Cash != null && message.hasOwnProperty("A_Cash"))
                    if (!$util.isInteger(message.A_Cash))
                        return "A_Cash: integer expected";
                if (message.MI_TotalPrice != null && message.hasOwnProperty("MI_TotalPrice"))
                    if (!$util.isInteger(message.MI_TotalPrice))
                        return "MI_TotalPrice: integer expected";
                if (message.MI_UnitPrice != null && message.hasOwnProperty("MI_UnitPrice"))
                    if (!$util.isInteger(message.MI_UnitPrice))
                        return "MI_UnitPrice: integer expected";
                if (message.MI_Multiple != null && message.hasOwnProperty("MI_Multiple"))
                    if (!$util.isInteger(message.MI_Multiple))
                        return "MI_Multiple: integer expected";
                if (message.MI_PerfPCT != null && message.hasOwnProperty("MI_PerfPCT"))
                    if (typeof message.MI_PerfPCT !== "number")
                        return "MI_PerfPCT: number expected";
                if (message.MI_Shard != null && message.hasOwnProperty("MI_Shard"))
                    if (!$util.isInteger(message.MI_Shard))
                        return "MI_Shard: integer expected";
                if (message.MI_Mark != null && message.hasOwnProperty("MI_Mark"))
                    if (!$util.isInteger(message.MI_Mark))
                        return "MI_Mark: integer expected";
                if (message.Code != null && message.hasOwnProperty("Code"))
                    if (!$util.isString(message.Code))
                        return "Code: string expected";
                if (message.Desc != null && message.hasOwnProperty("Desc"))
                    if (!$util.isString(message.Desc))
                        return "Desc: string expected";
                if (message.priceInfo != null && message.hasOwnProperty("priceInfo"))
                    if (!$util.isString(message.priceInfo))
                        return "priceInfo: string expected";
                if (message.imgFile != null && message.hasOwnProperty("imgFile"))
                    if (!$util.isString(message.imgFile))
                        return "imgFile: string expected";
                if (message.babyExpense != null && message.hasOwnProperty("babyExpense"))
                    if (!$util.isInteger(message.babyExpense))
                        return "babyExpense: integer expected";
                if (message.MC_Type != null && message.hasOwnProperty("MC_Type"))
                    switch (message.MC_Type) {
                    default:
                        return "MC_Type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                        break;
                    }
                if (message.MC_AffectAll != null && message.hasOwnProperty("MC_AffectAll"))
                    if (typeof message.MC_AffectAll !== "boolean")
                        return "MC_AffectAll: boolean expected";
                if (message.MC_Ratio != null && message.hasOwnProperty("MC_Ratio"))
                    if (typeof message.MC_Ratio !== "number")
                        return "MC_Ratio: number expected";
                return null;
            };

            /**
             * Creates a Scenario message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.Scenario
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.Scenario} Scenario
             */
            Scenario.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.Scenario)
                    return object;
                var message = new $root.pb.common.Scenario();
                if (object.Id != null)
                    if ($util.Long)
                        (message.Id = $util.Long.fromValue(object.Id)).unsigned = false;
                    else if (typeof object.Id === "string")
                        message.Id = parseInt(object.Id, 10);
                    else if (typeof object.Id === "number")
                        message.Id = object.Id;
                    else if (typeof object.Id === "object")
                        message.Id = new $util.LongBits(object.Id.low >>> 0, object.Id.high >>> 0).toNumber();
                if (object.Name != null)
                    message.Name = String(object.Name);
                if (object.Type != null)
                    message.Type = object.Type | 0;
                if (object.category != null)
                    message.category = String(object.category);
                if (object.C_Price != null)
                    message.C_Price = object.C_Price | 0;
                if (object.C_DownPayment != null)
                    message.C_DownPayment = object.C_DownPayment | 0;
                if (object.C_Loan != null)
                    message.C_Loan = object.C_Loan | 0;
                if (object.C_Interest != null)
                    message.C_Interest = object.C_Interest | 0;
                if (object.C_Income != null)
                    message.C_Income = object.C_Income | 0;
                if (object.C_MonthCashFlow != null)
                    message.C_MonthCashFlow = object.C_MonthCashFlow | 0;
                if (object.C_YieldRatePCT != null)
                    message.C_YieldRatePCT = Number(object.C_YieldRatePCT);
                if (object.C_HighPrice != null)
                    message.C_HighPrice = object.C_HighPrice | 0;
                if (object.C_LowPrice != null)
                    message.C_LowPrice = object.C_LowPrice | 0;
                if (object.C_Shard != null)
                    message.C_Shard = object.C_Shard | 0;
                if (object.C_Mark != null)
                    message.C_Mark = object.C_Mark | 0;
                if (object.A_Cash != null)
                    message.A_Cash = object.A_Cash | 0;
                if (object.MI_TotalPrice != null)
                    message.MI_TotalPrice = object.MI_TotalPrice | 0;
                if (object.MI_UnitPrice != null)
                    message.MI_UnitPrice = object.MI_UnitPrice | 0;
                if (object.MI_Multiple != null)
                    message.MI_Multiple = object.MI_Multiple | 0;
                if (object.MI_PerfPCT != null)
                    message.MI_PerfPCT = Number(object.MI_PerfPCT);
                if (object.MI_Shard != null)
                    message.MI_Shard = object.MI_Shard | 0;
                if (object.MI_Mark != null)
                    message.MI_Mark = object.MI_Mark | 0;
                if (object.Code != null)
                    message.Code = String(object.Code);
                if (object.Desc != null)
                    message.Desc = String(object.Desc);
                if (object.priceInfo != null)
                    message.priceInfo = String(object.priceInfo);
                if (object.imgFile != null)
                    message.imgFile = String(object.imgFile);
                if (object.babyExpense != null)
                    message.babyExpense = object.babyExpense | 0;
                switch (object.MC_Type) {
                case "UNKNOWN":
                case 0:
                    message.MC_Type = 0;
                    break;
                case "RENT_INCREASE":
                case 1:
                    message.MC_Type = 1;
                    break;
                case "RENT_DECREASE":
                case 2:
                    message.MC_Type = 2;
                    break;
                case "EQUITY_BANKRUPT":
                case 3:
                    message.MC_Type = 3;
                    break;
                case "COOP_INCOME_INCREASE":
                case 4:
                    message.MC_Type = 4;
                    break;
                case "COOP_INCOME_DECREASE":
                case 5:
                    message.MC_Type = 5;
                    break;
                }
                if (object.MC_AffectAll != null)
                    message.MC_AffectAll = Boolean(object.MC_AffectAll);
                if (object.MC_Ratio != null)
                    message.MC_Ratio = Number(object.MC_Ratio);
                return message;
            };

            /**
             * Creates a plain object from a Scenario message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.Scenario
             * @static
             * @param {pb.common.Scenario} message Scenario
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Scenario.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.Id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.Id = options.longs === String ? "0" : 0;
                    object.Name = "";
                    object.Type = 0;
                    object.category = "";
                    object.C_Price = 0;
                    object.C_DownPayment = 0;
                    object.C_Loan = 0;
                    object.C_Interest = 0;
                    object.C_Income = 0;
                    object.C_MonthCashFlow = 0;
                    object.C_YieldRatePCT = 0;
                    object.C_HighPrice = 0;
                    object.C_LowPrice = 0;
                    object.C_Shard = 0;
                    object.C_Mark = 0;
                    object.A_Cash = 0;
                    object.MI_TotalPrice = 0;
                    object.MI_UnitPrice = 0;
                    object.MI_Multiple = 0;
                    object.MI_PerfPCT = 0;
                    object.MI_Shard = 0;
                    object.MI_Mark = 0;
                    object.Code = "";
                    object.Desc = "";
                    object.priceInfo = "";
                    object.imgFile = "";
                    object.babyExpense = 0;
                    object.MC_Type = options.enums === String ? "UNKNOWN" : 0;
                    object.MC_AffectAll = false;
                    object.MC_Ratio = 0;
                }
                if (message.Id != null && message.hasOwnProperty("Id"))
                    if (typeof message.Id === "number")
                        object.Id = options.longs === String ? String(message.Id) : message.Id;
                    else
                        object.Id = options.longs === String ? $util.Long.prototype.toString.call(message.Id) : options.longs === Number ? new $util.LongBits(message.Id.low >>> 0, message.Id.high >>> 0).toNumber() : message.Id;
                if (message.Name != null && message.hasOwnProperty("Name"))
                    object.Name = message.Name;
                if (message.Type != null && message.hasOwnProperty("Type"))
                    object.Type = message.Type;
                if (message.category != null && message.hasOwnProperty("category"))
                    object.category = message.category;
                if (message.C_Price != null && message.hasOwnProperty("C_Price"))
                    object.C_Price = message.C_Price;
                if (message.C_DownPayment != null && message.hasOwnProperty("C_DownPayment"))
                    object.C_DownPayment = message.C_DownPayment;
                if (message.C_Loan != null && message.hasOwnProperty("C_Loan"))
                    object.C_Loan = message.C_Loan;
                if (message.C_Interest != null && message.hasOwnProperty("C_Interest"))
                    object.C_Interest = message.C_Interest;
                if (message.C_Income != null && message.hasOwnProperty("C_Income"))
                    object.C_Income = message.C_Income;
                if (message.C_MonthCashFlow != null && message.hasOwnProperty("C_MonthCashFlow"))
                    object.C_MonthCashFlow = message.C_MonthCashFlow;
                if (message.C_YieldRatePCT != null && message.hasOwnProperty("C_YieldRatePCT"))
                    object.C_YieldRatePCT = options.json && !isFinite(message.C_YieldRatePCT) ? String(message.C_YieldRatePCT) : message.C_YieldRatePCT;
                if (message.C_HighPrice != null && message.hasOwnProperty("C_HighPrice"))
                    object.C_HighPrice = message.C_HighPrice;
                if (message.C_LowPrice != null && message.hasOwnProperty("C_LowPrice"))
                    object.C_LowPrice = message.C_LowPrice;
                if (message.C_Shard != null && message.hasOwnProperty("C_Shard"))
                    object.C_Shard = message.C_Shard;
                if (message.C_Mark != null && message.hasOwnProperty("C_Mark"))
                    object.C_Mark = message.C_Mark;
                if (message.A_Cash != null && message.hasOwnProperty("A_Cash"))
                    object.A_Cash = message.A_Cash;
                if (message.MI_TotalPrice != null && message.hasOwnProperty("MI_TotalPrice"))
                    object.MI_TotalPrice = message.MI_TotalPrice;
                if (message.MI_UnitPrice != null && message.hasOwnProperty("MI_UnitPrice"))
                    object.MI_UnitPrice = message.MI_UnitPrice;
                if (message.MI_Multiple != null && message.hasOwnProperty("MI_Multiple"))
                    object.MI_Multiple = message.MI_Multiple;
                if (message.MI_PerfPCT != null && message.hasOwnProperty("MI_PerfPCT"))
                    object.MI_PerfPCT = options.json && !isFinite(message.MI_PerfPCT) ? String(message.MI_PerfPCT) : message.MI_PerfPCT;
                if (message.MI_Shard != null && message.hasOwnProperty("MI_Shard"))
                    object.MI_Shard = message.MI_Shard;
                if (message.MI_Mark != null && message.hasOwnProperty("MI_Mark"))
                    object.MI_Mark = message.MI_Mark;
                if (message.Code != null && message.hasOwnProperty("Code"))
                    object.Code = message.Code;
                if (message.Desc != null && message.hasOwnProperty("Desc"))
                    object.Desc = message.Desc;
                if (message.priceInfo != null && message.hasOwnProperty("priceInfo"))
                    object.priceInfo = message.priceInfo;
                if (message.imgFile != null && message.hasOwnProperty("imgFile"))
                    object.imgFile = message.imgFile;
                if (message.babyExpense != null && message.hasOwnProperty("babyExpense"))
                    object.babyExpense = message.babyExpense;
                if (message.MC_Type != null && message.hasOwnProperty("MC_Type"))
                    object.MC_Type = options.enums === String ? $root.pb.common.MarketChangeType.Enum[message.MC_Type] : message.MC_Type;
                if (message.MC_AffectAll != null && message.hasOwnProperty("MC_AffectAll"))
                    object.MC_AffectAll = message.MC_AffectAll;
                if (message.MC_Ratio != null && message.hasOwnProperty("MC_Ratio"))
                    object.MC_Ratio = options.json && !isFinite(message.MC_Ratio) ? String(message.MC_Ratio) : message.MC_Ratio;
                return object;
            };

            /**
             * Converts this Scenario to JSON.
             * @function toJSON
             * @memberof pb.common.Scenario
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Scenario.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Scenario;
        })();

        common.MarketChangeType = (function() {

            /**
             * Properties of a MarketChangeType.
             * @memberof pb.common
             * @interface IMarketChangeType
             */

            /**
             * Constructs a new MarketChangeType.
             * @memberof pb.common
             * @classdesc Represents a MarketChangeType.
             * @implements IMarketChangeType
             * @constructor
             * @param {pb.common.IMarketChangeType=} [properties] Properties to set
             */
            function MarketChangeType(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new MarketChangeType instance using the specified properties.
             * @function create
             * @memberof pb.common.MarketChangeType
             * @static
             * @param {pb.common.IMarketChangeType=} [properties] Properties to set
             * @returns {pb.common.MarketChangeType} MarketChangeType instance
             */
            MarketChangeType.create = function create(properties) {
                return new MarketChangeType(properties);
            };

            /**
             * Encodes the specified MarketChangeType message. Does not implicitly {@link pb.common.MarketChangeType.verify|verify} messages.
             * @function encode
             * @memberof pb.common.MarketChangeType
             * @static
             * @param {pb.common.IMarketChangeType} message MarketChangeType message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MarketChangeType.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified MarketChangeType message, length delimited. Does not implicitly {@link pb.common.MarketChangeType.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.MarketChangeType
             * @static
             * @param {pb.common.IMarketChangeType} message MarketChangeType message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MarketChangeType.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MarketChangeType message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.MarketChangeType
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.MarketChangeType} MarketChangeType
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MarketChangeType.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.MarketChangeType();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MarketChangeType message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.MarketChangeType
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.MarketChangeType} MarketChangeType
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MarketChangeType.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MarketChangeType message.
             * @function verify
             * @memberof pb.common.MarketChangeType
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MarketChangeType.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a MarketChangeType message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.MarketChangeType
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.MarketChangeType} MarketChangeType
             */
            MarketChangeType.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.MarketChangeType)
                    return object;
                return new $root.pb.common.MarketChangeType();
            };

            /**
             * Creates a plain object from a MarketChangeType message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.MarketChangeType
             * @static
             * @param {pb.common.MarketChangeType} message MarketChangeType
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MarketChangeType.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this MarketChangeType to JSON.
             * @function toJSON
             * @memberof pb.common.MarketChangeType
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MarketChangeType.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Enum enum.
             * @name pb.common.MarketChangeType.Enum
             * @enum {string}
             * @property {number} UNKNOWN=0 UNKNOWN value
             * @property {number} RENT_INCREASE=1 RENT_INCREASE value
             * @property {number} RENT_DECREASE=2 RENT_DECREASE value
             * @property {number} EQUITY_BANKRUPT=3 EQUITY_BANKRUPT value
             * @property {number} COOP_INCOME_INCREASE=4 COOP_INCOME_INCREASE value
             * @property {number} COOP_INCOME_DECREASE=5 COOP_INCOME_DECREASE value
             */
            MarketChangeType.Enum = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN"] = 0;
                values[valuesById[1] = "RENT_INCREASE"] = 1;
                values[valuesById[2] = "RENT_DECREASE"] = 2;
                values[valuesById[3] = "EQUITY_BANKRUPT"] = 3;
                values[valuesById[4] = "COOP_INCOME_INCREASE"] = 4;
                values[valuesById[5] = "COOP_INCOME_DECREASE"] = 5;
                return values;
            })();

            return MarketChangeType;
        })();

        common.RoundData = (function() {

            /**
             * Properties of a RoundData.
             * @memberof pb.common
             * @interface IRoundData
             * @property {number|null} [payment] RoundData payment
             * @property {number|null} [balance] RoundData balance
             * @property {number|null} [salary] RoundData salary
             * @property {boolean|null} [isOutGame] RoundData isOutGame
             * @property {number|null} [isPayDay] RoundData isPayDay
             * @property {number|null} [canSellCnt] RoundData canSellCnt
             * @property {number|null} [StepsToPayday] RoundData StepsToPayday
             * @property {number|null} [UnemploymentLoss] RoundData UnemploymentLoss
             */

            /**
             * Constructs a new RoundData.
             * @memberof pb.common
             * @classdesc Represents a RoundData.
             * @implements IRoundData
             * @constructor
             * @param {pb.common.IRoundData=} [properties] Properties to set
             */
            function RoundData(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RoundData payment.
             * @member {number} payment
             * @memberof pb.common.RoundData
             * @instance
             */
            RoundData.prototype.payment = 0;

            /**
             * RoundData balance.
             * @member {number} balance
             * @memberof pb.common.RoundData
             * @instance
             */
            RoundData.prototype.balance = 0;

            /**
             * RoundData salary.
             * @member {number} salary
             * @memberof pb.common.RoundData
             * @instance
             */
            RoundData.prototype.salary = 0;

            /**
             * RoundData isOutGame.
             * @member {boolean} isOutGame
             * @memberof pb.common.RoundData
             * @instance
             */
            RoundData.prototype.isOutGame = false;

            /**
             * RoundData isPayDay.
             * @member {number} isPayDay
             * @memberof pb.common.RoundData
             * @instance
             */
            RoundData.prototype.isPayDay = 0;

            /**
             * RoundData canSellCnt.
             * @member {number} canSellCnt
             * @memberof pb.common.RoundData
             * @instance
             */
            RoundData.prototype.canSellCnt = 0;

            /**
             * RoundData StepsToPayday.
             * @member {number} StepsToPayday
             * @memberof pb.common.RoundData
             * @instance
             */
            RoundData.prototype.StepsToPayday = 0;

            /**
             * RoundData UnemploymentLoss.
             * @member {number} UnemploymentLoss
             * @memberof pb.common.RoundData
             * @instance
             */
            RoundData.prototype.UnemploymentLoss = 0;

            /**
             * Creates a new RoundData instance using the specified properties.
             * @function create
             * @memberof pb.common.RoundData
             * @static
             * @param {pb.common.IRoundData=} [properties] Properties to set
             * @returns {pb.common.RoundData} RoundData instance
             */
            RoundData.create = function create(properties) {
                return new RoundData(properties);
            };

            /**
             * Encodes the specified RoundData message. Does not implicitly {@link pb.common.RoundData.verify|verify} messages.
             * @function encode
             * @memberof pb.common.RoundData
             * @static
             * @param {pb.common.IRoundData} message RoundData message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoundData.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.payment != null && message.hasOwnProperty("payment"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.payment);
                if (message.balance != null && message.hasOwnProperty("balance"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.balance);
                if (message.salary != null && message.hasOwnProperty("salary"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.salary);
                if (message.isOutGame != null && message.hasOwnProperty("isOutGame"))
                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.isOutGame);
                if (message.isPayDay != null && message.hasOwnProperty("isPayDay"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.isPayDay);
                if (message.canSellCnt != null && message.hasOwnProperty("canSellCnt"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.canSellCnt);
                if (message.StepsToPayday != null && message.hasOwnProperty("StepsToPayday"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int32(message.StepsToPayday);
                if (message.UnemploymentLoss != null && message.hasOwnProperty("UnemploymentLoss"))
                    writer.uint32(/* id 8, wireType 0 =*/64).int32(message.UnemploymentLoss);
                return writer;
            };

            /**
             * Encodes the specified RoundData message, length delimited. Does not implicitly {@link pb.common.RoundData.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.RoundData
             * @static
             * @param {pb.common.IRoundData} message RoundData message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RoundData.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RoundData message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.RoundData
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.RoundData} RoundData
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoundData.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.RoundData();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.payment = reader.int32();
                        break;
                    case 2:
                        message.balance = reader.int32();
                        break;
                    case 3:
                        message.salary = reader.int32();
                        break;
                    case 4:
                        message.isOutGame = reader.bool();
                        break;
                    case 5:
                        message.isPayDay = reader.int32();
                        break;
                    case 6:
                        message.canSellCnt = reader.int32();
                        break;
                    case 7:
                        message.StepsToPayday = reader.int32();
                        break;
                    case 8:
                        message.UnemploymentLoss = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RoundData message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.RoundData
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.RoundData} RoundData
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RoundData.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RoundData message.
             * @function verify
             * @memberof pb.common.RoundData
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RoundData.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.payment != null && message.hasOwnProperty("payment"))
                    if (!$util.isInteger(message.payment))
                        return "payment: integer expected";
                if (message.balance != null && message.hasOwnProperty("balance"))
                    if (!$util.isInteger(message.balance))
                        return "balance: integer expected";
                if (message.salary != null && message.hasOwnProperty("salary"))
                    if (!$util.isInteger(message.salary))
                        return "salary: integer expected";
                if (message.isOutGame != null && message.hasOwnProperty("isOutGame"))
                    if (typeof message.isOutGame !== "boolean")
                        return "isOutGame: boolean expected";
                if (message.isPayDay != null && message.hasOwnProperty("isPayDay"))
                    if (!$util.isInteger(message.isPayDay))
                        return "isPayDay: integer expected";
                if (message.canSellCnt != null && message.hasOwnProperty("canSellCnt"))
                    if (!$util.isInteger(message.canSellCnt))
                        return "canSellCnt: integer expected";
                if (message.StepsToPayday != null && message.hasOwnProperty("StepsToPayday"))
                    if (!$util.isInteger(message.StepsToPayday))
                        return "StepsToPayday: integer expected";
                if (message.UnemploymentLoss != null && message.hasOwnProperty("UnemploymentLoss"))
                    if (!$util.isInteger(message.UnemploymentLoss))
                        return "UnemploymentLoss: integer expected";
                return null;
            };

            /**
             * Creates a RoundData message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.RoundData
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.RoundData} RoundData
             */
            RoundData.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.RoundData)
                    return object;
                var message = new $root.pb.common.RoundData();
                if (object.payment != null)
                    message.payment = object.payment | 0;
                if (object.balance != null)
                    message.balance = object.balance | 0;
                if (object.salary != null)
                    message.salary = object.salary | 0;
                if (object.isOutGame != null)
                    message.isOutGame = Boolean(object.isOutGame);
                if (object.isPayDay != null)
                    message.isPayDay = object.isPayDay | 0;
                if (object.canSellCnt != null)
                    message.canSellCnt = object.canSellCnt | 0;
                if (object.StepsToPayday != null)
                    message.StepsToPayday = object.StepsToPayday | 0;
                if (object.UnemploymentLoss != null)
                    message.UnemploymentLoss = object.UnemploymentLoss | 0;
                return message;
            };

            /**
             * Creates a plain object from a RoundData message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.RoundData
             * @static
             * @param {pb.common.RoundData} message RoundData
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RoundData.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.payment = 0;
                    object.balance = 0;
                    object.salary = 0;
                    object.isOutGame = false;
                    object.isPayDay = 0;
                    object.canSellCnt = 0;
                    object.StepsToPayday = 0;
                    object.UnemploymentLoss = 0;
                }
                if (message.payment != null && message.hasOwnProperty("payment"))
                    object.payment = message.payment;
                if (message.balance != null && message.hasOwnProperty("balance"))
                    object.balance = message.balance;
                if (message.salary != null && message.hasOwnProperty("salary"))
                    object.salary = message.salary;
                if (message.isOutGame != null && message.hasOwnProperty("isOutGame"))
                    object.isOutGame = message.isOutGame;
                if (message.isPayDay != null && message.hasOwnProperty("isPayDay"))
                    object.isPayDay = message.isPayDay;
                if (message.canSellCnt != null && message.hasOwnProperty("canSellCnt"))
                    object.canSellCnt = message.canSellCnt;
                if (message.StepsToPayday != null && message.hasOwnProperty("StepsToPayday"))
                    object.StepsToPayday = message.StepsToPayday;
                if (message.UnemploymentLoss != null && message.hasOwnProperty("UnemploymentLoss"))
                    object.UnemploymentLoss = message.UnemploymentLoss;
                return object;
            };

            /**
             * Converts this RoundData to JSON.
             * @function toJSON
             * @memberof pb.common.RoundData
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RoundData.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RoundData;
        })();

        common.Payload = (function() {

            /**
             * Properties of a Payload.
             * @memberof pb.common
             * @interface IPayload
             * @property {number|null} [type] Payload type
             * @property {Long|null} [userId] Payload userId
             * @property {Uint8Array|null} [content] Payload content
             * @property {Long|null} [pushToUserId] Payload pushToUserId
             */

            /**
             * Constructs a new Payload.
             * @memberof pb.common
             * @classdesc Represents a Payload.
             * @implements IPayload
             * @constructor
             * @param {pb.common.IPayload=} [properties] Properties to set
             */
            function Payload(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Payload type.
             * @member {number} type
             * @memberof pb.common.Payload
             * @instance
             */
            Payload.prototype.type = 0;

            /**
             * Payload userId.
             * @member {Long} userId
             * @memberof pb.common.Payload
             * @instance
             */
            Payload.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Payload content.
             * @member {Uint8Array} content
             * @memberof pb.common.Payload
             * @instance
             */
            Payload.prototype.content = $util.newBuffer([]);

            /**
             * Payload pushToUserId.
             * @member {Long} pushToUserId
             * @memberof pb.common.Payload
             * @instance
             */
            Payload.prototype.pushToUserId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new Payload instance using the specified properties.
             * @function create
             * @memberof pb.common.Payload
             * @static
             * @param {pb.common.IPayload=} [properties] Properties to set
             * @returns {pb.common.Payload} Payload instance
             */
            Payload.create = function create(properties) {
                return new Payload(properties);
            };

            /**
             * Encodes the specified Payload message. Does not implicitly {@link pb.common.Payload.verify|verify} messages.
             * @function encode
             * @memberof pb.common.Payload
             * @static
             * @param {pb.common.IPayload} message Payload message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Payload.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type != null && message.hasOwnProperty("type"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.userId);
                if (message.content != null && message.hasOwnProperty("content"))
                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.content);
                if (message.pushToUserId != null && message.hasOwnProperty("pushToUserId"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.pushToUserId);
                return writer;
            };

            /**
             * Encodes the specified Payload message, length delimited. Does not implicitly {@link pb.common.Payload.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.Payload
             * @static
             * @param {pb.common.IPayload} message Payload message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Payload.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Payload message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.Payload
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.Payload} Payload
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Payload.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.Payload();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type = reader.int32();
                        break;
                    case 2:
                        message.userId = reader.int64();
                        break;
                    case 3:
                        message.content = reader.bytes();
                        break;
                    case 4:
                        message.pushToUserId = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Payload message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.Payload
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.Payload} Payload
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Payload.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Payload message.
             * @function verify
             * @memberof pb.common.Payload
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Payload.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isInteger(message.type))
                        return "type: integer expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                if (message.content != null && message.hasOwnProperty("content"))
                    if (!(message.content && typeof message.content.length === "number" || $util.isString(message.content)))
                        return "content: buffer expected";
                if (message.pushToUserId != null && message.hasOwnProperty("pushToUserId"))
                    if (!$util.isInteger(message.pushToUserId) && !(message.pushToUserId && $util.isInteger(message.pushToUserId.low) && $util.isInteger(message.pushToUserId.high)))
                        return "pushToUserId: integer|Long expected";
                return null;
            };

            /**
             * Creates a Payload message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.Payload
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.Payload} Payload
             */
            Payload.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.Payload)
                    return object;
                var message = new $root.pb.common.Payload();
                if (object.type != null)
                    message.type = object.type | 0;
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                if (object.content != null)
                    if (typeof object.content === "string")
                        $util.base64.decode(object.content, message.content = $util.newBuffer($util.base64.length(object.content)), 0);
                    else if (object.content.length)
                        message.content = object.content;
                if (object.pushToUserId != null)
                    if ($util.Long)
                        (message.pushToUserId = $util.Long.fromValue(object.pushToUserId)).unsigned = false;
                    else if (typeof object.pushToUserId === "string")
                        message.pushToUserId = parseInt(object.pushToUserId, 10);
                    else if (typeof object.pushToUserId === "number")
                        message.pushToUserId = object.pushToUserId;
                    else if (typeof object.pushToUserId === "object")
                        message.pushToUserId = new $util.LongBits(object.pushToUserId.low >>> 0, object.pushToUserId.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a Payload message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.Payload
             * @static
             * @param {pb.common.Payload} message Payload
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Payload.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.type = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                    if (options.bytes === String)
                        object.content = "";
                    else {
                        object.content = [];
                        if (options.bytes !== Array)
                            object.content = $util.newBuffer(object.content);
                    }
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.pushToUserId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.pushToUserId = options.longs === String ? "0" : 0;
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                if (message.content != null && message.hasOwnProperty("content"))
                    object.content = options.bytes === String ? $util.base64.encode(message.content, 0, message.content.length) : options.bytes === Array ? Array.prototype.slice.call(message.content) : message.content;
                if (message.pushToUserId != null && message.hasOwnProperty("pushToUserId"))
                    if (typeof message.pushToUserId === "number")
                        object.pushToUserId = options.longs === String ? String(message.pushToUserId) : message.pushToUserId;
                    else
                        object.pushToUserId = options.longs === String ? $util.Long.prototype.toString.call(message.pushToUserId) : options.longs === Number ? new $util.LongBits(message.pushToUserId.low >>> 0, message.pushToUserId.high >>> 0).toNumber() : message.pushToUserId;
                return object;
            };

            /**
             * Converts this Payload to JSON.
             * @function toJSON
             * @memberof pb.common.Payload
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Payload.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Payload;
        })();

        common.timer = (function() {

            /**
             * Properties of a timer.
             * @memberof pb.common
             * @interface Itimer
             * @property {number|null} [total] timer total
             * @property {number|null} [remaining] timer remaining
             */

            /**
             * Constructs a new timer.
             * @memberof pb.common
             * @classdesc Represents a timer.
             * @implements Itimer
             * @constructor
             * @param {pb.common.Itimer=} [properties] Properties to set
             */
            function timer(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * timer total.
             * @member {number} total
             * @memberof pb.common.timer
             * @instance
             */
            timer.prototype.total = 0;

            /**
             * timer remaining.
             * @member {number} remaining
             * @memberof pb.common.timer
             * @instance
             */
            timer.prototype.remaining = 0;

            /**
             * Creates a new timer instance using the specified properties.
             * @function create
             * @memberof pb.common.timer
             * @static
             * @param {pb.common.Itimer=} [properties] Properties to set
             * @returns {pb.common.timer} timer instance
             */
            timer.create = function create(properties) {
                return new timer(properties);
            };

            /**
             * Encodes the specified timer message. Does not implicitly {@link pb.common.timer.verify|verify} messages.
             * @function encode
             * @memberof pb.common.timer
             * @static
             * @param {pb.common.Itimer} message timer message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            timer.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.remaining != null && message.hasOwnProperty("remaining"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.remaining);
                if (message.total != null && message.hasOwnProperty("total"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.total);
                return writer;
            };

            /**
             * Encodes the specified timer message, length delimited. Does not implicitly {@link pb.common.timer.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.timer
             * @static
             * @param {pb.common.Itimer} message timer message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            timer.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a timer message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.timer
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.timer} timer
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            timer.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.timer();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 3:
                        message.total = reader.int32();
                        break;
                    case 2:
                        message.remaining = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a timer message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.timer
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.timer} timer
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            timer.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a timer message.
             * @function verify
             * @memberof pb.common.timer
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            timer.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.total != null && message.hasOwnProperty("total"))
                    if (!$util.isInteger(message.total))
                        return "total: integer expected";
                if (message.remaining != null && message.hasOwnProperty("remaining"))
                    if (!$util.isInteger(message.remaining))
                        return "remaining: integer expected";
                return null;
            };

            /**
             * Creates a timer message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.timer
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.timer} timer
             */
            timer.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.timer)
                    return object;
                var message = new $root.pb.common.timer();
                if (object.total != null)
                    message.total = object.total | 0;
                if (object.remaining != null)
                    message.remaining = object.remaining | 0;
                return message;
            };

            /**
             * Creates a plain object from a timer message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.timer
             * @static
             * @param {pb.common.timer} message timer
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            timer.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.remaining = 0;
                    object.total = 0;
                }
                if (message.remaining != null && message.hasOwnProperty("remaining"))
                    object.remaining = message.remaining;
                if (message.total != null && message.hasOwnProperty("total"))
                    object.total = message.total;
                return object;
            };

            /**
             * Converts this timer to JSON.
             * @function toJSON
             * @memberof pb.common.timer
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            timer.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return timer;
        })();

        common.GameMap = (function() {

            /**
             * Properties of a GameMap.
             * @memberof pb.common
             * @interface IGameMap
             * @property {Long|null} [id] GameMap id
             * @property {Array.<pb.common.GameMap.IScenario>|null} [scenarios] GameMap scenarios
             */

            /**
             * Constructs a new GameMap.
             * @memberof pb.common
             * @classdesc Represents a GameMap.
             * @implements IGameMap
             * @constructor
             * @param {pb.common.IGameMap=} [properties] Properties to set
             */
            function GameMap(properties) {
                this.scenarios = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GameMap id.
             * @member {Long} id
             * @memberof pb.common.GameMap
             * @instance
             */
            GameMap.prototype.id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * GameMap scenarios.
             * @member {Array.<pb.common.GameMap.IScenario>} scenarios
             * @memberof pb.common.GameMap
             * @instance
             */
            GameMap.prototype.scenarios = $util.emptyArray;

            /**
             * Creates a new GameMap instance using the specified properties.
             * @function create
             * @memberof pb.common.GameMap
             * @static
             * @param {pb.common.IGameMap=} [properties] Properties to set
             * @returns {pb.common.GameMap} GameMap instance
             */
            GameMap.create = function create(properties) {
                return new GameMap(properties);
            };

            /**
             * Encodes the specified GameMap message. Does not implicitly {@link pb.common.GameMap.verify|verify} messages.
             * @function encode
             * @memberof pb.common.GameMap
             * @static
             * @param {pb.common.IGameMap} message GameMap message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameMap.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.id);
                if (message.scenarios != null && message.scenarios.length)
                    for (var i = 0; i < message.scenarios.length; ++i)
                        $root.pb.common.GameMap.Scenario.encode(message.scenarios[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GameMap message, length delimited. Does not implicitly {@link pb.common.GameMap.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.GameMap
             * @static
             * @param {pb.common.IGameMap} message GameMap message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameMap.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GameMap message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.GameMap
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.GameMap} GameMap
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameMap.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GameMap();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.int64();
                        break;
                    case 2:
                        if (!(message.scenarios && message.scenarios.length))
                            message.scenarios = [];
                        message.scenarios.push($root.pb.common.GameMap.Scenario.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GameMap message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.GameMap
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.GameMap} GameMap
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameMap.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GameMap message.
             * @function verify
             * @memberof pb.common.GameMap
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GameMap.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                        return "id: integer|Long expected";
                if (message.scenarios != null && message.hasOwnProperty("scenarios")) {
                    if (!Array.isArray(message.scenarios))
                        return "scenarios: array expected";
                    for (var i = 0; i < message.scenarios.length; ++i) {
                        var error = $root.pb.common.GameMap.Scenario.verify(message.scenarios[i]);
                        if (error)
                            return "scenarios." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GameMap message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.GameMap
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.GameMap} GameMap
             */
            GameMap.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.GameMap)
                    return object;
                var message = new $root.pb.common.GameMap();
                if (object.id != null)
                    if ($util.Long)
                        (message.id = $util.Long.fromValue(object.id)).unsigned = false;
                    else if (typeof object.id === "string")
                        message.id = parseInt(object.id, 10);
                    else if (typeof object.id === "number")
                        message.id = object.id;
                    else if (typeof object.id === "object")
                        message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber();
                if (object.scenarios) {
                    if (!Array.isArray(object.scenarios))
                        throw TypeError(".pb.common.GameMap.scenarios: array expected");
                    message.scenarios = [];
                    for (var i = 0; i < object.scenarios.length; ++i) {
                        if (typeof object.scenarios[i] !== "object")
                            throw TypeError(".pb.common.GameMap.scenarios: object expected");
                        message.scenarios[i] = $root.pb.common.GameMap.Scenario.fromObject(object.scenarios[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GameMap message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.GameMap
             * @static
             * @param {pb.common.GameMap} message GameMap
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GameMap.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.scenarios = [];
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.id = options.longs === String ? "0" : 0;
                if (message.id != null && message.hasOwnProperty("id"))
                    if (typeof message.id === "number")
                        object.id = options.longs === String ? String(message.id) : message.id;
                    else
                        object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id;
                if (message.scenarios && message.scenarios.length) {
                    object.scenarios = [];
                    for (var j = 0; j < message.scenarios.length; ++j)
                        object.scenarios[j] = $root.pb.common.GameMap.Scenario.toObject(message.scenarios[j], options);
                }
                return object;
            };

            /**
             * Converts this GameMap to JSON.
             * @function toJSON
             * @memberof pb.common.GameMap
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GameMap.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            GameMap.Scenario = (function() {

                /**
                 * Properties of a Scenario.
                 * @memberof pb.common.GameMap
                 * @interface IScenario
                 * @property {pb.common.SCENARIO_TYPE|null} [type] Scenario type
                 * @property {number|null} [location] Scenario location
                 */

                /**
                 * Constructs a new Scenario.
                 * @memberof pb.common.GameMap
                 * @classdesc Represents a Scenario.
                 * @implements IScenario
                 * @constructor
                 * @param {pb.common.GameMap.IScenario=} [properties] Properties to set
                 */
                function Scenario(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Scenario type.
                 * @member {pb.common.SCENARIO_TYPE} type
                 * @memberof pb.common.GameMap.Scenario
                 * @instance
                 */
                Scenario.prototype.type = 0;

                /**
                 * Scenario location.
                 * @member {number} location
                 * @memberof pb.common.GameMap.Scenario
                 * @instance
                 */
                Scenario.prototype.location = 0;

                /**
                 * Creates a new Scenario instance using the specified properties.
                 * @function create
                 * @memberof pb.common.GameMap.Scenario
                 * @static
                 * @param {pb.common.GameMap.IScenario=} [properties] Properties to set
                 * @returns {pb.common.GameMap.Scenario} Scenario instance
                 */
                Scenario.create = function create(properties) {
                    return new Scenario(properties);
                };

                /**
                 * Encodes the specified Scenario message. Does not implicitly {@link pb.common.GameMap.Scenario.verify|verify} messages.
                 * @function encode
                 * @memberof pb.common.GameMap.Scenario
                 * @static
                 * @param {pb.common.GameMap.IScenario} message Scenario message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Scenario.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && message.hasOwnProperty("type"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                    if (message.location != null && message.hasOwnProperty("location"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.location);
                    return writer;
                };

                /**
                 * Encodes the specified Scenario message, length delimited. Does not implicitly {@link pb.common.GameMap.Scenario.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof pb.common.GameMap.Scenario
                 * @static
                 * @param {pb.common.GameMap.IScenario} message Scenario message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Scenario.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Scenario message from the specified reader or buffer.
                 * @function decode
                 * @memberof pb.common.GameMap.Scenario
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {pb.common.GameMap.Scenario} Scenario
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Scenario.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.GameMap.Scenario();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.type = reader.int32();
                            break;
                        case 2:
                            message.location = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Scenario message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof pb.common.GameMap.Scenario
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {pb.common.GameMap.Scenario} Scenario
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Scenario.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Scenario message.
                 * @function verify
                 * @memberof pb.common.GameMap.Scenario
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Scenario.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                            break;
                        }
                    if (message.location != null && message.hasOwnProperty("location"))
                        if (!$util.isInteger(message.location))
                            return "location: integer expected";
                    return null;
                };

                /**
                 * Creates a Scenario message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof pb.common.GameMap.Scenario
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {pb.common.GameMap.Scenario} Scenario
                 */
                Scenario.fromObject = function fromObject(object) {
                    if (object instanceof $root.pb.common.GameMap.Scenario)
                        return object;
                    var message = new $root.pb.common.GameMap.Scenario();
                    switch (object.type) {
                    case "S_PB_FIRST_MUST_ZORE":
                    case 0:
                        message.type = 0;
                        break;
                    case "S_INIT":
                    case 1:
                        message.type = 1;
                        break;
                    case "S_CHANCE":
                    case 2:
                        message.type = 2;
                        break;
                    case "S_BIG_BUSINESS":
                    case 3:
                        message.type = 3;
                        break;
                    case "S_SMALL_BUSINESS":
                    case 4:
                        message.type = 4;
                        break;
                    case "S_MARKET_INFO":
                    case 5:
                        message.type = 5;
                        break;
                    case "S_ACCIDENT":
                    case 6:
                        message.type = 6;
                        break;
                    case "S_CHARITY":
                    case 7:
                        message.type = 7;
                        break;
                    case "S_UNEMPLOYMENT":
                    case 8:
                        message.type = 8;
                        break;
                    case "S_PAYDAY":
                    case 9:
                        message.type = 9;
                        break;
                    case "S_BABY":
                    case 10:
                        message.type = 10;
                        break;
                    case "S_WAGE_HIKE":
                    case 11:
                        message.type = 11;
                        break;
                    case "S_MARKET_CHANGE":
                    case 12:
                        message.type = 12;
                        break;
                    }
                    if (object.location != null)
                        message.location = object.location | 0;
                    return message;
                };

                /**
                 * Creates a plain object from a Scenario message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof pb.common.GameMap.Scenario
                 * @static
                 * @param {pb.common.GameMap.Scenario} message Scenario
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Scenario.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.type = options.enums === String ? "S_PB_FIRST_MUST_ZORE" : 0;
                        object.location = 0;
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.pb.common.SCENARIO_TYPE[message.type] : message.type;
                    if (message.location != null && message.hasOwnProperty("location"))
                        object.location = message.location;
                    return object;
                };

                /**
                 * Converts this Scenario to JSON.
                 * @function toJSON
                 * @memberof pb.common.GameMap.Scenario
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Scenario.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Scenario;
            })();

            return GameMap;
        })();

        common.MapItem = (function() {

            /**
             * Properties of a MapItem.
             * @memberof pb.common
             * @interface IMapItem
             * @property {Long|null} [id] MapItem id
             * @property {string|null} [name] MapItem name
             */

            /**
             * Constructs a new MapItem.
             * @memberof pb.common
             * @classdesc Represents a MapItem.
             * @implements IMapItem
             * @constructor
             * @param {pb.common.IMapItem=} [properties] Properties to set
             */
            function MapItem(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MapItem id.
             * @member {Long} id
             * @memberof pb.common.MapItem
             * @instance
             */
            MapItem.prototype.id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * MapItem name.
             * @member {string} name
             * @memberof pb.common.MapItem
             * @instance
             */
            MapItem.prototype.name = "";

            /**
             * Creates a new MapItem instance using the specified properties.
             * @function create
             * @memberof pb.common.MapItem
             * @static
             * @param {pb.common.IMapItem=} [properties] Properties to set
             * @returns {pb.common.MapItem} MapItem instance
             */
            MapItem.create = function create(properties) {
                return new MapItem(properties);
            };

            /**
             * Encodes the specified MapItem message. Does not implicitly {@link pb.common.MapItem.verify|verify} messages.
             * @function encode
             * @memberof pb.common.MapItem
             * @static
             * @param {pb.common.IMapItem} message MapItem message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MapItem.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.id);
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                return writer;
            };

            /**
             * Encodes the specified MapItem message, length delimited. Does not implicitly {@link pb.common.MapItem.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.MapItem
             * @static
             * @param {pb.common.IMapItem} message MapItem message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MapItem.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MapItem message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.MapItem
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.MapItem} MapItem
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MapItem.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.MapItem();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.int64();
                        break;
                    case 2:
                        message.name = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MapItem message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.MapItem
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.MapItem} MapItem
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MapItem.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MapItem message.
             * @function verify
             * @memberof pb.common.MapItem
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MapItem.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                        return "id: integer|Long expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                return null;
            };

            /**
             * Creates a MapItem message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.MapItem
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.MapItem} MapItem
             */
            MapItem.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.MapItem)
                    return object;
                var message = new $root.pb.common.MapItem();
                if (object.id != null)
                    if ($util.Long)
                        (message.id = $util.Long.fromValue(object.id)).unsigned = false;
                    else if (typeof object.id === "string")
                        message.id = parseInt(object.id, 10);
                    else if (typeof object.id === "number")
                        message.id = object.id;
                    else if (typeof object.id === "object")
                        message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber();
                if (object.name != null)
                    message.name = String(object.name);
                return message;
            };

            /**
             * Creates a plain object from a MapItem message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.MapItem
             * @static
             * @param {pb.common.MapItem} message MapItem
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MapItem.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.id = options.longs === String ? "0" : 0;
                    object.name = "";
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    if (typeof message.id === "number")
                        object.id = options.longs === String ? String(message.id) : message.id;
                    else
                        object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                return object;
            };

            /**
             * Converts this MapItem to JSON.
             * @function toJSON
             * @memberof pb.common.MapItem
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MapItem.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MapItem;
        })();

        common.Error = (function() {

            /**
             * Properties of an Error.
             * @memberof pb.common
             * @interface IError
             * @property {number|null} [code] Error code
             * @property {string|null} [message] Error message
             * @property {string|null} [stack] Error stack
             */

            /**
             * Constructs a new Error.
             * @memberof pb.common
             * @classdesc Represents an Error.
             * @implements IError
             * @constructor
             * @param {pb.common.IError=} [properties] Properties to set
             */
            function Error(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Error code.
             * @member {number} code
             * @memberof pb.common.Error
             * @instance
             */
            Error.prototype.code = 0;

            /**
             * Error message.
             * @member {string} message
             * @memberof pb.common.Error
             * @instance
             */
            Error.prototype.message = "";

            /**
             * Error stack.
             * @member {string} stack
             * @memberof pb.common.Error
             * @instance
             */
            Error.prototype.stack = "";

            /**
             * Creates a new Error instance using the specified properties.
             * @function create
             * @memberof pb.common.Error
             * @static
             * @param {pb.common.IError=} [properties] Properties to set
             * @returns {pb.common.Error} Error instance
             */
            Error.create = function create(properties) {
                return new Error(properties);
            };

            /**
             * Encodes the specified Error message. Does not implicitly {@link pb.common.Error.verify|verify} messages.
             * @function encode
             * @memberof pb.common.Error
             * @static
             * @param {pb.common.IError} message Error message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Error.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                if (message.message != null && message.hasOwnProperty("message"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                if (message.stack != null && message.hasOwnProperty("stack"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.stack);
                return writer;
            };

            /**
             * Encodes the specified Error message, length delimited. Does not implicitly {@link pb.common.Error.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.Error
             * @static
             * @param {pb.common.IError} message Error message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Error.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Error message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.Error
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.Error} Error
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Error.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.Error();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.code = reader.int32();
                        break;
                    case 2:
                        message.message = reader.string();
                        break;
                    case 3:
                        message.stack = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Error message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.Error
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.Error} Error
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Error.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Error message.
             * @function verify
             * @memberof pb.common.Error
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Error.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                if (message.message != null && message.hasOwnProperty("message"))
                    if (!$util.isString(message.message))
                        return "message: string expected";
                if (message.stack != null && message.hasOwnProperty("stack"))
                    if (!$util.isString(message.stack))
                        return "stack: string expected";
                return null;
            };

            /**
             * Creates an Error message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.Error
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.Error} Error
             */
            Error.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.Error)
                    return object;
                var message = new $root.pb.common.Error();
                if (object.code != null)
                    message.code = object.code | 0;
                if (object.message != null)
                    message.message = String(object.message);
                if (object.stack != null)
                    message.stack = String(object.stack);
                return message;
            };

            /**
             * Creates a plain object from an Error message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.Error
             * @static
             * @param {pb.common.Error} message Error
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Error.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.code = 0;
                    object.message = "";
                    object.stack = "";
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.message != null && message.hasOwnProperty("message"))
                    object.message = message.message;
                if (message.stack != null && message.hasOwnProperty("stack"))
                    object.stack = message.stack;
                return object;
            };

            /**
             * Converts this Error to JSON.
             * @function toJSON
             * @memberof pb.common.Error
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Error.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Error;
        })();

        common.StreamInitParam = (function() {

            /**
             * Properties of a StreamInitParam.
             * @memberof pb.common
             * @interface IStreamInitParam
             * @property {Long|null} [userId] StreamInitParam userId
             */

            /**
             * Constructs a new StreamInitParam.
             * @memberof pb.common
             * @classdesc Represents a StreamInitParam.
             * @implements IStreamInitParam
             * @constructor
             * @param {pb.common.IStreamInitParam=} [properties] Properties to set
             */
            function StreamInitParam(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * StreamInitParam userId.
             * @member {Long} userId
             * @memberof pb.common.StreamInitParam
             * @instance
             */
            StreamInitParam.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new StreamInitParam instance using the specified properties.
             * @function create
             * @memberof pb.common.StreamInitParam
             * @static
             * @param {pb.common.IStreamInitParam=} [properties] Properties to set
             * @returns {pb.common.StreamInitParam} StreamInitParam instance
             */
            StreamInitParam.create = function create(properties) {
                return new StreamInitParam(properties);
            };

            /**
             * Encodes the specified StreamInitParam message. Does not implicitly {@link pb.common.StreamInitParam.verify|verify} messages.
             * @function encode
             * @memberof pb.common.StreamInitParam
             * @static
             * @param {pb.common.IStreamInitParam} message StreamInitParam message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StreamInitParam.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userId);
                return writer;
            };

            /**
             * Encodes the specified StreamInitParam message, length delimited. Does not implicitly {@link pb.common.StreamInitParam.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.common.StreamInitParam
             * @static
             * @param {pb.common.IStreamInitParam} message StreamInitParam message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StreamInitParam.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a StreamInitParam message from the specified reader or buffer.
             * @function decode
             * @memberof pb.common.StreamInitParam
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.common.StreamInitParam} StreamInitParam
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StreamInitParam.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.common.StreamInitParam();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.userId = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a StreamInitParam message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.common.StreamInitParam
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.common.StreamInitParam} StreamInitParam
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StreamInitParam.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a StreamInitParam message.
             * @function verify
             * @memberof pb.common.StreamInitParam
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            StreamInitParam.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                return null;
            };

            /**
             * Creates a StreamInitParam message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.common.StreamInitParam
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.common.StreamInitParam} StreamInitParam
             */
            StreamInitParam.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.common.StreamInitParam)
                    return object;
                var message = new $root.pb.common.StreamInitParam();
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a StreamInitParam message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.common.StreamInitParam
             * @static
             * @param {pb.common.StreamInitParam} message StreamInitParam
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            StreamInitParam.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                return object;
            };

            /**
             * Converts this StreamInitParam to JSON.
             * @function toJSON
             * @memberof pb.common.StreamInitParam
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            StreamInitParam.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return StreamInitParam;
        })();

        /**
         * behavior enum.
         * @name pb.common.behavior
         * @enum {string}
         * @property {number} B_PB_FIRST_MUST_ZORE=0 B_PB_FIRST_MUST_ZORE value
         * @property {number} B_INIT=1 B_INIT value
         * @property {number} B_CHOOSE_ROLE=2 B_CHOOSE_ROLE value
         * @property {number} B_ROLL=3 B_ROLL value
         * @property {number} B_PAYDAY=4 B_PAYDAY value
         * @property {number} B_CHOICE_CHANCE=5 B_CHOICE_CHANCE value
         * @property {number} B_BUY=6 B_BUY value
         * @property {number} B_SELL=7 B_SELL value
         * @property {number} B_TRADE=8 B_TRADE value
         * @property {number} B_LOAN=9 B_LOAN value
         * @property {number} B_REPAY_LOAN=10 B_REPAY_LOAN value
         * @property {number} B_STOCK_TRANSACTION=11 B_STOCK_TRANSACTION value
         * @property {number} B_BABY=12 B_BABY value
         * @property {number} B_RED_PACKET=13 B_RED_PACKET value
         * @property {number} B_ACCIDENT=14 B_ACCIDENT value
         * @property {number} B_UNEMPLOYMENT=15 B_UNEMPLOYMENT value
         * @property {number} B_WAGE_HIKE=16 B_WAGE_HIKE value
         */
        common.behavior = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "B_PB_FIRST_MUST_ZORE"] = 0;
            values[valuesById[1] = "B_INIT"] = 1;
            values[valuesById[2] = "B_CHOOSE_ROLE"] = 2;
            values[valuesById[3] = "B_ROLL"] = 3;
            values[valuesById[4] = "B_PAYDAY"] = 4;
            values[valuesById[5] = "B_CHOICE_CHANCE"] = 5;
            values[valuesById[6] = "B_BUY"] = 6;
            values[valuesById[7] = "B_SELL"] = 7;
            values[valuesById[8] = "B_TRADE"] = 8;
            values[valuesById[9] = "B_LOAN"] = 9;
            values[valuesById[10] = "B_REPAY_LOAN"] = 10;
            values[valuesById[11] = "B_STOCK_TRANSACTION"] = 11;
            values[valuesById[12] = "B_BABY"] = 12;
            values[valuesById[13] = "B_RED_PACKET"] = 13;
            values[valuesById[14] = "B_ACCIDENT"] = 14;
            values[valuesById[15] = "B_UNEMPLOYMENT"] = 15;
            values[valuesById[16] = "B_WAGE_HIKE"] = 16;
            return values;
        })();

        /**
         * CmdID enum.
         * @name pb.common.CmdID
         * @enum {string}
         * @property {number} DEFAULT=0 DEFAULT value
         * @property {number} LOGIN=1 LOGIN value
         * @property {number} PUSH=3 PUSH value
         * @property {number} HEARBEAT=6 HEARBEAT value
         * @property {number} CHECK_PLAYING=10 CHECK_PLAYING value
         * @property {number} SIGNALLING=20 SIGNALLING value
         * @property {number} AFK=21 AFK value
         * @property {number} RE_CONNECT=22 RE_CONNECT value
         * @property {number} LOBBY_ACTION=1000 LOBBY_ACTION value
         * @property {number} MATCHING=1005 MATCHING value
         * @property {number} EXIT_MATCH=1006 EXIT_MATCH value
         * @property {number} PREPARE=1015 PREPARE value
         * @property {number} ANYONE_TIMEOUT=1016 ANYONE_TIMEOUT value
         * @property {number} ALL_READY=1020 ALL_READY value
         * @property {number} START_MATCHING=1021 START_MATCHING value
         * @property {number} EXIT_ROOM=1022 EXIT_ROOM value
         * @property {number} ROOM_INFO=1023 ROOM_INFO value
         * @property {number} CREATE_ROOM=1024 CREATE_ROOM value
         * @property {number} GET_AVAILABLE_ROOM_SIZE=1025 GET_AVAILABLE_ROOM_SIZE value
         * @property {number} INVITE=1026 INVITE value
         * @property {number} ENTER_ROOM=1027 ENTER_ROOM value
         * @property {number} GET_PLAYER_STATE=1029 GET_PLAYER_STATE value
         * @property {number} REMOVE_PLAYER_FROM_ROOM=1030 REMOVE_PLAYER_FROM_ROOM value
         * @property {number} UPDATE_ROOM_OPTION=1031 UPDATE_ROOM_OPTION value
         * @property {number} GET_AVAILABLE_MAPS=1032 GET_AVAILABLE_MAPS value
         * @property {number} GAME_ACTION=2000 GAME_ACTION value
         * @property {number} SYNC_STATE=2001 SYNC_STATE value
         * @property {number} GET_ROLES=2002 GET_ROLES value
         * @property {number} SELECT_ROLE=2003 SELECT_ROLE value
         * @property {number} PLAYER_OUT=2004 PLAYER_OUT value
         * @property {number} GAME_OVER=2005 GAME_OVER value
         * @property {number} QUIT=2006 QUIT value
         * @property {number} TEST_PUSH=2007 TEST_PUSH value
         * @property {number} PLAYER_BEGIN=2008 PLAYER_BEGIN value
         * @property {number} PASS=2009 PASS value
         * @property {number} NEXT_ROLL=2010 NEXT_ROLL value
         * @property {number} ROLL=2011 ROLL value
         * @property {number} PLAYERS_ALL_SELECTED_ROLE=2012 PLAYERS_ALL_SELECTED_ROLE value
         * @property {number} CHOOSE_CHANCE=2111 CHOOSE_CHANCE value
         * @property {number} BUY=2112 BUY value
         * @property {number} GIVEUP_CHANCE=2113 GIVEUP_CHANCE value
         * @property {number} SELL_STOCK=2114 SELL_STOCK value
         * @property {number} START_AUCTION=2115 START_AUCTION value
         * @property {number} GIVEUP_AUCTION=2116 GIVEUP_AUCTION value
         * @property {number} OFFER_AUCTION_BID=2118 OFFER_AUCTION_BID value
         * @property {number} AUCTION_TRY_RAISE=2119 AUCTION_TRY_RAISE value
         * @property {number} AUCTION_RESULT=2120 AUCTION_RESULT value
         * @property {number} TRY_PAY=2121 TRY_PAY value
         * @property {number} BORROW_MONEY_QUOTAS=2130 BORROW_MONEY_QUOTAS value
         * @property {number} BORROW_MONEY_CONFIRM=2132 BORROW_MONEY_CONFIRM value
         * @property {number} GET_CAN_SELL_PLAYER_ASSET=2133 GET_CAN_SELL_PLAYER_ASSET value
         * @property {number} SELL=2134 SELL value
         * @property {number} LOAN=2135 LOAN value
         * @property {number} REPAY_LOAN=2136 REPAY_LOAN value
         * @property {number} LOAN_QUALIFICATION=2137 LOAN_QUALIFICATION value
         * @property {number} REPAY_LIABILITIES=2138 REPAY_LIABILITIES value
         * @property {number} COMPLETE_SALARY=2140 COMPLETE_SALARY value
         * @property {number} CONFIRM_BANKRUPT=2141 CONFIRM_BANKRUPT value
         * @property {number} PAY_ACCIDENT_CONSUME=2150 PAY_ACCIDENT_CONSUME value
         * @property {number} CONFIRM_MARKET_CHANGE=2151 CONFIRM_MARKET_CHANGE value
         * @property {number} PAY_CHILD_BORN_REDPACKET=2160 PAY_CHILD_BORN_REDPACKET value
         * @property {number} IGNORE_CHILD_BORN=2161 IGNORE_CHILD_BORN value
         * @property {number} WAGE_HIKE_ROLL=2170 WAGE_HIKE_ROLL value
         * @property {number} UNEMPLOYMENT_ACK=2180 UNEMPLOYMENT_ACK value
         * @property {number} COMPLETE_MARKET=2190 COMPLETE_MARKET value
         * @property {number} GET_UNIQUE_SCENARIO_IMG_NAME=2191 GET_UNIQUE_SCENARIO_IMG_NAME value
         * @property {number} GET_FINANCIAL_REPORTS=3000 GET_FINANCIAL_REPORTS value
         * @property {number} GET_PLAYER_ASSET=3001 GET_PLAYER_ASSET value
         * @property {number} GET_PLAYER_LOAN_ASSET=3002 GET_PLAYER_LOAN_ASSET value
         * @property {number} GET_STATEMENT=3003 GET_STATEMENT value
         * @property {number} SELL_ASSETS=3004 SELL_ASSETS value
         * @property {number} DISHONORABLE_PUNISH=3005 DISHONORABLE_PUNISH value
         */
        common.CmdID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "DEFAULT"] = 0;
            values[valuesById[1] = "LOGIN"] = 1;
            values[valuesById[3] = "PUSH"] = 3;
            values[valuesById[6] = "HEARBEAT"] = 6;
            values[valuesById[10] = "CHECK_PLAYING"] = 10;
            values[valuesById[20] = "SIGNALLING"] = 20;
            values[valuesById[21] = "AFK"] = 21;
            values[valuesById[22] = "RE_CONNECT"] = 22;
            values[valuesById[1000] = "LOBBY_ACTION"] = 1000;
            values[valuesById[1005] = "MATCHING"] = 1005;
            values[valuesById[1006] = "EXIT_MATCH"] = 1006;
            values[valuesById[1015] = "PREPARE"] = 1015;
            values[valuesById[1016] = "ANYONE_TIMEOUT"] = 1016;
            values[valuesById[1020] = "ALL_READY"] = 1020;
            values[valuesById[1021] = "START_MATCHING"] = 1021;
            values[valuesById[1022] = "EXIT_ROOM"] = 1022;
            values[valuesById[1023] = "ROOM_INFO"] = 1023;
            values[valuesById[1024] = "CREATE_ROOM"] = 1024;
            values[valuesById[1025] = "GET_AVAILABLE_ROOM_SIZE"] = 1025;
            values[valuesById[1026] = "INVITE"] = 1026;
            values[valuesById[1027] = "ENTER_ROOM"] = 1027;
            values[valuesById[1029] = "GET_PLAYER_STATE"] = 1029;
            values[valuesById[1030] = "REMOVE_PLAYER_FROM_ROOM"] = 1030;
            values[valuesById[1031] = "UPDATE_ROOM_OPTION"] = 1031;
            values[valuesById[1032] = "GET_AVAILABLE_MAPS"] = 1032;
            values[valuesById[2000] = "GAME_ACTION"] = 2000;
            values[valuesById[2001] = "SYNC_STATE"] = 2001;
            values[valuesById[2002] = "GET_ROLES"] = 2002;
            values[valuesById[2003] = "SELECT_ROLE"] = 2003;
            values[valuesById[2004] = "PLAYER_OUT"] = 2004;
            values[valuesById[2005] = "GAME_OVER"] = 2005;
            values[valuesById[2006] = "QUIT"] = 2006;
            values[valuesById[2007] = "TEST_PUSH"] = 2007;
            values[valuesById[2008] = "PLAYER_BEGIN"] = 2008;
            values[valuesById[2009] = "PASS"] = 2009;
            values[valuesById[2010] = "NEXT_ROLL"] = 2010;
            values[valuesById[2011] = "ROLL"] = 2011;
            values[valuesById[2012] = "PLAYERS_ALL_SELECTED_ROLE"] = 2012;
            values[valuesById[2111] = "CHOOSE_CHANCE"] = 2111;
            values[valuesById[2112] = "BUY"] = 2112;
            values[valuesById[2113] = "GIVEUP_CHANCE"] = 2113;
            values[valuesById[2114] = "SELL_STOCK"] = 2114;
            values[valuesById[2115] = "START_AUCTION"] = 2115;
            values[valuesById[2116] = "GIVEUP_AUCTION"] = 2116;
            values[valuesById[2118] = "OFFER_AUCTION_BID"] = 2118;
            values[valuesById[2119] = "AUCTION_TRY_RAISE"] = 2119;
            values[valuesById[2120] = "AUCTION_RESULT"] = 2120;
            values[valuesById[2121] = "TRY_PAY"] = 2121;
            values[valuesById[2130] = "BORROW_MONEY_QUOTAS"] = 2130;
            values[valuesById[2132] = "BORROW_MONEY_CONFIRM"] = 2132;
            values[valuesById[2133] = "GET_CAN_SELL_PLAYER_ASSET"] = 2133;
            values[valuesById[2134] = "SELL"] = 2134;
            values[valuesById[2135] = "LOAN"] = 2135;
            values[valuesById[2136] = "REPAY_LOAN"] = 2136;
            values[valuesById[2137] = "LOAN_QUALIFICATION"] = 2137;
            values[valuesById[2138] = "REPAY_LIABILITIES"] = 2138;
            values[valuesById[2140] = "COMPLETE_SALARY"] = 2140;
            values[valuesById[2141] = "CONFIRM_BANKRUPT"] = 2141;
            values[valuesById[2150] = "PAY_ACCIDENT_CONSUME"] = 2150;
            values[valuesById[2151] = "CONFIRM_MARKET_CHANGE"] = 2151;
            values[valuesById[2160] = "PAY_CHILD_BORN_REDPACKET"] = 2160;
            values[valuesById[2161] = "IGNORE_CHILD_BORN"] = 2161;
            values[valuesById[2170] = "WAGE_HIKE_ROLL"] = 2170;
            values[valuesById[2180] = "UNEMPLOYMENT_ACK"] = 2180;
            values[valuesById[2190] = "COMPLETE_MARKET"] = 2190;
            values[valuesById[2191] = "GET_UNIQUE_SCENARIO_IMG_NAME"] = 2191;
            values[valuesById[3000] = "GET_FINANCIAL_REPORTS"] = 3000;
            values[valuesById[3001] = "GET_PLAYER_ASSET"] = 3001;
            values[valuesById[3002] = "GET_PLAYER_LOAN_ASSET"] = 3002;
            values[valuesById[3003] = "GET_STATEMENT"] = 3003;
            values[valuesById[3004] = "SELL_ASSETS"] = 3004;
            values[valuesById[3005] = "DISHONORABLE_PUNISH"] = 3005;
            return values;
        })();

        return common;
    })();

    pb.lobby = (function() {

        /**
         * Namespace lobby.
         * @memberof pb
         * @namespace
         */
        var lobby = {};

        lobby.GameNodeMessage = (function() {

            /**
             * Properties of a GameNodeMessage.
             * @memberof pb.lobby
             * @interface IGameNodeMessage
             * @property {string|null} [uuid] GameNodeMessage uuid
             * @property {string|null} [address] GameNodeMessage address
             */

            /**
             * Constructs a new GameNodeMessage.
             * @memberof pb.lobby
             * @classdesc Represents a GameNodeMessage.
             * @implements IGameNodeMessage
             * @constructor
             * @param {pb.lobby.IGameNodeMessage=} [properties] Properties to set
             */
            function GameNodeMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GameNodeMessage uuid.
             * @member {string} uuid
             * @memberof pb.lobby.GameNodeMessage
             * @instance
             */
            GameNodeMessage.prototype.uuid = "";

            /**
             * GameNodeMessage address.
             * @member {string} address
             * @memberof pb.lobby.GameNodeMessage
             * @instance
             */
            GameNodeMessage.prototype.address = "";

            /**
             * Creates a new GameNodeMessage instance using the specified properties.
             * @function create
             * @memberof pb.lobby.GameNodeMessage
             * @static
             * @param {pb.lobby.IGameNodeMessage=} [properties] Properties to set
             * @returns {pb.lobby.GameNodeMessage} GameNodeMessage instance
             */
            GameNodeMessage.create = function create(properties) {
                return new GameNodeMessage(properties);
            };

            /**
             * Encodes the specified GameNodeMessage message. Does not implicitly {@link pb.lobby.GameNodeMessage.verify|verify} messages.
             * @function encode
             * @memberof pb.lobby.GameNodeMessage
             * @static
             * @param {pb.lobby.IGameNodeMessage} message GameNodeMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameNodeMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.uuid != null && message.hasOwnProperty("uuid"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.uuid);
                if (message.address != null && message.hasOwnProperty("address"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.address);
                return writer;
            };

            /**
             * Encodes the specified GameNodeMessage message, length delimited. Does not implicitly {@link pb.lobby.GameNodeMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.lobby.GameNodeMessage
             * @static
             * @param {pb.lobby.IGameNodeMessage} message GameNodeMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameNodeMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GameNodeMessage message from the specified reader or buffer.
             * @function decode
             * @memberof pb.lobby.GameNodeMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.lobby.GameNodeMessage} GameNodeMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameNodeMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.lobby.GameNodeMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.uuid = reader.string();
                        break;
                    case 2:
                        message.address = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GameNodeMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.lobby.GameNodeMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.lobby.GameNodeMessage} GameNodeMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameNodeMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GameNodeMessage message.
             * @function verify
             * @memberof pb.lobby.GameNodeMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GameNodeMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uuid != null && message.hasOwnProperty("uuid"))
                    if (!$util.isString(message.uuid))
                        return "uuid: string expected";
                if (message.address != null && message.hasOwnProperty("address"))
                    if (!$util.isString(message.address))
                        return "address: string expected";
                return null;
            };

            /**
             * Creates a GameNodeMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.lobby.GameNodeMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.lobby.GameNodeMessage} GameNodeMessage
             */
            GameNodeMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.lobby.GameNodeMessage)
                    return object;
                var message = new $root.pb.lobby.GameNodeMessage();
                if (object.uuid != null)
                    message.uuid = String(object.uuid);
                if (object.address != null)
                    message.address = String(object.address);
                return message;
            };

            /**
             * Creates a plain object from a GameNodeMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.lobby.GameNodeMessage
             * @static
             * @param {pb.lobby.GameNodeMessage} message GameNodeMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GameNodeMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.uuid = "";
                    object.address = "";
                }
                if (message.uuid != null && message.hasOwnProperty("uuid"))
                    object.uuid = message.uuid;
                if (message.address != null && message.hasOwnProperty("address"))
                    object.address = message.address;
                return object;
            };

            /**
             * Converts this GameNodeMessage to JSON.
             * @function toJSON
             * @memberof pb.lobby.GameNodeMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GameNodeMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GameNodeMessage;
        })();

        lobby.CheckGameRoomRequest = (function() {

            /**
             * Properties of a CheckGameRoomRequest.
             * @memberof pb.lobby
             * @interface ICheckGameRoomRequest
             * @property {Long|null} [userId] CheckGameRoomRequest userId
             */

            /**
             * Constructs a new CheckGameRoomRequest.
             * @memberof pb.lobby
             * @classdesc Represents a CheckGameRoomRequest.
             * @implements ICheckGameRoomRequest
             * @constructor
             * @param {pb.lobby.ICheckGameRoomRequest=} [properties] Properties to set
             */
            function CheckGameRoomRequest(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CheckGameRoomRequest userId.
             * @member {Long} userId
             * @memberof pb.lobby.CheckGameRoomRequest
             * @instance
             */
            CheckGameRoomRequest.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new CheckGameRoomRequest instance using the specified properties.
             * @function create
             * @memberof pb.lobby.CheckGameRoomRequest
             * @static
             * @param {pb.lobby.ICheckGameRoomRequest=} [properties] Properties to set
             * @returns {pb.lobby.CheckGameRoomRequest} CheckGameRoomRequest instance
             */
            CheckGameRoomRequest.create = function create(properties) {
                return new CheckGameRoomRequest(properties);
            };

            /**
             * Encodes the specified CheckGameRoomRequest message. Does not implicitly {@link pb.lobby.CheckGameRoomRequest.verify|verify} messages.
             * @function encode
             * @memberof pb.lobby.CheckGameRoomRequest
             * @static
             * @param {pb.lobby.ICheckGameRoomRequest} message CheckGameRoomRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CheckGameRoomRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userId);
                return writer;
            };

            /**
             * Encodes the specified CheckGameRoomRequest message, length delimited. Does not implicitly {@link pb.lobby.CheckGameRoomRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.lobby.CheckGameRoomRequest
             * @static
             * @param {pb.lobby.ICheckGameRoomRequest} message CheckGameRoomRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CheckGameRoomRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CheckGameRoomRequest message from the specified reader or buffer.
             * @function decode
             * @memberof pb.lobby.CheckGameRoomRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.lobby.CheckGameRoomRequest} CheckGameRoomRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CheckGameRoomRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.lobby.CheckGameRoomRequest();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.userId = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CheckGameRoomRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.lobby.CheckGameRoomRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.lobby.CheckGameRoomRequest} CheckGameRoomRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CheckGameRoomRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CheckGameRoomRequest message.
             * @function verify
             * @memberof pb.lobby.CheckGameRoomRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CheckGameRoomRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                return null;
            };

            /**
             * Creates a CheckGameRoomRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.lobby.CheckGameRoomRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.lobby.CheckGameRoomRequest} CheckGameRoomRequest
             */
            CheckGameRoomRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.lobby.CheckGameRoomRequest)
                    return object;
                var message = new $root.pb.lobby.CheckGameRoomRequest();
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a CheckGameRoomRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.lobby.CheckGameRoomRequest
             * @static
             * @param {pb.lobby.CheckGameRoomRequest} message CheckGameRoomRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CheckGameRoomRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                return object;
            };

            /**
             * Converts this CheckGameRoomRequest to JSON.
             * @function toJSON
             * @memberof pb.lobby.CheckGameRoomRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CheckGameRoomRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CheckGameRoomRequest;
        })();

        lobby.CheckGameRoomResponse = (function() {

            /**
             * Properties of a CheckGameRoomResponse.
             * @memberof pb.lobby
             * @interface ICheckGameRoomResponse
             * @property {Long|null} [gameId] CheckGameRoomResponse gameId
             * @property {string|null} [address] CheckGameRoomResponse address
             * @property {pb.common.PlayerState|null} [state] CheckGameRoomResponse state
             * @property {Array.<Long>|null} [userIds] CheckGameRoomResponse userIds
             * @property {pb.common.IRoomInfo|null} [room] CheckGameRoomResponse room
             */

            /**
             * Constructs a new CheckGameRoomResponse.
             * @memberof pb.lobby
             * @classdesc Represents a CheckGameRoomResponse.
             * @implements ICheckGameRoomResponse
             * @constructor
             * @param {pb.lobby.ICheckGameRoomResponse=} [properties] Properties to set
             */
            function CheckGameRoomResponse(properties) {
                this.userIds = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CheckGameRoomResponse gameId.
             * @member {Long} gameId
             * @memberof pb.lobby.CheckGameRoomResponse
             * @instance
             */
            CheckGameRoomResponse.prototype.gameId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * CheckGameRoomResponse address.
             * @member {string} address
             * @memberof pb.lobby.CheckGameRoomResponse
             * @instance
             */
            CheckGameRoomResponse.prototype.address = "";

            /**
             * CheckGameRoomResponse state.
             * @member {pb.common.PlayerState} state
             * @memberof pb.lobby.CheckGameRoomResponse
             * @instance
             */
            CheckGameRoomResponse.prototype.state = 0;

            /**
             * CheckGameRoomResponse userIds.
             * @member {Array.<Long>} userIds
             * @memberof pb.lobby.CheckGameRoomResponse
             * @instance
             */
            CheckGameRoomResponse.prototype.userIds = $util.emptyArray;

            /**
             * CheckGameRoomResponse room.
             * @member {pb.common.IRoomInfo|null|undefined} room
             * @memberof pb.lobby.CheckGameRoomResponse
             * @instance
             */
            CheckGameRoomResponse.prototype.room = null;

            /**
             * Creates a new CheckGameRoomResponse instance using the specified properties.
             * @function create
             * @memberof pb.lobby.CheckGameRoomResponse
             * @static
             * @param {pb.lobby.ICheckGameRoomResponse=} [properties] Properties to set
             * @returns {pb.lobby.CheckGameRoomResponse} CheckGameRoomResponse instance
             */
            CheckGameRoomResponse.create = function create(properties) {
                return new CheckGameRoomResponse(properties);
            };

            /**
             * Encodes the specified CheckGameRoomResponse message. Does not implicitly {@link pb.lobby.CheckGameRoomResponse.verify|verify} messages.
             * @function encode
             * @memberof pb.lobby.CheckGameRoomResponse
             * @static
             * @param {pb.lobby.ICheckGameRoomResponse} message CheckGameRoomResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CheckGameRoomResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.gameId);
                if (message.address != null && message.hasOwnProperty("address"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.address);
                if (message.state != null && message.hasOwnProperty("state"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.state);
                if (message.userIds != null && message.userIds.length) {
                    writer.uint32(/* id 4, wireType 2 =*/34).fork();
                    for (var i = 0; i < message.userIds.length; ++i)
                        writer.int64(message.userIds[i]);
                    writer.ldelim();
                }
                if (message.room != null && message.hasOwnProperty("room"))
                    $root.pb.common.RoomInfo.encode(message.room, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified CheckGameRoomResponse message, length delimited. Does not implicitly {@link pb.lobby.CheckGameRoomResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.lobby.CheckGameRoomResponse
             * @static
             * @param {pb.lobby.ICheckGameRoomResponse} message CheckGameRoomResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CheckGameRoomResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CheckGameRoomResponse message from the specified reader or buffer.
             * @function decode
             * @memberof pb.lobby.CheckGameRoomResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.lobby.CheckGameRoomResponse} CheckGameRoomResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CheckGameRoomResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.lobby.CheckGameRoomResponse();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.gameId = reader.int64();
                        break;
                    case 2:
                        message.address = reader.string();
                        break;
                    case 3:
                        message.state = reader.int32();
                        break;
                    case 4:
                        if (!(message.userIds && message.userIds.length))
                            message.userIds = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.userIds.push(reader.int64());
                        } else
                            message.userIds.push(reader.int64());
                        break;
                    case 5:
                        message.room = $root.pb.common.RoomInfo.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CheckGameRoomResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.lobby.CheckGameRoomResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.lobby.CheckGameRoomResponse} CheckGameRoomResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CheckGameRoomResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CheckGameRoomResponse message.
             * @function verify
             * @memberof pb.lobby.CheckGameRoomResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CheckGameRoomResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    if (!$util.isInteger(message.gameId) && !(message.gameId && $util.isInteger(message.gameId.low) && $util.isInteger(message.gameId.high)))
                        return "gameId: integer|Long expected";
                if (message.address != null && message.hasOwnProperty("address"))
                    if (!$util.isString(message.address))
                        return "address: string expected";
                if (message.state != null && message.hasOwnProperty("state"))
                    switch (message.state) {
                    default:
                        return "state: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                        break;
                    }
                if (message.userIds != null && message.hasOwnProperty("userIds")) {
                    if (!Array.isArray(message.userIds))
                        return "userIds: array expected";
                    for (var i = 0; i < message.userIds.length; ++i)
                        if (!$util.isInteger(message.userIds[i]) && !(message.userIds[i] && $util.isInteger(message.userIds[i].low) && $util.isInteger(message.userIds[i].high)))
                            return "userIds: integer|Long[] expected";
                }
                if (message.room != null && message.hasOwnProperty("room")) {
                    var error = $root.pb.common.RoomInfo.verify(message.room);
                    if (error)
                        return "room." + error;
                }
                return null;
            };

            /**
             * Creates a CheckGameRoomResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.lobby.CheckGameRoomResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.lobby.CheckGameRoomResponse} CheckGameRoomResponse
             */
            CheckGameRoomResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.lobby.CheckGameRoomResponse)
                    return object;
                var message = new $root.pb.lobby.CheckGameRoomResponse();
                if (object.gameId != null)
                    if ($util.Long)
                        (message.gameId = $util.Long.fromValue(object.gameId)).unsigned = false;
                    else if (typeof object.gameId === "string")
                        message.gameId = parseInt(object.gameId, 10);
                    else if (typeof object.gameId === "number")
                        message.gameId = object.gameId;
                    else if (typeof object.gameId === "object")
                        message.gameId = new $util.LongBits(object.gameId.low >>> 0, object.gameId.high >>> 0).toNumber();
                if (object.address != null)
                    message.address = String(object.address);
                switch (object.state) {
                case "PLAYER_STATE_BEGIN":
                case 0:
                    message.state = 0;
                    break;
                case "PLAYER_STATE_IN_ROOM":
                case 1:
                    message.state = 1;
                    break;
                case "PLAYER_STATE_MATCHING":
                case 2:
                    message.state = 2;
                    break;
                case "PLAYER_STATE_MATCHED":
                case 3:
                    message.state = 3;
                    break;
                case "PLAYER_STATE_READY":
                case 4:
                    message.state = 4;
                    break;
                case "PLAYER_STATE_PLAYING":
                case 5:
                    message.state = 5;
                    break;
                }
                if (object.userIds) {
                    if (!Array.isArray(object.userIds))
                        throw TypeError(".pb.lobby.CheckGameRoomResponse.userIds: array expected");
                    message.userIds = [];
                    for (var i = 0; i < object.userIds.length; ++i)
                        if ($util.Long)
                            (message.userIds[i] = $util.Long.fromValue(object.userIds[i])).unsigned = false;
                        else if (typeof object.userIds[i] === "string")
                            message.userIds[i] = parseInt(object.userIds[i], 10);
                        else if (typeof object.userIds[i] === "number")
                            message.userIds[i] = object.userIds[i];
                        else if (typeof object.userIds[i] === "object")
                            message.userIds[i] = new $util.LongBits(object.userIds[i].low >>> 0, object.userIds[i].high >>> 0).toNumber();
                }
                if (object.room != null) {
                    if (typeof object.room !== "object")
                        throw TypeError(".pb.lobby.CheckGameRoomResponse.room: object expected");
                    message.room = $root.pb.common.RoomInfo.fromObject(object.room);
                }
                return message;
            };

            /**
             * Creates a plain object from a CheckGameRoomResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.lobby.CheckGameRoomResponse
             * @static
             * @param {pb.lobby.CheckGameRoomResponse} message CheckGameRoomResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CheckGameRoomResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.userIds = [];
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.gameId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.gameId = options.longs === String ? "0" : 0;
                    object.address = "";
                    object.state = options.enums === String ? "PLAYER_STATE_BEGIN" : 0;
                    object.room = null;
                }
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    if (typeof message.gameId === "number")
                        object.gameId = options.longs === String ? String(message.gameId) : message.gameId;
                    else
                        object.gameId = options.longs === String ? $util.Long.prototype.toString.call(message.gameId) : options.longs === Number ? new $util.LongBits(message.gameId.low >>> 0, message.gameId.high >>> 0).toNumber() : message.gameId;
                if (message.address != null && message.hasOwnProperty("address"))
                    object.address = message.address;
                if (message.state != null && message.hasOwnProperty("state"))
                    object.state = options.enums === String ? $root.pb.common.PlayerState[message.state] : message.state;
                if (message.userIds && message.userIds.length) {
                    object.userIds = [];
                    for (var j = 0; j < message.userIds.length; ++j)
                        if (typeof message.userIds[j] === "number")
                            object.userIds[j] = options.longs === String ? String(message.userIds[j]) : message.userIds[j];
                        else
                            object.userIds[j] = options.longs === String ? $util.Long.prototype.toString.call(message.userIds[j]) : options.longs === Number ? new $util.LongBits(message.userIds[j].low >>> 0, message.userIds[j].high >>> 0).toNumber() : message.userIds[j];
                }
                if (message.room != null && message.hasOwnProperty("room"))
                    object.room = $root.pb.common.RoomInfo.toObject(message.room, options);
                return object;
            };

            /**
             * Converts this CheckGameRoomResponse to JSON.
             * @function toJSON
             * @memberof pb.lobby.CheckGameRoomResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CheckGameRoomResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CheckGameRoomResponse;
        })();

        lobby.ResetPlayerRequest = (function() {

            /**
             * Properties of a ResetPlayerRequest.
             * @memberof pb.lobby
             * @interface IResetPlayerRequest
             * @property {Long|null} [userId] ResetPlayerRequest userId
             */

            /**
             * Constructs a new ResetPlayerRequest.
             * @memberof pb.lobby
             * @classdesc Represents a ResetPlayerRequest.
             * @implements IResetPlayerRequest
             * @constructor
             * @param {pb.lobby.IResetPlayerRequest=} [properties] Properties to set
             */
            function ResetPlayerRequest(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResetPlayerRequest userId.
             * @member {Long} userId
             * @memberof pb.lobby.ResetPlayerRequest
             * @instance
             */
            ResetPlayerRequest.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new ResetPlayerRequest instance using the specified properties.
             * @function create
             * @memberof pb.lobby.ResetPlayerRequest
             * @static
             * @param {pb.lobby.IResetPlayerRequest=} [properties] Properties to set
             * @returns {pb.lobby.ResetPlayerRequest} ResetPlayerRequest instance
             */
            ResetPlayerRequest.create = function create(properties) {
                return new ResetPlayerRequest(properties);
            };

            /**
             * Encodes the specified ResetPlayerRequest message. Does not implicitly {@link pb.lobby.ResetPlayerRequest.verify|verify} messages.
             * @function encode
             * @memberof pb.lobby.ResetPlayerRequest
             * @static
             * @param {pb.lobby.IResetPlayerRequest} message ResetPlayerRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResetPlayerRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userId);
                return writer;
            };

            /**
             * Encodes the specified ResetPlayerRequest message, length delimited. Does not implicitly {@link pb.lobby.ResetPlayerRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.lobby.ResetPlayerRequest
             * @static
             * @param {pb.lobby.IResetPlayerRequest} message ResetPlayerRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResetPlayerRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResetPlayerRequest message from the specified reader or buffer.
             * @function decode
             * @memberof pb.lobby.ResetPlayerRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.lobby.ResetPlayerRequest} ResetPlayerRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResetPlayerRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.lobby.ResetPlayerRequest();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.userId = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResetPlayerRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.lobby.ResetPlayerRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.lobby.ResetPlayerRequest} ResetPlayerRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResetPlayerRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResetPlayerRequest message.
             * @function verify
             * @memberof pb.lobby.ResetPlayerRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResetPlayerRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                return null;
            };

            /**
             * Creates a ResetPlayerRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.lobby.ResetPlayerRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.lobby.ResetPlayerRequest} ResetPlayerRequest
             */
            ResetPlayerRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.lobby.ResetPlayerRequest)
                    return object;
                var message = new $root.pb.lobby.ResetPlayerRequest();
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a ResetPlayerRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.lobby.ResetPlayerRequest
             * @static
             * @param {pb.lobby.ResetPlayerRequest} message ResetPlayerRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResetPlayerRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                return object;
            };

            /**
             * Converts this ResetPlayerRequest to JSON.
             * @function toJSON
             * @memberof pb.lobby.ResetPlayerRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResetPlayerRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ResetPlayerRequest;
        })();

        lobby.EndGameRequest = (function() {

            /**
             * Properties of an EndGameRequest.
             * @memberof pb.lobby
             * @interface IEndGameRequest
             * @property {Long|null} [gameId] EndGameRequest gameId
             * @property {Array.<pb.lobby.EndGameRequest.IPlayer>|null} [players] EndGameRequest players
             */

            /**
             * Constructs a new EndGameRequest.
             * @memberof pb.lobby
             * @classdesc Represents an EndGameRequest.
             * @implements IEndGameRequest
             * @constructor
             * @param {pb.lobby.IEndGameRequest=} [properties] Properties to set
             */
            function EndGameRequest(properties) {
                this.players = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EndGameRequest gameId.
             * @member {Long} gameId
             * @memberof pb.lobby.EndGameRequest
             * @instance
             */
            EndGameRequest.prototype.gameId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * EndGameRequest players.
             * @member {Array.<pb.lobby.EndGameRequest.IPlayer>} players
             * @memberof pb.lobby.EndGameRequest
             * @instance
             */
            EndGameRequest.prototype.players = $util.emptyArray;

            /**
             * Creates a new EndGameRequest instance using the specified properties.
             * @function create
             * @memberof pb.lobby.EndGameRequest
             * @static
             * @param {pb.lobby.IEndGameRequest=} [properties] Properties to set
             * @returns {pb.lobby.EndGameRequest} EndGameRequest instance
             */
            EndGameRequest.create = function create(properties) {
                return new EndGameRequest(properties);
            };

            /**
             * Encodes the specified EndGameRequest message. Does not implicitly {@link pb.lobby.EndGameRequest.verify|verify} messages.
             * @function encode
             * @memberof pb.lobby.EndGameRequest
             * @static
             * @param {pb.lobby.IEndGameRequest} message EndGameRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EndGameRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.gameId);
                if (message.players != null && message.players.length)
                    for (var i = 0; i < message.players.length; ++i)
                        $root.pb.lobby.EndGameRequest.Player.encode(message.players[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EndGameRequest message, length delimited. Does not implicitly {@link pb.lobby.EndGameRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.lobby.EndGameRequest
             * @static
             * @param {pb.lobby.IEndGameRequest} message EndGameRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EndGameRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EndGameRequest message from the specified reader or buffer.
             * @function decode
             * @memberof pb.lobby.EndGameRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.lobby.EndGameRequest} EndGameRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EndGameRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.lobby.EndGameRequest();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.gameId = reader.int64();
                        break;
                    case 2:
                        if (!(message.players && message.players.length))
                            message.players = [];
                        message.players.push($root.pb.lobby.EndGameRequest.Player.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EndGameRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.lobby.EndGameRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.lobby.EndGameRequest} EndGameRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EndGameRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EndGameRequest message.
             * @function verify
             * @memberof pb.lobby.EndGameRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EndGameRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    if (!$util.isInteger(message.gameId) && !(message.gameId && $util.isInteger(message.gameId.low) && $util.isInteger(message.gameId.high)))
                        return "gameId: integer|Long expected";
                if (message.players != null && message.hasOwnProperty("players")) {
                    if (!Array.isArray(message.players))
                        return "players: array expected";
                    for (var i = 0; i < message.players.length; ++i) {
                        var error = $root.pb.lobby.EndGameRequest.Player.verify(message.players[i]);
                        if (error)
                            return "players." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an EndGameRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.lobby.EndGameRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.lobby.EndGameRequest} EndGameRequest
             */
            EndGameRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.lobby.EndGameRequest)
                    return object;
                var message = new $root.pb.lobby.EndGameRequest();
                if (object.gameId != null)
                    if ($util.Long)
                        (message.gameId = $util.Long.fromValue(object.gameId)).unsigned = false;
                    else if (typeof object.gameId === "string")
                        message.gameId = parseInt(object.gameId, 10);
                    else if (typeof object.gameId === "number")
                        message.gameId = object.gameId;
                    else if (typeof object.gameId === "object")
                        message.gameId = new $util.LongBits(object.gameId.low >>> 0, object.gameId.high >>> 0).toNumber();
                if (object.players) {
                    if (!Array.isArray(object.players))
                        throw TypeError(".pb.lobby.EndGameRequest.players: array expected");
                    message.players = [];
                    for (var i = 0; i < object.players.length; ++i) {
                        if (typeof object.players[i] !== "object")
                            throw TypeError(".pb.lobby.EndGameRequest.players: object expected");
                        message.players[i] = $root.pb.lobby.EndGameRequest.Player.fromObject(object.players[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an EndGameRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.lobby.EndGameRequest
             * @static
             * @param {pb.lobby.EndGameRequest} message EndGameRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EndGameRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.players = [];
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.gameId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.gameId = options.longs === String ? "0" : 0;
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    if (typeof message.gameId === "number")
                        object.gameId = options.longs === String ? String(message.gameId) : message.gameId;
                    else
                        object.gameId = options.longs === String ? $util.Long.prototype.toString.call(message.gameId) : options.longs === Number ? new $util.LongBits(message.gameId.low >>> 0, message.gameId.high >>> 0).toNumber() : message.gameId;
                if (message.players && message.players.length) {
                    object.players = [];
                    for (var j = 0; j < message.players.length; ++j)
                        object.players[j] = $root.pb.lobby.EndGameRequest.Player.toObject(message.players[j], options);
                }
                return object;
            };

            /**
             * Converts this EndGameRequest to JSON.
             * @function toJSON
             * @memberof pb.lobby.EndGameRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EndGameRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            EndGameRequest.Player = (function() {

                /**
                 * Properties of a Player.
                 * @memberof pb.lobby.EndGameRequest
                 * @interface IPlayer
                 * @property {Long|null} [userId] Player userId
                 * @property {Long|null} [playerId] Player playerId
                 * @property {string|null} [playerXid] Player playerXid
                 */

                /**
                 * Constructs a new Player.
                 * @memberof pb.lobby.EndGameRequest
                 * @classdesc Represents a Player.
                 * @implements IPlayer
                 * @constructor
                 * @param {pb.lobby.EndGameRequest.IPlayer=} [properties] Properties to set
                 */
                function Player(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Player userId.
                 * @member {Long} userId
                 * @memberof pb.lobby.EndGameRequest.Player
                 * @instance
                 */
                Player.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * Player playerId.
                 * @member {Long} playerId
                 * @memberof pb.lobby.EndGameRequest.Player
                 * @instance
                 */
                Player.prototype.playerId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * Player playerXid.
                 * @member {string} playerXid
                 * @memberof pb.lobby.EndGameRequest.Player
                 * @instance
                 */
                Player.prototype.playerXid = "";

                /**
                 * Creates a new Player instance using the specified properties.
                 * @function create
                 * @memberof pb.lobby.EndGameRequest.Player
                 * @static
                 * @param {pb.lobby.EndGameRequest.IPlayer=} [properties] Properties to set
                 * @returns {pb.lobby.EndGameRequest.Player} Player instance
                 */
                Player.create = function create(properties) {
                    return new Player(properties);
                };

                /**
                 * Encodes the specified Player message. Does not implicitly {@link pb.lobby.EndGameRequest.Player.verify|verify} messages.
                 * @function encode
                 * @memberof pb.lobby.EndGameRequest.Player
                 * @static
                 * @param {pb.lobby.EndGameRequest.IPlayer} message Player message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Player.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.userId != null && message.hasOwnProperty("userId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userId);
                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.playerId);
                    if (message.playerXid != null && message.hasOwnProperty("playerXid"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.playerXid);
                    return writer;
                };

                /**
                 * Encodes the specified Player message, length delimited. Does not implicitly {@link pb.lobby.EndGameRequest.Player.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof pb.lobby.EndGameRequest.Player
                 * @static
                 * @param {pb.lobby.EndGameRequest.IPlayer} message Player message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Player.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Player message from the specified reader or buffer.
                 * @function decode
                 * @memberof pb.lobby.EndGameRequest.Player
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {pb.lobby.EndGameRequest.Player} Player
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Player.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.lobby.EndGameRequest.Player();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.userId = reader.int64();
                            break;
                        case 2:
                            message.playerId = reader.int64();
                            break;
                        case 3:
                            message.playerXid = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Player message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof pb.lobby.EndGameRequest.Player
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {pb.lobby.EndGameRequest.Player} Player
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Player.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Player message.
                 * @function verify
                 * @memberof pb.lobby.EndGameRequest.Player
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Player.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.userId != null && message.hasOwnProperty("userId"))
                        if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                            return "userId: integer|Long expected";
                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                        if (!$util.isInteger(message.playerId) && !(message.playerId && $util.isInteger(message.playerId.low) && $util.isInteger(message.playerId.high)))
                            return "playerId: integer|Long expected";
                    if (message.playerXid != null && message.hasOwnProperty("playerXid"))
                        if (!$util.isString(message.playerXid))
                            return "playerXid: string expected";
                    return null;
                };

                /**
                 * Creates a Player message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof pb.lobby.EndGameRequest.Player
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {pb.lobby.EndGameRequest.Player} Player
                 */
                Player.fromObject = function fromObject(object) {
                    if (object instanceof $root.pb.lobby.EndGameRequest.Player)
                        return object;
                    var message = new $root.pb.lobby.EndGameRequest.Player();
                    if (object.userId != null)
                        if ($util.Long)
                            (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                        else if (typeof object.userId === "string")
                            message.userId = parseInt(object.userId, 10);
                        else if (typeof object.userId === "number")
                            message.userId = object.userId;
                        else if (typeof object.userId === "object")
                            message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                    if (object.playerId != null)
                        if ($util.Long)
                            (message.playerId = $util.Long.fromValue(object.playerId)).unsigned = false;
                        else if (typeof object.playerId === "string")
                            message.playerId = parseInt(object.playerId, 10);
                        else if (typeof object.playerId === "number")
                            message.playerId = object.playerId;
                        else if (typeof object.playerId === "object")
                            message.playerId = new $util.LongBits(object.playerId.low >>> 0, object.playerId.high >>> 0).toNumber();
                    if (object.playerXid != null)
                        message.playerXid = String(object.playerXid);
                    return message;
                };

                /**
                 * Creates a plain object from a Player message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof pb.lobby.EndGameRequest.Player
                 * @static
                 * @param {pb.lobby.EndGameRequest.Player} message Player
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Player.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.userId = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.playerId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.playerId = options.longs === String ? "0" : 0;
                        object.playerXid = "";
                    }
                    if (message.userId != null && message.hasOwnProperty("userId"))
                        if (typeof message.userId === "number")
                            object.userId = options.longs === String ? String(message.userId) : message.userId;
                        else
                            object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                    if (message.playerId != null && message.hasOwnProperty("playerId"))
                        if (typeof message.playerId === "number")
                            object.playerId = options.longs === String ? String(message.playerId) : message.playerId;
                        else
                            object.playerId = options.longs === String ? $util.Long.prototype.toString.call(message.playerId) : options.longs === Number ? new $util.LongBits(message.playerId.low >>> 0, message.playerId.high >>> 0).toNumber() : message.playerId;
                    if (message.playerXid != null && message.hasOwnProperty("playerXid"))
                        object.playerXid = message.playerXid;
                    return object;
                };

                /**
                 * Converts this Player to JSON.
                 * @function toJSON
                 * @memberof pb.lobby.EndGameRequest.Player
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Player.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Player;
            })();

            return EndGameRequest;
        })();

        lobby.EndGameResponse = (function() {

            /**
             * Properties of an EndGameResponse.
             * @memberof pb.lobby
             * @interface IEndGameResponse
             * @property {Long|null} [gameID] EndGameResponse gameID
             */

            /**
             * Constructs a new EndGameResponse.
             * @memberof pb.lobby
             * @classdesc Represents an EndGameResponse.
             * @implements IEndGameResponse
             * @constructor
             * @param {pb.lobby.IEndGameResponse=} [properties] Properties to set
             */
            function EndGameResponse(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EndGameResponse gameID.
             * @member {Long} gameID
             * @memberof pb.lobby.EndGameResponse
             * @instance
             */
            EndGameResponse.prototype.gameID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new EndGameResponse instance using the specified properties.
             * @function create
             * @memberof pb.lobby.EndGameResponse
             * @static
             * @param {pb.lobby.IEndGameResponse=} [properties] Properties to set
             * @returns {pb.lobby.EndGameResponse} EndGameResponse instance
             */
            EndGameResponse.create = function create(properties) {
                return new EndGameResponse(properties);
            };

            /**
             * Encodes the specified EndGameResponse message. Does not implicitly {@link pb.lobby.EndGameResponse.verify|verify} messages.
             * @function encode
             * @memberof pb.lobby.EndGameResponse
             * @static
             * @param {pb.lobby.IEndGameResponse} message EndGameResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EndGameResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.gameID != null && message.hasOwnProperty("gameID"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.gameID);
                return writer;
            };

            /**
             * Encodes the specified EndGameResponse message, length delimited. Does not implicitly {@link pb.lobby.EndGameResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.lobby.EndGameResponse
             * @static
             * @param {pb.lobby.IEndGameResponse} message EndGameResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EndGameResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EndGameResponse message from the specified reader or buffer.
             * @function decode
             * @memberof pb.lobby.EndGameResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.lobby.EndGameResponse} EndGameResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EndGameResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.lobby.EndGameResponse();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        message.gameID = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EndGameResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.lobby.EndGameResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.lobby.EndGameResponse} EndGameResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EndGameResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EndGameResponse message.
             * @function verify
             * @memberof pb.lobby.EndGameResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EndGameResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.gameID != null && message.hasOwnProperty("gameID"))
                    if (!$util.isInteger(message.gameID) && !(message.gameID && $util.isInteger(message.gameID.low) && $util.isInteger(message.gameID.high)))
                        return "gameID: integer|Long expected";
                return null;
            };

            /**
             * Creates an EndGameResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.lobby.EndGameResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.lobby.EndGameResponse} EndGameResponse
             */
            EndGameResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.lobby.EndGameResponse)
                    return object;
                var message = new $root.pb.lobby.EndGameResponse();
                if (object.gameID != null)
                    if ($util.Long)
                        (message.gameID = $util.Long.fromValue(object.gameID)).unsigned = false;
                    else if (typeof object.gameID === "string")
                        message.gameID = parseInt(object.gameID, 10);
                    else if (typeof object.gameID === "number")
                        message.gameID = object.gameID;
                    else if (typeof object.gameID === "object")
                        message.gameID = new $util.LongBits(object.gameID.low >>> 0, object.gameID.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from an EndGameResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.lobby.EndGameResponse
             * @static
             * @param {pb.lobby.EndGameResponse} message EndGameResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EndGameResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.gameID = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.gameID = options.longs === String ? "0" : 0;
                if (message.gameID != null && message.hasOwnProperty("gameID"))
                    if (typeof message.gameID === "number")
                        object.gameID = options.longs === String ? String(message.gameID) : message.gameID;
                    else
                        object.gameID = options.longs === String ? $util.Long.prototype.toString.call(message.gameID) : options.longs === Number ? new $util.LongBits(message.gameID.low >>> 0, message.gameID.high >>> 0).toNumber() : message.gameID;
                return object;
            };

            /**
             * Converts this EndGameResponse to JSON.
             * @function toJSON
             * @memberof pb.lobby.EndGameResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EndGameResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EndGameResponse;
        })();

        lobby.StreamInitParam = (function() {

            /**
             * Properties of a StreamInitParam.
             * @memberof pb.lobby
             * @interface IStreamInitParam
             * @property {Long|null} [userId] StreamInitParam userId
             * @property {boolean|null} [isBot] StreamInitParam isBot
             */

            /**
             * Constructs a new StreamInitParam.
             * @memberof pb.lobby
             * @classdesc Represents a StreamInitParam.
             * @implements IStreamInitParam
             * @constructor
             * @param {pb.lobby.IStreamInitParam=} [properties] Properties to set
             */
            function StreamInitParam(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * StreamInitParam userId.
             * @member {Long} userId
             * @memberof pb.lobby.StreamInitParam
             * @instance
             */
            StreamInitParam.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * StreamInitParam isBot.
             * @member {boolean} isBot
             * @memberof pb.lobby.StreamInitParam
             * @instance
             */
            StreamInitParam.prototype.isBot = false;

            /**
             * Creates a new StreamInitParam instance using the specified properties.
             * @function create
             * @memberof pb.lobby.StreamInitParam
             * @static
             * @param {pb.lobby.IStreamInitParam=} [properties] Properties to set
             * @returns {pb.lobby.StreamInitParam} StreamInitParam instance
             */
            StreamInitParam.create = function create(properties) {
                return new StreamInitParam(properties);
            };

            /**
             * Encodes the specified StreamInitParam message. Does not implicitly {@link pb.lobby.StreamInitParam.verify|verify} messages.
             * @function encode
             * @memberof pb.lobby.StreamInitParam
             * @static
             * @param {pb.lobby.IStreamInitParam} message StreamInitParam message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StreamInitParam.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userId);
                if (message.isBot != null && message.hasOwnProperty("isBot"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isBot);
                return writer;
            };

            /**
             * Encodes the specified StreamInitParam message, length delimited. Does not implicitly {@link pb.lobby.StreamInitParam.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.lobby.StreamInitParam
             * @static
             * @param {pb.lobby.IStreamInitParam} message StreamInitParam message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StreamInitParam.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a StreamInitParam message from the specified reader or buffer.
             * @function decode
             * @memberof pb.lobby.StreamInitParam
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.lobby.StreamInitParam} StreamInitParam
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StreamInitParam.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.lobby.StreamInitParam();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.userId = reader.int64();
                        break;
                    case 2:
                        message.isBot = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a StreamInitParam message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.lobby.StreamInitParam
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.lobby.StreamInitParam} StreamInitParam
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StreamInitParam.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a StreamInitParam message.
             * @function verify
             * @memberof pb.lobby.StreamInitParam
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            StreamInitParam.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                if (message.isBot != null && message.hasOwnProperty("isBot"))
                    if (typeof message.isBot !== "boolean")
                        return "isBot: boolean expected";
                return null;
            };

            /**
             * Creates a StreamInitParam message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.lobby.StreamInitParam
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.lobby.StreamInitParam} StreamInitParam
             */
            StreamInitParam.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.lobby.StreamInitParam)
                    return object;
                var message = new $root.pb.lobby.StreamInitParam();
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                if (object.isBot != null)
                    message.isBot = Boolean(object.isBot);
                return message;
            };

            /**
             * Creates a plain object from a StreamInitParam message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.lobby.StreamInitParam
             * @static
             * @param {pb.lobby.StreamInitParam} message StreamInitParam
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            StreamInitParam.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                    object.isBot = false;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                if (message.isBot != null && message.hasOwnProperty("isBot"))
                    object.isBot = message.isBot;
                return object;
            };

            /**
             * Converts this StreamInitParam to JSON.
             * @function toJSON
             * @memberof pb.lobby.StreamInitParam
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            StreamInitParam.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return StreamInitParam;
        })();

        lobby.LobbyService = (function() {

            /**
             * Constructs a new LobbyService service.
             * @memberof pb.lobby
             * @classdesc Represents a LobbyService
             * @extends $protobuf.rpc.Service
             * @constructor
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             */
            function LobbyService(rpcImpl, requestDelimited, responseDelimited) {
                $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
            }

            (LobbyService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = LobbyService;

            /**
             * Creates new LobbyService service using the specified rpc implementation.
             * @function create
             * @memberof pb.lobby.LobbyService
             * @static
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             * @returns {LobbyService} RPC service. Useful where requests and/or responses are streamed.
             */
            LobbyService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                return new this(rpcImpl, requestDelimited, responseDelimited);
            };

            /**
             * Callback as used by {@link pb.lobby.LobbyService#registerGameNode}.
             * @memberof pb.lobby.LobbyService
             * @typedef RegisterGameNodeCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pb.common.Error} [response] Error
             */

            /**
             * Calls RegisterGameNode.
             * @function registerGameNode
             * @memberof pb.lobby.LobbyService
             * @instance
             * @param {pb.lobby.IGameNodeMessage} request GameNodeMessage message or plain object
             * @param {pb.lobby.LobbyService.RegisterGameNodeCallback} callback Node-style callback called with the error, if any, and Error
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(LobbyService.prototype.registerGameNode = function registerGameNode(request, callback) {
                return this.rpcCall(registerGameNode, $root.pb.lobby.GameNodeMessage, $root.pb.common.Error, request, callback);
            }, "name", { value: "RegisterGameNode" });

            /**
             * Calls RegisterGameNode.
             * @function registerGameNode
             * @memberof pb.lobby.LobbyService
             * @instance
             * @param {pb.lobby.IGameNodeMessage} request GameNodeMessage message or plain object
             * @returns {Promise<pb.common.Error>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pb.lobby.LobbyService#checkGameRoom}.
             * @memberof pb.lobby.LobbyService
             * @typedef CheckGameRoomCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pb.lobby.CheckGameRoomResponse} [response] CheckGameRoomResponse
             */

            /**
             * Calls CheckGameRoom.
             * @function checkGameRoom
             * @memberof pb.lobby.LobbyService
             * @instance
             * @param {pb.lobby.ICheckGameRoomRequest} request CheckGameRoomRequest message or plain object
             * @param {pb.lobby.LobbyService.CheckGameRoomCallback} callback Node-style callback called with the error, if any, and CheckGameRoomResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(LobbyService.prototype.checkGameRoom = function checkGameRoom(request, callback) {
                return this.rpcCall(checkGameRoom, $root.pb.lobby.CheckGameRoomRequest, $root.pb.lobby.CheckGameRoomResponse, request, callback);
            }, "name", { value: "CheckGameRoom" });

            /**
             * Calls CheckGameRoom.
             * @function checkGameRoom
             * @memberof pb.lobby.LobbyService
             * @instance
             * @param {pb.lobby.ICheckGameRoomRequest} request CheckGameRoomRequest message or plain object
             * @returns {Promise<pb.lobby.CheckGameRoomResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pb.lobby.LobbyService#resetPlayer}.
             * @memberof pb.lobby.LobbyService
             * @typedef ResetPlayerCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pb.common.Error} [response] Error
             */

            /**
             * Calls ResetPlayer.
             * @function resetPlayer
             * @memberof pb.lobby.LobbyService
             * @instance
             * @param {pb.lobby.IResetPlayerRequest} request ResetPlayerRequest message or plain object
             * @param {pb.lobby.LobbyService.ResetPlayerCallback} callback Node-style callback called with the error, if any, and Error
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(LobbyService.prototype.resetPlayer = function resetPlayer(request, callback) {
                return this.rpcCall(resetPlayer, $root.pb.lobby.ResetPlayerRequest, $root.pb.common.Error, request, callback);
            }, "name", { value: "ResetPlayer" });

            /**
             * Calls ResetPlayer.
             * @function resetPlayer
             * @memberof pb.lobby.LobbyService
             * @instance
             * @param {pb.lobby.IResetPlayerRequest} request ResetPlayerRequest message or plain object
             * @returns {Promise<pb.common.Error>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pb.lobby.LobbyService#handle}.
             * @memberof pb.lobby.LobbyService
             * @typedef HandleCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pb.common.Payload} [response] Payload
             */

            /**
             * Calls Handle.
             * @function handle
             * @memberof pb.lobby.LobbyService
             * @instance
             * @param {pb.lobby.IStreamInitParam} request StreamInitParam message or plain object
             * @param {pb.lobby.LobbyService.HandleCallback} callback Node-style callback called with the error, if any, and Payload
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(LobbyService.prototype.handle = function handle(request, callback) {
                return this.rpcCall(handle, $root.pb.lobby.StreamInitParam, $root.pb.common.Payload, request, callback);
            }, "name", { value: "Handle" });

            /**
             * Calls Handle.
             * @function handle
             * @memberof pb.lobby.LobbyService
             * @instance
             * @param {pb.lobby.IStreamInitParam} request StreamInitParam message or plain object
             * @returns {Promise<pb.common.Payload>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pb.lobby.LobbyService#request}.
             * @memberof pb.lobby.LobbyService
             * @typedef RequestCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pb.common.Payload} [response] Payload
             */

            /**
             * Calls Request.
             * @function request
             * @memberof pb.lobby.LobbyService
             * @instance
             * @param {pb.common.IPayload} request Payload message or plain object
             * @param {pb.lobby.LobbyService.RequestCallback} callback Node-style callback called with the error, if any, and Payload
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(LobbyService.prototype.request = function request(request, callback) {
                return this.rpcCall(request, $root.pb.common.Payload, $root.pb.common.Payload, request, callback);
            }, "name", { value: "Request" });

            /**
             * Calls Request.
             * @function request
             * @memberof pb.lobby.LobbyService
             * @instance
             * @param {pb.common.IPayload} request Payload message or plain object
             * @returns {Promise<pb.common.Payload>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pb.lobby.LobbyService#endGame}.
             * @memberof pb.lobby.LobbyService
             * @typedef EndGameCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pb.lobby.EndGameResponse} [response] EndGameResponse
             */

            /**
             * Calls EndGame.
             * @function endGame
             * @memberof pb.lobby.LobbyService
             * @instance
             * @param {pb.lobby.IEndGameRequest} request EndGameRequest message or plain object
             * @param {pb.lobby.LobbyService.EndGameCallback} callback Node-style callback called with the error, if any, and EndGameResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(LobbyService.prototype.endGame = function endGame(request, callback) {
                return this.rpcCall(endGame, $root.pb.lobby.EndGameRequest, $root.pb.lobby.EndGameResponse, request, callback);
            }, "name", { value: "EndGame" });

            /**
             * Calls EndGame.
             * @function endGame
             * @memberof pb.lobby.LobbyService
             * @instance
             * @param {pb.lobby.IEndGameRequest} request EndGameRequest message or plain object
             * @returns {Promise<pb.lobby.EndGameResponse>} Promise
             * @variation 2
             */

            return LobbyService;
        })();

        return lobby;
    })();

    pb.game = (function() {

        /**
         * Namespace game.
         * @memberof pb
         * @namespace
         */
        var game = {};

        game.GameOption = (function() {

            /**
             * Properties of a GameOption.
             * @memberof pb.game
             * @interface IGameOption
             * @property {number|null} [playDuration] GameOption playDuration
             * @property {Long|null} [mapId] GameOption mapId
             */

            /**
             * Constructs a new GameOption.
             * @memberof pb.game
             * @classdesc Represents a GameOption.
             * @implements IGameOption
             * @constructor
             * @param {pb.game.IGameOption=} [properties] Properties to set
             */
            function GameOption(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GameOption playDuration.
             * @member {number} playDuration
             * @memberof pb.game.GameOption
             * @instance
             */
            GameOption.prototype.playDuration = 0;

            /**
             * GameOption mapId.
             * @member {Long} mapId
             * @memberof pb.game.GameOption
             * @instance
             */
            GameOption.prototype.mapId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new GameOption instance using the specified properties.
             * @function create
             * @memberof pb.game.GameOption
             * @static
             * @param {pb.game.IGameOption=} [properties] Properties to set
             * @returns {pb.game.GameOption} GameOption instance
             */
            GameOption.create = function create(properties) {
                return new GameOption(properties);
            };

            /**
             * Encodes the specified GameOption message. Does not implicitly {@link pb.game.GameOption.verify|verify} messages.
             * @function encode
             * @memberof pb.game.GameOption
             * @static
             * @param {pb.game.IGameOption} message GameOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameOption.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.playDuration != null && message.hasOwnProperty("playDuration"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.playDuration);
                if (message.mapId != null && message.hasOwnProperty("mapId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.mapId);
                return writer;
            };

            /**
             * Encodes the specified GameOption message, length delimited. Does not implicitly {@link pb.game.GameOption.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.game.GameOption
             * @static
             * @param {pb.game.IGameOption} message GameOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameOption.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GameOption message from the specified reader or buffer.
             * @function decode
             * @memberof pb.game.GameOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.game.GameOption} GameOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameOption.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.game.GameOption();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.playDuration = reader.int32();
                        break;
                    case 2:
                        message.mapId = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GameOption message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.game.GameOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.game.GameOption} GameOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameOption.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GameOption message.
             * @function verify
             * @memberof pb.game.GameOption
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GameOption.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.playDuration != null && message.hasOwnProperty("playDuration"))
                    if (!$util.isInteger(message.playDuration))
                        return "playDuration: integer expected";
                if (message.mapId != null && message.hasOwnProperty("mapId"))
                    if (!$util.isInteger(message.mapId) && !(message.mapId && $util.isInteger(message.mapId.low) && $util.isInteger(message.mapId.high)))
                        return "mapId: integer|Long expected";
                return null;
            };

            /**
             * Creates a GameOption message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.game.GameOption
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.game.GameOption} GameOption
             */
            GameOption.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.game.GameOption)
                    return object;
                var message = new $root.pb.game.GameOption();
                if (object.playDuration != null)
                    message.playDuration = object.playDuration | 0;
                if (object.mapId != null)
                    if ($util.Long)
                        (message.mapId = $util.Long.fromValue(object.mapId)).unsigned = false;
                    else if (typeof object.mapId === "string")
                        message.mapId = parseInt(object.mapId, 10);
                    else if (typeof object.mapId === "number")
                        message.mapId = object.mapId;
                    else if (typeof object.mapId === "object")
                        message.mapId = new $util.LongBits(object.mapId.low >>> 0, object.mapId.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a GameOption message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.game.GameOption
             * @static
             * @param {pb.game.GameOption} message GameOption
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GameOption.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.playDuration = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.mapId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.mapId = options.longs === String ? "0" : 0;
                }
                if (message.playDuration != null && message.hasOwnProperty("playDuration"))
                    object.playDuration = message.playDuration;
                if (message.mapId != null && message.hasOwnProperty("mapId"))
                    if (typeof message.mapId === "number")
                        object.mapId = options.longs === String ? String(message.mapId) : message.mapId;
                    else
                        object.mapId = options.longs === String ? $util.Long.prototype.toString.call(message.mapId) : options.longs === Number ? new $util.LongBits(message.mapId.low >>> 0, message.mapId.high >>> 0).toNumber() : message.mapId;
                return object;
            };

            /**
             * Converts this GameOption to JSON.
             * @function toJSON
             * @memberof pb.game.GameOption
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GameOption.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GameOption;
        })();

        game.StartGameReq = (function() {

            /**
             * Properties of a StartGameReq.
             * @memberof pb.game
             * @interface IStartGameReq
             * @property {Array.<Long>|null} [userId] StartGameReq userId
             * @property {pb.common.MatchType|null} [matchType] StartGameReq matchType
             * @property {Long|null} [trainerId] StartGameReq trainerId
             * @property {pb.game.IGameOption|null} [opt] StartGameReq opt
             */

            /**
             * Constructs a new StartGameReq.
             * @memberof pb.game
             * @classdesc Represents a StartGameReq.
             * @implements IStartGameReq
             * @constructor
             * @param {pb.game.IStartGameReq=} [properties] Properties to set
             */
            function StartGameReq(properties) {
                this.userId = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * StartGameReq userId.
             * @member {Array.<Long>} userId
             * @memberof pb.game.StartGameReq
             * @instance
             */
            StartGameReq.prototype.userId = $util.emptyArray;

            /**
             * StartGameReq matchType.
             * @member {pb.common.MatchType} matchType
             * @memberof pb.game.StartGameReq
             * @instance
             */
            StartGameReq.prototype.matchType = 0;

            /**
             * StartGameReq trainerId.
             * @member {Long} trainerId
             * @memberof pb.game.StartGameReq
             * @instance
             */
            StartGameReq.prototype.trainerId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * StartGameReq opt.
             * @member {pb.game.IGameOption|null|undefined} opt
             * @memberof pb.game.StartGameReq
             * @instance
             */
            StartGameReq.prototype.opt = null;

            /**
             * Creates a new StartGameReq instance using the specified properties.
             * @function create
             * @memberof pb.game.StartGameReq
             * @static
             * @param {pb.game.IStartGameReq=} [properties] Properties to set
             * @returns {pb.game.StartGameReq} StartGameReq instance
             */
            StartGameReq.create = function create(properties) {
                return new StartGameReq(properties);
            };

            /**
             * Encodes the specified StartGameReq message. Does not implicitly {@link pb.game.StartGameReq.verify|verify} messages.
             * @function encode
             * @memberof pb.game.StartGameReq
             * @static
             * @param {pb.game.IStartGameReq} message StartGameReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StartGameReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userId != null && message.userId.length) {
                    writer.uint32(/* id 1, wireType 2 =*/10).fork();
                    for (var i = 0; i < message.userId.length; ++i)
                        writer.int64(message.userId[i]);
                    writer.ldelim();
                }
                if (message.matchType != null && message.hasOwnProperty("matchType"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.matchType);
                if (message.trainerId != null && message.hasOwnProperty("trainerId"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.trainerId);
                if (message.opt != null && message.hasOwnProperty("opt"))
                    $root.pb.game.GameOption.encode(message.opt, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified StartGameReq message, length delimited. Does not implicitly {@link pb.game.StartGameReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.game.StartGameReq
             * @static
             * @param {pb.game.IStartGameReq} message StartGameReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StartGameReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a StartGameReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.game.StartGameReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.game.StartGameReq} StartGameReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StartGameReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.game.StartGameReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.userId && message.userId.length))
                            message.userId = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.userId.push(reader.int64());
                        } else
                            message.userId.push(reader.int64());
                        break;
                    case 2:
                        message.matchType = reader.int32();
                        break;
                    case 3:
                        message.trainerId = reader.int64();
                        break;
                    case 4:
                        message.opt = $root.pb.game.GameOption.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a StartGameReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.game.StartGameReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.game.StartGameReq} StartGameReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StartGameReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a StartGameReq message.
             * @function verify
             * @memberof pb.game.StartGameReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            StartGameReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userId != null && message.hasOwnProperty("userId")) {
                    if (!Array.isArray(message.userId))
                        return "userId: array expected";
                    for (var i = 0; i < message.userId.length; ++i)
                        if (!$util.isInteger(message.userId[i]) && !(message.userId[i] && $util.isInteger(message.userId[i].low) && $util.isInteger(message.userId[i].high)))
                            return "userId: integer|Long[] expected";
                }
                if (message.matchType != null && message.hasOwnProperty("matchType"))
                    switch (message.matchType) {
                    default:
                        return "matchType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.trainerId != null && message.hasOwnProperty("trainerId"))
                    if (!$util.isInteger(message.trainerId) && !(message.trainerId && $util.isInteger(message.trainerId.low) && $util.isInteger(message.trainerId.high)))
                        return "trainerId: integer|Long expected";
                if (message.opt != null && message.hasOwnProperty("opt")) {
                    var error = $root.pb.game.GameOption.verify(message.opt);
                    if (error)
                        return "opt." + error;
                }
                return null;
            };

            /**
             * Creates a StartGameReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.game.StartGameReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.game.StartGameReq} StartGameReq
             */
            StartGameReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.game.StartGameReq)
                    return object;
                var message = new $root.pb.game.StartGameReq();
                if (object.userId) {
                    if (!Array.isArray(object.userId))
                        throw TypeError(".pb.game.StartGameReq.userId: array expected");
                    message.userId = [];
                    for (var i = 0; i < object.userId.length; ++i)
                        if ($util.Long)
                            (message.userId[i] = $util.Long.fromValue(object.userId[i])).unsigned = false;
                        else if (typeof object.userId[i] === "string")
                            message.userId[i] = parseInt(object.userId[i], 10);
                        else if (typeof object.userId[i] === "number")
                            message.userId[i] = object.userId[i];
                        else if (typeof object.userId[i] === "object")
                            message.userId[i] = new $util.LongBits(object.userId[i].low >>> 0, object.userId[i].high >>> 0).toNumber();
                }
                switch (object.matchType) {
                case "UNKNOWN":
                case 0:
                    message.matchType = 0;
                    break;
                case "STANDARD":
                case 1:
                    message.matchType = 1;
                    break;
                case "RANK":
                case 2:
                    message.matchType = 2;
                    break;
                case "TRAINING":
                case 3:
                    message.matchType = 3;
                    break;
                }
                if (object.trainerId != null)
                    if ($util.Long)
                        (message.trainerId = $util.Long.fromValue(object.trainerId)).unsigned = false;
                    else if (typeof object.trainerId === "string")
                        message.trainerId = parseInt(object.trainerId, 10);
                    else if (typeof object.trainerId === "number")
                        message.trainerId = object.trainerId;
                    else if (typeof object.trainerId === "object")
                        message.trainerId = new $util.LongBits(object.trainerId.low >>> 0, object.trainerId.high >>> 0).toNumber();
                if (object.opt != null) {
                    if (typeof object.opt !== "object")
                        throw TypeError(".pb.game.StartGameReq.opt: object expected");
                    message.opt = $root.pb.game.GameOption.fromObject(object.opt);
                }
                return message;
            };

            /**
             * Creates a plain object from a StartGameReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.game.StartGameReq
             * @static
             * @param {pb.game.StartGameReq} message StartGameReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            StartGameReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.userId = [];
                if (options.defaults) {
                    object.matchType = options.enums === String ? "UNKNOWN" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.trainerId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.trainerId = options.longs === String ? "0" : 0;
                    object.opt = null;
                }
                if (message.userId && message.userId.length) {
                    object.userId = [];
                    for (var j = 0; j < message.userId.length; ++j)
                        if (typeof message.userId[j] === "number")
                            object.userId[j] = options.longs === String ? String(message.userId[j]) : message.userId[j];
                        else
                            object.userId[j] = options.longs === String ? $util.Long.prototype.toString.call(message.userId[j]) : options.longs === Number ? new $util.LongBits(message.userId[j].low >>> 0, message.userId[j].high >>> 0).toNumber() : message.userId[j];
                }
                if (message.matchType != null && message.hasOwnProperty("matchType"))
                    object.matchType = options.enums === String ? $root.pb.common.MatchType[message.matchType] : message.matchType;
                if (message.trainerId != null && message.hasOwnProperty("trainerId"))
                    if (typeof message.trainerId === "number")
                        object.trainerId = options.longs === String ? String(message.trainerId) : message.trainerId;
                    else
                        object.trainerId = options.longs === String ? $util.Long.prototype.toString.call(message.trainerId) : options.longs === Number ? new $util.LongBits(message.trainerId.low >>> 0, message.trainerId.high >>> 0).toNumber() : message.trainerId;
                if (message.opt != null && message.hasOwnProperty("opt"))
                    object.opt = $root.pb.game.GameOption.toObject(message.opt, options);
                return object;
            };

            /**
             * Converts this StartGameReq to JSON.
             * @function toJSON
             * @memberof pb.game.StartGameReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            StartGameReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return StartGameReq;
        })();

        game.StartGameRsp = (function() {

            /**
             * Properties of a StartGameRsp.
             * @memberof pb.game
             * @interface IStartGameRsp
             * @property {pb.common.IBaseRsp|null} [rsp] StartGameRsp rsp
             * @property {Long|null} [gameId] StartGameRsp gameId
             * @property {Object.<string,Long>|null} [idMaps] StartGameRsp idMaps
             * @property {pb.common.Itimer|null} [timer] StartGameRsp timer
             * @property {pb.common.Itimer|null} [globalTimer] StartGameRsp globalTimer
             * @property {pb.common.MatchType|null} [matchType] StartGameRsp matchType
             */

            /**
             * Constructs a new StartGameRsp.
             * @memberof pb.game
             * @classdesc Represents a StartGameRsp.
             * @implements IStartGameRsp
             * @constructor
             * @param {pb.game.IStartGameRsp=} [properties] Properties to set
             */
            function StartGameRsp(properties) {
                this.idMaps = {};
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * StartGameRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.game.StartGameRsp
             * @instance
             */
            StartGameRsp.prototype.rsp = null;

            /**
             * StartGameRsp gameId.
             * @member {Long} gameId
             * @memberof pb.game.StartGameRsp
             * @instance
             */
            StartGameRsp.prototype.gameId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * StartGameRsp idMaps.
             * @member {Object.<string,Long>} idMaps
             * @memberof pb.game.StartGameRsp
             * @instance
             */
            StartGameRsp.prototype.idMaps = $util.emptyObject;

            /**
             * StartGameRsp timer.
             * @member {pb.common.Itimer|null|undefined} timer
             * @memberof pb.game.StartGameRsp
             * @instance
             */
            StartGameRsp.prototype.timer = null;

            /**
             * StartGameRsp globalTimer.
             * @member {pb.common.Itimer|null|undefined} globalTimer
             * @memberof pb.game.StartGameRsp
             * @instance
             */
            StartGameRsp.prototype.globalTimer = null;

            /**
             * StartGameRsp matchType.
             * @member {pb.common.MatchType} matchType
             * @memberof pb.game.StartGameRsp
             * @instance
             */
            StartGameRsp.prototype.matchType = 0;

            /**
             * Creates a new StartGameRsp instance using the specified properties.
             * @function create
             * @memberof pb.game.StartGameRsp
             * @static
             * @param {pb.game.IStartGameRsp=} [properties] Properties to set
             * @returns {pb.game.StartGameRsp} StartGameRsp instance
             */
            StartGameRsp.create = function create(properties) {
                return new StartGameRsp(properties);
            };

            /**
             * Encodes the specified StartGameRsp message. Does not implicitly {@link pb.game.StartGameRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.game.StartGameRsp
             * @static
             * @param {pb.game.IStartGameRsp} message StartGameRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StartGameRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.gameId);
                if (message.idMaps != null && message.hasOwnProperty("idMaps"))
                    for (var keys = Object.keys(message.idMaps), i = 0; i < keys.length; ++i)
                        writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 0 =*/8).int64(keys[i]).uint32(/* id 2, wireType 0 =*/16).int64(message.idMaps[keys[i]]).ldelim();
                if (message.timer != null && message.hasOwnProperty("timer"))
                    $root.pb.common.timer.encode(message.timer, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.globalTimer != null && message.hasOwnProperty("globalTimer"))
                    $root.pb.common.timer.encode(message.globalTimer, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.matchType != null && message.hasOwnProperty("matchType"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.matchType);
                return writer;
            };

            /**
             * Encodes the specified StartGameRsp message, length delimited. Does not implicitly {@link pb.game.StartGameRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.game.StartGameRsp
             * @static
             * @param {pb.game.IStartGameRsp} message StartGameRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StartGameRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a StartGameRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.game.StartGameRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.game.StartGameRsp} StartGameRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StartGameRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.game.StartGameRsp(), key;
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.gameId = reader.int64();
                        break;
                    case 3:
                        reader.skip().pos++;
                        if (message.idMaps === $util.emptyObject)
                            message.idMaps = {};
                        key = reader.int64();
                        reader.pos++;
                        message.idMaps[typeof key === "object" ? $util.longToHash(key) : key] = reader.int64();
                        break;
                    case 4:
                        message.timer = $root.pb.common.timer.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.globalTimer = $root.pb.common.timer.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.matchType = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a StartGameRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.game.StartGameRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.game.StartGameRsp} StartGameRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StartGameRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a StartGameRsp message.
             * @function verify
             * @memberof pb.game.StartGameRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            StartGameRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    if (!$util.isInteger(message.gameId) && !(message.gameId && $util.isInteger(message.gameId.low) && $util.isInteger(message.gameId.high)))
                        return "gameId: integer|Long expected";
                if (message.idMaps != null && message.hasOwnProperty("idMaps")) {
                    if (!$util.isObject(message.idMaps))
                        return "idMaps: object expected";
                    var key = Object.keys(message.idMaps);
                    for (var i = 0; i < key.length; ++i) {
                        if (!$util.key64Re.test(key[i]))
                            return "idMaps: integer|Long key{k:int64} expected";
                        if (!$util.isInteger(message.idMaps[key[i]]) && !(message.idMaps[key[i]] && $util.isInteger(message.idMaps[key[i]].low) && $util.isInteger(message.idMaps[key[i]].high)))
                            return "idMaps: integer|Long{k:int64} expected";
                    }
                }
                if (message.timer != null && message.hasOwnProperty("timer")) {
                    var error = $root.pb.common.timer.verify(message.timer);
                    if (error)
                        return "timer." + error;
                }
                if (message.globalTimer != null && message.hasOwnProperty("globalTimer")) {
                    var error = $root.pb.common.timer.verify(message.globalTimer);
                    if (error)
                        return "globalTimer." + error;
                }
                if (message.matchType != null && message.hasOwnProperty("matchType"))
                    switch (message.matchType) {
                    default:
                        return "matchType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                return null;
            };

            /**
             * Creates a StartGameRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.game.StartGameRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.game.StartGameRsp} StartGameRsp
             */
            StartGameRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.game.StartGameRsp)
                    return object;
                var message = new $root.pb.game.StartGameRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.game.StartGameRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                if (object.gameId != null)
                    if ($util.Long)
                        (message.gameId = $util.Long.fromValue(object.gameId)).unsigned = false;
                    else if (typeof object.gameId === "string")
                        message.gameId = parseInt(object.gameId, 10);
                    else if (typeof object.gameId === "number")
                        message.gameId = object.gameId;
                    else if (typeof object.gameId === "object")
                        message.gameId = new $util.LongBits(object.gameId.low >>> 0, object.gameId.high >>> 0).toNumber();
                if (object.idMaps) {
                    if (typeof object.idMaps !== "object")
                        throw TypeError(".pb.game.StartGameRsp.idMaps: object expected");
                    message.idMaps = {};
                    for (var keys = Object.keys(object.idMaps), i = 0; i < keys.length; ++i)
                        if ($util.Long)
                            (message.idMaps[keys[i]] = $util.Long.fromValue(object.idMaps[keys[i]])).unsigned = false;
                        else if (typeof object.idMaps[keys[i]] === "string")
                            message.idMaps[keys[i]] = parseInt(object.idMaps[keys[i]], 10);
                        else if (typeof object.idMaps[keys[i]] === "number")
                            message.idMaps[keys[i]] = object.idMaps[keys[i]];
                        else if (typeof object.idMaps[keys[i]] === "object")
                            message.idMaps[keys[i]] = new $util.LongBits(object.idMaps[keys[i]].low >>> 0, object.idMaps[keys[i]].high >>> 0).toNumber();
                }
                if (object.timer != null) {
                    if (typeof object.timer !== "object")
                        throw TypeError(".pb.game.StartGameRsp.timer: object expected");
                    message.timer = $root.pb.common.timer.fromObject(object.timer);
                }
                if (object.globalTimer != null) {
                    if (typeof object.globalTimer !== "object")
                        throw TypeError(".pb.game.StartGameRsp.globalTimer: object expected");
                    message.globalTimer = $root.pb.common.timer.fromObject(object.globalTimer);
                }
                switch (object.matchType) {
                case "UNKNOWN":
                case 0:
                    message.matchType = 0;
                    break;
                case "STANDARD":
                case 1:
                    message.matchType = 1;
                    break;
                case "RANK":
                case 2:
                    message.matchType = 2;
                    break;
                case "TRAINING":
                case 3:
                    message.matchType = 3;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a StartGameRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.game.StartGameRsp
             * @static
             * @param {pb.game.StartGameRsp} message StartGameRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            StartGameRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.objects || options.defaults)
                    object.idMaps = {};
                if (options.defaults) {
                    object.rsp = null;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.gameId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.gameId = options.longs === String ? "0" : 0;
                    object.timer = null;
                    object.globalTimer = null;
                    object.matchType = options.enums === String ? "UNKNOWN" : 0;
                }
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    if (typeof message.gameId === "number")
                        object.gameId = options.longs === String ? String(message.gameId) : message.gameId;
                    else
                        object.gameId = options.longs === String ? $util.Long.prototype.toString.call(message.gameId) : options.longs === Number ? new $util.LongBits(message.gameId.low >>> 0, message.gameId.high >>> 0).toNumber() : message.gameId;
                var keys2;
                if (message.idMaps && (keys2 = Object.keys(message.idMaps)).length) {
                    object.idMaps = {};
                    for (var j = 0; j < keys2.length; ++j)
                        if (typeof message.idMaps[keys2[j]] === "number")
                            object.idMaps[keys2[j]] = options.longs === String ? String(message.idMaps[keys2[j]]) : message.idMaps[keys2[j]];
                        else
                            object.idMaps[keys2[j]] = options.longs === String ? $util.Long.prototype.toString.call(message.idMaps[keys2[j]]) : options.longs === Number ? new $util.LongBits(message.idMaps[keys2[j]].low >>> 0, message.idMaps[keys2[j]].high >>> 0).toNumber() : message.idMaps[keys2[j]];
                }
                if (message.timer != null && message.hasOwnProperty("timer"))
                    object.timer = $root.pb.common.timer.toObject(message.timer, options);
                if (message.globalTimer != null && message.hasOwnProperty("globalTimer"))
                    object.globalTimer = $root.pb.common.timer.toObject(message.globalTimer, options);
                if (message.matchType != null && message.hasOwnProperty("matchType"))
                    object.matchType = options.enums === String ? $root.pb.common.MatchType[message.matchType] : message.matchType;
                return object;
            };

            /**
             * Converts this StartGameRsp to JSON.
             * @function toJSON
             * @memberof pb.game.StartGameRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            StartGameRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return StartGameRsp;
        })();

        game.PlayerLeaveReq = (function() {

            /**
             * Properties of a PlayerLeaveReq.
             * @memberof pb.game
             * @interface IPlayerLeaveReq
             * @property {Long|null} [gameId] PlayerLeaveReq gameId
             * @property {Long|null} [userId] PlayerLeaveReq userId
             */

            /**
             * Constructs a new PlayerLeaveReq.
             * @memberof pb.game
             * @classdesc Represents a PlayerLeaveReq.
             * @implements IPlayerLeaveReq
             * @constructor
             * @param {pb.game.IPlayerLeaveReq=} [properties] Properties to set
             */
            function PlayerLeaveReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PlayerLeaveReq gameId.
             * @member {Long} gameId
             * @memberof pb.game.PlayerLeaveReq
             * @instance
             */
            PlayerLeaveReq.prototype.gameId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * PlayerLeaveReq userId.
             * @member {Long} userId
             * @memberof pb.game.PlayerLeaveReq
             * @instance
             */
            PlayerLeaveReq.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new PlayerLeaveReq instance using the specified properties.
             * @function create
             * @memberof pb.game.PlayerLeaveReq
             * @static
             * @param {pb.game.IPlayerLeaveReq=} [properties] Properties to set
             * @returns {pb.game.PlayerLeaveReq} PlayerLeaveReq instance
             */
            PlayerLeaveReq.create = function create(properties) {
                return new PlayerLeaveReq(properties);
            };

            /**
             * Encodes the specified PlayerLeaveReq message. Does not implicitly {@link pb.game.PlayerLeaveReq.verify|verify} messages.
             * @function encode
             * @memberof pb.game.PlayerLeaveReq
             * @static
             * @param {pb.game.IPlayerLeaveReq} message PlayerLeaveReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerLeaveReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.gameId);
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.userId);
                return writer;
            };

            /**
             * Encodes the specified PlayerLeaveReq message, length delimited. Does not implicitly {@link pb.game.PlayerLeaveReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.game.PlayerLeaveReq
             * @static
             * @param {pb.game.IPlayerLeaveReq} message PlayerLeaveReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerLeaveReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PlayerLeaveReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.game.PlayerLeaveReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.game.PlayerLeaveReq} PlayerLeaveReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerLeaveReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.game.PlayerLeaveReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.gameId = reader.int64();
                        break;
                    case 2:
                        message.userId = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PlayerLeaveReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.game.PlayerLeaveReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.game.PlayerLeaveReq} PlayerLeaveReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerLeaveReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PlayerLeaveReq message.
             * @function verify
             * @memberof pb.game.PlayerLeaveReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PlayerLeaveReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    if (!$util.isInteger(message.gameId) && !(message.gameId && $util.isInteger(message.gameId.low) && $util.isInteger(message.gameId.high)))
                        return "gameId: integer|Long expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                return null;
            };

            /**
             * Creates a PlayerLeaveReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.game.PlayerLeaveReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.game.PlayerLeaveReq} PlayerLeaveReq
             */
            PlayerLeaveReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.game.PlayerLeaveReq)
                    return object;
                var message = new $root.pb.game.PlayerLeaveReq();
                if (object.gameId != null)
                    if ($util.Long)
                        (message.gameId = $util.Long.fromValue(object.gameId)).unsigned = false;
                    else if (typeof object.gameId === "string")
                        message.gameId = parseInt(object.gameId, 10);
                    else if (typeof object.gameId === "number")
                        message.gameId = object.gameId;
                    else if (typeof object.gameId === "object")
                        message.gameId = new $util.LongBits(object.gameId.low >>> 0, object.gameId.high >>> 0).toNumber();
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a PlayerLeaveReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.game.PlayerLeaveReq
             * @static
             * @param {pb.game.PlayerLeaveReq} message PlayerLeaveReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PlayerLeaveReq.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.gameId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.gameId = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                }
                if (message.gameId != null && message.hasOwnProperty("gameId"))
                    if (typeof message.gameId === "number")
                        object.gameId = options.longs === String ? String(message.gameId) : message.gameId;
                    else
                        object.gameId = options.longs === String ? $util.Long.prototype.toString.call(message.gameId) : options.longs === Number ? new $util.LongBits(message.gameId.low >>> 0, message.gameId.high >>> 0).toNumber() : message.gameId;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                return object;
            };

            /**
             * Converts this PlayerLeaveReq to JSON.
             * @function toJSON
             * @memberof pb.game.PlayerLeaveReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PlayerLeaveReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PlayerLeaveReq;
        })();

        game.PlayerLeaveRsp = (function() {

            /**
             * Properties of a PlayerLeaveRsp.
             * @memberof pb.game
             * @interface IPlayerLeaveRsp
             * @property {pb.common.IBaseRsp|null} [rsp] PlayerLeaveRsp rsp
             */

            /**
             * Constructs a new PlayerLeaveRsp.
             * @memberof pb.game
             * @classdesc Represents a PlayerLeaveRsp.
             * @implements IPlayerLeaveRsp
             * @constructor
             * @param {pb.game.IPlayerLeaveRsp=} [properties] Properties to set
             */
            function PlayerLeaveRsp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PlayerLeaveRsp rsp.
             * @member {pb.common.IBaseRsp|null|undefined} rsp
             * @memberof pb.game.PlayerLeaveRsp
             * @instance
             */
            PlayerLeaveRsp.prototype.rsp = null;

            /**
             * Creates a new PlayerLeaveRsp instance using the specified properties.
             * @function create
             * @memberof pb.game.PlayerLeaveRsp
             * @static
             * @param {pb.game.IPlayerLeaveRsp=} [properties] Properties to set
             * @returns {pb.game.PlayerLeaveRsp} PlayerLeaveRsp instance
             */
            PlayerLeaveRsp.create = function create(properties) {
                return new PlayerLeaveRsp(properties);
            };

            /**
             * Encodes the specified PlayerLeaveRsp message. Does not implicitly {@link pb.game.PlayerLeaveRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.game.PlayerLeaveRsp
             * @static
             * @param {pb.game.IPlayerLeaveRsp} message PlayerLeaveRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerLeaveRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    $root.pb.common.BaseRsp.encode(message.rsp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified PlayerLeaveRsp message, length delimited. Does not implicitly {@link pb.game.PlayerLeaveRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.game.PlayerLeaveRsp
             * @static
             * @param {pb.game.IPlayerLeaveRsp} message PlayerLeaveRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlayerLeaveRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PlayerLeaveRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.game.PlayerLeaveRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.game.PlayerLeaveRsp} PlayerLeaveRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerLeaveRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.game.PlayerLeaveRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.rsp = $root.pb.common.BaseRsp.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PlayerLeaveRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.game.PlayerLeaveRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.game.PlayerLeaveRsp} PlayerLeaveRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlayerLeaveRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PlayerLeaveRsp message.
             * @function verify
             * @memberof pb.game.PlayerLeaveRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PlayerLeaveRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rsp != null && message.hasOwnProperty("rsp")) {
                    var error = $root.pb.common.BaseRsp.verify(message.rsp);
                    if (error)
                        return "rsp." + error;
                }
                return null;
            };

            /**
             * Creates a PlayerLeaveRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.game.PlayerLeaveRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.game.PlayerLeaveRsp} PlayerLeaveRsp
             */
            PlayerLeaveRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.game.PlayerLeaveRsp)
                    return object;
                var message = new $root.pb.game.PlayerLeaveRsp();
                if (object.rsp != null) {
                    if (typeof object.rsp !== "object")
                        throw TypeError(".pb.game.PlayerLeaveRsp.rsp: object expected");
                    message.rsp = $root.pb.common.BaseRsp.fromObject(object.rsp);
                }
                return message;
            };

            /**
             * Creates a plain object from a PlayerLeaveRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.game.PlayerLeaveRsp
             * @static
             * @param {pb.game.PlayerLeaveRsp} message PlayerLeaveRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PlayerLeaveRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.rsp = null;
                if (message.rsp != null && message.hasOwnProperty("rsp"))
                    object.rsp = $root.pb.common.BaseRsp.toObject(message.rsp, options);
                return object;
            };

            /**
             * Converts this PlayerLeaveRsp to JSON.
             * @function toJSON
             * @memberof pb.game.PlayerLeaveRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PlayerLeaveRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PlayerLeaveRsp;
        })();

        game.GetAvailableMapsReq = (function() {

            /**
             * Properties of a GetAvailableMapsReq.
             * @memberof pb.game
             * @interface IGetAvailableMapsReq
             */

            /**
             * Constructs a new GetAvailableMapsReq.
             * @memberof pb.game
             * @classdesc Represents a GetAvailableMapsReq.
             * @implements IGetAvailableMapsReq
             * @constructor
             * @param {pb.game.IGetAvailableMapsReq=} [properties] Properties to set
             */
            function GetAvailableMapsReq(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new GetAvailableMapsReq instance using the specified properties.
             * @function create
             * @memberof pb.game.GetAvailableMapsReq
             * @static
             * @param {pb.game.IGetAvailableMapsReq=} [properties] Properties to set
             * @returns {pb.game.GetAvailableMapsReq} GetAvailableMapsReq instance
             */
            GetAvailableMapsReq.create = function create(properties) {
                return new GetAvailableMapsReq(properties);
            };

            /**
             * Encodes the specified GetAvailableMapsReq message. Does not implicitly {@link pb.game.GetAvailableMapsReq.verify|verify} messages.
             * @function encode
             * @memberof pb.game.GetAvailableMapsReq
             * @static
             * @param {pb.game.IGetAvailableMapsReq} message GetAvailableMapsReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetAvailableMapsReq.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified GetAvailableMapsReq message, length delimited. Does not implicitly {@link pb.game.GetAvailableMapsReq.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.game.GetAvailableMapsReq
             * @static
             * @param {pb.game.IGetAvailableMapsReq} message GetAvailableMapsReq message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetAvailableMapsReq.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetAvailableMapsReq message from the specified reader or buffer.
             * @function decode
             * @memberof pb.game.GetAvailableMapsReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.game.GetAvailableMapsReq} GetAvailableMapsReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetAvailableMapsReq.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.game.GetAvailableMapsReq();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetAvailableMapsReq message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.game.GetAvailableMapsReq
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.game.GetAvailableMapsReq} GetAvailableMapsReq
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetAvailableMapsReq.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetAvailableMapsReq message.
             * @function verify
             * @memberof pb.game.GetAvailableMapsReq
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetAvailableMapsReq.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a GetAvailableMapsReq message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.game.GetAvailableMapsReq
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.game.GetAvailableMapsReq} GetAvailableMapsReq
             */
            GetAvailableMapsReq.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.game.GetAvailableMapsReq)
                    return object;
                return new $root.pb.game.GetAvailableMapsReq();
            };

            /**
             * Creates a plain object from a GetAvailableMapsReq message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.game.GetAvailableMapsReq
             * @static
             * @param {pb.game.GetAvailableMapsReq} message GetAvailableMapsReq
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetAvailableMapsReq.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this GetAvailableMapsReq to JSON.
             * @function toJSON
             * @memberof pb.game.GetAvailableMapsReq
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetAvailableMapsReq.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GetAvailableMapsReq;
        })();

        game.GetAvailableMapsRsp = (function() {

            /**
             * Properties of a GetAvailableMapsRsp.
             * @memberof pb.game
             * @interface IGetAvailableMapsRsp
             * @property {Array.<pb.common.IMapItem>|null} [maps] GetAvailableMapsRsp maps
             */

            /**
             * Constructs a new GetAvailableMapsRsp.
             * @memberof pb.game
             * @classdesc Represents a GetAvailableMapsRsp.
             * @implements IGetAvailableMapsRsp
             * @constructor
             * @param {pb.game.IGetAvailableMapsRsp=} [properties] Properties to set
             */
            function GetAvailableMapsRsp(properties) {
                this.maps = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GetAvailableMapsRsp maps.
             * @member {Array.<pb.common.IMapItem>} maps
             * @memberof pb.game.GetAvailableMapsRsp
             * @instance
             */
            GetAvailableMapsRsp.prototype.maps = $util.emptyArray;

            /**
             * Creates a new GetAvailableMapsRsp instance using the specified properties.
             * @function create
             * @memberof pb.game.GetAvailableMapsRsp
             * @static
             * @param {pb.game.IGetAvailableMapsRsp=} [properties] Properties to set
             * @returns {pb.game.GetAvailableMapsRsp} GetAvailableMapsRsp instance
             */
            GetAvailableMapsRsp.create = function create(properties) {
                return new GetAvailableMapsRsp(properties);
            };

            /**
             * Encodes the specified GetAvailableMapsRsp message. Does not implicitly {@link pb.game.GetAvailableMapsRsp.verify|verify} messages.
             * @function encode
             * @memberof pb.game.GetAvailableMapsRsp
             * @static
             * @param {pb.game.IGetAvailableMapsRsp} message GetAvailableMapsRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetAvailableMapsRsp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.maps != null && message.maps.length)
                    for (var i = 0; i < message.maps.length; ++i)
                        $root.pb.common.MapItem.encode(message.maps[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GetAvailableMapsRsp message, length delimited. Does not implicitly {@link pb.game.GetAvailableMapsRsp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.game.GetAvailableMapsRsp
             * @static
             * @param {pb.game.IGetAvailableMapsRsp} message GetAvailableMapsRsp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetAvailableMapsRsp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetAvailableMapsRsp message from the specified reader or buffer.
             * @function decode
             * @memberof pb.game.GetAvailableMapsRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.game.GetAvailableMapsRsp} GetAvailableMapsRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetAvailableMapsRsp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.game.GetAvailableMapsRsp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.maps && message.maps.length))
                            message.maps = [];
                        message.maps.push($root.pb.common.MapItem.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetAvailableMapsRsp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.game.GetAvailableMapsRsp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.game.GetAvailableMapsRsp} GetAvailableMapsRsp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetAvailableMapsRsp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetAvailableMapsRsp message.
             * @function verify
             * @memberof pb.game.GetAvailableMapsRsp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetAvailableMapsRsp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.maps != null && message.hasOwnProperty("maps")) {
                    if (!Array.isArray(message.maps))
                        return "maps: array expected";
                    for (var i = 0; i < message.maps.length; ++i) {
                        var error = $root.pb.common.MapItem.verify(message.maps[i]);
                        if (error)
                            return "maps." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GetAvailableMapsRsp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.game.GetAvailableMapsRsp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.game.GetAvailableMapsRsp} GetAvailableMapsRsp
             */
            GetAvailableMapsRsp.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.game.GetAvailableMapsRsp)
                    return object;
                var message = new $root.pb.game.GetAvailableMapsRsp();
                if (object.maps) {
                    if (!Array.isArray(object.maps))
                        throw TypeError(".pb.game.GetAvailableMapsRsp.maps: array expected");
                    message.maps = [];
                    for (var i = 0; i < object.maps.length; ++i) {
                        if (typeof object.maps[i] !== "object")
                            throw TypeError(".pb.game.GetAvailableMapsRsp.maps: object expected");
                        message.maps[i] = $root.pb.common.MapItem.fromObject(object.maps[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GetAvailableMapsRsp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.game.GetAvailableMapsRsp
             * @static
             * @param {pb.game.GetAvailableMapsRsp} message GetAvailableMapsRsp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetAvailableMapsRsp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.maps = [];
                if (message.maps && message.maps.length) {
                    object.maps = [];
                    for (var j = 0; j < message.maps.length; ++j)
                        object.maps[j] = $root.pb.common.MapItem.toObject(message.maps[j], options);
                }
                return object;
            };

            /**
             * Converts this GetAvailableMapsRsp to JSON.
             * @function toJSON
             * @memberof pb.game.GetAvailableMapsRsp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetAvailableMapsRsp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GetAvailableMapsRsp;
        })();

        game.GameService = (function() {

            /**
             * Constructs a new GameService service.
             * @memberof pb.game
             * @classdesc Represents a GameService
             * @extends $protobuf.rpc.Service
             * @constructor
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             */
            function GameService(rpcImpl, requestDelimited, responseDelimited) {
                $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
            }

            (GameService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = GameService;

            /**
             * Creates new GameService service using the specified rpc implementation.
             * @function create
             * @memberof pb.game.GameService
             * @static
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             * @returns {GameService} RPC service. Useful where requests and/or responses are streamed.
             */
            GameService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                return new this(rpcImpl, requestDelimited, responseDelimited);
            };

            /**
             * Callback as used by {@link pb.game.GameService#startGame}.
             * @memberof pb.game.GameService
             * @typedef StartGameCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pb.game.StartGameRsp} [response] StartGameRsp
             */

            /**
             * Calls StartGame.
             * @function startGame
             * @memberof pb.game.GameService
             * @instance
             * @param {pb.game.IStartGameReq} request StartGameReq message or plain object
             * @param {pb.game.GameService.StartGameCallback} callback Node-style callback called with the error, if any, and StartGameRsp
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(GameService.prototype.startGame = function startGame(request, callback) {
                return this.rpcCall(startGame, $root.pb.game.StartGameReq, $root.pb.game.StartGameRsp, request, callback);
            }, "name", { value: "StartGame" });

            /**
             * Calls StartGame.
             * @function startGame
             * @memberof pb.game.GameService
             * @instance
             * @param {pb.game.IStartGameReq} request StartGameReq message or plain object
             * @returns {Promise<pb.game.StartGameRsp>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pb.game.GameService#playerLeave}.
             * @memberof pb.game.GameService
             * @typedef PlayerLeaveCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pb.game.PlayerLeaveRsp} [response] PlayerLeaveRsp
             */

            /**
             * Calls PlayerLeave.
             * @function playerLeave
             * @memberof pb.game.GameService
             * @instance
             * @param {pb.game.IPlayerLeaveReq} request PlayerLeaveReq message or plain object
             * @param {pb.game.GameService.PlayerLeaveCallback} callback Node-style callback called with the error, if any, and PlayerLeaveRsp
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(GameService.prototype.playerLeave = function playerLeave(request, callback) {
                return this.rpcCall(playerLeave, $root.pb.game.PlayerLeaveReq, $root.pb.game.PlayerLeaveRsp, request, callback);
            }, "name", { value: "PlayerLeave" });

            /**
             * Calls PlayerLeave.
             * @function playerLeave
             * @memberof pb.game.GameService
             * @instance
             * @param {pb.game.IPlayerLeaveReq} request PlayerLeaveReq message or plain object
             * @returns {Promise<pb.game.PlayerLeaveRsp>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pb.game.GameService#handle}.
             * @memberof pb.game.GameService
             * @typedef HandleCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pb.common.Payload} [response] Payload
             */

            /**
             * Calls Handle.
             * @function handle
             * @memberof pb.game.GameService
             * @instance
             * @param {pb.common.IStreamInitParam} request StreamInitParam message or plain object
             * @param {pb.game.GameService.HandleCallback} callback Node-style callback called with the error, if any, and Payload
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(GameService.prototype.handle = function handle(request, callback) {
                return this.rpcCall(handle, $root.pb.common.StreamInitParam, $root.pb.common.Payload, request, callback);
            }, "name", { value: "Handle" });

            /**
             * Calls Handle.
             * @function handle
             * @memberof pb.game.GameService
             * @instance
             * @param {pb.common.IStreamInitParam} request StreamInitParam message or plain object
             * @returns {Promise<pb.common.Payload>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pb.game.GameService#request}.
             * @memberof pb.game.GameService
             * @typedef RequestCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pb.common.Payload} [response] Payload
             */

            /**
             * Calls Request.
             * @function request
             * @memberof pb.game.GameService
             * @instance
             * @param {pb.common.IPayload} request Payload message or plain object
             * @param {pb.game.GameService.RequestCallback} callback Node-style callback called with the error, if any, and Payload
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(GameService.prototype.request = function request(request, callback) {
                return this.rpcCall(request, $root.pb.common.Payload, $root.pb.common.Payload, request, callback);
            }, "name", { value: "Request" });

            /**
             * Calls Request.
             * @function request
             * @memberof pb.game.GameService
             * @instance
             * @param {pb.common.IPayload} request Payload message or plain object
             * @returns {Promise<pb.common.Payload>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pb.game.GameService#getAvailableMaps}.
             * @memberof pb.game.GameService
             * @typedef GetAvailableMapsCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pb.game.GetAvailableMapsRsp} [response] GetAvailableMapsRsp
             */

            /**
             * Calls GetAvailableMaps.
             * @function getAvailableMaps
             * @memberof pb.game.GameService
             * @instance
             * @param {pb.game.IGetAvailableMapsReq} request GetAvailableMapsReq message or plain object
             * @param {pb.game.GameService.GetAvailableMapsCallback} callback Node-style callback called with the error, if any, and GetAvailableMapsRsp
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(GameService.prototype.getAvailableMaps = function getAvailableMaps(request, callback) {
                return this.rpcCall(getAvailableMaps, $root.pb.game.GetAvailableMapsReq, $root.pb.game.GetAvailableMapsRsp, request, callback);
            }, "name", { value: "GetAvailableMaps" });

            /**
             * Calls GetAvailableMaps.
             * @function getAvailableMaps
             * @memberof pb.game.GameService
             * @instance
             * @param {pb.game.IGetAvailableMapsReq} request GetAvailableMapsReq message or plain object
             * @returns {Promise<pb.game.GetAvailableMapsRsp>} Promise
             * @variation 2
             */

            return GameService;
        })();

        return game;
    })();

    pb.im = (function() {

        /**
         * Namespace im.
         * @memberof pb
         * @namespace
         */
        var im = {};

        im.IMMessage = (function() {

            /**
             * Properties of a IMMessage.
             * @memberof pb.im
             * @interface IIMMessage
             * @property {pb.im.IMMessageType.Enum|null} [type] IMMessage type
             * @property {google.protobuf.IAny|null} [content] IMMessage content
             */

            /**
             * Constructs a new IMMessage.
             * @memberof pb.im
             * @classdesc Represents a IMMessage.
             * @implements IIMMessage
             * @constructor
             * @param {pb.im.IIMMessage=} [properties] Properties to set
             */
            function IMMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * IMMessage type.
             * @member {pb.im.IMMessageType.Enum} type
             * @memberof pb.im.IMMessage
             * @instance
             */
            IMMessage.prototype.type = 0;

            /**
             * IMMessage content.
             * @member {google.protobuf.IAny|null|undefined} content
             * @memberof pb.im.IMMessage
             * @instance
             */
            IMMessage.prototype.content = null;

            /**
             * Creates a new IMMessage instance using the specified properties.
             * @function create
             * @memberof pb.im.IMMessage
             * @static
             * @param {pb.im.IIMMessage=} [properties] Properties to set
             * @returns {pb.im.IMMessage} IMMessage instance
             */
            IMMessage.create = function create(properties) {
                return new IMMessage(properties);
            };

            /**
             * Encodes the specified IMMessage message. Does not implicitly {@link pb.im.IMMessage.verify|verify} messages.
             * @function encode
             * @memberof pb.im.IMMessage
             * @static
             * @param {pb.im.IIMMessage} message IMMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            IMMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type != null && message.hasOwnProperty("type"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                if (message.content != null && message.hasOwnProperty("content"))
                    $root.google.protobuf.Any.encode(message.content, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified IMMessage message, length delimited. Does not implicitly {@link pb.im.IMMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.im.IMMessage
             * @static
             * @param {pb.im.IIMMessage} message IMMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            IMMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a IMMessage message from the specified reader or buffer.
             * @function decode
             * @memberof pb.im.IMMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.im.IMMessage} IMMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            IMMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.im.IMMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type = reader.int32();
                        break;
                    case 6:
                        message.content = $root.google.protobuf.Any.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a IMMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.im.IMMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.im.IMMessage} IMMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            IMMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a IMMessage message.
             * @function verify
             * @memberof pb.im.IMMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            IMMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                        break;
                    }
                if (message.content != null && message.hasOwnProperty("content")) {
                    var error = $root.google.protobuf.Any.verify(message.content);
                    if (error)
                        return "content." + error;
                }
                return null;
            };

            /**
             * Creates a IMMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.im.IMMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.im.IMMessage} IMMessage
             */
            IMMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.im.IMMessage)
                    return object;
                var message = new $root.pb.im.IMMessage();
                switch (object.type) {
                case "UNKNOWN":
                case 0:
                    message.type = 0;
                    break;
                case "THUMB_UP":
                case 1:
                    message.type = 1;
                    break;
                case "COMMENT":
                case 2:
                    message.type = 2;
                    break;
                case "FRIEND_REQUEST":
                case 3:
                    message.type = 3;
                    break;
                case "FRIEND_REQUEST_RESPONSE":
                case 4:
                    message.type = 4;
                    break;
                case "MOMENT_POST":
                case 5:
                    message.type = 5;
                    break;
                case "ANNOUNCEMENT":
                case 7:
                    message.type = 7;
                    break;
                case "GAME_INVITATION":
                case 8:
                    message.type = 8;
                    break;
                case "FRIEND_RELATIONSHIP_CHANGE":
                case 9:
                    message.type = 9;
                    break;
                case "GROUP_INVITATION":
                case 10:
                    message.type = 10;
                    break;
                case "GROUP_JOIN_APPLY":
                case 11:
                    message.type = 11;
                    break;
                case "GROUP_JOIN_RESULT":
                case 12:
                    message.type = 12;
                    break;
                case "TRANSACTION_NOTIFICATION":
                case 13:
                    message.type = 13;
                    break;
                case "LINK_MESSAGE":
                case 14:
                    message.type = 14;
                    break;
                case "GROUP_MESSAGE_THUMB_UP":
                case 15:
                    message.type = 15;
                    break;
                }
                if (object.content != null) {
                    if (typeof object.content !== "object")
                        throw TypeError(".pb.im.IMMessage.content: object expected");
                    message.content = $root.google.protobuf.Any.fromObject(object.content);
                }
                return message;
            };

            /**
             * Creates a plain object from a IMMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.im.IMMessage
             * @static
             * @param {pb.im.IMMessage} message IMMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            IMMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.type = options.enums === String ? "UNKNOWN" : 0;
                    object.content = null;
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.pb.im.IMMessageType.Enum[message.type] : message.type;
                if (message.content != null && message.hasOwnProperty("content"))
                    object.content = $root.google.protobuf.Any.toObject(message.content, options);
                return object;
            };

            /**
             * Converts this IMMessage to JSON.
             * @function toJSON
             * @memberof pb.im.IMMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            IMMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return IMMessage;
        })();

        im.IMMessageType = (function() {

            /**
             * Properties of a IMMessageType.
             * @memberof pb.im
             * @interface IIMMessageType
             */

            /**
             * Constructs a new IMMessageType.
             * @memberof pb.im
             * @classdesc Represents a IMMessageType.
             * @implements IIMMessageType
             * @constructor
             * @param {pb.im.IIMMessageType=} [properties] Properties to set
             */
            function IMMessageType(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new IMMessageType instance using the specified properties.
             * @function create
             * @memberof pb.im.IMMessageType
             * @static
             * @param {pb.im.IIMMessageType=} [properties] Properties to set
             * @returns {pb.im.IMMessageType} IMMessageType instance
             */
            IMMessageType.create = function create(properties) {
                return new IMMessageType(properties);
            };

            /**
             * Encodes the specified IMMessageType message. Does not implicitly {@link pb.im.IMMessageType.verify|verify} messages.
             * @function encode
             * @memberof pb.im.IMMessageType
             * @static
             * @param {pb.im.IIMMessageType} message IMMessageType message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            IMMessageType.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified IMMessageType message, length delimited. Does not implicitly {@link pb.im.IMMessageType.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.im.IMMessageType
             * @static
             * @param {pb.im.IIMMessageType} message IMMessageType message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            IMMessageType.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a IMMessageType message from the specified reader or buffer.
             * @function decode
             * @memberof pb.im.IMMessageType
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.im.IMMessageType} IMMessageType
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            IMMessageType.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.im.IMMessageType();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a IMMessageType message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.im.IMMessageType
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.im.IMMessageType} IMMessageType
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            IMMessageType.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a IMMessageType message.
             * @function verify
             * @memberof pb.im.IMMessageType
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            IMMessageType.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a IMMessageType message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.im.IMMessageType
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.im.IMMessageType} IMMessageType
             */
            IMMessageType.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.im.IMMessageType)
                    return object;
                return new $root.pb.im.IMMessageType();
            };

            /**
             * Creates a plain object from a IMMessageType message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.im.IMMessageType
             * @static
             * @param {pb.im.IMMessageType} message IMMessageType
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            IMMessageType.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this IMMessageType to JSON.
             * @function toJSON
             * @memberof pb.im.IMMessageType
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            IMMessageType.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Enum enum.
             * @name pb.im.IMMessageType.Enum
             * @enum {string}
             * @property {number} UNKNOWN=0 UNKNOWN value
             * @property {number} THUMB_UP=1 THUMB_UP value
             * @property {number} COMMENT=2 COMMENT value
             * @property {number} FRIEND_REQUEST=3 FRIEND_REQUEST value
             * @property {number} FRIEND_REQUEST_RESPONSE=4 FRIEND_REQUEST_RESPONSE value
             * @property {number} MOMENT_POST=5 MOMENT_POST value
             * @property {number} ANNOUNCEMENT=7 ANNOUNCEMENT value
             * @property {number} GAME_INVITATION=8 GAME_INVITATION value
             * @property {number} FRIEND_RELATIONSHIP_CHANGE=9 FRIEND_RELATIONSHIP_CHANGE value
             * @property {number} GROUP_INVITATION=10 GROUP_INVITATION value
             * @property {number} GROUP_JOIN_APPLY=11 GROUP_JOIN_APPLY value
             * @property {number} GROUP_JOIN_RESULT=12 GROUP_JOIN_RESULT value
             * @property {number} TRANSACTION_NOTIFICATION=13 TRANSACTION_NOTIFICATION value
             * @property {number} LINK_MESSAGE=14 LINK_MESSAGE value
             * @property {number} GROUP_MESSAGE_THUMB_UP=15 GROUP_MESSAGE_THUMB_UP value
             */
            IMMessageType.Enum = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN"] = 0;
                values[valuesById[1] = "THUMB_UP"] = 1;
                values[valuesById[2] = "COMMENT"] = 2;
                values[valuesById[3] = "FRIEND_REQUEST"] = 3;
                values[valuesById[4] = "FRIEND_REQUEST_RESPONSE"] = 4;
                values[valuesById[5] = "MOMENT_POST"] = 5;
                values[valuesById[7] = "ANNOUNCEMENT"] = 7;
                values[valuesById[8] = "GAME_INVITATION"] = 8;
                values[valuesById[9] = "FRIEND_RELATIONSHIP_CHANGE"] = 9;
                values[valuesById[10] = "GROUP_INVITATION"] = 10;
                values[valuesById[11] = "GROUP_JOIN_APPLY"] = 11;
                values[valuesById[12] = "GROUP_JOIN_RESULT"] = 12;
                values[valuesById[13] = "TRANSACTION_NOTIFICATION"] = 13;
                values[valuesById[14] = "LINK_MESSAGE"] = 14;
                values[valuesById[15] = "GROUP_MESSAGE_THUMB_UP"] = 15;
                return values;
            })();

            return IMMessageType;
        })();

        im.UserInfo = (function() {

            /**
             * Properties of a UserInfo.
             * @memberof pb.im
             * @interface IUserInfo
             * @property {Long|null} [userId] UserInfo userId
             * @property {string|null} [nickname] UserInfo nickname
             * @property {string|null} [avatar] UserInfo avatar
             */

            /**
             * Constructs a new UserInfo.
             * @memberof pb.im
             * @classdesc Represents a UserInfo.
             * @implements IUserInfo
             * @constructor
             * @param {pb.im.IUserInfo=} [properties] Properties to set
             */
            function UserInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UserInfo userId.
             * @member {Long} userId
             * @memberof pb.im.UserInfo
             * @instance
             */
            UserInfo.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * UserInfo nickname.
             * @member {string} nickname
             * @memberof pb.im.UserInfo
             * @instance
             */
            UserInfo.prototype.nickname = "";

            /**
             * UserInfo avatar.
             * @member {string} avatar
             * @memberof pb.im.UserInfo
             * @instance
             */
            UserInfo.prototype.avatar = "";

            /**
             * Creates a new UserInfo instance using the specified properties.
             * @function create
             * @memberof pb.im.UserInfo
             * @static
             * @param {pb.im.IUserInfo=} [properties] Properties to set
             * @returns {pb.im.UserInfo} UserInfo instance
             */
            UserInfo.create = function create(properties) {
                return new UserInfo(properties);
            };

            /**
             * Encodes the specified UserInfo message. Does not implicitly {@link pb.im.UserInfo.verify|verify} messages.
             * @function encode
             * @memberof pb.im.UserInfo
             * @static
             * @param {pb.im.IUserInfo} message UserInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UserInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userId);
                if (message.nickname != null && message.hasOwnProperty("nickname"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.nickname);
                if (message.avatar != null && message.hasOwnProperty("avatar"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.avatar);
                return writer;
            };

            /**
             * Encodes the specified UserInfo message, length delimited. Does not implicitly {@link pb.im.UserInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.im.UserInfo
             * @static
             * @param {pb.im.IUserInfo} message UserInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UserInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a UserInfo message from the specified reader or buffer.
             * @function decode
             * @memberof pb.im.UserInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.im.UserInfo} UserInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UserInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.im.UserInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.userId = reader.int64();
                        break;
                    case 2:
                        message.nickname = reader.string();
                        break;
                    case 3:
                        message.avatar = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a UserInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.im.UserInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.im.UserInfo} UserInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UserInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a UserInfo message.
             * @function verify
             * @memberof pb.im.UserInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UserInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                if (message.nickname != null && message.hasOwnProperty("nickname"))
                    if (!$util.isString(message.nickname))
                        return "nickname: string expected";
                if (message.avatar != null && message.hasOwnProperty("avatar"))
                    if (!$util.isString(message.avatar))
                        return "avatar: string expected";
                return null;
            };

            /**
             * Creates a UserInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.im.UserInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.im.UserInfo} UserInfo
             */
            UserInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.im.UserInfo)
                    return object;
                var message = new $root.pb.im.UserInfo();
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                if (object.nickname != null)
                    message.nickname = String(object.nickname);
                if (object.avatar != null)
                    message.avatar = String(object.avatar);
                return message;
            };

            /**
             * Creates a plain object from a UserInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.im.UserInfo
             * @static
             * @param {pb.im.UserInfo} message UserInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UserInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                    object.nickname = "";
                    object.avatar = "";
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                if (message.nickname != null && message.hasOwnProperty("nickname"))
                    object.nickname = message.nickname;
                if (message.avatar != null && message.hasOwnProperty("avatar"))
                    object.avatar = message.avatar;
                return object;
            };

            /**
             * Converts this UserInfo to JSON.
             * @function toJSON
             * @memberof pb.im.UserInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UserInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return UserInfo;
        })();

        im.TargetSummary = (function() {

            /**
             * Properties of a TargetSummary.
             * @memberof pb.im
             * @interface ITargetSummary
             * @property {pb.consts.ObjectType.Enum|null} [objectType] TargetSummary objectType
             * @property {string|null} [objectId] TargetSummary objectId
             * @property {string|null} [text] TargetSummary text
             * @property {Array.<string>|null} [imageUrls] TargetSummary imageUrls
             */

            /**
             * Constructs a new TargetSummary.
             * @memberof pb.im
             * @classdesc Represents a TargetSummary.
             * @implements ITargetSummary
             * @constructor
             * @param {pb.im.ITargetSummary=} [properties] Properties to set
             */
            function TargetSummary(properties) {
                this.imageUrls = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * TargetSummary objectType.
             * @member {pb.consts.ObjectType.Enum} objectType
             * @memberof pb.im.TargetSummary
             * @instance
             */
            TargetSummary.prototype.objectType = 0;

            /**
             * TargetSummary objectId.
             * @member {string} objectId
             * @memberof pb.im.TargetSummary
             * @instance
             */
            TargetSummary.prototype.objectId = "";

            /**
             * TargetSummary text.
             * @member {string} text
             * @memberof pb.im.TargetSummary
             * @instance
             */
            TargetSummary.prototype.text = "";

            /**
             * TargetSummary imageUrls.
             * @member {Array.<string>} imageUrls
             * @memberof pb.im.TargetSummary
             * @instance
             */
            TargetSummary.prototype.imageUrls = $util.emptyArray;

            /**
             * Creates a new TargetSummary instance using the specified properties.
             * @function create
             * @memberof pb.im.TargetSummary
             * @static
             * @param {pb.im.ITargetSummary=} [properties] Properties to set
             * @returns {pb.im.TargetSummary} TargetSummary instance
             */
            TargetSummary.create = function create(properties) {
                return new TargetSummary(properties);
            };

            /**
             * Encodes the specified TargetSummary message. Does not implicitly {@link pb.im.TargetSummary.verify|verify} messages.
             * @function encode
             * @memberof pb.im.TargetSummary
             * @static
             * @param {pb.im.ITargetSummary} message TargetSummary message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TargetSummary.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.objectType != null && message.hasOwnProperty("objectType"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.objectType);
                if (message.objectId != null && message.hasOwnProperty("objectId"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.objectId);
                if (message.text != null && message.hasOwnProperty("text"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.text);
                if (message.imageUrls != null && message.imageUrls.length)
                    for (var i = 0; i < message.imageUrls.length; ++i)
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.imageUrls[i]);
                return writer;
            };

            /**
             * Encodes the specified TargetSummary message, length delimited. Does not implicitly {@link pb.im.TargetSummary.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.im.TargetSummary
             * @static
             * @param {pb.im.ITargetSummary} message TargetSummary message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TargetSummary.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TargetSummary message from the specified reader or buffer.
             * @function decode
             * @memberof pb.im.TargetSummary
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.im.TargetSummary} TargetSummary
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TargetSummary.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.im.TargetSummary();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.objectType = reader.int32();
                        break;
                    case 2:
                        message.objectId = reader.string();
                        break;
                    case 3:
                        message.text = reader.string();
                        break;
                    case 4:
                        if (!(message.imageUrls && message.imageUrls.length))
                            message.imageUrls = [];
                        message.imageUrls.push(reader.string());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a TargetSummary message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.im.TargetSummary
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.im.TargetSummary} TargetSummary
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TargetSummary.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TargetSummary message.
             * @function verify
             * @memberof pb.im.TargetSummary
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TargetSummary.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.objectType != null && message.hasOwnProperty("objectType"))
                    switch (message.objectType) {
                    default:
                        return "objectType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                        break;
                    }
                if (message.objectId != null && message.hasOwnProperty("objectId"))
                    if (!$util.isString(message.objectId))
                        return "objectId: string expected";
                if (message.text != null && message.hasOwnProperty("text"))
                    if (!$util.isString(message.text))
                        return "text: string expected";
                if (message.imageUrls != null && message.hasOwnProperty("imageUrls")) {
                    if (!Array.isArray(message.imageUrls))
                        return "imageUrls: array expected";
                    for (var i = 0; i < message.imageUrls.length; ++i)
                        if (!$util.isString(message.imageUrls[i]))
                            return "imageUrls: string[] expected";
                }
                return null;
            };

            /**
             * Creates a TargetSummary message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.im.TargetSummary
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.im.TargetSummary} TargetSummary
             */
            TargetSummary.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.im.TargetSummary)
                    return object;
                var message = new $root.pb.im.TargetSummary();
                switch (object.objectType) {
                case "UNKNOWN":
                case 0:
                    message.objectType = 0;
                    break;
                case "MOMENT":
                case 1:
                    message.objectType = 1;
                    break;
                case "SUMMARY":
                case 2:
                    message.objectType = 2;
                    break;
                case "GROUP_MESSAGE":
                case 3:
                    message.objectType = 3;
                    break;
                case "COMMENT":
                case 4:
                    message.objectType = 4;
                    break;
                case "LINK":
                case 5:
                    message.objectType = 5;
                    break;
                }
                if (object.objectId != null)
                    message.objectId = String(object.objectId);
                if (object.text != null)
                    message.text = String(object.text);
                if (object.imageUrls) {
                    if (!Array.isArray(object.imageUrls))
                        throw TypeError(".pb.im.TargetSummary.imageUrls: array expected");
                    message.imageUrls = [];
                    for (var i = 0; i < object.imageUrls.length; ++i)
                        message.imageUrls[i] = String(object.imageUrls[i]);
                }
                return message;
            };

            /**
             * Creates a plain object from a TargetSummary message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.im.TargetSummary
             * @static
             * @param {pb.im.TargetSummary} message TargetSummary
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TargetSummary.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.imageUrls = [];
                if (options.defaults) {
                    object.objectType = options.enums === String ? "UNKNOWN" : 0;
                    object.objectId = "";
                    object.text = "";
                }
                if (message.objectType != null && message.hasOwnProperty("objectType"))
                    object.objectType = options.enums === String ? $root.pb.consts.ObjectType.Enum[message.objectType] : message.objectType;
                if (message.objectId != null && message.hasOwnProperty("objectId"))
                    object.objectId = message.objectId;
                if (message.text != null && message.hasOwnProperty("text"))
                    object.text = message.text;
                if (message.imageUrls && message.imageUrls.length) {
                    object.imageUrls = [];
                    for (var j = 0; j < message.imageUrls.length; ++j)
                        object.imageUrls[j] = message.imageUrls[j];
                }
                return object;
            };

            /**
             * Converts this TargetSummary to JSON.
             * @function toJSON
             * @memberof pb.im.TargetSummary
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TargetSummary.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return TargetSummary;
        })();

        im.ThumpUpMsg = (function() {

            /**
             * Properties of a ThumpUpMsg.
             * @memberof pb.im
             * @interface IThumpUpMsg
             * @property {pb.im.IUserInfo|null} [sender] ThumpUpMsg sender
             * @property {google.protobuf.ITimestamp|null} [createdAt] ThumpUpMsg createdAt
             * @property {pb.consts.ObjectType.Enum|null} [objectType] ThumpUpMsg objectType
             * @property {string|null} [objectId] ThumpUpMsg objectId
             * @property {pb.im.ITargetSummary|null} [summary] ThumpUpMsg summary
             */

            /**
             * Constructs a new ThumpUpMsg.
             * @memberof pb.im
             * @classdesc Represents a ThumpUpMsg.
             * @implements IThumpUpMsg
             * @constructor
             * @param {pb.im.IThumpUpMsg=} [properties] Properties to set
             */
            function ThumpUpMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ThumpUpMsg sender.
             * @member {pb.im.IUserInfo|null|undefined} sender
             * @memberof pb.im.ThumpUpMsg
             * @instance
             */
            ThumpUpMsg.prototype.sender = null;

            /**
             * ThumpUpMsg createdAt.
             * @member {google.protobuf.ITimestamp|null|undefined} createdAt
             * @memberof pb.im.ThumpUpMsg
             * @instance
             */
            ThumpUpMsg.prototype.createdAt = null;

            /**
             * ThumpUpMsg objectType.
             * @member {pb.consts.ObjectType.Enum} objectType
             * @memberof pb.im.ThumpUpMsg
             * @instance
             */
            ThumpUpMsg.prototype.objectType = 0;

            /**
             * ThumpUpMsg objectId.
             * @member {string} objectId
             * @memberof pb.im.ThumpUpMsg
             * @instance
             */
            ThumpUpMsg.prototype.objectId = "";

            /**
             * ThumpUpMsg summary.
             * @member {pb.im.ITargetSummary|null|undefined} summary
             * @memberof pb.im.ThumpUpMsg
             * @instance
             */
            ThumpUpMsg.prototype.summary = null;

            /**
             * Creates a new ThumpUpMsg instance using the specified properties.
             * @function create
             * @memberof pb.im.ThumpUpMsg
             * @static
             * @param {pb.im.IThumpUpMsg=} [properties] Properties to set
             * @returns {pb.im.ThumpUpMsg} ThumpUpMsg instance
             */
            ThumpUpMsg.create = function create(properties) {
                return new ThumpUpMsg(properties);
            };

            /**
             * Encodes the specified ThumpUpMsg message. Does not implicitly {@link pb.im.ThumpUpMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.im.ThumpUpMsg
             * @static
             * @param {pb.im.IThumpUpMsg} message ThumpUpMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ThumpUpMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.sender != null && message.hasOwnProperty("sender"))
                    $root.pb.im.UserInfo.encode(message.sender, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.createdAt != null && message.hasOwnProperty("createdAt"))
                    $root.google.protobuf.Timestamp.encode(message.createdAt, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.objectType != null && message.hasOwnProperty("objectType"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.objectType);
                if (message.objectId != null && message.hasOwnProperty("objectId"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.objectId);
                if (message.summary != null && message.hasOwnProperty("summary"))
                    $root.pb.im.TargetSummary.encode(message.summary, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ThumpUpMsg message, length delimited. Does not implicitly {@link pb.im.ThumpUpMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.im.ThumpUpMsg
             * @static
             * @param {pb.im.IThumpUpMsg} message ThumpUpMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ThumpUpMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ThumpUpMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.im.ThumpUpMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.im.ThumpUpMsg} ThumpUpMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ThumpUpMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.im.ThumpUpMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.sender = $root.pb.im.UserInfo.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.createdAt = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.objectType = reader.int32();
                        break;
                    case 4:
                        message.objectId = reader.string();
                        break;
                    case 5:
                        message.summary = $root.pb.im.TargetSummary.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ThumpUpMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.im.ThumpUpMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.im.ThumpUpMsg} ThumpUpMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ThumpUpMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ThumpUpMsg message.
             * @function verify
             * @memberof pb.im.ThumpUpMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ThumpUpMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.sender != null && message.hasOwnProperty("sender")) {
                    var error = $root.pb.im.UserInfo.verify(message.sender);
                    if (error)
                        return "sender." + error;
                }
                if (message.createdAt != null && message.hasOwnProperty("createdAt")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.createdAt);
                    if (error)
                        return "createdAt." + error;
                }
                if (message.objectType != null && message.hasOwnProperty("objectType"))
                    switch (message.objectType) {
                    default:
                        return "objectType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                        break;
                    }
                if (message.objectId != null && message.hasOwnProperty("objectId"))
                    if (!$util.isString(message.objectId))
                        return "objectId: string expected";
                if (message.summary != null && message.hasOwnProperty("summary")) {
                    var error = $root.pb.im.TargetSummary.verify(message.summary);
                    if (error)
                        return "summary." + error;
                }
                return null;
            };

            /**
             * Creates a ThumpUpMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.im.ThumpUpMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.im.ThumpUpMsg} ThumpUpMsg
             */
            ThumpUpMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.im.ThumpUpMsg)
                    return object;
                var message = new $root.pb.im.ThumpUpMsg();
                if (object.sender != null) {
                    if (typeof object.sender !== "object")
                        throw TypeError(".pb.im.ThumpUpMsg.sender: object expected");
                    message.sender = $root.pb.im.UserInfo.fromObject(object.sender);
                }
                if (object.createdAt != null) {
                    if (typeof object.createdAt !== "object")
                        throw TypeError(".pb.im.ThumpUpMsg.createdAt: object expected");
                    message.createdAt = $root.google.protobuf.Timestamp.fromObject(object.createdAt);
                }
                switch (object.objectType) {
                case "UNKNOWN":
                case 0:
                    message.objectType = 0;
                    break;
                case "MOMENT":
                case 1:
                    message.objectType = 1;
                    break;
                case "SUMMARY":
                case 2:
                    message.objectType = 2;
                    break;
                case "GROUP_MESSAGE":
                case 3:
                    message.objectType = 3;
                    break;
                case "COMMENT":
                case 4:
                    message.objectType = 4;
                    break;
                case "LINK":
                case 5:
                    message.objectType = 5;
                    break;
                }
                if (object.objectId != null)
                    message.objectId = String(object.objectId);
                if (object.summary != null) {
                    if (typeof object.summary !== "object")
                        throw TypeError(".pb.im.ThumpUpMsg.summary: object expected");
                    message.summary = $root.pb.im.TargetSummary.fromObject(object.summary);
                }
                return message;
            };

            /**
             * Creates a plain object from a ThumpUpMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.im.ThumpUpMsg
             * @static
             * @param {pb.im.ThumpUpMsg} message ThumpUpMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ThumpUpMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.sender = null;
                    object.createdAt = null;
                    object.objectType = options.enums === String ? "UNKNOWN" : 0;
                    object.objectId = "";
                    object.summary = null;
                }
                if (message.sender != null && message.hasOwnProperty("sender"))
                    object.sender = $root.pb.im.UserInfo.toObject(message.sender, options);
                if (message.createdAt != null && message.hasOwnProperty("createdAt"))
                    object.createdAt = $root.google.protobuf.Timestamp.toObject(message.createdAt, options);
                if (message.objectType != null && message.hasOwnProperty("objectType"))
                    object.objectType = options.enums === String ? $root.pb.consts.ObjectType.Enum[message.objectType] : message.objectType;
                if (message.objectId != null && message.hasOwnProperty("objectId"))
                    object.objectId = message.objectId;
                if (message.summary != null && message.hasOwnProperty("summary"))
                    object.summary = $root.pb.im.TargetSummary.toObject(message.summary, options);
                return object;
            };

            /**
             * Converts this ThumpUpMsg to JSON.
             * @function toJSON
             * @memberof pb.im.ThumpUpMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ThumpUpMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ThumpUpMsg;
        })();

        im.CommentMsg = (function() {

            /**
             * Properties of a CommentMsg.
             * @memberof pb.im
             * @interface ICommentMsg
             * @property {pb.im.IUserInfo|null} [sender] CommentMsg sender
             * @property {google.protobuf.ITimestamp|null} [createdAt] CommentMsg createdAt
             * @property {string|null} [content] CommentMsg content
             * @property {pb.consts.ObjectType.Enum|null} [objectType] CommentMsg objectType
             * @property {string|null} [objectId] CommentMsg objectId
             * @property {pb.im.ITargetSummary|null} [summary] CommentMsg summary
             * @property {string|null} [fee] CommentMsg fee
             * @property {string|null} [replyTo] CommentMsg replyTo
             */

            /**
             * Constructs a new CommentMsg.
             * @memberof pb.im
             * @classdesc Represents a CommentMsg.
             * @implements ICommentMsg
             * @constructor
             * @param {pb.im.ICommentMsg=} [properties] Properties to set
             */
            function CommentMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CommentMsg sender.
             * @member {pb.im.IUserInfo|null|undefined} sender
             * @memberof pb.im.CommentMsg
             * @instance
             */
            CommentMsg.prototype.sender = null;

            /**
             * CommentMsg createdAt.
             * @member {google.protobuf.ITimestamp|null|undefined} createdAt
             * @memberof pb.im.CommentMsg
             * @instance
             */
            CommentMsg.prototype.createdAt = null;

            /**
             * CommentMsg content.
             * @member {string} content
             * @memberof pb.im.CommentMsg
             * @instance
             */
            CommentMsg.prototype.content = "";

            /**
             * CommentMsg objectType.
             * @member {pb.consts.ObjectType.Enum} objectType
             * @memberof pb.im.CommentMsg
             * @instance
             */
            CommentMsg.prototype.objectType = 0;

            /**
             * CommentMsg objectId.
             * @member {string} objectId
             * @memberof pb.im.CommentMsg
             * @instance
             */
            CommentMsg.prototype.objectId = "";

            /**
             * CommentMsg summary.
             * @member {pb.im.ITargetSummary|null|undefined} summary
             * @memberof pb.im.CommentMsg
             * @instance
             */
            CommentMsg.prototype.summary = null;

            /**
             * CommentMsg fee.
             * @member {string} fee
             * @memberof pb.im.CommentMsg
             * @instance
             */
            CommentMsg.prototype.fee = "";

            /**
             * CommentMsg replyTo.
             * @member {string} replyTo
             * @memberof pb.im.CommentMsg
             * @instance
             */
            CommentMsg.prototype.replyTo = "";

            /**
             * Creates a new CommentMsg instance using the specified properties.
             * @function create
             * @memberof pb.im.CommentMsg
             * @static
             * @param {pb.im.ICommentMsg=} [properties] Properties to set
             * @returns {pb.im.CommentMsg} CommentMsg instance
             */
            CommentMsg.create = function create(properties) {
                return new CommentMsg(properties);
            };

            /**
             * Encodes the specified CommentMsg message. Does not implicitly {@link pb.im.CommentMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.im.CommentMsg
             * @static
             * @param {pb.im.ICommentMsg} message CommentMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CommentMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.sender != null && message.hasOwnProperty("sender"))
                    $root.pb.im.UserInfo.encode(message.sender, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.createdAt != null && message.hasOwnProperty("createdAt"))
                    $root.google.protobuf.Timestamp.encode(message.createdAt, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.content != null && message.hasOwnProperty("content"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.content);
                if (message.objectType != null && message.hasOwnProperty("objectType"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.objectType);
                if (message.objectId != null && message.hasOwnProperty("objectId"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.objectId);
                if (message.summary != null && message.hasOwnProperty("summary"))
                    $root.pb.im.TargetSummary.encode(message.summary, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.fee != null && message.hasOwnProperty("fee"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.fee);
                if (message.replyTo != null && message.hasOwnProperty("replyTo"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.replyTo);
                return writer;
            };

            /**
             * Encodes the specified CommentMsg message, length delimited. Does not implicitly {@link pb.im.CommentMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.im.CommentMsg
             * @static
             * @param {pb.im.ICommentMsg} message CommentMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CommentMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CommentMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.im.CommentMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.im.CommentMsg} CommentMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CommentMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.im.CommentMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.sender = $root.pb.im.UserInfo.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.createdAt = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.content = reader.string();
                        break;
                    case 4:
                        message.objectType = reader.int32();
                        break;
                    case 5:
                        message.objectId = reader.string();
                        break;
                    case 6:
                        message.summary = $root.pb.im.TargetSummary.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message.fee = reader.string();
                        break;
                    case 8:
                        message.replyTo = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CommentMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.im.CommentMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.im.CommentMsg} CommentMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CommentMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CommentMsg message.
             * @function verify
             * @memberof pb.im.CommentMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CommentMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.sender != null && message.hasOwnProperty("sender")) {
                    var error = $root.pb.im.UserInfo.verify(message.sender);
                    if (error)
                        return "sender." + error;
                }
                if (message.createdAt != null && message.hasOwnProperty("createdAt")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.createdAt);
                    if (error)
                        return "createdAt." + error;
                }
                if (message.content != null && message.hasOwnProperty("content"))
                    if (!$util.isString(message.content))
                        return "content: string expected";
                if (message.objectType != null && message.hasOwnProperty("objectType"))
                    switch (message.objectType) {
                    default:
                        return "objectType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                        break;
                    }
                if (message.objectId != null && message.hasOwnProperty("objectId"))
                    if (!$util.isString(message.objectId))
                        return "objectId: string expected";
                if (message.summary != null && message.hasOwnProperty("summary")) {
                    var error = $root.pb.im.TargetSummary.verify(message.summary);
                    if (error)
                        return "summary." + error;
                }
                if (message.fee != null && message.hasOwnProperty("fee"))
                    if (!$util.isString(message.fee))
                        return "fee: string expected";
                if (message.replyTo != null && message.hasOwnProperty("replyTo"))
                    if (!$util.isString(message.replyTo))
                        return "replyTo: string expected";
                return null;
            };

            /**
             * Creates a CommentMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.im.CommentMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.im.CommentMsg} CommentMsg
             */
            CommentMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.im.CommentMsg)
                    return object;
                var message = new $root.pb.im.CommentMsg();
                if (object.sender != null) {
                    if (typeof object.sender !== "object")
                        throw TypeError(".pb.im.CommentMsg.sender: object expected");
                    message.sender = $root.pb.im.UserInfo.fromObject(object.sender);
                }
                if (object.createdAt != null) {
                    if (typeof object.createdAt !== "object")
                        throw TypeError(".pb.im.CommentMsg.createdAt: object expected");
                    message.createdAt = $root.google.protobuf.Timestamp.fromObject(object.createdAt);
                }
                if (object.content != null)
                    message.content = String(object.content);
                switch (object.objectType) {
                case "UNKNOWN":
                case 0:
                    message.objectType = 0;
                    break;
                case "MOMENT":
                case 1:
                    message.objectType = 1;
                    break;
                case "SUMMARY":
                case 2:
                    message.objectType = 2;
                    break;
                case "GROUP_MESSAGE":
                case 3:
                    message.objectType = 3;
                    break;
                case "COMMENT":
                case 4:
                    message.objectType = 4;
                    break;
                case "LINK":
                case 5:
                    message.objectType = 5;
                    break;
                }
                if (object.objectId != null)
                    message.objectId = String(object.objectId);
                if (object.summary != null) {
                    if (typeof object.summary !== "object")
                        throw TypeError(".pb.im.CommentMsg.summary: object expected");
                    message.summary = $root.pb.im.TargetSummary.fromObject(object.summary);
                }
                if (object.fee != null)
                    message.fee = String(object.fee);
                if (object.replyTo != null)
                    message.replyTo = String(object.replyTo);
                return message;
            };

            /**
             * Creates a plain object from a CommentMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.im.CommentMsg
             * @static
             * @param {pb.im.CommentMsg} message CommentMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CommentMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.sender = null;
                    object.createdAt = null;
                    object.content = "";
                    object.objectType = options.enums === String ? "UNKNOWN" : 0;
                    object.objectId = "";
                    object.summary = null;
                    object.fee = "";
                    object.replyTo = "";
                }
                if (message.sender != null && message.hasOwnProperty("sender"))
                    object.sender = $root.pb.im.UserInfo.toObject(message.sender, options);
                if (message.createdAt != null && message.hasOwnProperty("createdAt"))
                    object.createdAt = $root.google.protobuf.Timestamp.toObject(message.createdAt, options);
                if (message.content != null && message.hasOwnProperty("content"))
                    object.content = message.content;
                if (message.objectType != null && message.hasOwnProperty("objectType"))
                    object.objectType = options.enums === String ? $root.pb.consts.ObjectType.Enum[message.objectType] : message.objectType;
                if (message.objectId != null && message.hasOwnProperty("objectId"))
                    object.objectId = message.objectId;
                if (message.summary != null && message.hasOwnProperty("summary"))
                    object.summary = $root.pb.im.TargetSummary.toObject(message.summary, options);
                if (message.fee != null && message.hasOwnProperty("fee"))
                    object.fee = message.fee;
                if (message.replyTo != null && message.hasOwnProperty("replyTo"))
                    object.replyTo = message.replyTo;
                return object;
            };

            /**
             * Converts this CommentMsg to JSON.
             * @function toJSON
             * @memberof pb.im.CommentMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CommentMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CommentMsg;
        })();

        im.FriendRequestMsg = (function() {

            /**
             * Properties of a FriendRequestMsg.
             * @memberof pb.im
             * @interface IFriendRequestMsg
             * @property {pb.im.IUserInfo|null} [sender] FriendRequestMsg sender
             * @property {string|null} [reason] FriendRequestMsg reason
             */

            /**
             * Constructs a new FriendRequestMsg.
             * @memberof pb.im
             * @classdesc Represents a FriendRequestMsg.
             * @implements IFriendRequestMsg
             * @constructor
             * @param {pb.im.IFriendRequestMsg=} [properties] Properties to set
             */
            function FriendRequestMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FriendRequestMsg sender.
             * @member {pb.im.IUserInfo|null|undefined} sender
             * @memberof pb.im.FriendRequestMsg
             * @instance
             */
            FriendRequestMsg.prototype.sender = null;

            /**
             * FriendRequestMsg reason.
             * @member {string} reason
             * @memberof pb.im.FriendRequestMsg
             * @instance
             */
            FriendRequestMsg.prototype.reason = "";

            /**
             * Creates a new FriendRequestMsg instance using the specified properties.
             * @function create
             * @memberof pb.im.FriendRequestMsg
             * @static
             * @param {pb.im.IFriendRequestMsg=} [properties] Properties to set
             * @returns {pb.im.FriendRequestMsg} FriendRequestMsg instance
             */
            FriendRequestMsg.create = function create(properties) {
                return new FriendRequestMsg(properties);
            };

            /**
             * Encodes the specified FriendRequestMsg message. Does not implicitly {@link pb.im.FriendRequestMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.im.FriendRequestMsg
             * @static
             * @param {pb.im.IFriendRequestMsg} message FriendRequestMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FriendRequestMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.sender != null && message.hasOwnProperty("sender"))
                    $root.pb.im.UserInfo.encode(message.sender, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.reason != null && message.hasOwnProperty("reason"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.reason);
                return writer;
            };

            /**
             * Encodes the specified FriendRequestMsg message, length delimited. Does not implicitly {@link pb.im.FriendRequestMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.im.FriendRequestMsg
             * @static
             * @param {pb.im.IFriendRequestMsg} message FriendRequestMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FriendRequestMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FriendRequestMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.im.FriendRequestMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.im.FriendRequestMsg} FriendRequestMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FriendRequestMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.im.FriendRequestMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.sender = $root.pb.im.UserInfo.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.reason = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FriendRequestMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.im.FriendRequestMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.im.FriendRequestMsg} FriendRequestMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FriendRequestMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FriendRequestMsg message.
             * @function verify
             * @memberof pb.im.FriendRequestMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FriendRequestMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.sender != null && message.hasOwnProperty("sender")) {
                    var error = $root.pb.im.UserInfo.verify(message.sender);
                    if (error)
                        return "sender." + error;
                }
                if (message.reason != null && message.hasOwnProperty("reason"))
                    if (!$util.isString(message.reason))
                        return "reason: string expected";
                return null;
            };

            /**
             * Creates a FriendRequestMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.im.FriendRequestMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.im.FriendRequestMsg} FriendRequestMsg
             */
            FriendRequestMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.im.FriendRequestMsg)
                    return object;
                var message = new $root.pb.im.FriendRequestMsg();
                if (object.sender != null) {
                    if (typeof object.sender !== "object")
                        throw TypeError(".pb.im.FriendRequestMsg.sender: object expected");
                    message.sender = $root.pb.im.UserInfo.fromObject(object.sender);
                }
                if (object.reason != null)
                    message.reason = String(object.reason);
                return message;
            };

            /**
             * Creates a plain object from a FriendRequestMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.im.FriendRequestMsg
             * @static
             * @param {pb.im.FriendRequestMsg} message FriendRequestMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FriendRequestMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.sender = null;
                    object.reason = "";
                }
                if (message.sender != null && message.hasOwnProperty("sender"))
                    object.sender = $root.pb.im.UserInfo.toObject(message.sender, options);
                if (message.reason != null && message.hasOwnProperty("reason"))
                    object.reason = message.reason;
                return object;
            };

            /**
             * Converts this FriendRequestMsg to JSON.
             * @function toJSON
             * @memberof pb.im.FriendRequestMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FriendRequestMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FriendRequestMsg;
        })();

        im.FriendRequestResponseMsg = (function() {

            /**
             * Properties of a FriendRequestResponseMsg.
             * @memberof pb.im
             * @interface IFriendRequestResponseMsg
             * @property {pb.im.IUserInfo|null} [sender] FriendRequestResponseMsg sender
             * @property {boolean|null} [accepted] FriendRequestResponseMsg accepted
             */

            /**
             * Constructs a new FriendRequestResponseMsg.
             * @memberof pb.im
             * @classdesc Represents a FriendRequestResponseMsg.
             * @implements IFriendRequestResponseMsg
             * @constructor
             * @param {pb.im.IFriendRequestResponseMsg=} [properties] Properties to set
             */
            function FriendRequestResponseMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FriendRequestResponseMsg sender.
             * @member {pb.im.IUserInfo|null|undefined} sender
             * @memberof pb.im.FriendRequestResponseMsg
             * @instance
             */
            FriendRequestResponseMsg.prototype.sender = null;

            /**
             * FriendRequestResponseMsg accepted.
             * @member {boolean} accepted
             * @memberof pb.im.FriendRequestResponseMsg
             * @instance
             */
            FriendRequestResponseMsg.prototype.accepted = false;

            /**
             * Creates a new FriendRequestResponseMsg instance using the specified properties.
             * @function create
             * @memberof pb.im.FriendRequestResponseMsg
             * @static
             * @param {pb.im.IFriendRequestResponseMsg=} [properties] Properties to set
             * @returns {pb.im.FriendRequestResponseMsg} FriendRequestResponseMsg instance
             */
            FriendRequestResponseMsg.create = function create(properties) {
                return new FriendRequestResponseMsg(properties);
            };

            /**
             * Encodes the specified FriendRequestResponseMsg message. Does not implicitly {@link pb.im.FriendRequestResponseMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.im.FriendRequestResponseMsg
             * @static
             * @param {pb.im.IFriendRequestResponseMsg} message FriendRequestResponseMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FriendRequestResponseMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.sender != null && message.hasOwnProperty("sender"))
                    $root.pb.im.UserInfo.encode(message.sender, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.accepted != null && message.hasOwnProperty("accepted"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.accepted);
                return writer;
            };

            /**
             * Encodes the specified FriendRequestResponseMsg message, length delimited. Does not implicitly {@link pb.im.FriendRequestResponseMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.im.FriendRequestResponseMsg
             * @static
             * @param {pb.im.IFriendRequestResponseMsg} message FriendRequestResponseMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FriendRequestResponseMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FriendRequestResponseMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.im.FriendRequestResponseMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.im.FriendRequestResponseMsg} FriendRequestResponseMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FriendRequestResponseMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.im.FriendRequestResponseMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.sender = $root.pb.im.UserInfo.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.accepted = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FriendRequestResponseMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.im.FriendRequestResponseMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.im.FriendRequestResponseMsg} FriendRequestResponseMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FriendRequestResponseMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FriendRequestResponseMsg message.
             * @function verify
             * @memberof pb.im.FriendRequestResponseMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FriendRequestResponseMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.sender != null && message.hasOwnProperty("sender")) {
                    var error = $root.pb.im.UserInfo.verify(message.sender);
                    if (error)
                        return "sender." + error;
                }
                if (message.accepted != null && message.hasOwnProperty("accepted"))
                    if (typeof message.accepted !== "boolean")
                        return "accepted: boolean expected";
                return null;
            };

            /**
             * Creates a FriendRequestResponseMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.im.FriendRequestResponseMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.im.FriendRequestResponseMsg} FriendRequestResponseMsg
             */
            FriendRequestResponseMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.im.FriendRequestResponseMsg)
                    return object;
                var message = new $root.pb.im.FriendRequestResponseMsg();
                if (object.sender != null) {
                    if (typeof object.sender !== "object")
                        throw TypeError(".pb.im.FriendRequestResponseMsg.sender: object expected");
                    message.sender = $root.pb.im.UserInfo.fromObject(object.sender);
                }
                if (object.accepted != null)
                    message.accepted = Boolean(object.accepted);
                return message;
            };

            /**
             * Creates a plain object from a FriendRequestResponseMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.im.FriendRequestResponseMsg
             * @static
             * @param {pb.im.FriendRequestResponseMsg} message FriendRequestResponseMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FriendRequestResponseMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.sender = null;
                    object.accepted = false;
                }
                if (message.sender != null && message.hasOwnProperty("sender"))
                    object.sender = $root.pb.im.UserInfo.toObject(message.sender, options);
                if (message.accepted != null && message.hasOwnProperty("accepted"))
                    object.accepted = message.accepted;
                return object;
            };

            /**
             * Converts this FriendRequestResponseMsg to JSON.
             * @function toJSON
             * @memberof pb.im.FriendRequestResponseMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FriendRequestResponseMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FriendRequestResponseMsg;
        })();

        im.MomentPostMsg = (function() {

            /**
             * Properties of a MomentPostMsg.
             * @memberof pb.im
             * @interface IMomentPostMsg
             * @property {pb.im.IUserInfo|null} [sender] MomentPostMsg sender
             */

            /**
             * Constructs a new MomentPostMsg.
             * @memberof pb.im
             * @classdesc Represents a MomentPostMsg.
             * @implements IMomentPostMsg
             * @constructor
             * @param {pb.im.IMomentPostMsg=} [properties] Properties to set
             */
            function MomentPostMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MomentPostMsg sender.
             * @member {pb.im.IUserInfo|null|undefined} sender
             * @memberof pb.im.MomentPostMsg
             * @instance
             */
            MomentPostMsg.prototype.sender = null;

            /**
             * Creates a new MomentPostMsg instance using the specified properties.
             * @function create
             * @memberof pb.im.MomentPostMsg
             * @static
             * @param {pb.im.IMomentPostMsg=} [properties] Properties to set
             * @returns {pb.im.MomentPostMsg} MomentPostMsg instance
             */
            MomentPostMsg.create = function create(properties) {
                return new MomentPostMsg(properties);
            };

            /**
             * Encodes the specified MomentPostMsg message. Does not implicitly {@link pb.im.MomentPostMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.im.MomentPostMsg
             * @static
             * @param {pb.im.IMomentPostMsg} message MomentPostMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MomentPostMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.sender != null && message.hasOwnProperty("sender"))
                    $root.pb.im.UserInfo.encode(message.sender, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified MomentPostMsg message, length delimited. Does not implicitly {@link pb.im.MomentPostMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.im.MomentPostMsg
             * @static
             * @param {pb.im.IMomentPostMsg} message MomentPostMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MomentPostMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MomentPostMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.im.MomentPostMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.im.MomentPostMsg} MomentPostMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MomentPostMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.im.MomentPostMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.sender = $root.pb.im.UserInfo.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MomentPostMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.im.MomentPostMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.im.MomentPostMsg} MomentPostMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MomentPostMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MomentPostMsg message.
             * @function verify
             * @memberof pb.im.MomentPostMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MomentPostMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.sender != null && message.hasOwnProperty("sender")) {
                    var error = $root.pb.im.UserInfo.verify(message.sender);
                    if (error)
                        return "sender." + error;
                }
                return null;
            };

            /**
             * Creates a MomentPostMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.im.MomentPostMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.im.MomentPostMsg} MomentPostMsg
             */
            MomentPostMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.im.MomentPostMsg)
                    return object;
                var message = new $root.pb.im.MomentPostMsg();
                if (object.sender != null) {
                    if (typeof object.sender !== "object")
                        throw TypeError(".pb.im.MomentPostMsg.sender: object expected");
                    message.sender = $root.pb.im.UserInfo.fromObject(object.sender);
                }
                return message;
            };

            /**
             * Creates a plain object from a MomentPostMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.im.MomentPostMsg
             * @static
             * @param {pb.im.MomentPostMsg} message MomentPostMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MomentPostMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.sender = null;
                if (message.sender != null && message.hasOwnProperty("sender"))
                    object.sender = $root.pb.im.UserInfo.toObject(message.sender, options);
                return object;
            };

            /**
             * Converts this MomentPostMsg to JSON.
             * @function toJSON
             * @memberof pb.im.MomentPostMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MomentPostMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MomentPostMsg;
        })();

        im.AnnouncementMsg = (function() {

            /**
             * Properties of an AnnouncementMsg.
             * @memberof pb.im
             * @interface IAnnouncementMsg
             * @property {string|null} [content] AnnouncementMsg content
             */

            /**
             * Constructs a new AnnouncementMsg.
             * @memberof pb.im
             * @classdesc Represents an AnnouncementMsg.
             * @implements IAnnouncementMsg
             * @constructor
             * @param {pb.im.IAnnouncementMsg=} [properties] Properties to set
             */
            function AnnouncementMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AnnouncementMsg content.
             * @member {string} content
             * @memberof pb.im.AnnouncementMsg
             * @instance
             */
            AnnouncementMsg.prototype.content = "";

            /**
             * Creates a new AnnouncementMsg instance using the specified properties.
             * @function create
             * @memberof pb.im.AnnouncementMsg
             * @static
             * @param {pb.im.IAnnouncementMsg=} [properties] Properties to set
             * @returns {pb.im.AnnouncementMsg} AnnouncementMsg instance
             */
            AnnouncementMsg.create = function create(properties) {
                return new AnnouncementMsg(properties);
            };

            /**
             * Encodes the specified AnnouncementMsg message. Does not implicitly {@link pb.im.AnnouncementMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.im.AnnouncementMsg
             * @static
             * @param {pb.im.IAnnouncementMsg} message AnnouncementMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AnnouncementMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.content != null && message.hasOwnProperty("content"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.content);
                return writer;
            };

            /**
             * Encodes the specified AnnouncementMsg message, length delimited. Does not implicitly {@link pb.im.AnnouncementMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.im.AnnouncementMsg
             * @static
             * @param {pb.im.IAnnouncementMsg} message AnnouncementMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AnnouncementMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AnnouncementMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.im.AnnouncementMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.im.AnnouncementMsg} AnnouncementMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AnnouncementMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.im.AnnouncementMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.content = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AnnouncementMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.im.AnnouncementMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.im.AnnouncementMsg} AnnouncementMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AnnouncementMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AnnouncementMsg message.
             * @function verify
             * @memberof pb.im.AnnouncementMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AnnouncementMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.content != null && message.hasOwnProperty("content"))
                    if (!$util.isString(message.content))
                        return "content: string expected";
                return null;
            };

            /**
             * Creates an AnnouncementMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.im.AnnouncementMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.im.AnnouncementMsg} AnnouncementMsg
             */
            AnnouncementMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.im.AnnouncementMsg)
                    return object;
                var message = new $root.pb.im.AnnouncementMsg();
                if (object.content != null)
                    message.content = String(object.content);
                return message;
            };

            /**
             * Creates a plain object from an AnnouncementMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.im.AnnouncementMsg
             * @static
             * @param {pb.im.AnnouncementMsg} message AnnouncementMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AnnouncementMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.content = "";
                if (message.content != null && message.hasOwnProperty("content"))
                    object.content = message.content;
                return object;
            };

            /**
             * Converts this AnnouncementMsg to JSON.
             * @function toJSON
             * @memberof pb.im.AnnouncementMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AnnouncementMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return AnnouncementMsg;
        })();

        im.GameInvitationMsg = (function() {

            /**
             * Properties of a GameInvitationMsg.
             * @memberof pb.im
             * @interface IGameInvitationMsg
             * @property {pb.im.IUserInfo|null} [sender] GameInvitationMsg sender
             * @property {string|null} [roomId] GameInvitationMsg roomId
             * @property {number|null} [assetScore] GameInvitationMsg assetScore
             * @property {string|null} [assetLevel] GameInvitationMsg assetLevel
             */

            /**
             * Constructs a new GameInvitationMsg.
             * @memberof pb.im
             * @classdesc Represents a GameInvitationMsg.
             * @implements IGameInvitationMsg
             * @constructor
             * @param {pb.im.IGameInvitationMsg=} [properties] Properties to set
             */
            function GameInvitationMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GameInvitationMsg sender.
             * @member {pb.im.IUserInfo|null|undefined} sender
             * @memberof pb.im.GameInvitationMsg
             * @instance
             */
            GameInvitationMsg.prototype.sender = null;

            /**
             * GameInvitationMsg roomId.
             * @member {string} roomId
             * @memberof pb.im.GameInvitationMsg
             * @instance
             */
            GameInvitationMsg.prototype.roomId = "";

            /**
             * GameInvitationMsg assetScore.
             * @member {number} assetScore
             * @memberof pb.im.GameInvitationMsg
             * @instance
             */
            GameInvitationMsg.prototype.assetScore = 0;

            /**
             * GameInvitationMsg assetLevel.
             * @member {string} assetLevel
             * @memberof pb.im.GameInvitationMsg
             * @instance
             */
            GameInvitationMsg.prototype.assetLevel = "";

            /**
             * Creates a new GameInvitationMsg instance using the specified properties.
             * @function create
             * @memberof pb.im.GameInvitationMsg
             * @static
             * @param {pb.im.IGameInvitationMsg=} [properties] Properties to set
             * @returns {pb.im.GameInvitationMsg} GameInvitationMsg instance
             */
            GameInvitationMsg.create = function create(properties) {
                return new GameInvitationMsg(properties);
            };

            /**
             * Encodes the specified GameInvitationMsg message. Does not implicitly {@link pb.im.GameInvitationMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.im.GameInvitationMsg
             * @static
             * @param {pb.im.IGameInvitationMsg} message GameInvitationMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameInvitationMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.sender != null && message.hasOwnProperty("sender"))
                    $root.pb.im.UserInfo.encode(message.sender, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.roomId);
                if (message.assetScore != null && message.hasOwnProperty("assetScore"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.assetScore);
                if (message.assetLevel != null && message.hasOwnProperty("assetLevel"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.assetLevel);
                return writer;
            };

            /**
             * Encodes the specified GameInvitationMsg message, length delimited. Does not implicitly {@link pb.im.GameInvitationMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.im.GameInvitationMsg
             * @static
             * @param {pb.im.IGameInvitationMsg} message GameInvitationMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameInvitationMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GameInvitationMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.im.GameInvitationMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.im.GameInvitationMsg} GameInvitationMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameInvitationMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.im.GameInvitationMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.sender = $root.pb.im.UserInfo.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.roomId = reader.string();
                        break;
                    case 3:
                        message.assetScore = reader.int32();
                        break;
                    case 4:
                        message.assetLevel = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GameInvitationMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.im.GameInvitationMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.im.GameInvitationMsg} GameInvitationMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameInvitationMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GameInvitationMsg message.
             * @function verify
             * @memberof pb.im.GameInvitationMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GameInvitationMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.sender != null && message.hasOwnProperty("sender")) {
                    var error = $root.pb.im.UserInfo.verify(message.sender);
                    if (error)
                        return "sender." + error;
                }
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    if (!$util.isString(message.roomId))
                        return "roomId: string expected";
                if (message.assetScore != null && message.hasOwnProperty("assetScore"))
                    if (!$util.isInteger(message.assetScore))
                        return "assetScore: integer expected";
                if (message.assetLevel != null && message.hasOwnProperty("assetLevel"))
                    if (!$util.isString(message.assetLevel))
                        return "assetLevel: string expected";
                return null;
            };

            /**
             * Creates a GameInvitationMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.im.GameInvitationMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.im.GameInvitationMsg} GameInvitationMsg
             */
            GameInvitationMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.im.GameInvitationMsg)
                    return object;
                var message = new $root.pb.im.GameInvitationMsg();
                if (object.sender != null) {
                    if (typeof object.sender !== "object")
                        throw TypeError(".pb.im.GameInvitationMsg.sender: object expected");
                    message.sender = $root.pb.im.UserInfo.fromObject(object.sender);
                }
                if (object.roomId != null)
                    message.roomId = String(object.roomId);
                if (object.assetScore != null)
                    message.assetScore = object.assetScore | 0;
                if (object.assetLevel != null)
                    message.assetLevel = String(object.assetLevel);
                return message;
            };

            /**
             * Creates a plain object from a GameInvitationMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.im.GameInvitationMsg
             * @static
             * @param {pb.im.GameInvitationMsg} message GameInvitationMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GameInvitationMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.sender = null;
                    object.roomId = "";
                    object.assetScore = 0;
                    object.assetLevel = "";
                }
                if (message.sender != null && message.hasOwnProperty("sender"))
                    object.sender = $root.pb.im.UserInfo.toObject(message.sender, options);
                if (message.roomId != null && message.hasOwnProperty("roomId"))
                    object.roomId = message.roomId;
                if (message.assetScore != null && message.hasOwnProperty("assetScore"))
                    object.assetScore = message.assetScore;
                if (message.assetLevel != null && message.hasOwnProperty("assetLevel"))
                    object.assetLevel = message.assetLevel;
                return object;
            };

            /**
             * Converts this GameInvitationMsg to JSON.
             * @function toJSON
             * @memberof pb.im.GameInvitationMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GameInvitationMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GameInvitationMsg;
        })();

        im.FriendRelationshipChangeMsg = (function() {

            /**
             * Properties of a FriendRelationshipChangeMsg.
             * @memberof pb.im
             * @interface IFriendRelationshipChangeMsg
             * @property {pb.im.FriendRelationshipChangeMsg.ChangeType|null} [type] FriendRelationshipChangeMsg type
             * @property {Long|null} [userId] FriendRelationshipChangeMsg userId
             */

            /**
             * Constructs a new FriendRelationshipChangeMsg.
             * @memberof pb.im
             * @classdesc Represents a FriendRelationshipChangeMsg.
             * @implements IFriendRelationshipChangeMsg
             * @constructor
             * @param {pb.im.IFriendRelationshipChangeMsg=} [properties] Properties to set
             */
            function FriendRelationshipChangeMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FriendRelationshipChangeMsg type.
             * @member {pb.im.FriendRelationshipChangeMsg.ChangeType} type
             * @memberof pb.im.FriendRelationshipChangeMsg
             * @instance
             */
            FriendRelationshipChangeMsg.prototype.type = 0;

            /**
             * FriendRelationshipChangeMsg userId.
             * @member {Long} userId
             * @memberof pb.im.FriendRelationshipChangeMsg
             * @instance
             */
            FriendRelationshipChangeMsg.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new FriendRelationshipChangeMsg instance using the specified properties.
             * @function create
             * @memberof pb.im.FriendRelationshipChangeMsg
             * @static
             * @param {pb.im.IFriendRelationshipChangeMsg=} [properties] Properties to set
             * @returns {pb.im.FriendRelationshipChangeMsg} FriendRelationshipChangeMsg instance
             */
            FriendRelationshipChangeMsg.create = function create(properties) {
                return new FriendRelationshipChangeMsg(properties);
            };

            /**
             * Encodes the specified FriendRelationshipChangeMsg message. Does not implicitly {@link pb.im.FriendRelationshipChangeMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.im.FriendRelationshipChangeMsg
             * @static
             * @param {pb.im.IFriendRelationshipChangeMsg} message FriendRelationshipChangeMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FriendRelationshipChangeMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type != null && message.hasOwnProperty("type"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.userId);
                return writer;
            };

            /**
             * Encodes the specified FriendRelationshipChangeMsg message, length delimited. Does not implicitly {@link pb.im.FriendRelationshipChangeMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.im.FriendRelationshipChangeMsg
             * @static
             * @param {pb.im.IFriendRelationshipChangeMsg} message FriendRelationshipChangeMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FriendRelationshipChangeMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FriendRelationshipChangeMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.im.FriendRelationshipChangeMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.im.FriendRelationshipChangeMsg} FriendRelationshipChangeMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FriendRelationshipChangeMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.im.FriendRelationshipChangeMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type = reader.int32();
                        break;
                    case 2:
                        message.userId = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FriendRelationshipChangeMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.im.FriendRelationshipChangeMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.im.FriendRelationshipChangeMsg} FriendRelationshipChangeMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FriendRelationshipChangeMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FriendRelationshipChangeMsg message.
             * @function verify
             * @memberof pb.im.FriendRelationshipChangeMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FriendRelationshipChangeMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                return null;
            };

            /**
             * Creates a FriendRelationshipChangeMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.im.FriendRelationshipChangeMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.im.FriendRelationshipChangeMsg} FriendRelationshipChangeMsg
             */
            FriendRelationshipChangeMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.im.FriendRelationshipChangeMsg)
                    return object;
                var message = new $root.pb.im.FriendRelationshipChangeMsg();
                switch (object.type) {
                case "UNKNOWN":
                case 0:
                    message.type = 0;
                    break;
                case "ADD":
                case 1:
                    message.type = 1;
                    break;
                case "DELETE":
                case 2:
                    message.type = 2;
                    break;
                }
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a FriendRelationshipChangeMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.im.FriendRelationshipChangeMsg
             * @static
             * @param {pb.im.FriendRelationshipChangeMsg} message FriendRelationshipChangeMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FriendRelationshipChangeMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.type = options.enums === String ? "UNKNOWN" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.pb.im.FriendRelationshipChangeMsg.ChangeType[message.type] : message.type;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                return object;
            };

            /**
             * Converts this FriendRelationshipChangeMsg to JSON.
             * @function toJSON
             * @memberof pb.im.FriendRelationshipChangeMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FriendRelationshipChangeMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * ChangeType enum.
             * @name pb.im.FriendRelationshipChangeMsg.ChangeType
             * @enum {string}
             * @property {number} UNKNOWN=0 UNKNOWN value
             * @property {number} ADD=1 ADD value
             * @property {number} DELETE=2 DELETE value
             */
            FriendRelationshipChangeMsg.ChangeType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN"] = 0;
                values[valuesById[1] = "ADD"] = 1;
                values[valuesById[2] = "DELETE"] = 2;
                return values;
            })();

            return FriendRelationshipChangeMsg;
        })();

        im.GroupInvitationMsg = (function() {

            /**
             * Properties of a GroupInvitationMsg.
             * @memberof pb.im
             * @interface IGroupInvitationMsg
             * @property {string|null} [name] GroupInvitationMsg name
             * @property {number|null} [memberNum] GroupInvitationMsg memberNum
             * @property {string|null} [ranking] GroupInvitationMsg ranking
             * @property {string|null} [groupId] GroupInvitationMsg groupId
             * @property {string|null} [groupAvatarUrl] GroupInvitationMsg groupAvatarUrl
             */

            /**
             * Constructs a new GroupInvitationMsg.
             * @memberof pb.im
             * @classdesc Represents a GroupInvitationMsg.
             * @implements IGroupInvitationMsg
             * @constructor
             * @param {pb.im.IGroupInvitationMsg=} [properties] Properties to set
             */
            function GroupInvitationMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GroupInvitationMsg name.
             * @member {string} name
             * @memberof pb.im.GroupInvitationMsg
             * @instance
             */
            GroupInvitationMsg.prototype.name = "";

            /**
             * GroupInvitationMsg memberNum.
             * @member {number} memberNum
             * @memberof pb.im.GroupInvitationMsg
             * @instance
             */
            GroupInvitationMsg.prototype.memberNum = 0;

            /**
             * GroupInvitationMsg ranking.
             * @member {string} ranking
             * @memberof pb.im.GroupInvitationMsg
             * @instance
             */
            GroupInvitationMsg.prototype.ranking = "";

            /**
             * GroupInvitationMsg groupId.
             * @member {string} groupId
             * @memberof pb.im.GroupInvitationMsg
             * @instance
             */
            GroupInvitationMsg.prototype.groupId = "";

            /**
             * GroupInvitationMsg groupAvatarUrl.
             * @member {string} groupAvatarUrl
             * @memberof pb.im.GroupInvitationMsg
             * @instance
             */
            GroupInvitationMsg.prototype.groupAvatarUrl = "";

            /**
             * Creates a new GroupInvitationMsg instance using the specified properties.
             * @function create
             * @memberof pb.im.GroupInvitationMsg
             * @static
             * @param {pb.im.IGroupInvitationMsg=} [properties] Properties to set
             * @returns {pb.im.GroupInvitationMsg} GroupInvitationMsg instance
             */
            GroupInvitationMsg.create = function create(properties) {
                return new GroupInvitationMsg(properties);
            };

            /**
             * Encodes the specified GroupInvitationMsg message. Does not implicitly {@link pb.im.GroupInvitationMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.im.GroupInvitationMsg
             * @static
             * @param {pb.im.IGroupInvitationMsg} message GroupInvitationMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GroupInvitationMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.memberNum != null && message.hasOwnProperty("memberNum"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.memberNum);
                if (message.ranking != null && message.hasOwnProperty("ranking"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.ranking);
                if (message.groupId != null && message.hasOwnProperty("groupId"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.groupId);
                if (message.groupAvatarUrl != null && message.hasOwnProperty("groupAvatarUrl"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.groupAvatarUrl);
                return writer;
            };

            /**
             * Encodes the specified GroupInvitationMsg message, length delimited. Does not implicitly {@link pb.im.GroupInvitationMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.im.GroupInvitationMsg
             * @static
             * @param {pb.im.IGroupInvitationMsg} message GroupInvitationMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GroupInvitationMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GroupInvitationMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.im.GroupInvitationMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.im.GroupInvitationMsg} GroupInvitationMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GroupInvitationMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.im.GroupInvitationMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.memberNum = reader.int32();
                        break;
                    case 3:
                        message.ranking = reader.string();
                        break;
                    case 4:
                        message.groupId = reader.string();
                        break;
                    case 5:
                        message.groupAvatarUrl = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GroupInvitationMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.im.GroupInvitationMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.im.GroupInvitationMsg} GroupInvitationMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GroupInvitationMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GroupInvitationMsg message.
             * @function verify
             * @memberof pb.im.GroupInvitationMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GroupInvitationMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.memberNum != null && message.hasOwnProperty("memberNum"))
                    if (!$util.isInteger(message.memberNum))
                        return "memberNum: integer expected";
                if (message.ranking != null && message.hasOwnProperty("ranking"))
                    if (!$util.isString(message.ranking))
                        return "ranking: string expected";
                if (message.groupId != null && message.hasOwnProperty("groupId"))
                    if (!$util.isString(message.groupId))
                        return "groupId: string expected";
                if (message.groupAvatarUrl != null && message.hasOwnProperty("groupAvatarUrl"))
                    if (!$util.isString(message.groupAvatarUrl))
                        return "groupAvatarUrl: string expected";
                return null;
            };

            /**
             * Creates a GroupInvitationMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.im.GroupInvitationMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.im.GroupInvitationMsg} GroupInvitationMsg
             */
            GroupInvitationMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.im.GroupInvitationMsg)
                    return object;
                var message = new $root.pb.im.GroupInvitationMsg();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.memberNum != null)
                    message.memberNum = object.memberNum | 0;
                if (object.ranking != null)
                    message.ranking = String(object.ranking);
                if (object.groupId != null)
                    message.groupId = String(object.groupId);
                if (object.groupAvatarUrl != null)
                    message.groupAvatarUrl = String(object.groupAvatarUrl);
                return message;
            };

            /**
             * Creates a plain object from a GroupInvitationMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.im.GroupInvitationMsg
             * @static
             * @param {pb.im.GroupInvitationMsg} message GroupInvitationMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GroupInvitationMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    object.memberNum = 0;
                    object.ranking = "";
                    object.groupId = "";
                    object.groupAvatarUrl = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.memberNum != null && message.hasOwnProperty("memberNum"))
                    object.memberNum = message.memberNum;
                if (message.ranking != null && message.hasOwnProperty("ranking"))
                    object.ranking = message.ranking;
                if (message.groupId != null && message.hasOwnProperty("groupId"))
                    object.groupId = message.groupId;
                if (message.groupAvatarUrl != null && message.hasOwnProperty("groupAvatarUrl"))
                    object.groupAvatarUrl = message.groupAvatarUrl;
                return object;
            };

            /**
             * Converts this GroupInvitationMsg to JSON.
             * @function toJSON
             * @memberof pb.im.GroupInvitationMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GroupInvitationMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GroupInvitationMsg;
        })();

        im.GroupJoinApplyMsg = (function() {

            /**
             * Properties of a GroupJoinApplyMsg.
             * @memberof pb.im
             * @interface IGroupJoinApplyMsg
             * @property {pb.im.IUserInfo|null} [applier] GroupJoinApplyMsg applier
             * @property {pb.im.IGroupInfo|null} [groupInfo] GroupJoinApplyMsg groupInfo
             * @property {string|null} [invitorNickName] GroupJoinApplyMsg invitorNickName
             * @property {boolean|null} [hasPaid] GroupJoinApplyMsg hasPaid
             * @property {string|null} [accAmountString] GroupJoinApplyMsg accAmountString
             * @property {string|null} [applicationId] GroupJoinApplyMsg applicationId
             */

            /**
             * Constructs a new GroupJoinApplyMsg.
             * @memberof pb.im
             * @classdesc Represents a GroupJoinApplyMsg.
             * @implements IGroupJoinApplyMsg
             * @constructor
             * @param {pb.im.IGroupJoinApplyMsg=} [properties] Properties to set
             */
            function GroupJoinApplyMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GroupJoinApplyMsg applier.
             * @member {pb.im.IUserInfo|null|undefined} applier
             * @memberof pb.im.GroupJoinApplyMsg
             * @instance
             */
            GroupJoinApplyMsg.prototype.applier = null;

            /**
             * GroupJoinApplyMsg groupInfo.
             * @member {pb.im.IGroupInfo|null|undefined} groupInfo
             * @memberof pb.im.GroupJoinApplyMsg
             * @instance
             */
            GroupJoinApplyMsg.prototype.groupInfo = null;

            /**
             * GroupJoinApplyMsg invitorNickName.
             * @member {string} invitorNickName
             * @memberof pb.im.GroupJoinApplyMsg
             * @instance
             */
            GroupJoinApplyMsg.prototype.invitorNickName = "";

            /**
             * GroupJoinApplyMsg hasPaid.
             * @member {boolean} hasPaid
             * @memberof pb.im.GroupJoinApplyMsg
             * @instance
             */
            GroupJoinApplyMsg.prototype.hasPaid = false;

            /**
             * GroupJoinApplyMsg accAmountString.
             * @member {string} accAmountString
             * @memberof pb.im.GroupJoinApplyMsg
             * @instance
             */
            GroupJoinApplyMsg.prototype.accAmountString = "";

            /**
             * GroupJoinApplyMsg applicationId.
             * @member {string} applicationId
             * @memberof pb.im.GroupJoinApplyMsg
             * @instance
             */
            GroupJoinApplyMsg.prototype.applicationId = "";

            /**
             * Creates a new GroupJoinApplyMsg instance using the specified properties.
             * @function create
             * @memberof pb.im.GroupJoinApplyMsg
             * @static
             * @param {pb.im.IGroupJoinApplyMsg=} [properties] Properties to set
             * @returns {pb.im.GroupJoinApplyMsg} GroupJoinApplyMsg instance
             */
            GroupJoinApplyMsg.create = function create(properties) {
                return new GroupJoinApplyMsg(properties);
            };

            /**
             * Encodes the specified GroupJoinApplyMsg message. Does not implicitly {@link pb.im.GroupJoinApplyMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.im.GroupJoinApplyMsg
             * @static
             * @param {pb.im.IGroupJoinApplyMsg} message GroupJoinApplyMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GroupJoinApplyMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.applier != null && message.hasOwnProperty("applier"))
                    $root.pb.im.UserInfo.encode(message.applier, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.groupInfo != null && message.hasOwnProperty("groupInfo"))
                    $root.pb.im.GroupInfo.encode(message.groupInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.invitorNickName != null && message.hasOwnProperty("invitorNickName"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.invitorNickName);
                if (message.hasPaid != null && message.hasOwnProperty("hasPaid"))
                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.hasPaid);
                if (message.accAmountString != null && message.hasOwnProperty("accAmountString"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.accAmountString);
                if (message.applicationId != null && message.hasOwnProperty("applicationId"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.applicationId);
                return writer;
            };

            /**
             * Encodes the specified GroupJoinApplyMsg message, length delimited. Does not implicitly {@link pb.im.GroupJoinApplyMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.im.GroupJoinApplyMsg
             * @static
             * @param {pb.im.IGroupJoinApplyMsg} message GroupJoinApplyMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GroupJoinApplyMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GroupJoinApplyMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.im.GroupJoinApplyMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.im.GroupJoinApplyMsg} GroupJoinApplyMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GroupJoinApplyMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.im.GroupJoinApplyMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.applier = $root.pb.im.UserInfo.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.groupInfo = $root.pb.im.GroupInfo.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.invitorNickName = reader.string();
                        break;
                    case 4:
                        message.hasPaid = reader.bool();
                        break;
                    case 5:
                        message.accAmountString = reader.string();
                        break;
                    case 6:
                        message.applicationId = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GroupJoinApplyMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.im.GroupJoinApplyMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.im.GroupJoinApplyMsg} GroupJoinApplyMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GroupJoinApplyMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GroupJoinApplyMsg message.
             * @function verify
             * @memberof pb.im.GroupJoinApplyMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GroupJoinApplyMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.applier != null && message.hasOwnProperty("applier")) {
                    var error = $root.pb.im.UserInfo.verify(message.applier);
                    if (error)
                        return "applier." + error;
                }
                if (message.groupInfo != null && message.hasOwnProperty("groupInfo")) {
                    var error = $root.pb.im.GroupInfo.verify(message.groupInfo);
                    if (error)
                        return "groupInfo." + error;
                }
                if (message.invitorNickName != null && message.hasOwnProperty("invitorNickName"))
                    if (!$util.isString(message.invitorNickName))
                        return "invitorNickName: string expected";
                if (message.hasPaid != null && message.hasOwnProperty("hasPaid"))
                    if (typeof message.hasPaid !== "boolean")
                        return "hasPaid: boolean expected";
                if (message.accAmountString != null && message.hasOwnProperty("accAmountString"))
                    if (!$util.isString(message.accAmountString))
                        return "accAmountString: string expected";
                if (message.applicationId != null && message.hasOwnProperty("applicationId"))
                    if (!$util.isString(message.applicationId))
                        return "applicationId: string expected";
                return null;
            };

            /**
             * Creates a GroupJoinApplyMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.im.GroupJoinApplyMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.im.GroupJoinApplyMsg} GroupJoinApplyMsg
             */
            GroupJoinApplyMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.im.GroupJoinApplyMsg)
                    return object;
                var message = new $root.pb.im.GroupJoinApplyMsg();
                if (object.applier != null) {
                    if (typeof object.applier !== "object")
                        throw TypeError(".pb.im.GroupJoinApplyMsg.applier: object expected");
                    message.applier = $root.pb.im.UserInfo.fromObject(object.applier);
                }
                if (object.groupInfo != null) {
                    if (typeof object.groupInfo !== "object")
                        throw TypeError(".pb.im.GroupJoinApplyMsg.groupInfo: object expected");
                    message.groupInfo = $root.pb.im.GroupInfo.fromObject(object.groupInfo);
                }
                if (object.invitorNickName != null)
                    message.invitorNickName = String(object.invitorNickName);
                if (object.hasPaid != null)
                    message.hasPaid = Boolean(object.hasPaid);
                if (object.accAmountString != null)
                    message.accAmountString = String(object.accAmountString);
                if (object.applicationId != null)
                    message.applicationId = String(object.applicationId);
                return message;
            };

            /**
             * Creates a plain object from a GroupJoinApplyMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.im.GroupJoinApplyMsg
             * @static
             * @param {pb.im.GroupJoinApplyMsg} message GroupJoinApplyMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GroupJoinApplyMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.applier = null;
                    object.groupInfo = null;
                    object.invitorNickName = "";
                    object.hasPaid = false;
                    object.accAmountString = "";
                    object.applicationId = "";
                }
                if (message.applier != null && message.hasOwnProperty("applier"))
                    object.applier = $root.pb.im.UserInfo.toObject(message.applier, options);
                if (message.groupInfo != null && message.hasOwnProperty("groupInfo"))
                    object.groupInfo = $root.pb.im.GroupInfo.toObject(message.groupInfo, options);
                if (message.invitorNickName != null && message.hasOwnProperty("invitorNickName"))
                    object.invitorNickName = message.invitorNickName;
                if (message.hasPaid != null && message.hasOwnProperty("hasPaid"))
                    object.hasPaid = message.hasPaid;
                if (message.accAmountString != null && message.hasOwnProperty("accAmountString"))
                    object.accAmountString = message.accAmountString;
                if (message.applicationId != null && message.hasOwnProperty("applicationId"))
                    object.applicationId = message.applicationId;
                return object;
            };

            /**
             * Converts this GroupJoinApplyMsg to JSON.
             * @function toJSON
             * @memberof pb.im.GroupJoinApplyMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GroupJoinApplyMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GroupJoinApplyMsg;
        })();

        im.GroupInfo = (function() {

            /**
             * Properties of a GroupInfo.
             * @memberof pb.im
             * @interface IGroupInfo
             * @property {string|null} [groupId] GroupInfo groupId
             * @property {string|null} [name] GroupInfo name
             * @property {string|null} [faceUrl] GroupInfo faceUrl
             */

            /**
             * Constructs a new GroupInfo.
             * @memberof pb.im
             * @classdesc Represents a GroupInfo.
             * @implements IGroupInfo
             * @constructor
             * @param {pb.im.IGroupInfo=} [properties] Properties to set
             */
            function GroupInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GroupInfo groupId.
             * @member {string} groupId
             * @memberof pb.im.GroupInfo
             * @instance
             */
            GroupInfo.prototype.groupId = "";

            /**
             * GroupInfo name.
             * @member {string} name
             * @memberof pb.im.GroupInfo
             * @instance
             */
            GroupInfo.prototype.name = "";

            /**
             * GroupInfo faceUrl.
             * @member {string} faceUrl
             * @memberof pb.im.GroupInfo
             * @instance
             */
            GroupInfo.prototype.faceUrl = "";

            /**
             * Creates a new GroupInfo instance using the specified properties.
             * @function create
             * @memberof pb.im.GroupInfo
             * @static
             * @param {pb.im.IGroupInfo=} [properties] Properties to set
             * @returns {pb.im.GroupInfo} GroupInfo instance
             */
            GroupInfo.create = function create(properties) {
                return new GroupInfo(properties);
            };

            /**
             * Encodes the specified GroupInfo message. Does not implicitly {@link pb.im.GroupInfo.verify|verify} messages.
             * @function encode
             * @memberof pb.im.GroupInfo
             * @static
             * @param {pb.im.IGroupInfo} message GroupInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GroupInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.groupId != null && message.hasOwnProperty("groupId"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.groupId);
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                if (message.faceUrl != null && message.hasOwnProperty("faceUrl"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.faceUrl);
                return writer;
            };

            /**
             * Encodes the specified GroupInfo message, length delimited. Does not implicitly {@link pb.im.GroupInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.im.GroupInfo
             * @static
             * @param {pb.im.IGroupInfo} message GroupInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GroupInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GroupInfo message from the specified reader or buffer.
             * @function decode
             * @memberof pb.im.GroupInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.im.GroupInfo} GroupInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GroupInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.im.GroupInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.groupId = reader.string();
                        break;
                    case 2:
                        message.name = reader.string();
                        break;
                    case 3:
                        message.faceUrl = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GroupInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.im.GroupInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.im.GroupInfo} GroupInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GroupInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GroupInfo message.
             * @function verify
             * @memberof pb.im.GroupInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GroupInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.groupId != null && message.hasOwnProperty("groupId"))
                    if (!$util.isString(message.groupId))
                        return "groupId: string expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.faceUrl != null && message.hasOwnProperty("faceUrl"))
                    if (!$util.isString(message.faceUrl))
                        return "faceUrl: string expected";
                return null;
            };

            /**
             * Creates a GroupInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.im.GroupInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.im.GroupInfo} GroupInfo
             */
            GroupInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.im.GroupInfo)
                    return object;
                var message = new $root.pb.im.GroupInfo();
                if (object.groupId != null)
                    message.groupId = String(object.groupId);
                if (object.name != null)
                    message.name = String(object.name);
                if (object.faceUrl != null)
                    message.faceUrl = String(object.faceUrl);
                return message;
            };

            /**
             * Creates a plain object from a GroupInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.im.GroupInfo
             * @static
             * @param {pb.im.GroupInfo} message GroupInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GroupInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.groupId = "";
                    object.name = "";
                    object.faceUrl = "";
                }
                if (message.groupId != null && message.hasOwnProperty("groupId"))
                    object.groupId = message.groupId;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.faceUrl != null && message.hasOwnProperty("faceUrl"))
                    object.faceUrl = message.faceUrl;
                return object;
            };

            /**
             * Converts this GroupInfo to JSON.
             * @function toJSON
             * @memberof pb.im.GroupInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GroupInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GroupInfo;
        })();

        im.GroupJoinResultMsg = (function() {

            /**
             * Properties of a GroupJoinResultMsg.
             * @memberof pb.im
             * @interface IGroupJoinResultMsg
             * @property {pb.im.IGroupInfo|null} [groupInfo] GroupJoinResultMsg groupInfo
             * @property {boolean|null} [accepted] GroupJoinResultMsg accepted
             * @property {boolean|null} [hasPaid] GroupJoinResultMsg hasPaid
             * @property {string|null} [accAmountString] GroupJoinResultMsg accAmountString
             */

            /**
             * Constructs a new GroupJoinResultMsg.
             * @memberof pb.im
             * @classdesc Represents a GroupJoinResultMsg.
             * @implements IGroupJoinResultMsg
             * @constructor
             * @param {pb.im.IGroupJoinResultMsg=} [properties] Properties to set
             */
            function GroupJoinResultMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GroupJoinResultMsg groupInfo.
             * @member {pb.im.IGroupInfo|null|undefined} groupInfo
             * @memberof pb.im.GroupJoinResultMsg
             * @instance
             */
            GroupJoinResultMsg.prototype.groupInfo = null;

            /**
             * GroupJoinResultMsg accepted.
             * @member {boolean} accepted
             * @memberof pb.im.GroupJoinResultMsg
             * @instance
             */
            GroupJoinResultMsg.prototype.accepted = false;

            /**
             * GroupJoinResultMsg hasPaid.
             * @member {boolean} hasPaid
             * @memberof pb.im.GroupJoinResultMsg
             * @instance
             */
            GroupJoinResultMsg.prototype.hasPaid = false;

            /**
             * GroupJoinResultMsg accAmountString.
             * @member {string} accAmountString
             * @memberof pb.im.GroupJoinResultMsg
             * @instance
             */
            GroupJoinResultMsg.prototype.accAmountString = "";

            /**
             * Creates a new GroupJoinResultMsg instance using the specified properties.
             * @function create
             * @memberof pb.im.GroupJoinResultMsg
             * @static
             * @param {pb.im.IGroupJoinResultMsg=} [properties] Properties to set
             * @returns {pb.im.GroupJoinResultMsg} GroupJoinResultMsg instance
             */
            GroupJoinResultMsg.create = function create(properties) {
                return new GroupJoinResultMsg(properties);
            };

            /**
             * Encodes the specified GroupJoinResultMsg message. Does not implicitly {@link pb.im.GroupJoinResultMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.im.GroupJoinResultMsg
             * @static
             * @param {pb.im.IGroupJoinResultMsg} message GroupJoinResultMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GroupJoinResultMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.groupInfo != null && message.hasOwnProperty("groupInfo"))
                    $root.pb.im.GroupInfo.encode(message.groupInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.accepted != null && message.hasOwnProperty("accepted"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.accepted);
                if (message.hasPaid != null && message.hasOwnProperty("hasPaid"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.hasPaid);
                if (message.accAmountString != null && message.hasOwnProperty("accAmountString"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.accAmountString);
                return writer;
            };

            /**
             * Encodes the specified GroupJoinResultMsg message, length delimited. Does not implicitly {@link pb.im.GroupJoinResultMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.im.GroupJoinResultMsg
             * @static
             * @param {pb.im.IGroupJoinResultMsg} message GroupJoinResultMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GroupJoinResultMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GroupJoinResultMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.im.GroupJoinResultMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.im.GroupJoinResultMsg} GroupJoinResultMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GroupJoinResultMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.im.GroupJoinResultMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.groupInfo = $root.pb.im.GroupInfo.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.accepted = reader.bool();
                        break;
                    case 3:
                        message.hasPaid = reader.bool();
                        break;
                    case 4:
                        message.accAmountString = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GroupJoinResultMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.im.GroupJoinResultMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.im.GroupJoinResultMsg} GroupJoinResultMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GroupJoinResultMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GroupJoinResultMsg message.
             * @function verify
             * @memberof pb.im.GroupJoinResultMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GroupJoinResultMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.groupInfo != null && message.hasOwnProperty("groupInfo")) {
                    var error = $root.pb.im.GroupInfo.verify(message.groupInfo);
                    if (error)
                        return "groupInfo." + error;
                }
                if (message.accepted != null && message.hasOwnProperty("accepted"))
                    if (typeof message.accepted !== "boolean")
                        return "accepted: boolean expected";
                if (message.hasPaid != null && message.hasOwnProperty("hasPaid"))
                    if (typeof message.hasPaid !== "boolean")
                        return "hasPaid: boolean expected";
                if (message.accAmountString != null && message.hasOwnProperty("accAmountString"))
                    if (!$util.isString(message.accAmountString))
                        return "accAmountString: string expected";
                return null;
            };

            /**
             * Creates a GroupJoinResultMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.im.GroupJoinResultMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.im.GroupJoinResultMsg} GroupJoinResultMsg
             */
            GroupJoinResultMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.im.GroupJoinResultMsg)
                    return object;
                var message = new $root.pb.im.GroupJoinResultMsg();
                if (object.groupInfo != null) {
                    if (typeof object.groupInfo !== "object")
                        throw TypeError(".pb.im.GroupJoinResultMsg.groupInfo: object expected");
                    message.groupInfo = $root.pb.im.GroupInfo.fromObject(object.groupInfo);
                }
                if (object.accepted != null)
                    message.accepted = Boolean(object.accepted);
                if (object.hasPaid != null)
                    message.hasPaid = Boolean(object.hasPaid);
                if (object.accAmountString != null)
                    message.accAmountString = String(object.accAmountString);
                return message;
            };

            /**
             * Creates a plain object from a GroupJoinResultMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.im.GroupJoinResultMsg
             * @static
             * @param {pb.im.GroupJoinResultMsg} message GroupJoinResultMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GroupJoinResultMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.groupInfo = null;
                    object.accepted = false;
                    object.hasPaid = false;
                    object.accAmountString = "";
                }
                if (message.groupInfo != null && message.hasOwnProperty("groupInfo"))
                    object.groupInfo = $root.pb.im.GroupInfo.toObject(message.groupInfo, options);
                if (message.accepted != null && message.hasOwnProperty("accepted"))
                    object.accepted = message.accepted;
                if (message.hasPaid != null && message.hasOwnProperty("hasPaid"))
                    object.hasPaid = message.hasPaid;
                if (message.accAmountString != null && message.hasOwnProperty("accAmountString"))
                    object.accAmountString = message.accAmountString;
                return object;
            };

            /**
             * Converts this GroupJoinResultMsg to JSON.
             * @function toJSON
             * @memberof pb.im.GroupJoinResultMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GroupJoinResultMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GroupJoinResultMsg;
        })();

        im.TransactionNotificationType = (function() {

            /**
             * Properties of a TransactionNotificationType.
             * @memberof pb.im
             * @interface ITransactionNotificationType
             */

            /**
             * Constructs a new TransactionNotificationType.
             * @memberof pb.im
             * @classdesc Represents a TransactionNotificationType.
             * @implements ITransactionNotificationType
             * @constructor
             * @param {pb.im.ITransactionNotificationType=} [properties] Properties to set
             */
            function TransactionNotificationType(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new TransactionNotificationType instance using the specified properties.
             * @function create
             * @memberof pb.im.TransactionNotificationType
             * @static
             * @param {pb.im.ITransactionNotificationType=} [properties] Properties to set
             * @returns {pb.im.TransactionNotificationType} TransactionNotificationType instance
             */
            TransactionNotificationType.create = function create(properties) {
                return new TransactionNotificationType(properties);
            };

            /**
             * Encodes the specified TransactionNotificationType message. Does not implicitly {@link pb.im.TransactionNotificationType.verify|verify} messages.
             * @function encode
             * @memberof pb.im.TransactionNotificationType
             * @static
             * @param {pb.im.ITransactionNotificationType} message TransactionNotificationType message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TransactionNotificationType.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified TransactionNotificationType message, length delimited. Does not implicitly {@link pb.im.TransactionNotificationType.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.im.TransactionNotificationType
             * @static
             * @param {pb.im.ITransactionNotificationType} message TransactionNotificationType message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TransactionNotificationType.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TransactionNotificationType message from the specified reader or buffer.
             * @function decode
             * @memberof pb.im.TransactionNotificationType
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.im.TransactionNotificationType} TransactionNotificationType
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TransactionNotificationType.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.im.TransactionNotificationType();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a TransactionNotificationType message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.im.TransactionNotificationType
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.im.TransactionNotificationType} TransactionNotificationType
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TransactionNotificationType.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TransactionNotificationType message.
             * @function verify
             * @memberof pb.im.TransactionNotificationType
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TransactionNotificationType.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a TransactionNotificationType message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.im.TransactionNotificationType
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.im.TransactionNotificationType} TransactionNotificationType
             */
            TransactionNotificationType.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.im.TransactionNotificationType)
                    return object;
                return new $root.pb.im.TransactionNotificationType();
            };

            /**
             * Creates a plain object from a TransactionNotificationType message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.im.TransactionNotificationType
             * @static
             * @param {pb.im.TransactionNotificationType} message TransactionNotificationType
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TransactionNotificationType.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this TransactionNotificationType to JSON.
             * @function toJSON
             * @memberof pb.im.TransactionNotificationType
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TransactionNotificationType.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Enum enum.
             * @name pb.im.TransactionNotificationType.Enum
             * @enum {string}
             * @property {number} UNKNOWN=0 UNKNOWN value
             * @property {number} RECEIVE=1 RECEIVE value
             * @property {number} PAY=2 PAY value
             * @property {number} REFUND=3 REFUND value
             */
            TransactionNotificationType.Enum = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN"] = 0;
                values[valuesById[1] = "RECEIVE"] = 1;
                values[valuesById[2] = "PAY"] = 2;
                values[valuesById[3] = "REFUND"] = 3;
                return values;
            })();

            return TransactionNotificationType;
        })();

        im.TransactionNotificationMsg = (function() {

            /**
             * Properties of a TransactionNotificationMsg.
             * @memberof pb.im
             * @interface ITransactionNotificationMsg
             * @property {pb.im.IUserInfo|null} [user] TransactionNotificationMsg user
             * @property {string|null} [comment] TransactionNotificationMsg comment
             * @property {string|null} [amount] TransactionNotificationMsg amount
             * @property {string|null} [tradeId] TransactionNotificationMsg tradeId
             * @property {pb.im.TransactionNotificationType.Enum|null} [type] TransactionNotificationMsg type
             */

            /**
             * Constructs a new TransactionNotificationMsg.
             * @memberof pb.im
             * @classdesc Represents a TransactionNotificationMsg.
             * @implements ITransactionNotificationMsg
             * @constructor
             * @param {pb.im.ITransactionNotificationMsg=} [properties] Properties to set
             */
            function TransactionNotificationMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * TransactionNotificationMsg user.
             * @member {pb.im.IUserInfo|null|undefined} user
             * @memberof pb.im.TransactionNotificationMsg
             * @instance
             */
            TransactionNotificationMsg.prototype.user = null;

            /**
             * TransactionNotificationMsg comment.
             * @member {string} comment
             * @memberof pb.im.TransactionNotificationMsg
             * @instance
             */
            TransactionNotificationMsg.prototype.comment = "";

            /**
             * TransactionNotificationMsg amount.
             * @member {string} amount
             * @memberof pb.im.TransactionNotificationMsg
             * @instance
             */
            TransactionNotificationMsg.prototype.amount = "";

            /**
             * TransactionNotificationMsg tradeId.
             * @member {string} tradeId
             * @memberof pb.im.TransactionNotificationMsg
             * @instance
             */
            TransactionNotificationMsg.prototype.tradeId = "";

            /**
             * TransactionNotificationMsg type.
             * @member {pb.im.TransactionNotificationType.Enum} type
             * @memberof pb.im.TransactionNotificationMsg
             * @instance
             */
            TransactionNotificationMsg.prototype.type = 0;

            /**
             * Creates a new TransactionNotificationMsg instance using the specified properties.
             * @function create
             * @memberof pb.im.TransactionNotificationMsg
             * @static
             * @param {pb.im.ITransactionNotificationMsg=} [properties] Properties to set
             * @returns {pb.im.TransactionNotificationMsg} TransactionNotificationMsg instance
             */
            TransactionNotificationMsg.create = function create(properties) {
                return new TransactionNotificationMsg(properties);
            };

            /**
             * Encodes the specified TransactionNotificationMsg message. Does not implicitly {@link pb.im.TransactionNotificationMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.im.TransactionNotificationMsg
             * @static
             * @param {pb.im.ITransactionNotificationMsg} message TransactionNotificationMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TransactionNotificationMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.user != null && message.hasOwnProperty("user"))
                    $root.pb.im.UserInfo.encode(message.user, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.comment != null && message.hasOwnProperty("comment"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.comment);
                if (message.amount != null && message.hasOwnProperty("amount"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.amount);
                if (message.tradeId != null && message.hasOwnProperty("tradeId"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.tradeId);
                if (message.type != null && message.hasOwnProperty("type"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                return writer;
            };

            /**
             * Encodes the specified TransactionNotificationMsg message, length delimited. Does not implicitly {@link pb.im.TransactionNotificationMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.im.TransactionNotificationMsg
             * @static
             * @param {pb.im.ITransactionNotificationMsg} message TransactionNotificationMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TransactionNotificationMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TransactionNotificationMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.im.TransactionNotificationMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.im.TransactionNotificationMsg} TransactionNotificationMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TransactionNotificationMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.im.TransactionNotificationMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.user = $root.pb.im.UserInfo.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.comment = reader.string();
                        break;
                    case 3:
                        message.amount = reader.string();
                        break;
                    case 4:
                        message.tradeId = reader.string();
                        break;
                    case 5:
                        message.type = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a TransactionNotificationMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.im.TransactionNotificationMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.im.TransactionNotificationMsg} TransactionNotificationMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TransactionNotificationMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TransactionNotificationMsg message.
             * @function verify
             * @memberof pb.im.TransactionNotificationMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TransactionNotificationMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.user != null && message.hasOwnProperty("user")) {
                    var error = $root.pb.im.UserInfo.verify(message.user);
                    if (error)
                        return "user." + error;
                }
                if (message.comment != null && message.hasOwnProperty("comment"))
                    if (!$util.isString(message.comment))
                        return "comment: string expected";
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isString(message.amount))
                        return "amount: string expected";
                if (message.tradeId != null && message.hasOwnProperty("tradeId"))
                    if (!$util.isString(message.tradeId))
                        return "tradeId: string expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                return null;
            };

            /**
             * Creates a TransactionNotificationMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.im.TransactionNotificationMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.im.TransactionNotificationMsg} TransactionNotificationMsg
             */
            TransactionNotificationMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.im.TransactionNotificationMsg)
                    return object;
                var message = new $root.pb.im.TransactionNotificationMsg();
                if (object.user != null) {
                    if (typeof object.user !== "object")
                        throw TypeError(".pb.im.TransactionNotificationMsg.user: object expected");
                    message.user = $root.pb.im.UserInfo.fromObject(object.user);
                }
                if (object.comment != null)
                    message.comment = String(object.comment);
                if (object.amount != null)
                    message.amount = String(object.amount);
                if (object.tradeId != null)
                    message.tradeId = String(object.tradeId);
                switch (object.type) {
                case "UNKNOWN":
                case 0:
                    message.type = 0;
                    break;
                case "RECEIVE":
                case 1:
                    message.type = 1;
                    break;
                case "PAY":
                case 2:
                    message.type = 2;
                    break;
                case "REFUND":
                case 3:
                    message.type = 3;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a TransactionNotificationMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.im.TransactionNotificationMsg
             * @static
             * @param {pb.im.TransactionNotificationMsg} message TransactionNotificationMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TransactionNotificationMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.user = null;
                    object.comment = "";
                    object.amount = "";
                    object.tradeId = "";
                    object.type = options.enums === String ? "UNKNOWN" : 0;
                }
                if (message.user != null && message.hasOwnProperty("user"))
                    object.user = $root.pb.im.UserInfo.toObject(message.user, options);
                if (message.comment != null && message.hasOwnProperty("comment"))
                    object.comment = message.comment;
                if (message.amount != null && message.hasOwnProperty("amount"))
                    object.amount = message.amount;
                if (message.tradeId != null && message.hasOwnProperty("tradeId"))
                    object.tradeId = message.tradeId;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.pb.im.TransactionNotificationType.Enum[message.type] : message.type;
                return object;
            };

            /**
             * Converts this TransactionNotificationMsg to JSON.
             * @function toJSON
             * @memberof pb.im.TransactionNotificationMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TransactionNotificationMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return TransactionNotificationMsg;
        })();

        im.LinkMsg = (function() {

            /**
             * Properties of a LinkMsg.
             * @memberof pb.im
             * @interface ILinkMsg
             * @property {string|null} [title] LinkMsg title
             * @property {string|null} [desc] LinkMsg desc
             * @property {string|null} [url] LinkMsg url
             * @property {string|null} [faviconUrl] LinkMsg faviconUrl
             */

            /**
             * Constructs a new LinkMsg.
             * @memberof pb.im
             * @classdesc Represents a LinkMsg.
             * @implements ILinkMsg
             * @constructor
             * @param {pb.im.ILinkMsg=} [properties] Properties to set
             */
            function LinkMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LinkMsg title.
             * @member {string} title
             * @memberof pb.im.LinkMsg
             * @instance
             */
            LinkMsg.prototype.title = "";

            /**
             * LinkMsg desc.
             * @member {string} desc
             * @memberof pb.im.LinkMsg
             * @instance
             */
            LinkMsg.prototype.desc = "";

            /**
             * LinkMsg url.
             * @member {string} url
             * @memberof pb.im.LinkMsg
             * @instance
             */
            LinkMsg.prototype.url = "";

            /**
             * LinkMsg faviconUrl.
             * @member {string} faviconUrl
             * @memberof pb.im.LinkMsg
             * @instance
             */
            LinkMsg.prototype.faviconUrl = "";

            /**
             * Creates a new LinkMsg instance using the specified properties.
             * @function create
             * @memberof pb.im.LinkMsg
             * @static
             * @param {pb.im.ILinkMsg=} [properties] Properties to set
             * @returns {pb.im.LinkMsg} LinkMsg instance
             */
            LinkMsg.create = function create(properties) {
                return new LinkMsg(properties);
            };

            /**
             * Encodes the specified LinkMsg message. Does not implicitly {@link pb.im.LinkMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.im.LinkMsg
             * @static
             * @param {pb.im.ILinkMsg} message LinkMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LinkMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.title != null && message.hasOwnProperty("title"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                if (message.desc != null && message.hasOwnProperty("desc"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.desc);
                if (message.url != null && message.hasOwnProperty("url"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.url);
                if (message.faviconUrl != null && message.hasOwnProperty("faviconUrl"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.faviconUrl);
                return writer;
            };

            /**
             * Encodes the specified LinkMsg message, length delimited. Does not implicitly {@link pb.im.LinkMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.im.LinkMsg
             * @static
             * @param {pb.im.ILinkMsg} message LinkMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LinkMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LinkMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.im.LinkMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.im.LinkMsg} LinkMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LinkMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.im.LinkMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.title = reader.string();
                        break;
                    case 2:
                        message.desc = reader.string();
                        break;
                    case 3:
                        message.url = reader.string();
                        break;
                    case 4:
                        message.faviconUrl = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a LinkMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.im.LinkMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.im.LinkMsg} LinkMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LinkMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LinkMsg message.
             * @function verify
             * @memberof pb.im.LinkMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LinkMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.title != null && message.hasOwnProperty("title"))
                    if (!$util.isString(message.title))
                        return "title: string expected";
                if (message.desc != null && message.hasOwnProperty("desc"))
                    if (!$util.isString(message.desc))
                        return "desc: string expected";
                if (message.url != null && message.hasOwnProperty("url"))
                    if (!$util.isString(message.url))
                        return "url: string expected";
                if (message.faviconUrl != null && message.hasOwnProperty("faviconUrl"))
                    if (!$util.isString(message.faviconUrl))
                        return "faviconUrl: string expected";
                return null;
            };

            /**
             * Creates a LinkMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.im.LinkMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.im.LinkMsg} LinkMsg
             */
            LinkMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.im.LinkMsg)
                    return object;
                var message = new $root.pb.im.LinkMsg();
                if (object.title != null)
                    message.title = String(object.title);
                if (object.desc != null)
                    message.desc = String(object.desc);
                if (object.url != null)
                    message.url = String(object.url);
                if (object.faviconUrl != null)
                    message.faviconUrl = String(object.faviconUrl);
                return message;
            };

            /**
             * Creates a plain object from a LinkMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.im.LinkMsg
             * @static
             * @param {pb.im.LinkMsg} message LinkMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LinkMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.title = "";
                    object.desc = "";
                    object.url = "";
                    object.faviconUrl = "";
                }
                if (message.title != null && message.hasOwnProperty("title"))
                    object.title = message.title;
                if (message.desc != null && message.hasOwnProperty("desc"))
                    object.desc = message.desc;
                if (message.url != null && message.hasOwnProperty("url"))
                    object.url = message.url;
                if (message.faviconUrl != null && message.hasOwnProperty("faviconUrl"))
                    object.faviconUrl = message.faviconUrl;
                return object;
            };

            /**
             * Converts this LinkMsg to JSON.
             * @function toJSON
             * @memberof pb.im.LinkMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LinkMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return LinkMsg;
        })();

        im.GroupMessageThumbUpMsg = (function() {

            /**
             * Properties of a GroupMessageThumbUpMsg.
             * @memberof pb.im
             * @interface IGroupMessageThumbUpMsg
             * @property {string|null} [groupID] GroupMessageThumbUpMsg groupID
             * @property {string|null} [msgID] GroupMessageThumbUpMsg msgID
             * @property {number|null} [count] GroupMessageThumbUpMsg count
             */

            /**
             * Constructs a new GroupMessageThumbUpMsg.
             * @memberof pb.im
             * @classdesc Represents a GroupMessageThumbUpMsg.
             * @implements IGroupMessageThumbUpMsg
             * @constructor
             * @param {pb.im.IGroupMessageThumbUpMsg=} [properties] Properties to set
             */
            function GroupMessageThumbUpMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GroupMessageThumbUpMsg groupID.
             * @member {string} groupID
             * @memberof pb.im.GroupMessageThumbUpMsg
             * @instance
             */
            GroupMessageThumbUpMsg.prototype.groupID = "";

            /**
             * GroupMessageThumbUpMsg msgID.
             * @member {string} msgID
             * @memberof pb.im.GroupMessageThumbUpMsg
             * @instance
             */
            GroupMessageThumbUpMsg.prototype.msgID = "";

            /**
             * GroupMessageThumbUpMsg count.
             * @member {number} count
             * @memberof pb.im.GroupMessageThumbUpMsg
             * @instance
             */
            GroupMessageThumbUpMsg.prototype.count = 0;

            /**
             * Creates a new GroupMessageThumbUpMsg instance using the specified properties.
             * @function create
             * @memberof pb.im.GroupMessageThumbUpMsg
             * @static
             * @param {pb.im.IGroupMessageThumbUpMsg=} [properties] Properties to set
             * @returns {pb.im.GroupMessageThumbUpMsg} GroupMessageThumbUpMsg instance
             */
            GroupMessageThumbUpMsg.create = function create(properties) {
                return new GroupMessageThumbUpMsg(properties);
            };

            /**
             * Encodes the specified GroupMessageThumbUpMsg message. Does not implicitly {@link pb.im.GroupMessageThumbUpMsg.verify|verify} messages.
             * @function encode
             * @memberof pb.im.GroupMessageThumbUpMsg
             * @static
             * @param {pb.im.IGroupMessageThumbUpMsg} message GroupMessageThumbUpMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GroupMessageThumbUpMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.groupID != null && message.hasOwnProperty("groupID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.groupID);
                if (message.msgID != null && message.hasOwnProperty("msgID"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.msgID);
                if (message.count != null && message.hasOwnProperty("count"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.count);
                return writer;
            };

            /**
             * Encodes the specified GroupMessageThumbUpMsg message, length delimited. Does not implicitly {@link pb.im.GroupMessageThumbUpMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.im.GroupMessageThumbUpMsg
             * @static
             * @param {pb.im.IGroupMessageThumbUpMsg} message GroupMessageThumbUpMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GroupMessageThumbUpMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GroupMessageThumbUpMsg message from the specified reader or buffer.
             * @function decode
             * @memberof pb.im.GroupMessageThumbUpMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.im.GroupMessageThumbUpMsg} GroupMessageThumbUpMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GroupMessageThumbUpMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.im.GroupMessageThumbUpMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.groupID = reader.string();
                        break;
                    case 2:
                        message.msgID = reader.string();
                        break;
                    case 3:
                        message.count = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GroupMessageThumbUpMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.im.GroupMessageThumbUpMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.im.GroupMessageThumbUpMsg} GroupMessageThumbUpMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GroupMessageThumbUpMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GroupMessageThumbUpMsg message.
             * @function verify
             * @memberof pb.im.GroupMessageThumbUpMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GroupMessageThumbUpMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.groupID != null && message.hasOwnProperty("groupID"))
                    if (!$util.isString(message.groupID))
                        return "groupID: string expected";
                if (message.msgID != null && message.hasOwnProperty("msgID"))
                    if (!$util.isString(message.msgID))
                        return "msgID: string expected";
                if (message.count != null && message.hasOwnProperty("count"))
                    if (!$util.isInteger(message.count))
                        return "count: integer expected";
                return null;
            };

            /**
             * Creates a GroupMessageThumbUpMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.im.GroupMessageThumbUpMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.im.GroupMessageThumbUpMsg} GroupMessageThumbUpMsg
             */
            GroupMessageThumbUpMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.im.GroupMessageThumbUpMsg)
                    return object;
                var message = new $root.pb.im.GroupMessageThumbUpMsg();
                if (object.groupID != null)
                    message.groupID = String(object.groupID);
                if (object.msgID != null)
                    message.msgID = String(object.msgID);
                if (object.count != null)
                    message.count = object.count | 0;
                return message;
            };

            /**
             * Creates a plain object from a GroupMessageThumbUpMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.im.GroupMessageThumbUpMsg
             * @static
             * @param {pb.im.GroupMessageThumbUpMsg} message GroupMessageThumbUpMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GroupMessageThumbUpMsg.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.groupID = "";
                    object.msgID = "";
                    object.count = 0;
                }
                if (message.groupID != null && message.hasOwnProperty("groupID"))
                    object.groupID = message.groupID;
                if (message.msgID != null && message.hasOwnProperty("msgID"))
                    object.msgID = message.msgID;
                if (message.count != null && message.hasOwnProperty("count"))
                    object.count = message.count;
                return object;
            };

            /**
             * Converts this GroupMessageThumbUpMsg to JSON.
             * @function toJSON
             * @memberof pb.im.GroupMessageThumbUpMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GroupMessageThumbUpMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GroupMessageThumbUpMsg;
        })();

        return im;
    })();

    pb.consts = (function() {

        /**
         * Namespace consts.
         * @memberof pb
         * @namespace
         */
        var consts = {};

        consts.MomentPostType = (function() {

            /**
             * Properties of a MomentPostType.
             * @memberof pb.consts
             * @interface IMomentPostType
             */

            /**
             * Constructs a new MomentPostType.
             * @memberof pb.consts
             * @classdesc Represents a MomentPostType.
             * @implements IMomentPostType
             * @constructor
             * @param {pb.consts.IMomentPostType=} [properties] Properties to set
             */
            function MomentPostType(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new MomentPostType instance using the specified properties.
             * @function create
             * @memberof pb.consts.MomentPostType
             * @static
             * @param {pb.consts.IMomentPostType=} [properties] Properties to set
             * @returns {pb.consts.MomentPostType} MomentPostType instance
             */
            MomentPostType.create = function create(properties) {
                return new MomentPostType(properties);
            };

            /**
             * Encodes the specified MomentPostType message. Does not implicitly {@link pb.consts.MomentPostType.verify|verify} messages.
             * @function encode
             * @memberof pb.consts.MomentPostType
             * @static
             * @param {pb.consts.IMomentPostType} message MomentPostType message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MomentPostType.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified MomentPostType message, length delimited. Does not implicitly {@link pb.consts.MomentPostType.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.consts.MomentPostType
             * @static
             * @param {pb.consts.IMomentPostType} message MomentPostType message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MomentPostType.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MomentPostType message from the specified reader or buffer.
             * @function decode
             * @memberof pb.consts.MomentPostType
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.consts.MomentPostType} MomentPostType
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MomentPostType.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.consts.MomentPostType();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MomentPostType message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.consts.MomentPostType
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.consts.MomentPostType} MomentPostType
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MomentPostType.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MomentPostType message.
             * @function verify
             * @memberof pb.consts.MomentPostType
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MomentPostType.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a MomentPostType message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.consts.MomentPostType
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.consts.MomentPostType} MomentPostType
             */
            MomentPostType.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.consts.MomentPostType)
                    return object;
                return new $root.pb.consts.MomentPostType();
            };

            /**
             * Creates a plain object from a MomentPostType message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.consts.MomentPostType
             * @static
             * @param {pb.consts.MomentPostType} message MomentPostType
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MomentPostType.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this MomentPostType to JSON.
             * @function toJSON
             * @memberof pb.consts.MomentPostType
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MomentPostType.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Enum enum.
             * @name pb.consts.MomentPostType.Enum
             * @enum {string}
             * @property {number} UNKNOWN=0 UNKNOWN value
             * @property {number} TEXT=1 TEXT value
             * @property {number} SUMMARY=2 SUMMARY value
             * @property {number} LINK=3 LINK value
             */
            MomentPostType.Enum = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN"] = 0;
                values[valuesById[1] = "TEXT"] = 1;
                values[valuesById[2] = "SUMMARY"] = 2;
                values[valuesById[3] = "LINK"] = 3;
                return values;
            })();

            return MomentPostType;
        })();

        consts.ObjectType = (function() {

            /**
             * Properties of an ObjectType.
             * @memberof pb.consts
             * @interface IObjectType
             */

            /**
             * Constructs a new ObjectType.
             * @memberof pb.consts
             * @classdesc Represents an ObjectType.
             * @implements IObjectType
             * @constructor
             * @param {pb.consts.IObjectType=} [properties] Properties to set
             */
            function ObjectType(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new ObjectType instance using the specified properties.
             * @function create
             * @memberof pb.consts.ObjectType
             * @static
             * @param {pb.consts.IObjectType=} [properties] Properties to set
             * @returns {pb.consts.ObjectType} ObjectType instance
             */
            ObjectType.create = function create(properties) {
                return new ObjectType(properties);
            };

            /**
             * Encodes the specified ObjectType message. Does not implicitly {@link pb.consts.ObjectType.verify|verify} messages.
             * @function encode
             * @memberof pb.consts.ObjectType
             * @static
             * @param {pb.consts.IObjectType} message ObjectType message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ObjectType.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified ObjectType message, length delimited. Does not implicitly {@link pb.consts.ObjectType.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.consts.ObjectType
             * @static
             * @param {pb.consts.IObjectType} message ObjectType message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ObjectType.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an ObjectType message from the specified reader or buffer.
             * @function decode
             * @memberof pb.consts.ObjectType
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.consts.ObjectType} ObjectType
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ObjectType.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.consts.ObjectType();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an ObjectType message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.consts.ObjectType
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.consts.ObjectType} ObjectType
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ObjectType.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an ObjectType message.
             * @function verify
             * @memberof pb.consts.ObjectType
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ObjectType.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates an ObjectType message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.consts.ObjectType
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.consts.ObjectType} ObjectType
             */
            ObjectType.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.consts.ObjectType)
                    return object;
                return new $root.pb.consts.ObjectType();
            };

            /**
             * Creates a plain object from an ObjectType message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.consts.ObjectType
             * @static
             * @param {pb.consts.ObjectType} message ObjectType
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ObjectType.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this ObjectType to JSON.
             * @function toJSON
             * @memberof pb.consts.ObjectType
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ObjectType.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Enum enum.
             * @name pb.consts.ObjectType.Enum
             * @enum {string}
             * @property {number} UNKNOWN=0 UNKNOWN value
             * @property {number} MOMENT=1 MOMENT value
             * @property {number} SUMMARY=2 SUMMARY value
             * @property {number} GROUP_MESSAGE=3 GROUP_MESSAGE value
             * @property {number} COMMENT=4 COMMENT value
             * @property {number} LINK=5 LINK value
             */
            ObjectType.Enum = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN"] = 0;
                values[valuesById[1] = "MOMENT"] = 1;
                values[valuesById[2] = "SUMMARY"] = 2;
                values[valuesById[3] = "GROUP_MESSAGE"] = 3;
                values[valuesById[4] = "COMMENT"] = 4;
                values[valuesById[5] = "LINK"] = 5;
                return values;
            })();

            return ObjectType;
        })();

        consts.MissionTargetType = (function() {

            /**
             * Properties of a MissionTargetType.
             * @memberof pb.consts
             * @interface IMissionTargetType
             */

            /**
             * Constructs a new MissionTargetType.
             * @memberof pb.consts
             * @classdesc Represents a MissionTargetType.
             * @implements IMissionTargetType
             * @constructor
             * @param {pb.consts.IMissionTargetType=} [properties] Properties to set
             */
            function MissionTargetType(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new MissionTargetType instance using the specified properties.
             * @function create
             * @memberof pb.consts.MissionTargetType
             * @static
             * @param {pb.consts.IMissionTargetType=} [properties] Properties to set
             * @returns {pb.consts.MissionTargetType} MissionTargetType instance
             */
            MissionTargetType.create = function create(properties) {
                return new MissionTargetType(properties);
            };

            /**
             * Encodes the specified MissionTargetType message. Does not implicitly {@link pb.consts.MissionTargetType.verify|verify} messages.
             * @function encode
             * @memberof pb.consts.MissionTargetType
             * @static
             * @param {pb.consts.IMissionTargetType} message MissionTargetType message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MissionTargetType.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified MissionTargetType message, length delimited. Does not implicitly {@link pb.consts.MissionTargetType.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.consts.MissionTargetType
             * @static
             * @param {pb.consts.IMissionTargetType} message MissionTargetType message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MissionTargetType.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MissionTargetType message from the specified reader or buffer.
             * @function decode
             * @memberof pb.consts.MissionTargetType
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.consts.MissionTargetType} MissionTargetType
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MissionTargetType.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.consts.MissionTargetType();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MissionTargetType message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.consts.MissionTargetType
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.consts.MissionTargetType} MissionTargetType
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MissionTargetType.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MissionTargetType message.
             * @function verify
             * @memberof pb.consts.MissionTargetType
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MissionTargetType.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a MissionTargetType message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.consts.MissionTargetType
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.consts.MissionTargetType} MissionTargetType
             */
            MissionTargetType.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.consts.MissionTargetType)
                    return object;
                return new $root.pb.consts.MissionTargetType();
            };

            /**
             * Creates a plain object from a MissionTargetType message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.consts.MissionTargetType
             * @static
             * @param {pb.consts.MissionTargetType} message MissionTargetType
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MissionTargetType.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this MissionTargetType to JSON.
             * @function toJSON
             * @memberof pb.consts.MissionTargetType
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MissionTargetType.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Enum enum.
             * @name pb.consts.MissionTargetType.Enum
             * @enum {string}
             * @property {number} Unknown=0 Unknown value
             * @property {number} Login=1 Login value
             * @property {number} ShareGame=2 ShareGame value
             * @property {number} PlayGame=3 PlayGame value
             * @property {number} PlayStandardMatch=4 PlayStandardMatch value
             * @property {number} PlayRankMatch=5 PlayRankMatch value
             * @property {number} WealthFree=6 WealthFree value
             * @property {number} WealthFreeInRankMatch=7 WealthFreeInRankMatch value
             * @property {number} NetAsset=8 NetAsset value
             * @property {number} NetAssetInRankMatch=9 NetAssetInRankMatch value
             * @property {number} TeamWithFriendAndPlayStandGame=10 TeamWithFriendAndPlayStandGame value
             * @property {number} RankGameWealthFreeSpendNYear=11 RankGameWealthFreeSpendNYear value
             * @property {number} RankGameUseDiffRoleWealthFree=12 RankGameUseDiffRoleWealthFree value
             */
            MissionTargetType.Enum = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "Unknown"] = 0;
                values[valuesById[1] = "Login"] = 1;
                values[valuesById[2] = "ShareGame"] = 2;
                values[valuesById[3] = "PlayGame"] = 3;
                values[valuesById[4] = "PlayStandardMatch"] = 4;
                values[valuesById[5] = "PlayRankMatch"] = 5;
                values[valuesById[6] = "WealthFree"] = 6;
                values[valuesById[7] = "WealthFreeInRankMatch"] = 7;
                values[valuesById[8] = "NetAsset"] = 8;
                values[valuesById[9] = "NetAssetInRankMatch"] = 9;
                values[valuesById[10] = "TeamWithFriendAndPlayStandGame"] = 10;
                values[valuesById[11] = "RankGameWealthFreeSpendNYear"] = 11;
                values[valuesById[12] = "RankGameUseDiffRoleWealthFree"] = 12;
                return values;
            })();

            return MissionTargetType;
        })();

        return consts;
    })();

    pb.events = (function() {

        /**
         * Namespace events.
         * @memberof pb
         * @namespace
         */
        var events = {};

        events.HireBot = (function() {

            /**
             * Properties of a HireBot.
             * @memberof pb.events
             * @interface IHireBot
             * @property {google.protobuf.ITimestamp|null} [timestamp] HireBot timestamp
             * @property {pb.common.MatchType|null} [matchType] HireBot matchType
             * @property {number|null} [roomSize] HireBot roomSize
             * @property {number|null} [num] HireBot num
             * @property {number|null} [roomNumber] HireBot roomNumber
             */

            /**
             * Constructs a new HireBot.
             * @memberof pb.events
             * @classdesc Represents a HireBot.
             * @implements IHireBot
             * @constructor
             * @param {pb.events.IHireBot=} [properties] Properties to set
             */
            function HireBot(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * HireBot timestamp.
             * @member {google.protobuf.ITimestamp|null|undefined} timestamp
             * @memberof pb.events.HireBot
             * @instance
             */
            HireBot.prototype.timestamp = null;

            /**
             * HireBot matchType.
             * @member {pb.common.MatchType} matchType
             * @memberof pb.events.HireBot
             * @instance
             */
            HireBot.prototype.matchType = 0;

            /**
             * HireBot roomSize.
             * @member {number} roomSize
             * @memberof pb.events.HireBot
             * @instance
             */
            HireBot.prototype.roomSize = 0;

            /**
             * HireBot num.
             * @member {number} num
             * @memberof pb.events.HireBot
             * @instance
             */
            HireBot.prototype.num = 0;

            /**
             * HireBot roomNumber.
             * @member {number} roomNumber
             * @memberof pb.events.HireBot
             * @instance
             */
            HireBot.prototype.roomNumber = 0;

            /**
             * Creates a new HireBot instance using the specified properties.
             * @function create
             * @memberof pb.events.HireBot
             * @static
             * @param {pb.events.IHireBot=} [properties] Properties to set
             * @returns {pb.events.HireBot} HireBot instance
             */
            HireBot.create = function create(properties) {
                return new HireBot(properties);
            };

            /**
             * Encodes the specified HireBot message. Does not implicitly {@link pb.events.HireBot.verify|verify} messages.
             * @function encode
             * @memberof pb.events.HireBot
             * @static
             * @param {pb.events.IHireBot} message HireBot message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HireBot.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.matchType != null && message.hasOwnProperty("matchType"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.matchType);
                if (message.roomSize != null && message.hasOwnProperty("roomSize"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.roomSize);
                if (message.num != null && message.hasOwnProperty("num"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.num);
                if (message.roomNumber != null && message.hasOwnProperty("roomNumber"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.roomNumber);
                return writer;
            };

            /**
             * Encodes the specified HireBot message, length delimited. Does not implicitly {@link pb.events.HireBot.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.events.HireBot
             * @static
             * @param {pb.events.IHireBot} message HireBot message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HireBot.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a HireBot message from the specified reader or buffer.
             * @function decode
             * @memberof pb.events.HireBot
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.events.HireBot} HireBot
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HireBot.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.events.HireBot();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.matchType = reader.int32();
                        break;
                    case 3:
                        message.roomSize = reader.int32();
                        break;
                    case 4:
                        message.num = reader.int32();
                        break;
                    case 5:
                        message.roomNumber = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a HireBot message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.events.HireBot
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.events.HireBot} HireBot
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HireBot.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a HireBot message.
             * @function verify
             * @memberof pb.events.HireBot
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            HireBot.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.timestamp);
                    if (error)
                        return "timestamp." + error;
                }
                if (message.matchType != null && message.hasOwnProperty("matchType"))
                    switch (message.matchType) {
                    default:
                        return "matchType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.roomSize != null && message.hasOwnProperty("roomSize"))
                    if (!$util.isInteger(message.roomSize))
                        return "roomSize: integer expected";
                if (message.num != null && message.hasOwnProperty("num"))
                    if (!$util.isInteger(message.num))
                        return "num: integer expected";
                if (message.roomNumber != null && message.hasOwnProperty("roomNumber"))
                    if (!$util.isInteger(message.roomNumber))
                        return "roomNumber: integer expected";
                return null;
            };

            /**
             * Creates a HireBot message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.events.HireBot
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.events.HireBot} HireBot
             */
            HireBot.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.events.HireBot)
                    return object;
                var message = new $root.pb.events.HireBot();
                if (object.timestamp != null) {
                    if (typeof object.timestamp !== "object")
                        throw TypeError(".pb.events.HireBot.timestamp: object expected");
                    message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);
                }
                switch (object.matchType) {
                case "UNKNOWN":
                case 0:
                    message.matchType = 0;
                    break;
                case "STANDARD":
                case 1:
                    message.matchType = 1;
                    break;
                case "RANK":
                case 2:
                    message.matchType = 2;
                    break;
                case "TRAINING":
                case 3:
                    message.matchType = 3;
                    break;
                }
                if (object.roomSize != null)
                    message.roomSize = object.roomSize | 0;
                if (object.num != null)
                    message.num = object.num | 0;
                if (object.roomNumber != null)
                    message.roomNumber = object.roomNumber | 0;
                return message;
            };

            /**
             * Creates a plain object from a HireBot message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.events.HireBot
             * @static
             * @param {pb.events.HireBot} message HireBot
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            HireBot.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.timestamp = null;
                    object.matchType = options.enums === String ? "UNKNOWN" : 0;
                    object.roomSize = 0;
                    object.num = 0;
                    object.roomNumber = 0;
                }
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);
                if (message.matchType != null && message.hasOwnProperty("matchType"))
                    object.matchType = options.enums === String ? $root.pb.common.MatchType[message.matchType] : message.matchType;
                if (message.roomSize != null && message.hasOwnProperty("roomSize"))
                    object.roomSize = message.roomSize;
                if (message.num != null && message.hasOwnProperty("num"))
                    object.num = message.num;
                if (message.roomNumber != null && message.hasOwnProperty("roomNumber"))
                    object.roomNumber = message.roomNumber;
                return object;
            };

            /**
             * Converts this HireBot to JSON.
             * @function toJSON
             * @memberof pb.events.HireBot
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            HireBot.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return HireBot;
        })();

        events.LobbyEventType = (function() {

            /**
             * Properties of a LobbyEventType.
             * @memberof pb.events
             * @interface ILobbyEventType
             */

            /**
             * Constructs a new LobbyEventType.
             * @memberof pb.events
             * @classdesc Represents a LobbyEventType.
             * @implements ILobbyEventType
             * @constructor
             * @param {pb.events.ILobbyEventType=} [properties] Properties to set
             */
            function LobbyEventType(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new LobbyEventType instance using the specified properties.
             * @function create
             * @memberof pb.events.LobbyEventType
             * @static
             * @param {pb.events.ILobbyEventType=} [properties] Properties to set
             * @returns {pb.events.LobbyEventType} LobbyEventType instance
             */
            LobbyEventType.create = function create(properties) {
                return new LobbyEventType(properties);
            };

            /**
             * Encodes the specified LobbyEventType message. Does not implicitly {@link pb.events.LobbyEventType.verify|verify} messages.
             * @function encode
             * @memberof pb.events.LobbyEventType
             * @static
             * @param {pb.events.ILobbyEventType} message LobbyEventType message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LobbyEventType.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified LobbyEventType message, length delimited. Does not implicitly {@link pb.events.LobbyEventType.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.events.LobbyEventType
             * @static
             * @param {pb.events.ILobbyEventType} message LobbyEventType message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LobbyEventType.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LobbyEventType message from the specified reader or buffer.
             * @function decode
             * @memberof pb.events.LobbyEventType
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.events.LobbyEventType} LobbyEventType
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LobbyEventType.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.events.LobbyEventType();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a LobbyEventType message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.events.LobbyEventType
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.events.LobbyEventType} LobbyEventType
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LobbyEventType.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LobbyEventType message.
             * @function verify
             * @memberof pb.events.LobbyEventType
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LobbyEventType.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a LobbyEventType message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.events.LobbyEventType
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.events.LobbyEventType} LobbyEventType
             */
            LobbyEventType.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.events.LobbyEventType)
                    return object;
                return new $root.pb.events.LobbyEventType();
            };

            /**
             * Creates a plain object from a LobbyEventType message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.events.LobbyEventType
             * @static
             * @param {pb.events.LobbyEventType} message LobbyEventType
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LobbyEventType.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this LobbyEventType to JSON.
             * @function toJSON
             * @memberof pb.events.LobbyEventType
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LobbyEventType.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Enum enum.
             * @name pb.events.LobbyEventType.Enum
             * @enum {string}
             * @property {number} UNKNOWN=0 UNKNOWN value
             * @property {number} START_GAME=1 START_GAME value
             */
            LobbyEventType.Enum = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN"] = 0;
                values[valuesById[1] = "START_GAME"] = 1;
                return values;
            })();

            return LobbyEventType;
        })();

        events.LobbyEventStartGame = (function() {

            /**
             * Properties of a LobbyEventStartGame.
             * @memberof pb.events
             * @interface ILobbyEventStartGame
             * @property {Long|null} [ownerID] LobbyEventStartGame ownerID
             * @property {string|null} [roomID] LobbyEventStartGame roomID
             * @property {number|null} [roomNumber] LobbyEventStartGame roomNumber
             * @property {Array.<Long>|null} [roommates] LobbyEventStartGame roommates
             * @property {pb.common.MatchType|null} [matchType] LobbyEventStartGame matchType
             */

            /**
             * Constructs a new LobbyEventStartGame.
             * @memberof pb.events
             * @classdesc Represents a LobbyEventStartGame.
             * @implements ILobbyEventStartGame
             * @constructor
             * @param {pb.events.ILobbyEventStartGame=} [properties] Properties to set
             */
            function LobbyEventStartGame(properties) {
                this.roommates = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LobbyEventStartGame ownerID.
             * @member {Long} ownerID
             * @memberof pb.events.LobbyEventStartGame
             * @instance
             */
            LobbyEventStartGame.prototype.ownerID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * LobbyEventStartGame roomID.
             * @member {string} roomID
             * @memberof pb.events.LobbyEventStartGame
             * @instance
             */
            LobbyEventStartGame.prototype.roomID = "";

            /**
             * LobbyEventStartGame roomNumber.
             * @member {number} roomNumber
             * @memberof pb.events.LobbyEventStartGame
             * @instance
             */
            LobbyEventStartGame.prototype.roomNumber = 0;

            /**
             * LobbyEventStartGame roommates.
             * @member {Array.<Long>} roommates
             * @memberof pb.events.LobbyEventStartGame
             * @instance
             */
            LobbyEventStartGame.prototype.roommates = $util.emptyArray;

            /**
             * LobbyEventStartGame matchType.
             * @member {pb.common.MatchType} matchType
             * @memberof pb.events.LobbyEventStartGame
             * @instance
             */
            LobbyEventStartGame.prototype.matchType = 0;

            /**
             * Creates a new LobbyEventStartGame instance using the specified properties.
             * @function create
             * @memberof pb.events.LobbyEventStartGame
             * @static
             * @param {pb.events.ILobbyEventStartGame=} [properties] Properties to set
             * @returns {pb.events.LobbyEventStartGame} LobbyEventStartGame instance
             */
            LobbyEventStartGame.create = function create(properties) {
                return new LobbyEventStartGame(properties);
            };

            /**
             * Encodes the specified LobbyEventStartGame message. Does not implicitly {@link pb.events.LobbyEventStartGame.verify|verify} messages.
             * @function encode
             * @memberof pb.events.LobbyEventStartGame
             * @static
             * @param {pb.events.ILobbyEventStartGame} message LobbyEventStartGame message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LobbyEventStartGame.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ownerID != null && message.hasOwnProperty("ownerID"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.ownerID);
                if (message.roomID != null && message.hasOwnProperty("roomID"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.roomID);
                if (message.roomNumber != null && message.hasOwnProperty("roomNumber"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.roomNumber);
                if (message.roommates != null && message.roommates.length) {
                    writer.uint32(/* id 4, wireType 2 =*/34).fork();
                    for (var i = 0; i < message.roommates.length; ++i)
                        writer.int64(message.roommates[i]);
                    writer.ldelim();
                }
                if (message.matchType != null && message.hasOwnProperty("matchType"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.matchType);
                return writer;
            };

            /**
             * Encodes the specified LobbyEventStartGame message, length delimited. Does not implicitly {@link pb.events.LobbyEventStartGame.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.events.LobbyEventStartGame
             * @static
             * @param {pb.events.ILobbyEventStartGame} message LobbyEventStartGame message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LobbyEventStartGame.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LobbyEventStartGame message from the specified reader or buffer.
             * @function decode
             * @memberof pb.events.LobbyEventStartGame
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.events.LobbyEventStartGame} LobbyEventStartGame
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LobbyEventStartGame.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.events.LobbyEventStartGame();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ownerID = reader.int64();
                        break;
                    case 2:
                        message.roomID = reader.string();
                        break;
                    case 3:
                        message.roomNumber = reader.int32();
                        break;
                    case 4:
                        if (!(message.roommates && message.roommates.length))
                            message.roommates = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.roommates.push(reader.int64());
                        } else
                            message.roommates.push(reader.int64());
                        break;
                    case 5:
                        message.matchType = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a LobbyEventStartGame message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.events.LobbyEventStartGame
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.events.LobbyEventStartGame} LobbyEventStartGame
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LobbyEventStartGame.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LobbyEventStartGame message.
             * @function verify
             * @memberof pb.events.LobbyEventStartGame
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LobbyEventStartGame.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ownerID != null && message.hasOwnProperty("ownerID"))
                    if (!$util.isInteger(message.ownerID) && !(message.ownerID && $util.isInteger(message.ownerID.low) && $util.isInteger(message.ownerID.high)))
                        return "ownerID: integer|Long expected";
                if (message.roomID != null && message.hasOwnProperty("roomID"))
                    if (!$util.isString(message.roomID))
                        return "roomID: string expected";
                if (message.roomNumber != null && message.hasOwnProperty("roomNumber"))
                    if (!$util.isInteger(message.roomNumber))
                        return "roomNumber: integer expected";
                if (message.roommates != null && message.hasOwnProperty("roommates")) {
                    if (!Array.isArray(message.roommates))
                        return "roommates: array expected";
                    for (var i = 0; i < message.roommates.length; ++i)
                        if (!$util.isInteger(message.roommates[i]) && !(message.roommates[i] && $util.isInteger(message.roommates[i].low) && $util.isInteger(message.roommates[i].high)))
                            return "roommates: integer|Long[] expected";
                }
                if (message.matchType != null && message.hasOwnProperty("matchType"))
                    switch (message.matchType) {
                    default:
                        return "matchType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                return null;
            };

            /**
             * Creates a LobbyEventStartGame message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.events.LobbyEventStartGame
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.events.LobbyEventStartGame} LobbyEventStartGame
             */
            LobbyEventStartGame.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.events.LobbyEventStartGame)
                    return object;
                var message = new $root.pb.events.LobbyEventStartGame();
                if (object.ownerID != null)
                    if ($util.Long)
                        (message.ownerID = $util.Long.fromValue(object.ownerID)).unsigned = false;
                    else if (typeof object.ownerID === "string")
                        message.ownerID = parseInt(object.ownerID, 10);
                    else if (typeof object.ownerID === "number")
                        message.ownerID = object.ownerID;
                    else if (typeof object.ownerID === "object")
                        message.ownerID = new $util.LongBits(object.ownerID.low >>> 0, object.ownerID.high >>> 0).toNumber();
                if (object.roomID != null)
                    message.roomID = String(object.roomID);
                if (object.roomNumber != null)
                    message.roomNumber = object.roomNumber | 0;
                if (object.roommates) {
                    if (!Array.isArray(object.roommates))
                        throw TypeError(".pb.events.LobbyEventStartGame.roommates: array expected");
                    message.roommates = [];
                    for (var i = 0; i < object.roommates.length; ++i)
                        if ($util.Long)
                            (message.roommates[i] = $util.Long.fromValue(object.roommates[i])).unsigned = false;
                        else if (typeof object.roommates[i] === "string")
                            message.roommates[i] = parseInt(object.roommates[i], 10);
                        else if (typeof object.roommates[i] === "number")
                            message.roommates[i] = object.roommates[i];
                        else if (typeof object.roommates[i] === "object")
                            message.roommates[i] = new $util.LongBits(object.roommates[i].low >>> 0, object.roommates[i].high >>> 0).toNumber();
                }
                switch (object.matchType) {
                case "UNKNOWN":
                case 0:
                    message.matchType = 0;
                    break;
                case "STANDARD":
                case 1:
                    message.matchType = 1;
                    break;
                case "RANK":
                case 2:
                    message.matchType = 2;
                    break;
                case "TRAINING":
                case 3:
                    message.matchType = 3;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a LobbyEventStartGame message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.events.LobbyEventStartGame
             * @static
             * @param {pb.events.LobbyEventStartGame} message LobbyEventStartGame
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LobbyEventStartGame.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.roommates = [];
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.ownerID = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.ownerID = options.longs === String ? "0" : 0;
                    object.roomID = "";
                    object.roomNumber = 0;
                    object.matchType = options.enums === String ? "UNKNOWN" : 0;
                }
                if (message.ownerID != null && message.hasOwnProperty("ownerID"))
                    if (typeof message.ownerID === "number")
                        object.ownerID = options.longs === String ? String(message.ownerID) : message.ownerID;
                    else
                        object.ownerID = options.longs === String ? $util.Long.prototype.toString.call(message.ownerID) : options.longs === Number ? new $util.LongBits(message.ownerID.low >>> 0, message.ownerID.high >>> 0).toNumber() : message.ownerID;
                if (message.roomID != null && message.hasOwnProperty("roomID"))
                    object.roomID = message.roomID;
                if (message.roomNumber != null && message.hasOwnProperty("roomNumber"))
                    object.roomNumber = message.roomNumber;
                if (message.roommates && message.roommates.length) {
                    object.roommates = [];
                    for (var j = 0; j < message.roommates.length; ++j)
                        if (typeof message.roommates[j] === "number")
                            object.roommates[j] = options.longs === String ? String(message.roommates[j]) : message.roommates[j];
                        else
                            object.roommates[j] = options.longs === String ? $util.Long.prototype.toString.call(message.roommates[j]) : options.longs === Number ? new $util.LongBits(message.roommates[j].low >>> 0, message.roommates[j].high >>> 0).toNumber() : message.roommates[j];
                }
                if (message.matchType != null && message.hasOwnProperty("matchType"))
                    object.matchType = options.enums === String ? $root.pb.common.MatchType[message.matchType] : message.matchType;
                return object;
            };

            /**
             * Converts this LobbyEventStartGame to JSON.
             * @function toJSON
             * @memberof pb.events.LobbyEventStartGame
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LobbyEventStartGame.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return LobbyEventStartGame;
        })();

        events.LobbyEvent = (function() {

            /**
             * Properties of a LobbyEvent.
             * @memberof pb.events
             * @interface ILobbyEvent
             * @property {google.protobuf.ITimestamp|null} [timestamp] LobbyEvent timestamp
             * @property {pb.events.LobbyEventType.Enum|null} [typ] LobbyEvent typ
             * @property {google.protobuf.IAny|null} [detail] LobbyEvent detail
             */

            /**
             * Constructs a new LobbyEvent.
             * @memberof pb.events
             * @classdesc Represents a LobbyEvent.
             * @implements ILobbyEvent
             * @constructor
             * @param {pb.events.ILobbyEvent=} [properties] Properties to set
             */
            function LobbyEvent(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LobbyEvent timestamp.
             * @member {google.protobuf.ITimestamp|null|undefined} timestamp
             * @memberof pb.events.LobbyEvent
             * @instance
             */
            LobbyEvent.prototype.timestamp = null;

            /**
             * LobbyEvent typ.
             * @member {pb.events.LobbyEventType.Enum} typ
             * @memberof pb.events.LobbyEvent
             * @instance
             */
            LobbyEvent.prototype.typ = 0;

            /**
             * LobbyEvent detail.
             * @member {google.protobuf.IAny|null|undefined} detail
             * @memberof pb.events.LobbyEvent
             * @instance
             */
            LobbyEvent.prototype.detail = null;

            /**
             * Creates a new LobbyEvent instance using the specified properties.
             * @function create
             * @memberof pb.events.LobbyEvent
             * @static
             * @param {pb.events.ILobbyEvent=} [properties] Properties to set
             * @returns {pb.events.LobbyEvent} LobbyEvent instance
             */
            LobbyEvent.create = function create(properties) {
                return new LobbyEvent(properties);
            };

            /**
             * Encodes the specified LobbyEvent message. Does not implicitly {@link pb.events.LobbyEvent.verify|verify} messages.
             * @function encode
             * @memberof pb.events.LobbyEvent
             * @static
             * @param {pb.events.ILobbyEvent} message LobbyEvent message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LobbyEvent.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.typ != null && message.hasOwnProperty("typ"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.typ);
                if (message.detail != null && message.hasOwnProperty("detail"))
                    $root.google.protobuf.Any.encode(message.detail, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LobbyEvent message, length delimited. Does not implicitly {@link pb.events.LobbyEvent.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.events.LobbyEvent
             * @static
             * @param {pb.events.ILobbyEvent} message LobbyEvent message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LobbyEvent.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LobbyEvent message from the specified reader or buffer.
             * @function decode
             * @memberof pb.events.LobbyEvent
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.events.LobbyEvent} LobbyEvent
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LobbyEvent.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.events.LobbyEvent();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.typ = reader.int32();
                        break;
                    case 3:
                        message.detail = $root.google.protobuf.Any.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a LobbyEvent message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.events.LobbyEvent
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.events.LobbyEvent} LobbyEvent
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LobbyEvent.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LobbyEvent message.
             * @function verify
             * @memberof pb.events.LobbyEvent
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LobbyEvent.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.timestamp);
                    if (error)
                        return "timestamp." + error;
                }
                if (message.typ != null && message.hasOwnProperty("typ"))
                    switch (message.typ) {
                    default:
                        return "typ: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                if (message.detail != null && message.hasOwnProperty("detail")) {
                    var error = $root.google.protobuf.Any.verify(message.detail);
                    if (error)
                        return "detail." + error;
                }
                return null;
            };

            /**
             * Creates a LobbyEvent message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.events.LobbyEvent
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.events.LobbyEvent} LobbyEvent
             */
            LobbyEvent.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.events.LobbyEvent)
                    return object;
                var message = new $root.pb.events.LobbyEvent();
                if (object.timestamp != null) {
                    if (typeof object.timestamp !== "object")
                        throw TypeError(".pb.events.LobbyEvent.timestamp: object expected");
                    message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);
                }
                switch (object.typ) {
                case "UNKNOWN":
                case 0:
                    message.typ = 0;
                    break;
                case "START_GAME":
                case 1:
                    message.typ = 1;
                    break;
                }
                if (object.detail != null) {
                    if (typeof object.detail !== "object")
                        throw TypeError(".pb.events.LobbyEvent.detail: object expected");
                    message.detail = $root.google.protobuf.Any.fromObject(object.detail);
                }
                return message;
            };

            /**
             * Creates a plain object from a LobbyEvent message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.events.LobbyEvent
             * @static
             * @param {pb.events.LobbyEvent} message LobbyEvent
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LobbyEvent.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.timestamp = null;
                    object.typ = options.enums === String ? "UNKNOWN" : 0;
                    object.detail = null;
                }
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);
                if (message.typ != null && message.hasOwnProperty("typ"))
                    object.typ = options.enums === String ? $root.pb.events.LobbyEventType.Enum[message.typ] : message.typ;
                if (message.detail != null && message.hasOwnProperty("detail"))
                    object.detail = $root.google.protobuf.Any.toObject(message.detail, options);
                return object;
            };

            /**
             * Converts this LobbyEvent to JSON.
             * @function toJSON
             * @memberof pb.events.LobbyEvent
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LobbyEvent.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return LobbyEvent;
        })();

        events.GeneralEventType = (function() {

            /**
             * Properties of a GeneralEventType.
             * @memberof pb.events
             * @interface IGeneralEventType
             */

            /**
             * Constructs a new GeneralEventType.
             * @memberof pb.events
             * @classdesc Represents a GeneralEventType.
             * @implements IGeneralEventType
             * @constructor
             * @param {pb.events.IGeneralEventType=} [properties] Properties to set
             */
            function GeneralEventType(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new GeneralEventType instance using the specified properties.
             * @function create
             * @memberof pb.events.GeneralEventType
             * @static
             * @param {pb.events.IGeneralEventType=} [properties] Properties to set
             * @returns {pb.events.GeneralEventType} GeneralEventType instance
             */
            GeneralEventType.create = function create(properties) {
                return new GeneralEventType(properties);
            };

            /**
             * Encodes the specified GeneralEventType message. Does not implicitly {@link pb.events.GeneralEventType.verify|verify} messages.
             * @function encode
             * @memberof pb.events.GeneralEventType
             * @static
             * @param {pb.events.IGeneralEventType} message GeneralEventType message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GeneralEventType.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified GeneralEventType message, length delimited. Does not implicitly {@link pb.events.GeneralEventType.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.events.GeneralEventType
             * @static
             * @param {pb.events.IGeneralEventType} message GeneralEventType message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GeneralEventType.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GeneralEventType message from the specified reader or buffer.
             * @function decode
             * @memberof pb.events.GeneralEventType
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.events.GeneralEventType} GeneralEventType
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GeneralEventType.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.events.GeneralEventType();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GeneralEventType message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.events.GeneralEventType
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.events.GeneralEventType} GeneralEventType
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GeneralEventType.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GeneralEventType message.
             * @function verify
             * @memberof pb.events.GeneralEventType
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GeneralEventType.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a GeneralEventType message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.events.GeneralEventType
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.events.GeneralEventType} GeneralEventType
             */
            GeneralEventType.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.events.GeneralEventType)
                    return object;
                return new $root.pb.events.GeneralEventType();
            };

            /**
             * Creates a plain object from a GeneralEventType message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.events.GeneralEventType
             * @static
             * @param {pb.events.GeneralEventType} message GeneralEventType
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GeneralEventType.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this GeneralEventType to JSON.
             * @function toJSON
             * @memberof pb.events.GeneralEventType
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GeneralEventType.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Enum enum.
             * @name pb.events.GeneralEventType.Enum
             * @enum {string}
             * @property {number} UNKNOWN=0 UNKNOWN value
             * @property {number} USER_ONLINE=1 USER_ONLINE value
             */
            GeneralEventType.Enum = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN"] = 0;
                values[valuesById[1] = "USER_ONLINE"] = 1;
                return values;
            })();

            return GeneralEventType;
        })();

        events.UserOnlineEvent = (function() {

            /**
             * Properties of a UserOnlineEvent.
             * @memberof pb.events
             * @interface IUserOnlineEvent
             * @property {Long|null} [userId] UserOnlineEvent userId
             * @property {string|null} [clientAddr] UserOnlineEvent clientAddr
             * @property {number|null} [clientPort] UserOnlineEvent clientPort
             * @property {string|null} [loginId] UserOnlineEvent loginId
             */

            /**
             * Constructs a new UserOnlineEvent.
             * @memberof pb.events
             * @classdesc Represents a UserOnlineEvent.
             * @implements IUserOnlineEvent
             * @constructor
             * @param {pb.events.IUserOnlineEvent=} [properties] Properties to set
             */
            function UserOnlineEvent(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UserOnlineEvent userId.
             * @member {Long} userId
             * @memberof pb.events.UserOnlineEvent
             * @instance
             */
            UserOnlineEvent.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * UserOnlineEvent clientAddr.
             * @member {string} clientAddr
             * @memberof pb.events.UserOnlineEvent
             * @instance
             */
            UserOnlineEvent.prototype.clientAddr = "";

            /**
             * UserOnlineEvent clientPort.
             * @member {number} clientPort
             * @memberof pb.events.UserOnlineEvent
             * @instance
             */
            UserOnlineEvent.prototype.clientPort = 0;

            /**
             * UserOnlineEvent loginId.
             * @member {string} loginId
             * @memberof pb.events.UserOnlineEvent
             * @instance
             */
            UserOnlineEvent.prototype.loginId = "";

            /**
             * Creates a new UserOnlineEvent instance using the specified properties.
             * @function create
             * @memberof pb.events.UserOnlineEvent
             * @static
             * @param {pb.events.IUserOnlineEvent=} [properties] Properties to set
             * @returns {pb.events.UserOnlineEvent} UserOnlineEvent instance
             */
            UserOnlineEvent.create = function create(properties) {
                return new UserOnlineEvent(properties);
            };

            /**
             * Encodes the specified UserOnlineEvent message. Does not implicitly {@link pb.events.UserOnlineEvent.verify|verify} messages.
             * @function encode
             * @memberof pb.events.UserOnlineEvent
             * @static
             * @param {pb.events.IUserOnlineEvent} message UserOnlineEvent message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UserOnlineEvent.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userId != null && message.hasOwnProperty("userId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.userId);
                if (message.clientAddr != null && message.hasOwnProperty("clientAddr"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.clientAddr);
                if (message.clientPort != null && message.hasOwnProperty("clientPort"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.clientPort);
                if (message.loginId != null && message.hasOwnProperty("loginId"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.loginId);
                return writer;
            };

            /**
             * Encodes the specified UserOnlineEvent message, length delimited. Does not implicitly {@link pb.events.UserOnlineEvent.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.events.UserOnlineEvent
             * @static
             * @param {pb.events.IUserOnlineEvent} message UserOnlineEvent message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UserOnlineEvent.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a UserOnlineEvent message from the specified reader or buffer.
             * @function decode
             * @memberof pb.events.UserOnlineEvent
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.events.UserOnlineEvent} UserOnlineEvent
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UserOnlineEvent.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.events.UserOnlineEvent();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.userId = reader.int64();
                        break;
                    case 2:
                        message.clientAddr = reader.string();
                        break;
                    case 3:
                        message.clientPort = reader.uint32();
                        break;
                    case 4:
                        message.loginId = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a UserOnlineEvent message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.events.UserOnlineEvent
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.events.UserOnlineEvent} UserOnlineEvent
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UserOnlineEvent.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a UserOnlineEvent message.
             * @function verify
             * @memberof pb.events.UserOnlineEvent
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UserOnlineEvent.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                        return "userId: integer|Long expected";
                if (message.clientAddr != null && message.hasOwnProperty("clientAddr"))
                    if (!$util.isString(message.clientAddr))
                        return "clientAddr: string expected";
                if (message.clientPort != null && message.hasOwnProperty("clientPort"))
                    if (!$util.isInteger(message.clientPort))
                        return "clientPort: integer expected";
                if (message.loginId != null && message.hasOwnProperty("loginId"))
                    if (!$util.isString(message.loginId))
                        return "loginId: string expected";
                return null;
            };

            /**
             * Creates a UserOnlineEvent message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.events.UserOnlineEvent
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.events.UserOnlineEvent} UserOnlineEvent
             */
            UserOnlineEvent.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.events.UserOnlineEvent)
                    return object;
                var message = new $root.pb.events.UserOnlineEvent();
                if (object.userId != null)
                    if ($util.Long)
                        (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                    else if (typeof object.userId === "string")
                        message.userId = parseInt(object.userId, 10);
                    else if (typeof object.userId === "number")
                        message.userId = object.userId;
                    else if (typeof object.userId === "object")
                        message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
                if (object.clientAddr != null)
                    message.clientAddr = String(object.clientAddr);
                if (object.clientPort != null)
                    message.clientPort = object.clientPort >>> 0;
                if (object.loginId != null)
                    message.loginId = String(object.loginId);
                return message;
            };

            /**
             * Creates a plain object from a UserOnlineEvent message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.events.UserOnlineEvent
             * @static
             * @param {pb.events.UserOnlineEvent} message UserOnlineEvent
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UserOnlineEvent.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userId = options.longs === String ? "0" : 0;
                    object.clientAddr = "";
                    object.clientPort = 0;
                    object.loginId = "";
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (typeof message.userId === "number")
                        object.userId = options.longs === String ? String(message.userId) : message.userId;
                    else
                        object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
                if (message.clientAddr != null && message.hasOwnProperty("clientAddr"))
                    object.clientAddr = message.clientAddr;
                if (message.clientPort != null && message.hasOwnProperty("clientPort"))
                    object.clientPort = message.clientPort;
                if (message.loginId != null && message.hasOwnProperty("loginId"))
                    object.loginId = message.loginId;
                return object;
            };

            /**
             * Converts this UserOnlineEvent to JSON.
             * @function toJSON
             * @memberof pb.events.UserOnlineEvent
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UserOnlineEvent.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return UserOnlineEvent;
        })();

        events.GeneralEvent = (function() {

            /**
             * Properties of a GeneralEvent.
             * @memberof pb.events
             * @interface IGeneralEvent
             * @property {pb.events.GeneralEventType.Enum|null} [type] GeneralEvent type
             * @property {google.protobuf.ITimestamp|null} [timestamp] GeneralEvent timestamp
             * @property {google.protobuf.IAny|null} [content] GeneralEvent content
             */

            /**
             * Constructs a new GeneralEvent.
             * @memberof pb.events
             * @classdesc Represents a GeneralEvent.
             * @implements IGeneralEvent
             * @constructor
             * @param {pb.events.IGeneralEvent=} [properties] Properties to set
             */
            function GeneralEvent(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GeneralEvent type.
             * @member {pb.events.GeneralEventType.Enum} type
             * @memberof pb.events.GeneralEvent
             * @instance
             */
            GeneralEvent.prototype.type = 0;

            /**
             * GeneralEvent timestamp.
             * @member {google.protobuf.ITimestamp|null|undefined} timestamp
             * @memberof pb.events.GeneralEvent
             * @instance
             */
            GeneralEvent.prototype.timestamp = null;

            /**
             * GeneralEvent content.
             * @member {google.protobuf.IAny|null|undefined} content
             * @memberof pb.events.GeneralEvent
             * @instance
             */
            GeneralEvent.prototype.content = null;

            /**
             * Creates a new GeneralEvent instance using the specified properties.
             * @function create
             * @memberof pb.events.GeneralEvent
             * @static
             * @param {pb.events.IGeneralEvent=} [properties] Properties to set
             * @returns {pb.events.GeneralEvent} GeneralEvent instance
             */
            GeneralEvent.create = function create(properties) {
                return new GeneralEvent(properties);
            };

            /**
             * Encodes the specified GeneralEvent message. Does not implicitly {@link pb.events.GeneralEvent.verify|verify} messages.
             * @function encode
             * @memberof pb.events.GeneralEvent
             * @static
             * @param {pb.events.IGeneralEvent} message GeneralEvent message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GeneralEvent.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type != null && message.hasOwnProperty("type"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.content != null && message.hasOwnProperty("content"))
                    $root.google.protobuf.Any.encode(message.content, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GeneralEvent message, length delimited. Does not implicitly {@link pb.events.GeneralEvent.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.events.GeneralEvent
             * @static
             * @param {pb.events.IGeneralEvent} message GeneralEvent message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GeneralEvent.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GeneralEvent message from the specified reader or buffer.
             * @function decode
             * @memberof pb.events.GeneralEvent
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.events.GeneralEvent} GeneralEvent
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GeneralEvent.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.events.GeneralEvent();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type = reader.int32();
                        break;
                    case 2:
                        message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.content = $root.google.protobuf.Any.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GeneralEvent message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.events.GeneralEvent
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.events.GeneralEvent} GeneralEvent
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GeneralEvent.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GeneralEvent message.
             * @function verify
             * @memberof pb.events.GeneralEvent
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GeneralEvent.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.timestamp);
                    if (error)
                        return "timestamp." + error;
                }
                if (message.content != null && message.hasOwnProperty("content")) {
                    var error = $root.google.protobuf.Any.verify(message.content);
                    if (error)
                        return "content." + error;
                }
                return null;
            };

            /**
             * Creates a GeneralEvent message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.events.GeneralEvent
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.events.GeneralEvent} GeneralEvent
             */
            GeneralEvent.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.events.GeneralEvent)
                    return object;
                var message = new $root.pb.events.GeneralEvent();
                switch (object.type) {
                case "UNKNOWN":
                case 0:
                    message.type = 0;
                    break;
                case "USER_ONLINE":
                case 1:
                    message.type = 1;
                    break;
                }
                if (object.timestamp != null) {
                    if (typeof object.timestamp !== "object")
                        throw TypeError(".pb.events.GeneralEvent.timestamp: object expected");
                    message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);
                }
                if (object.content != null) {
                    if (typeof object.content !== "object")
                        throw TypeError(".pb.events.GeneralEvent.content: object expected");
                    message.content = $root.google.protobuf.Any.fromObject(object.content);
                }
                return message;
            };

            /**
             * Creates a plain object from a GeneralEvent message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.events.GeneralEvent
             * @static
             * @param {pb.events.GeneralEvent} message GeneralEvent
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GeneralEvent.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.type = options.enums === String ? "UNKNOWN" : 0;
                    object.timestamp = null;
                    object.content = null;
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.pb.events.GeneralEventType.Enum[message.type] : message.type;
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);
                if (message.content != null && message.hasOwnProperty("content"))
                    object.content = $root.google.protobuf.Any.toObject(message.content, options);
                return object;
            };

            /**
             * Converts this GeneralEvent to JSON.
             * @function toJSON
             * @memberof pb.events.GeneralEvent
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GeneralEvent.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GeneralEvent;
        })();

        events.GameEventType = (function() {

            /**
             * Properties of a GameEventType.
             * @memberof pb.events
             * @interface IGameEventType
             */

            /**
             * Constructs a new GameEventType.
             * @memberof pb.events
             * @classdesc Represents a GameEventType.
             * @implements IGameEventType
             * @constructor
             * @param {pb.events.IGameEventType=} [properties] Properties to set
             */
            function GameEventType(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new GameEventType instance using the specified properties.
             * @function create
             * @memberof pb.events.GameEventType
             * @static
             * @param {pb.events.IGameEventType=} [properties] Properties to set
             * @returns {pb.events.GameEventType} GameEventType instance
             */
            GameEventType.create = function create(properties) {
                return new GameEventType(properties);
            };

            /**
             * Encodes the specified GameEventType message. Does not implicitly {@link pb.events.GameEventType.verify|verify} messages.
             * @function encode
             * @memberof pb.events.GameEventType
             * @static
             * @param {pb.events.IGameEventType} message GameEventType message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameEventType.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified GameEventType message, length delimited. Does not implicitly {@link pb.events.GameEventType.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.events.GameEventType
             * @static
             * @param {pb.events.IGameEventType} message GameEventType message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameEventType.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GameEventType message from the specified reader or buffer.
             * @function decode
             * @memberof pb.events.GameEventType
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.events.GameEventType} GameEventType
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameEventType.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.events.GameEventType();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GameEventType message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.events.GameEventType
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.events.GameEventType} GameEventType
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameEventType.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GameEventType message.
             * @function verify
             * @memberof pb.events.GameEventType
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GameEventType.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a GameEventType message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.events.GameEventType
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.events.GameEventType} GameEventType
             */
            GameEventType.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.events.GameEventType)
                    return object;
                return new $root.pb.events.GameEventType();
            };

            /**
             * Creates a plain object from a GameEventType message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.events.GameEventType
             * @static
             * @param {pb.events.GameEventType} message GameEventType
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GameEventType.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this GameEventType to JSON.
             * @function toJSON
             * @memberof pb.events.GameEventType
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GameEventType.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Enum enum.
             * @name pb.events.GameEventType.Enum
             * @enum {string}
             * @property {number} UNKNOWN=0 UNKNOWN value
             * @property {number} GAME_START=1 GAME_START value
             * @property {number} SELECT_ROLE=2 SELECT_ROLE value
             * @property {number} BUY=3 BUY value
             * @property {number} SELL=4 SELL value
             * @property {number} UNEMPLOYMENT=5 UNEMPLOYMENT value
             * @property {number} WAGE_HIKE=6 WAGE_HIKE value
             * @property {number} AUCTION=7 AUCTION value
             * @property {number} PAY_DAY=8 PAY_DAY value
             * @property {number} BABY=9 BABY value
             * @property {number} BROKE=10 BROKE value
             * @property {number} FREEDOM=11 FREEDOM value
             * @property {number} GAME_END=12 GAME_END value
             * @property {number} GAME_TIMEOUT=13 GAME_TIMEOUT value
             * @property {number} ACCIDENT=14 ACCIDENT value
             * @property {number} MARKET_CHANGE=15 MARKET_CHANGE value
             * @property {number} DISHONORABLE_PUNISH=16 DISHONORABLE_PUNISH value
             */
            GameEventType.Enum = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN"] = 0;
                values[valuesById[1] = "GAME_START"] = 1;
                values[valuesById[2] = "SELECT_ROLE"] = 2;
                values[valuesById[3] = "BUY"] = 3;
                values[valuesById[4] = "SELL"] = 4;
                values[valuesById[5] = "UNEMPLOYMENT"] = 5;
                values[valuesById[6] = "WAGE_HIKE"] = 6;
                values[valuesById[7] = "AUCTION"] = 7;
                values[valuesById[8] = "PAY_DAY"] = 8;
                values[valuesById[9] = "BABY"] = 9;
                values[valuesById[10] = "BROKE"] = 10;
                values[valuesById[11] = "FREEDOM"] = 11;
                values[valuesById[12] = "GAME_END"] = 12;
                values[valuesById[13] = "GAME_TIMEOUT"] = 13;
                values[valuesById[14] = "ACCIDENT"] = 14;
                values[valuesById[15] = "MARKET_CHANGE"] = 15;
                values[valuesById[16] = "DISHONORABLE_PUNISH"] = 16;
                return values;
            })();

            return GameEventType;
        })();

        events.EventGameStart = (function() {

            /**
             * Properties of an EventGameStart.
             * @memberof pb.events
             * @interface IEventGameStart
             * @property {number|null} [age] EventGameStart age
             */

            /**
             * Constructs a new EventGameStart.
             * @memberof pb.events
             * @classdesc Represents an EventGameStart.
             * @implements IEventGameStart
             * @constructor
             * @param {pb.events.IEventGameStart=} [properties] Properties to set
             */
            function EventGameStart(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventGameStart age.
             * @member {number} age
             * @memberof pb.events.EventGameStart
             * @instance
             */
            EventGameStart.prototype.age = 0;

            /**
             * Creates a new EventGameStart instance using the specified properties.
             * @function create
             * @memberof pb.events.EventGameStart
             * @static
             * @param {pb.events.IEventGameStart=} [properties] Properties to set
             * @returns {pb.events.EventGameStart} EventGameStart instance
             */
            EventGameStart.create = function create(properties) {
                return new EventGameStart(properties);
            };

            /**
             * Encodes the specified EventGameStart message. Does not implicitly {@link pb.events.EventGameStart.verify|verify} messages.
             * @function encode
             * @memberof pb.events.EventGameStart
             * @static
             * @param {pb.events.IEventGameStart} message EventGameStart message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventGameStart.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.age != null && message.hasOwnProperty("age"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.age);
                return writer;
            };

            /**
             * Encodes the specified EventGameStart message, length delimited. Does not implicitly {@link pb.events.EventGameStart.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.events.EventGameStart
             * @static
             * @param {pb.events.IEventGameStart} message EventGameStart message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventGameStart.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventGameStart message from the specified reader or buffer.
             * @function decode
             * @memberof pb.events.EventGameStart
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.events.EventGameStart} EventGameStart
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventGameStart.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.events.EventGameStart();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.age = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventGameStart message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.events.EventGameStart
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.events.EventGameStart} EventGameStart
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventGameStart.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventGameStart message.
             * @function verify
             * @memberof pb.events.EventGameStart
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventGameStart.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.age != null && message.hasOwnProperty("age"))
                    if (!$util.isInteger(message.age))
                        return "age: integer expected";
                return null;
            };

            /**
             * Creates an EventGameStart message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.events.EventGameStart
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.events.EventGameStart} EventGameStart
             */
            EventGameStart.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.events.EventGameStart)
                    return object;
                var message = new $root.pb.events.EventGameStart();
                if (object.age != null)
                    message.age = object.age | 0;
                return message;
            };

            /**
             * Creates a plain object from an EventGameStart message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.events.EventGameStart
             * @static
             * @param {pb.events.EventGameStart} message EventGameStart
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventGameStart.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.age = 0;
                if (message.age != null && message.hasOwnProperty("age"))
                    object.age = message.age;
                return object;
            };

            /**
             * Converts this EventGameStart to JSON.
             * @function toJSON
             * @memberof pb.events.EventGameStart
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventGameStart.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventGameStart;
        })();

        events.Role = (function() {

            /**
             * Properties of a Role.
             * @memberof pb.events
             * @interface IRole
             * @property {Long|null} [id] Role id
             * @property {string|null} [flag] Role flag
             * @property {string|null} [name] Role name
             */

            /**
             * Constructs a new Role.
             * @memberof pb.events
             * @classdesc Represents a Role.
             * @implements IRole
             * @constructor
             * @param {pb.events.IRole=} [properties] Properties to set
             */
            function Role(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Role id.
             * @member {Long} id
             * @memberof pb.events.Role
             * @instance
             */
            Role.prototype.id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Role flag.
             * @member {string} flag
             * @memberof pb.events.Role
             * @instance
             */
            Role.prototype.flag = "";

            /**
             * Role name.
             * @member {string} name
             * @memberof pb.events.Role
             * @instance
             */
            Role.prototype.name = "";

            /**
             * Creates a new Role instance using the specified properties.
             * @function create
             * @memberof pb.events.Role
             * @static
             * @param {pb.events.IRole=} [properties] Properties to set
             * @returns {pb.events.Role} Role instance
             */
            Role.create = function create(properties) {
                return new Role(properties);
            };

            /**
             * Encodes the specified Role message. Does not implicitly {@link pb.events.Role.verify|verify} messages.
             * @function encode
             * @memberof pb.events.Role
             * @static
             * @param {pb.events.IRole} message Role message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Role.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.id);
                if (message.flag != null && message.hasOwnProperty("flag"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.flag);
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
                return writer;
            };

            /**
             * Encodes the specified Role message, length delimited. Does not implicitly {@link pb.events.Role.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.events.Role
             * @static
             * @param {pb.events.IRole} message Role message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Role.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Role message from the specified reader or buffer.
             * @function decode
             * @memberof pb.events.Role
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.events.Role} Role
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Role.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.events.Role();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.int64();
                        break;
                    case 2:
                        message.flag = reader.string();
                        break;
                    case 3:
                        message.name = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Role message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.events.Role
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.events.Role} Role
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Role.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Role message.
             * @function verify
             * @memberof pb.events.Role
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Role.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                        return "id: integer|Long expected";
                if (message.flag != null && message.hasOwnProperty("flag"))
                    if (!$util.isString(message.flag))
                        return "flag: string expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                return null;
            };

            /**
             * Creates a Role message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.events.Role
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.events.Role} Role
             */
            Role.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.events.Role)
                    return object;
                var message = new $root.pb.events.Role();
                if (object.id != null)
                    if ($util.Long)
                        (message.id = $util.Long.fromValue(object.id)).unsigned = false;
                    else if (typeof object.id === "string")
                        message.id = parseInt(object.id, 10);
                    else if (typeof object.id === "number")
                        message.id = object.id;
                    else if (typeof object.id === "object")
                        message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber();
                if (object.flag != null)
                    message.flag = String(object.flag);
                if (object.name != null)
                    message.name = String(object.name);
                return message;
            };

            /**
             * Creates a plain object from a Role message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.events.Role
             * @static
             * @param {pb.events.Role} message Role
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Role.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.id = options.longs === String ? "0" : 0;
                    object.flag = "";
                    object.name = "";
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    if (typeof message.id === "number")
                        object.id = options.longs === String ? String(message.id) : message.id;
                    else
                        object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id;
                if (message.flag != null && message.hasOwnProperty("flag"))
                    object.flag = message.flag;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                return object;
            };

            /**
             * Converts this Role to JSON.
             * @function toJSON
             * @memberof pb.events.Role
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Role.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Role;
        })();

        events.EventSelectRole = (function() {

            /**
             * Properties of an EventSelectRole.
             * @memberof pb.events
             * @interface IEventSelectRole
             * @property {pb.events.IRole|null} [role] EventSelectRole role
             */

            /**
             * Constructs a new EventSelectRole.
             * @memberof pb.events
             * @classdesc Represents an EventSelectRole.
             * @implements IEventSelectRole
             * @constructor
             * @param {pb.events.IEventSelectRole=} [properties] Properties to set
             */
            function EventSelectRole(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventSelectRole role.
             * @member {pb.events.IRole|null|undefined} role
             * @memberof pb.events.EventSelectRole
             * @instance
             */
            EventSelectRole.prototype.role = null;

            /**
             * Creates a new EventSelectRole instance using the specified properties.
             * @function create
             * @memberof pb.events.EventSelectRole
             * @static
             * @param {pb.events.IEventSelectRole=} [properties] Properties to set
             * @returns {pb.events.EventSelectRole} EventSelectRole instance
             */
            EventSelectRole.create = function create(properties) {
                return new EventSelectRole(properties);
            };

            /**
             * Encodes the specified EventSelectRole message. Does not implicitly {@link pb.events.EventSelectRole.verify|verify} messages.
             * @function encode
             * @memberof pb.events.EventSelectRole
             * @static
             * @param {pb.events.IEventSelectRole} message EventSelectRole message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventSelectRole.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.role != null && message.hasOwnProperty("role"))
                    $root.pb.events.Role.encode(message.role, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EventSelectRole message, length delimited. Does not implicitly {@link pb.events.EventSelectRole.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.events.EventSelectRole
             * @static
             * @param {pb.events.IEventSelectRole} message EventSelectRole message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventSelectRole.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventSelectRole message from the specified reader or buffer.
             * @function decode
             * @memberof pb.events.EventSelectRole
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.events.EventSelectRole} EventSelectRole
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventSelectRole.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.events.EventSelectRole();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.role = $root.pb.events.Role.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventSelectRole message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.events.EventSelectRole
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.events.EventSelectRole} EventSelectRole
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventSelectRole.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventSelectRole message.
             * @function verify
             * @memberof pb.events.EventSelectRole
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventSelectRole.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.role != null && message.hasOwnProperty("role")) {
                    var error = $root.pb.events.Role.verify(message.role);
                    if (error)
                        return "role." + error;
                }
                return null;
            };

            /**
             * Creates an EventSelectRole message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.events.EventSelectRole
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.events.EventSelectRole} EventSelectRole
             */
            EventSelectRole.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.events.EventSelectRole)
                    return object;
                var message = new $root.pb.events.EventSelectRole();
                if (object.role != null) {
                    if (typeof object.role !== "object")
                        throw TypeError(".pb.events.EventSelectRole.role: object expected");
                    message.role = $root.pb.events.Role.fromObject(object.role);
                }
                return message;
            };

            /**
             * Creates a plain object from an EventSelectRole message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.events.EventSelectRole
             * @static
             * @param {pb.events.EventSelectRole} message EventSelectRole
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventSelectRole.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.role = null;
                if (message.role != null && message.hasOwnProperty("role"))
                    object.role = $root.pb.events.Role.toObject(message.role, options);
                return object;
            };

            /**
             * Converts this EventSelectRole to JSON.
             * @function toJSON
             * @memberof pb.events.EventSelectRole
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventSelectRole.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventSelectRole;
        })();

        events.EventAssets = (function() {

            /**
             * Properties of an EventAssets.
             * @memberof pb.events
             * @interface IEventAssets
             * @property {string|null} [code] EventAssets code
             * @property {number|null} [quantity] EventAssets quantity
             * @property {number|null} [income] EventAssets income
             * @property {number|null} [expense] EventAssets expense
             * @property {number|null} [profit] EventAssets profit
             * @property {string|null} [remark] EventAssets remark
             * @property {number|null} [totalPrice] EventAssets totalPrice
             * @property {pb.common.IScenario|null} [scenario] EventAssets scenario
             * @property {pb.common.IPlayerAsset|null} [asset] EventAssets asset
             * @property {number|null} [monthCashFlow] EventAssets monthCashFlow
             */

            /**
             * Constructs a new EventAssets.
             * @memberof pb.events
             * @classdesc Represents an EventAssets.
             * @implements IEventAssets
             * @constructor
             * @param {pb.events.IEventAssets=} [properties] Properties to set
             */
            function EventAssets(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventAssets code.
             * @member {string} code
             * @memberof pb.events.EventAssets
             * @instance
             */
            EventAssets.prototype.code = "";

            /**
             * EventAssets quantity.
             * @member {number} quantity
             * @memberof pb.events.EventAssets
             * @instance
             */
            EventAssets.prototype.quantity = 0;

            /**
             * EventAssets income.
             * @member {number} income
             * @memberof pb.events.EventAssets
             * @instance
             */
            EventAssets.prototype.income = 0;

            /**
             * EventAssets expense.
             * @member {number} expense
             * @memberof pb.events.EventAssets
             * @instance
             */
            EventAssets.prototype.expense = 0;

            /**
             * EventAssets profit.
             * @member {number} profit
             * @memberof pb.events.EventAssets
             * @instance
             */
            EventAssets.prototype.profit = 0;

            /**
             * EventAssets remark.
             * @member {string} remark
             * @memberof pb.events.EventAssets
             * @instance
             */
            EventAssets.prototype.remark = "";

            /**
             * EventAssets totalPrice.
             * @member {number} totalPrice
             * @memberof pb.events.EventAssets
             * @instance
             */
            EventAssets.prototype.totalPrice = 0;

            /**
             * EventAssets scenario.
             * @member {pb.common.IScenario|null|undefined} scenario
             * @memberof pb.events.EventAssets
             * @instance
             */
            EventAssets.prototype.scenario = null;

            /**
             * EventAssets asset.
             * @member {pb.common.IPlayerAsset|null|undefined} asset
             * @memberof pb.events.EventAssets
             * @instance
             */
            EventAssets.prototype.asset = null;

            /**
             * EventAssets monthCashFlow.
             * @member {number} monthCashFlow
             * @memberof pb.events.EventAssets
             * @instance
             */
            EventAssets.prototype.monthCashFlow = 0;

            /**
             * Creates a new EventAssets instance using the specified properties.
             * @function create
             * @memberof pb.events.EventAssets
             * @static
             * @param {pb.events.IEventAssets=} [properties] Properties to set
             * @returns {pb.events.EventAssets} EventAssets instance
             */
            EventAssets.create = function create(properties) {
                return new EventAssets(properties);
            };

            /**
             * Encodes the specified EventAssets message. Does not implicitly {@link pb.events.EventAssets.verify|verify} messages.
             * @function encode
             * @memberof pb.events.EventAssets
             * @static
             * @param {pb.events.IEventAssets} message EventAssets message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventAssets.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.code);
                if (message.quantity != null && message.hasOwnProperty("quantity"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.quantity);
                if (message.income != null && message.hasOwnProperty("income"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.income);
                if (message.expense != null && message.hasOwnProperty("expense"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.expense);
                if (message.profit != null && message.hasOwnProperty("profit"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.profit);
                if (message.remark != null && message.hasOwnProperty("remark"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.remark);
                if (message.totalPrice != null && message.hasOwnProperty("totalPrice"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int32(message.totalPrice);
                if (message.scenario != null && message.hasOwnProperty("scenario"))
                    $root.pb.common.Scenario.encode(message.scenario, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.asset != null && message.hasOwnProperty("asset"))
                    $root.pb.common.PlayerAsset.encode(message.asset, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.monthCashFlow != null && message.hasOwnProperty("monthCashFlow"))
                    writer.uint32(/* id 10, wireType 0 =*/80).int32(message.monthCashFlow);
                return writer;
            };

            /**
             * Encodes the specified EventAssets message, length delimited. Does not implicitly {@link pb.events.EventAssets.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.events.EventAssets
             * @static
             * @param {pb.events.IEventAssets} message EventAssets message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventAssets.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventAssets message from the specified reader or buffer.
             * @function decode
             * @memberof pb.events.EventAssets
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.events.EventAssets} EventAssets
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventAssets.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.events.EventAssets();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.code = reader.string();
                        break;
                    case 2:
                        message.quantity = reader.int32();
                        break;
                    case 3:
                        message.income = reader.int32();
                        break;
                    case 4:
                        message.expense = reader.int32();
                        break;
                    case 5:
                        message.profit = reader.int32();
                        break;
                    case 6:
                        message.remark = reader.string();
                        break;
                    case 7:
                        message.totalPrice = reader.int32();
                        break;
                    case 8:
                        message.scenario = $root.pb.common.Scenario.decode(reader, reader.uint32());
                        break;
                    case 9:
                        message.asset = $root.pb.common.PlayerAsset.decode(reader, reader.uint32());
                        break;
                    case 10:
                        message.monthCashFlow = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventAssets message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.events.EventAssets
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.events.EventAssets} EventAssets
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventAssets.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventAssets message.
             * @function verify
             * @memberof pb.events.EventAssets
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventAssets.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isString(message.code))
                        return "code: string expected";
                if (message.quantity != null && message.hasOwnProperty("quantity"))
                    if (!$util.isInteger(message.quantity))
                        return "quantity: integer expected";
                if (message.income != null && message.hasOwnProperty("income"))
                    if (!$util.isInteger(message.income))
                        return "income: integer expected";
                if (message.expense != null && message.hasOwnProperty("expense"))
                    if (!$util.isInteger(message.expense))
                        return "expense: integer expected";
                if (message.profit != null && message.hasOwnProperty("profit"))
                    if (!$util.isInteger(message.profit))
                        return "profit: integer expected";
                if (message.remark != null && message.hasOwnProperty("remark"))
                    if (!$util.isString(message.remark))
                        return "remark: string expected";
                if (message.totalPrice != null && message.hasOwnProperty("totalPrice"))
                    if (!$util.isInteger(message.totalPrice))
                        return "totalPrice: integer expected";
                if (message.scenario != null && message.hasOwnProperty("scenario")) {
                    var error = $root.pb.common.Scenario.verify(message.scenario);
                    if (error)
                        return "scenario." + error;
                }
                if (message.asset != null && message.hasOwnProperty("asset")) {
                    var error = $root.pb.common.PlayerAsset.verify(message.asset);
                    if (error)
                        return "asset." + error;
                }
                if (message.monthCashFlow != null && message.hasOwnProperty("monthCashFlow"))
                    if (!$util.isInteger(message.monthCashFlow))
                        return "monthCashFlow: integer expected";
                return null;
            };

            /**
             * Creates an EventAssets message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.events.EventAssets
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.events.EventAssets} EventAssets
             */
            EventAssets.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.events.EventAssets)
                    return object;
                var message = new $root.pb.events.EventAssets();
                if (object.code != null)
                    message.code = String(object.code);
                if (object.quantity != null)
                    message.quantity = object.quantity | 0;
                if (object.income != null)
                    message.income = object.income | 0;
                if (object.expense != null)
                    message.expense = object.expense | 0;
                if (object.profit != null)
                    message.profit = object.profit | 0;
                if (object.remark != null)
                    message.remark = String(object.remark);
                if (object.totalPrice != null)
                    message.totalPrice = object.totalPrice | 0;
                if (object.scenario != null) {
                    if (typeof object.scenario !== "object")
                        throw TypeError(".pb.events.EventAssets.scenario: object expected");
                    message.scenario = $root.pb.common.Scenario.fromObject(object.scenario);
                }
                if (object.asset != null) {
                    if (typeof object.asset !== "object")
                        throw TypeError(".pb.events.EventAssets.asset: object expected");
                    message.asset = $root.pb.common.PlayerAsset.fromObject(object.asset);
                }
                if (object.monthCashFlow != null)
                    message.monthCashFlow = object.monthCashFlow | 0;
                return message;
            };

            /**
             * Creates a plain object from an EventAssets message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.events.EventAssets
             * @static
             * @param {pb.events.EventAssets} message EventAssets
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventAssets.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.code = "";
                    object.quantity = 0;
                    object.income = 0;
                    object.expense = 0;
                    object.profit = 0;
                    object.remark = "";
                    object.totalPrice = 0;
                    object.scenario = null;
                    object.asset = null;
                    object.monthCashFlow = 0;
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.quantity != null && message.hasOwnProperty("quantity"))
                    object.quantity = message.quantity;
                if (message.income != null && message.hasOwnProperty("income"))
                    object.income = message.income;
                if (message.expense != null && message.hasOwnProperty("expense"))
                    object.expense = message.expense;
                if (message.profit != null && message.hasOwnProperty("profit"))
                    object.profit = message.profit;
                if (message.remark != null && message.hasOwnProperty("remark"))
                    object.remark = message.remark;
                if (message.totalPrice != null && message.hasOwnProperty("totalPrice"))
                    object.totalPrice = message.totalPrice;
                if (message.scenario != null && message.hasOwnProperty("scenario"))
                    object.scenario = $root.pb.common.Scenario.toObject(message.scenario, options);
                if (message.asset != null && message.hasOwnProperty("asset"))
                    object.asset = $root.pb.common.PlayerAsset.toObject(message.asset, options);
                if (message.monthCashFlow != null && message.hasOwnProperty("monthCashFlow"))
                    object.monthCashFlow = message.monthCashFlow;
                return object;
            };

            /**
             * Converts this EventAssets to JSON.
             * @function toJSON
             * @memberof pb.events.EventAssets
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventAssets.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventAssets;
        })();

        events.EventSalary = (function() {

            /**
             * Properties of an EventSalary.
             * @memberof pb.events
             * @interface IEventSalary
             * @property {string|null} [code] EventSalary code
             * @property {number|null} [salary] EventSalary salary
             * @property {number|null} [cashFlow] EventSalary cashFlow
             * @property {number|null} [age] EventSalary age
             */

            /**
             * Constructs a new EventSalary.
             * @memberof pb.events
             * @classdesc Represents an EventSalary.
             * @implements IEventSalary
             * @constructor
             * @param {pb.events.IEventSalary=} [properties] Properties to set
             */
            function EventSalary(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventSalary code.
             * @member {string} code
             * @memberof pb.events.EventSalary
             * @instance
             */
            EventSalary.prototype.code = "";

            /**
             * EventSalary salary.
             * @member {number} salary
             * @memberof pb.events.EventSalary
             * @instance
             */
            EventSalary.prototype.salary = 0;

            /**
             * EventSalary cashFlow.
             * @member {number} cashFlow
             * @memberof pb.events.EventSalary
             * @instance
             */
            EventSalary.prototype.cashFlow = 0;

            /**
             * EventSalary age.
             * @member {number} age
             * @memberof pb.events.EventSalary
             * @instance
             */
            EventSalary.prototype.age = 0;

            /**
             * Creates a new EventSalary instance using the specified properties.
             * @function create
             * @memberof pb.events.EventSalary
             * @static
             * @param {pb.events.IEventSalary=} [properties] Properties to set
             * @returns {pb.events.EventSalary} EventSalary instance
             */
            EventSalary.create = function create(properties) {
                return new EventSalary(properties);
            };

            /**
             * Encodes the specified EventSalary message. Does not implicitly {@link pb.events.EventSalary.verify|verify} messages.
             * @function encode
             * @memberof pb.events.EventSalary
             * @static
             * @param {pb.events.IEventSalary} message EventSalary message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventSalary.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.code);
                if (message.salary != null && message.hasOwnProperty("salary"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.salary);
                if (message.cashFlow != null && message.hasOwnProperty("cashFlow"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.cashFlow);
                if (message.age != null && message.hasOwnProperty("age"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.age);
                return writer;
            };

            /**
             * Encodes the specified EventSalary message, length delimited. Does not implicitly {@link pb.events.EventSalary.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.events.EventSalary
             * @static
             * @param {pb.events.IEventSalary} message EventSalary message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventSalary.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventSalary message from the specified reader or buffer.
             * @function decode
             * @memberof pb.events.EventSalary
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.events.EventSalary} EventSalary
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventSalary.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.events.EventSalary();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.code = reader.string();
                        break;
                    case 2:
                        message.salary = reader.int32();
                        break;
                    case 3:
                        message.cashFlow = reader.int32();
                        break;
                    case 4:
                        message.age = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventSalary message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.events.EventSalary
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.events.EventSalary} EventSalary
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventSalary.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventSalary message.
             * @function verify
             * @memberof pb.events.EventSalary
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventSalary.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isString(message.code))
                        return "code: string expected";
                if (message.salary != null && message.hasOwnProperty("salary"))
                    if (!$util.isInteger(message.salary))
                        return "salary: integer expected";
                if (message.cashFlow != null && message.hasOwnProperty("cashFlow"))
                    if (!$util.isInteger(message.cashFlow))
                        return "cashFlow: integer expected";
                if (message.age != null && message.hasOwnProperty("age"))
                    if (!$util.isInteger(message.age))
                        return "age: integer expected";
                return null;
            };

            /**
             * Creates an EventSalary message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.events.EventSalary
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.events.EventSalary} EventSalary
             */
            EventSalary.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.events.EventSalary)
                    return object;
                var message = new $root.pb.events.EventSalary();
                if (object.code != null)
                    message.code = String(object.code);
                if (object.salary != null)
                    message.salary = object.salary | 0;
                if (object.cashFlow != null)
                    message.cashFlow = object.cashFlow | 0;
                if (object.age != null)
                    message.age = object.age | 0;
                return message;
            };

            /**
             * Creates a plain object from an EventSalary message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.events.EventSalary
             * @static
             * @param {pb.events.EventSalary} message EventSalary
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventSalary.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.code = "";
                    object.salary = 0;
                    object.cashFlow = 0;
                    object.age = 0;
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.salary != null && message.hasOwnProperty("salary"))
                    object.salary = message.salary;
                if (message.cashFlow != null && message.hasOwnProperty("cashFlow"))
                    object.cashFlow = message.cashFlow;
                if (message.age != null && message.hasOwnProperty("age"))
                    object.age = message.age;
                return object;
            };

            /**
             * Converts this EventSalary to JSON.
             * @function toJSON
             * @memberof pb.events.EventSalary
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventSalary.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventSalary;
        })();

        events.EventWageHike = (function() {

            /**
             * Properties of an EventWageHike.
             * @memberof pb.events
             * @interface IEventWageHike
             * @property {number|null} [increment] EventWageHike increment
             * @property {pb.events.IRole|null} [role] EventWageHike role
             */

            /**
             * Constructs a new EventWageHike.
             * @memberof pb.events
             * @classdesc Represents an EventWageHike.
             * @implements IEventWageHike
             * @constructor
             * @param {pb.events.IEventWageHike=} [properties] Properties to set
             */
            function EventWageHike(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventWageHike increment.
             * @member {number} increment
             * @memberof pb.events.EventWageHike
             * @instance
             */
            EventWageHike.prototype.increment = 0;

            /**
             * EventWageHike role.
             * @member {pb.events.IRole|null|undefined} role
             * @memberof pb.events.EventWageHike
             * @instance
             */
            EventWageHike.prototype.role = null;

            /**
             * Creates a new EventWageHike instance using the specified properties.
             * @function create
             * @memberof pb.events.EventWageHike
             * @static
             * @param {pb.events.IEventWageHike=} [properties] Properties to set
             * @returns {pb.events.EventWageHike} EventWageHike instance
             */
            EventWageHike.create = function create(properties) {
                return new EventWageHike(properties);
            };

            /**
             * Encodes the specified EventWageHike message. Does not implicitly {@link pb.events.EventWageHike.verify|verify} messages.
             * @function encode
             * @memberof pb.events.EventWageHike
             * @static
             * @param {pb.events.IEventWageHike} message EventWageHike message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventWageHike.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.increment != null && message.hasOwnProperty("increment"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.increment);
                if (message.role != null && message.hasOwnProperty("role"))
                    $root.pb.events.Role.encode(message.role, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EventWageHike message, length delimited. Does not implicitly {@link pb.events.EventWageHike.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.events.EventWageHike
             * @static
             * @param {pb.events.IEventWageHike} message EventWageHike message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventWageHike.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventWageHike message from the specified reader or buffer.
             * @function decode
             * @memberof pb.events.EventWageHike
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.events.EventWageHike} EventWageHike
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventWageHike.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.events.EventWageHike();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.increment = reader.int32();
                        break;
                    case 2:
                        message.role = $root.pb.events.Role.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventWageHike message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.events.EventWageHike
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.events.EventWageHike} EventWageHike
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventWageHike.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventWageHike message.
             * @function verify
             * @memberof pb.events.EventWageHike
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventWageHike.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.increment != null && message.hasOwnProperty("increment"))
                    if (!$util.isInteger(message.increment))
                        return "increment: integer expected";
                if (message.role != null && message.hasOwnProperty("role")) {
                    var error = $root.pb.events.Role.verify(message.role);
                    if (error)
                        return "role." + error;
                }
                return null;
            };

            /**
             * Creates an EventWageHike message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.events.EventWageHike
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.events.EventWageHike} EventWageHike
             */
            EventWageHike.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.events.EventWageHike)
                    return object;
                var message = new $root.pb.events.EventWageHike();
                if (object.increment != null)
                    message.increment = object.increment | 0;
                if (object.role != null) {
                    if (typeof object.role !== "object")
                        throw TypeError(".pb.events.EventWageHike.role: object expected");
                    message.role = $root.pb.events.Role.fromObject(object.role);
                }
                return message;
            };

            /**
             * Creates a plain object from an EventWageHike message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.events.EventWageHike
             * @static
             * @param {pb.events.EventWageHike} message EventWageHike
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventWageHike.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.increment = 0;
                    object.role = null;
                }
                if (message.increment != null && message.hasOwnProperty("increment"))
                    object.increment = message.increment;
                if (message.role != null && message.hasOwnProperty("role"))
                    object.role = $root.pb.events.Role.toObject(message.role, options);
                return object;
            };

            /**
             * Converts this EventWageHike to JSON.
             * @function toJSON
             * @memberof pb.events.EventWageHike
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventWageHike.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventWageHike;
        })();

        events.GameEvent = (function() {

            /**
             * Properties of a GameEvent.
             * @memberof pb.events
             * @interface IGameEvent
             * @property {Long|null} [gameID] GameEvent gameID
             * @property {google.protobuf.ITimestamp|null} [timestamp] GameEvent timestamp
             * @property {pb.events.GameEventType.Enum|null} [Type] GameEvent Type
             * @property {Long|null} [userID] GameEvent userID
             * @property {Array.<google.protobuf.IAny>|null} [details] GameEvent details
             */

            /**
             * Constructs a new GameEvent.
             * @memberof pb.events
             * @classdesc Represents a GameEvent.
             * @implements IGameEvent
             * @constructor
             * @param {pb.events.IGameEvent=} [properties] Properties to set
             */
            function GameEvent(properties) {
                this.details = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GameEvent gameID.
             * @member {Long} gameID
             * @memberof pb.events.GameEvent
             * @instance
             */
            GameEvent.prototype.gameID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * GameEvent timestamp.
             * @member {google.protobuf.ITimestamp|null|undefined} timestamp
             * @memberof pb.events.GameEvent
             * @instance
             */
            GameEvent.prototype.timestamp = null;

            /**
             * GameEvent Type.
             * @member {pb.events.GameEventType.Enum} Type
             * @memberof pb.events.GameEvent
             * @instance
             */
            GameEvent.prototype.Type = 0;

            /**
             * GameEvent userID.
             * @member {Long} userID
             * @memberof pb.events.GameEvent
             * @instance
             */
            GameEvent.prototype.userID = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * GameEvent details.
             * @member {Array.<google.protobuf.IAny>} details
             * @memberof pb.events.GameEvent
             * @instance
             */
            GameEvent.prototype.details = $util.emptyArray;

            /**
             * Creates a new GameEvent instance using the specified properties.
             * @function create
             * @memberof pb.events.GameEvent
             * @static
             * @param {pb.events.IGameEvent=} [properties] Properties to set
             * @returns {pb.events.GameEvent} GameEvent instance
             */
            GameEvent.create = function create(properties) {
                return new GameEvent(properties);
            };

            /**
             * Encodes the specified GameEvent message. Does not implicitly {@link pb.events.GameEvent.verify|verify} messages.
             * @function encode
             * @memberof pb.events.GameEvent
             * @static
             * @param {pb.events.IGameEvent} message GameEvent message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameEvent.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.gameID != null && message.hasOwnProperty("gameID"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.gameID);
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.Type != null && message.hasOwnProperty("Type"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.Type);
                if (message.userID != null && message.hasOwnProperty("userID"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.userID);
                if (message.details != null && message.details.length)
                    for (var i = 0; i < message.details.length; ++i)
                        $root.google.protobuf.Any.encode(message.details[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GameEvent message, length delimited. Does not implicitly {@link pb.events.GameEvent.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.events.GameEvent
             * @static
             * @param {pb.events.IGameEvent} message GameEvent message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameEvent.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GameEvent message from the specified reader or buffer.
             * @function decode
             * @memberof pb.events.GameEvent
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.events.GameEvent} GameEvent
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameEvent.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.events.GameEvent();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.gameID = reader.int64();
                        break;
                    case 2:
                        message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.Type = reader.int32();
                        break;
                    case 4:
                        message.userID = reader.int64();
                        break;
                    case 5:
                        if (!(message.details && message.details.length))
                            message.details = [];
                        message.details.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GameEvent message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.events.GameEvent
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.events.GameEvent} GameEvent
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameEvent.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GameEvent message.
             * @function verify
             * @memberof pb.events.GameEvent
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GameEvent.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.gameID != null && message.hasOwnProperty("gameID"))
                    if (!$util.isInteger(message.gameID) && !(message.gameID && $util.isInteger(message.gameID.low) && $util.isInteger(message.gameID.high)))
                        return "gameID: integer|Long expected";
                if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.timestamp);
                    if (error)
                        return "timestamp." + error;
                }
                if (message.Type != null && message.hasOwnProperty("Type"))
                    switch (message.Type) {
                    default:
                        return "Type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                        break;
                    }
                if (message.userID != null && message.hasOwnProperty("userID"))
                    if (!$util.isInteger(message.userID) && !(message.userID && $util.isInteger(message.userID.low) && $util.isInteger(message.userID.high)))
                        return "userID: integer|Long expected";
                if (message.details != null && message.hasOwnProperty("details")) {
                    if (!Array.isArray(message.details))
                        return "details: array expected";
                    for (var i = 0; i < message.details.length; ++i) {
                        var error = $root.google.protobuf.Any.verify(message.details[i]);
                        if (error)
                            return "details." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GameEvent message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.events.GameEvent
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.events.GameEvent} GameEvent
             */
            GameEvent.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.events.GameEvent)
                    return object;
                var message = new $root.pb.events.GameEvent();
                if (object.gameID != null)
                    if ($util.Long)
                        (message.gameID = $util.Long.fromValue(object.gameID)).unsigned = false;
                    else if (typeof object.gameID === "string")
                        message.gameID = parseInt(object.gameID, 10);
                    else if (typeof object.gameID === "number")
                        message.gameID = object.gameID;
                    else if (typeof object.gameID === "object")
                        message.gameID = new $util.LongBits(object.gameID.low >>> 0, object.gameID.high >>> 0).toNumber();
                if (object.timestamp != null) {
                    if (typeof object.timestamp !== "object")
                        throw TypeError(".pb.events.GameEvent.timestamp: object expected");
                    message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);
                }
                switch (object.Type) {
                case "UNKNOWN":
                case 0:
                    message.Type = 0;
                    break;
                case "GAME_START":
                case 1:
                    message.Type = 1;
                    break;
                case "SELECT_ROLE":
                case 2:
                    message.Type = 2;
                    break;
                case "BUY":
                case 3:
                    message.Type = 3;
                    break;
                case "SELL":
                case 4:
                    message.Type = 4;
                    break;
                case "UNEMPLOYMENT":
                case 5:
                    message.Type = 5;
                    break;
                case "WAGE_HIKE":
                case 6:
                    message.Type = 6;
                    break;
                case "AUCTION":
                case 7:
                    message.Type = 7;
                    break;
                case "PAY_DAY":
                case 8:
                    message.Type = 8;
                    break;
                case "BABY":
                case 9:
                    message.Type = 9;
                    break;
                case "BROKE":
                case 10:
                    message.Type = 10;
                    break;
                case "FREEDOM":
                case 11:
                    message.Type = 11;
                    break;
                case "GAME_END":
                case 12:
                    message.Type = 12;
                    break;
                case "GAME_TIMEOUT":
                case 13:
                    message.Type = 13;
                    break;
                case "ACCIDENT":
                case 14:
                    message.Type = 14;
                    break;
                case "MARKET_CHANGE":
                case 15:
                    message.Type = 15;
                    break;
                case "DISHONORABLE_PUNISH":
                case 16:
                    message.Type = 16;
                    break;
                }
                if (object.userID != null)
                    if ($util.Long)
                        (message.userID = $util.Long.fromValue(object.userID)).unsigned = false;
                    else if (typeof object.userID === "string")
                        message.userID = parseInt(object.userID, 10);
                    else if (typeof object.userID === "number")
                        message.userID = object.userID;
                    else if (typeof object.userID === "object")
                        message.userID = new $util.LongBits(object.userID.low >>> 0, object.userID.high >>> 0).toNumber();
                if (object.details) {
                    if (!Array.isArray(object.details))
                        throw TypeError(".pb.events.GameEvent.details: array expected");
                    message.details = [];
                    for (var i = 0; i < object.details.length; ++i) {
                        if (typeof object.details[i] !== "object")
                            throw TypeError(".pb.events.GameEvent.details: object expected");
                        message.details[i] = $root.google.protobuf.Any.fromObject(object.details[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GameEvent message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.events.GameEvent
             * @static
             * @param {pb.events.GameEvent} message GameEvent
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GameEvent.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.details = [];
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.gameID = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.gameID = options.longs === String ? "0" : 0;
                    object.timestamp = null;
                    object.Type = options.enums === String ? "UNKNOWN" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.userID = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.userID = options.longs === String ? "0" : 0;
                }
                if (message.gameID != null && message.hasOwnProperty("gameID"))
                    if (typeof message.gameID === "number")
                        object.gameID = options.longs === String ? String(message.gameID) : message.gameID;
                    else
                        object.gameID = options.longs === String ? $util.Long.prototype.toString.call(message.gameID) : options.longs === Number ? new $util.LongBits(message.gameID.low >>> 0, message.gameID.high >>> 0).toNumber() : message.gameID;
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);
                if (message.Type != null && message.hasOwnProperty("Type"))
                    object.Type = options.enums === String ? $root.pb.events.GameEventType.Enum[message.Type] : message.Type;
                if (message.userID != null && message.hasOwnProperty("userID"))
                    if (typeof message.userID === "number")
                        object.userID = options.longs === String ? String(message.userID) : message.userID;
                    else
                        object.userID = options.longs === String ? $util.Long.prototype.toString.call(message.userID) : options.longs === Number ? new $util.LongBits(message.userID.low >>> 0, message.userID.high >>> 0).toNumber() : message.userID;
                if (message.details && message.details.length) {
                    object.details = [];
                    for (var j = 0; j < message.details.length; ++j)
                        object.details[j] = $root.google.protobuf.Any.toObject(message.details[j], options);
                }
                return object;
            };

            /**
             * Converts this GameEvent to JSON.
             * @function toJSON
             * @memberof pb.events.GameEvent
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GameEvent.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GameEvent;
        })();

        events.EventMarketChange = (function() {

            /**
             * Properties of an EventMarketChange.
             * @memberof pb.events
             * @interface IEventMarketChange
             * @property {pb.common.MarketChangeType.Enum|null} [changeType] EventMarketChange changeType
             * @property {number|null} [incomeChange] EventMarketChange incomeChange
             * @property {number|null} [assetChange] EventMarketChange assetChange
             */

            /**
             * Constructs a new EventMarketChange.
             * @memberof pb.events
             * @classdesc Represents an EventMarketChange.
             * @implements IEventMarketChange
             * @constructor
             * @param {pb.events.IEventMarketChange=} [properties] Properties to set
             */
            function EventMarketChange(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventMarketChange changeType.
             * @member {pb.common.MarketChangeType.Enum} changeType
             * @memberof pb.events.EventMarketChange
             * @instance
             */
            EventMarketChange.prototype.changeType = 0;

            /**
             * EventMarketChange incomeChange.
             * @member {number} incomeChange
             * @memberof pb.events.EventMarketChange
             * @instance
             */
            EventMarketChange.prototype.incomeChange = 0;

            /**
             * EventMarketChange assetChange.
             * @member {number} assetChange
             * @memberof pb.events.EventMarketChange
             * @instance
             */
            EventMarketChange.prototype.assetChange = 0;

            /**
             * Creates a new EventMarketChange instance using the specified properties.
             * @function create
             * @memberof pb.events.EventMarketChange
             * @static
             * @param {pb.events.IEventMarketChange=} [properties] Properties to set
             * @returns {pb.events.EventMarketChange} EventMarketChange instance
             */
            EventMarketChange.create = function create(properties) {
                return new EventMarketChange(properties);
            };

            /**
             * Encodes the specified EventMarketChange message. Does not implicitly {@link pb.events.EventMarketChange.verify|verify} messages.
             * @function encode
             * @memberof pb.events.EventMarketChange
             * @static
             * @param {pb.events.IEventMarketChange} message EventMarketChange message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventMarketChange.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.changeType != null && message.hasOwnProperty("changeType"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.changeType);
                if (message.incomeChange != null && message.hasOwnProperty("incomeChange"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.incomeChange);
                if (message.assetChange != null && message.hasOwnProperty("assetChange"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.assetChange);
                return writer;
            };

            /**
             * Encodes the specified EventMarketChange message, length delimited. Does not implicitly {@link pb.events.EventMarketChange.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.events.EventMarketChange
             * @static
             * @param {pb.events.IEventMarketChange} message EventMarketChange message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventMarketChange.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventMarketChange message from the specified reader or buffer.
             * @function decode
             * @memberof pb.events.EventMarketChange
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.events.EventMarketChange} EventMarketChange
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventMarketChange.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.events.EventMarketChange();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.changeType = reader.int32();
                        break;
                    case 2:
                        message.incomeChange = reader.int32();
                        break;
                    case 3:
                        message.assetChange = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventMarketChange message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.events.EventMarketChange
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.events.EventMarketChange} EventMarketChange
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventMarketChange.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventMarketChange message.
             * @function verify
             * @memberof pb.events.EventMarketChange
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventMarketChange.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.changeType != null && message.hasOwnProperty("changeType"))
                    switch (message.changeType) {
                    default:
                        return "changeType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                        break;
                    }
                if (message.incomeChange != null && message.hasOwnProperty("incomeChange"))
                    if (!$util.isInteger(message.incomeChange))
                        return "incomeChange: integer expected";
                if (message.assetChange != null && message.hasOwnProperty("assetChange"))
                    if (!$util.isInteger(message.assetChange))
                        return "assetChange: integer expected";
                return null;
            };

            /**
             * Creates an EventMarketChange message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.events.EventMarketChange
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.events.EventMarketChange} EventMarketChange
             */
            EventMarketChange.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.events.EventMarketChange)
                    return object;
                var message = new $root.pb.events.EventMarketChange();
                switch (object.changeType) {
                case "UNKNOWN":
                case 0:
                    message.changeType = 0;
                    break;
                case "RENT_INCREASE":
                case 1:
                    message.changeType = 1;
                    break;
                case "RENT_DECREASE":
                case 2:
                    message.changeType = 2;
                    break;
                case "EQUITY_BANKRUPT":
                case 3:
                    message.changeType = 3;
                    break;
                case "COOP_INCOME_INCREASE":
                case 4:
                    message.changeType = 4;
                    break;
                case "COOP_INCOME_DECREASE":
                case 5:
                    message.changeType = 5;
                    break;
                }
                if (object.incomeChange != null)
                    message.incomeChange = object.incomeChange | 0;
                if (object.assetChange != null)
                    message.assetChange = object.assetChange | 0;
                return message;
            };

            /**
             * Creates a plain object from an EventMarketChange message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.events.EventMarketChange
             * @static
             * @param {pb.events.EventMarketChange} message EventMarketChange
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventMarketChange.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.changeType = options.enums === String ? "UNKNOWN" : 0;
                    object.incomeChange = 0;
                    object.assetChange = 0;
                }
                if (message.changeType != null && message.hasOwnProperty("changeType"))
                    object.changeType = options.enums === String ? $root.pb.common.MarketChangeType.Enum[message.changeType] : message.changeType;
                if (message.incomeChange != null && message.hasOwnProperty("incomeChange"))
                    object.incomeChange = message.incomeChange;
                if (message.assetChange != null && message.hasOwnProperty("assetChange"))
                    object.assetChange = message.assetChange;
                return object;
            };

            /**
             * Converts this EventMarketChange to JSON.
             * @function toJSON
             * @memberof pb.events.EventMarketChange
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventMarketChange.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventMarketChange;
        })();

        events.Dishonorable = (function() {

            /**
             * Properties of a Dishonorable.
             * @memberof pb.events
             * @interface IDishonorable
             * @property {pb.common.DishonorablePunishReason.Enum|null} [Reason] Dishonorable Reason
             */

            /**
             * Constructs a new Dishonorable.
             * @memberof pb.events
             * @classdesc Represents a Dishonorable.
             * @implements IDishonorable
             * @constructor
             * @param {pb.events.IDishonorable=} [properties] Properties to set
             */
            function Dishonorable(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Dishonorable Reason.
             * @member {pb.common.DishonorablePunishReason.Enum} Reason
             * @memberof pb.events.Dishonorable
             * @instance
             */
            Dishonorable.prototype.Reason = 0;

            /**
             * Creates a new Dishonorable instance using the specified properties.
             * @function create
             * @memberof pb.events.Dishonorable
             * @static
             * @param {pb.events.IDishonorable=} [properties] Properties to set
             * @returns {pb.events.Dishonorable} Dishonorable instance
             */
            Dishonorable.create = function create(properties) {
                return new Dishonorable(properties);
            };

            /**
             * Encodes the specified Dishonorable message. Does not implicitly {@link pb.events.Dishonorable.verify|verify} messages.
             * @function encode
             * @memberof pb.events.Dishonorable
             * @static
             * @param {pb.events.IDishonorable} message Dishonorable message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Dishonorable.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.Reason != null && message.hasOwnProperty("Reason"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Reason);
                return writer;
            };

            /**
             * Encodes the specified Dishonorable message, length delimited. Does not implicitly {@link pb.events.Dishonorable.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pb.events.Dishonorable
             * @static
             * @param {pb.events.IDishonorable} message Dishonorable message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Dishonorable.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Dishonorable message from the specified reader or buffer.
             * @function decode
             * @memberof pb.events.Dishonorable
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pb.events.Dishonorable} Dishonorable
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Dishonorable.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.events.Dishonorable();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.Reason = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Dishonorable message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pb.events.Dishonorable
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pb.events.Dishonorable} Dishonorable
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Dishonorable.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Dishonorable message.
             * @function verify
             * @memberof pb.events.Dishonorable
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Dishonorable.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.Reason != null && message.hasOwnProperty("Reason"))
                    switch (message.Reason) {
                    default:
                        return "Reason: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                return null;
            };

            /**
             * Creates a Dishonorable message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pb.events.Dishonorable
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pb.events.Dishonorable} Dishonorable
             */
            Dishonorable.fromObject = function fromObject(object) {
                if (object instanceof $root.pb.events.Dishonorable)
                    return object;
                var message = new $root.pb.events.Dishonorable();
                switch (object.Reason) {
                case "Unknown":
                case 0:
                    message.Reason = 0;
                    break;
                case "LazyOpt":
                case 1:
                    message.Reason = 1;
                    break;
                case "TerribleNetwork":
                case 2:
                    message.Reason = 2;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a Dishonorable message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pb.events.Dishonorable
             * @static
             * @param {pb.events.Dishonorable} message Dishonorable
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Dishonorable.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.Reason = options.enums === String ? "Unknown" : 0;
                if (message.Reason != null && message.hasOwnProperty("Reason"))
                    object.Reason = options.enums === String ? $root.pb.common.DishonorablePunishReason.Enum[message.Reason] : message.Reason;
                return object;
            };

            /**
             * Converts this Dishonorable to JSON.
             * @function toJSON
             * @memberof pb.events.Dishonorable
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Dishonorable.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Dishonorable;
        })();

        return events;
    })();

    return pb;
})();

$root.google = (function() {

    /**
     * Namespace google.
     * @exports google
     * @namespace
     */
    var google = {};

    google.protobuf = (function() {

        /**
         * Namespace protobuf.
         * @memberof google
         * @namespace
         */
        var protobuf = {};

        protobuf.Empty = (function() {

            /**
             * Properties of an Empty.
             * @memberof google.protobuf
             * @interface IEmpty
             */

            /**
             * Constructs a new Empty.
             * @memberof google.protobuf
             * @classdesc Represents an Empty.
             * @implements IEmpty
             * @constructor
             * @param {google.protobuf.IEmpty=} [properties] Properties to set
             */
            function Empty(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new Empty instance using the specified properties.
             * @function create
             * @memberof google.protobuf.Empty
             * @static
             * @param {google.protobuf.IEmpty=} [properties] Properties to set
             * @returns {google.protobuf.Empty} Empty instance
             */
            Empty.create = function create(properties) {
                return new Empty(properties);
            };

            /**
             * Encodes the specified Empty message. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.Empty
             * @static
             * @param {google.protobuf.IEmpty} message Empty message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Empty.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified Empty message, length delimited. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.Empty
             * @static
             * @param {google.protobuf.IEmpty} message Empty message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Empty.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Empty message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.Empty
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.Empty} Empty
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Empty.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Empty();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Empty message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.Empty
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.Empty} Empty
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Empty.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Empty message.
             * @function verify
             * @memberof google.protobuf.Empty
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Empty.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates an Empty message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.Empty
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.Empty} Empty
             */
            Empty.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.Empty)
                    return object;
                return new $root.google.protobuf.Empty();
            };

            /**
             * Creates a plain object from an Empty message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.Empty
             * @static
             * @param {google.protobuf.Empty} message Empty
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Empty.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this Empty to JSON.
             * @function toJSON
             * @memberof google.protobuf.Empty
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Empty.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Empty;
        })();

        protobuf.Timestamp = (function() {

            /**
             * Properties of a Timestamp.
             * @memberof google.protobuf
             * @interface ITimestamp
             * @property {Long|null} [seconds] Timestamp seconds
             * @property {number|null} [nanos] Timestamp nanos
             */

            /**
             * Constructs a new Timestamp.
             * @memberof google.protobuf
             * @classdesc Represents a Timestamp.
             * @implements ITimestamp
             * @constructor
             * @param {google.protobuf.ITimestamp=} [properties] Properties to set
             */
            function Timestamp(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Timestamp seconds.
             * @member {Long} seconds
             * @memberof google.protobuf.Timestamp
             * @instance
             */
            Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Timestamp nanos.
             * @member {number} nanos
             * @memberof google.protobuf.Timestamp
             * @instance
             */
            Timestamp.prototype.nanos = 0;

            /**
             * Creates a new Timestamp instance using the specified properties.
             * @function create
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {google.protobuf.ITimestamp=} [properties] Properties to set
             * @returns {google.protobuf.Timestamp} Timestamp instance
             */
            Timestamp.create = function create(properties) {
                return new Timestamp(properties);
            };

            /**
             * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Timestamp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                if (message.nanos != null && message.hasOwnProperty("nanos"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                return writer;
            };

            /**
             * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Timestamp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Timestamp message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.Timestamp} Timestamp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Timestamp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.seconds = reader.int64();
                        break;
                    case 2:
                        message.nanos = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Timestamp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.Timestamp} Timestamp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Timestamp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Timestamp message.
             * @function verify
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Timestamp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                        return "seconds: integer|Long expected";
                if (message.nanos != null && message.hasOwnProperty("nanos"))
                    if (!$util.isInteger(message.nanos))
                        return "nanos: integer expected";
                return null;
            };

            /**
             * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.Timestamp} Timestamp
             */
            Timestamp.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.Timestamp)
                    return object;
                var message = new $root.google.protobuf.Timestamp();
                if (object.seconds != null)
                    if ($util.Long)
                        (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                    else if (typeof object.seconds === "string")
                        message.seconds = parseInt(object.seconds, 10);
                    else if (typeof object.seconds === "number")
                        message.seconds = object.seconds;
                    else if (typeof object.seconds === "object")
                        message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                if (object.nanos != null)
                    message.nanos = object.nanos | 0;
                return message;
            };

            /**
             * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {google.protobuf.Timestamp} message Timestamp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Timestamp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.seconds = options.longs === String ? "0" : 0;
                    object.nanos = 0;
                }
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    if (typeof message.seconds === "number")
                        object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                    else
                        object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                if (message.nanos != null && message.hasOwnProperty("nanos"))
                    object.nanos = message.nanos;
                return object;
            };

            /**
             * Converts this Timestamp to JSON.
             * @function toJSON
             * @memberof google.protobuf.Timestamp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Timestamp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Timestamp;
        })();

        protobuf.Any = (function() {

            /**
             * Properties of an Any.
             * @memberof google.protobuf
             * @interface IAny
             * @property {string|null} [type_url] Any type_url
             * @property {Uint8Array|null} [value] Any value
             */

            /**
             * Constructs a new Any.
             * @memberof google.protobuf
             * @classdesc Represents an Any.
             * @implements IAny
             * @constructor
             * @param {google.protobuf.IAny=} [properties] Properties to set
             */
            function Any(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Any type_url.
             * @member {string} type_url
             * @memberof google.protobuf.Any
             * @instance
             */
            Any.prototype.type_url = "";

            /**
             * Any value.
             * @member {Uint8Array} value
             * @memberof google.protobuf.Any
             * @instance
             */
            Any.prototype.value = $util.newBuffer([]);

            /**
             * Creates a new Any instance using the specified properties.
             * @function create
             * @memberof google.protobuf.Any
             * @static
             * @param {google.protobuf.IAny=} [properties] Properties to set
             * @returns {google.protobuf.Any} Any instance
             */
            Any.create = function create(properties) {
                return new Any(properties);
            };

            /**
             * Encodes the specified Any message. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.Any
             * @static
             * @param {google.protobuf.IAny} message Any message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Any.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type_url != null && message.hasOwnProperty("type_url"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.type_url);
                if (message.value != null && message.hasOwnProperty("value"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                return writer;
            };

            /**
             * Encodes the specified Any message, length delimited. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.Any
             * @static
             * @param {google.protobuf.IAny} message Any message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Any.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Any message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.Any
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.Any} Any
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Any.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Any();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type_url = reader.string();
                        break;
                    case 2:
                        message.value = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Any message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.Any
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.Any} Any
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Any.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Any message.
             * @function verify
             * @memberof google.protobuf.Any
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Any.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type_url != null && message.hasOwnProperty("type_url"))
                    if (!$util.isString(message.type_url))
                        return "type_url: string expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                        return "value: buffer expected";
                return null;
            };

            /**
             * Creates an Any message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.Any
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.Any} Any
             */
            Any.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.Any)
                    return object;
                var message = new $root.google.protobuf.Any();
                if (object.type_url != null)
                    message.type_url = String(object.type_url);
                if (object.value != null)
                    if (typeof object.value === "string")
                        $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                    else if (object.value.length)
                        message.value = object.value;
                return message;
            };

            /**
             * Creates a plain object from an Any message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.Any
             * @static
             * @param {google.protobuf.Any} message Any
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Any.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.type_url = "";
                    if (options.bytes === String)
                        object.value = "";
                    else {
                        object.value = [];
                        if (options.bytes !== Array)
                            object.value = $util.newBuffer(object.value);
                    }
                }
                if (message.type_url != null && message.hasOwnProperty("type_url"))
                    object.type_url = message.type_url;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                return object;
            };

            /**
             * Converts this Any to JSON.
             * @function toJSON
             * @memberof google.protobuf.Any
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Any.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Any;
        })();

        return protobuf;
    })();

    return google;
})();

module.exports = $root;
